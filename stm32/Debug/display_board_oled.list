
display_board_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018c4  0800fb78  0800fb78  0001fb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801143c  0801143c  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  0801143c  0801143c  0002143c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011444  08011444  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011444  08011444  00021444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011448  08011448  00021448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801144c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005768  20000094  080114e0  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057fc  080114e0  000357fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034696  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065e1  00000000  00000000  0006475a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002368  00000000  00000000  0006ad40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002148  00000000  00000000  0006d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028520  00000000  00000000  0006f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ac39  00000000  00000000  00097710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1e87  00000000  00000000  000c2349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a41d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a4c  00000000  00000000  001a4224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb60 	.word	0x0800fb60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800fb60 	.word	0x0800fb60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <string_compare>:

char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	75bb      	strb	r3, [r7, #22]
 8000e7a:	e012      	b.n	8000ea2 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000e7c:	7dbb      	ldrb	r3, [r7, #22]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	7dbb      	ldrb	r3, [r7, #22]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	440b      	add	r3, r1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d103      	bne.n	8000e98 <string_compare+0x34>
	   	  		  comVAR++;
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	3301      	adds	r3, #1
 8000e94:	75fb      	strb	r3, [r7, #23]
 8000e96:	e001      	b.n	8000e9c <string_compare+0x38>
	   	  	  else comVAR=0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000e9c:	7dbb      	ldrb	r3, [r7, #22]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	75bb      	strb	r3, [r7, #22]
 8000ea2:	7dbb      	ldrb	r3, [r7, #22]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8e7      	bhi.n	8000e7c <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d101      	bne.n	8000eba <string_compare+0x56>
		 	return 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <string_compare+0x58>
	 else 	return 0;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <Message_handler>:

void Message_handler()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 8000ecc:	2206      	movs	r2, #6
 8000ece:	4927      	ldr	r1, [pc, #156]	; (8000f6c <Message_handler+0xa4>)
 8000ed0:	4827      	ldr	r0, [pc, #156]	; (8000f70 <Message_handler+0xa8>)
 8000ed2:	f7ff ffc7 	bl	8000e64 <string_compare>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00d      	beq.n	8000ef8 <Message_handler+0x30>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee2:	4824      	ldr	r0, [pc, #144]	; (8000f74 <Message_handler+0xac>)
 8000ee4:	f002 face 	bl	8003484 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 8000ee8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eec:	220b      	movs	r2, #11
 8000eee:	4922      	ldr	r1, [pc, #136]	; (8000f78 <Message_handler+0xb0>)
 8000ef0:	4822      	ldr	r0, [pc, #136]	; (8000f7c <Message_handler+0xb4>)
 8000ef2:	f007 faa6 	bl	8008442 <HAL_UART_Transmit>
 8000ef6:	e02c      	b.n	8000f52 <Message_handler+0x8a>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 8000ef8:	2207      	movs	r2, #7
 8000efa:	4921      	ldr	r1, [pc, #132]	; (8000f80 <Message_handler+0xb8>)
 8000efc:	481c      	ldr	r0, [pc, #112]	; (8000f70 <Message_handler+0xa8>)
 8000efe:	f7ff ffb1 	bl	8000e64 <string_compare>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00d      	beq.n	8000f24 <Message_handler+0x5c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0e:	4819      	ldr	r0, [pc, #100]	; (8000f74 <Message_handler+0xac>)
 8000f10:	f002 fab8 	bl	8003484 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 8000f14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f18:	220c      	movs	r2, #12
 8000f1a:	491a      	ldr	r1, [pc, #104]	; (8000f84 <Message_handler+0xbc>)
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <Message_handler+0xb4>)
 8000f1e:	f007 fa90 	bl	8008442 <HAL_UART_Transmit>
 8000f22:	e016      	b.n	8000f52 <Message_handler+0x8a>
	}else
	{
		strcat(buffer, "\n");
 8000f24:	4812      	ldr	r0, [pc, #72]	; (8000f70 <Message_handler+0xa8>)
 8000f26:	f7ff f953 	bl	80001d0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <Message_handler+0xa8>)
 8000f30:	4413      	add	r3, r2
 8000f32:	4915      	ldr	r1, [pc, #84]	; (8000f88 <Message_handler+0xc0>)
 8000f34:	461a      	mov	r2, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <Message_handler+0xa8>)
 8000f3e:	f7ff f947 	bl	80001d0 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f4a:	4909      	ldr	r1, [pc, #36]	; (8000f70 <Message_handler+0xa8>)
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <Message_handler+0xb4>)
 8000f4e:	f007 fa78 	bl	8008442 <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 8000f52:	2232      	movs	r2, #50	; 0x32
 8000f54:	2100      	movs	r1, #0
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <Message_handler+0xa8>)
 8000f58:	f00e fcb2 	bl	800f8c0 <memset>
	buffer_index = 0;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <Message_handler+0xc4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <Message_handler+0xc8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	0800fb78 	.word	0x0800fb78
 8000f70:	20004e40 	.word	0x20004e40
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	0800fb80 	.word	0x0800fb80
 8000f7c:	20004fc4 	.word	0x20004fc4
 8000f80:	0800fb8c 	.word	0x0800fb8c
 8000f84:	0800fb94 	.word	0x0800fb94
 8000f88:	0800fba4 	.word	0x0800fba4
 8000f8c:	200000b1 	.word	0x200000b1
 8000f90:	200000b0 	.word	0x200000b0

08000f94 <HAL_UART_RxCpltCallback>:
  return len;
}

//printing
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, (uint8_t *)&temp , 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4913      	ldr	r1, [pc, #76]	; (8000fec <HAL_UART_RxCpltCallback+0x58>)
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f007 fb82 	bl	80086aa <HAL_UART_Receive_IT>
//	enqueue(&q, temp);

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000fa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000faa:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <HAL_UART_RxCpltCallback+0x5c>)
 8000fac:	f002 fa83 	bl	80034b6 <HAL_GPIO_TogglePin>
	rx_buff[head] = temp;
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_UART_RxCpltCallback+0x60>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_UART_RxCpltCallback+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2d9      	uxtb	r1, r3
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_UART_RxCpltCallback+0x64>)
 8000fc0:	5499      	strb	r1, [r3, r2]
	head = (head + 1)%100;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_UART_RxCpltCallback+0x60>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_UART_RxCpltCallback+0x68>)
 8000fcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd0:	1151      	asrs	r1, r2, #5
 8000fd2:	17da      	asrs	r2, r3, #31
 8000fd4:	1a8a      	subs	r2, r1, r2
 8000fd6:	2164      	movs	r1, #100	; 0x64
 8000fd8:	fb01 f202 	mul.w	r2, r1, r2
 8000fdc:	1a9a      	subs	r2, r3, r2
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <HAL_UART_RxCpltCallback+0x60>)
 8000fe2:	701a      	strb	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20004f21 	.word	0x20004f21
 8000ff0:	40020c00 	.word	0x40020c00
 8000ff4:	200000b2 	.word	0x200000b2
 8000ff8:	200000b4 	.word	0x200000b4
 8000ffc:	51eb851f 	.word	0x51eb851f

08001000 <start_normal>:

void start_normal()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

	PCA9685_SetServoAngle(0, ANGLE_0_INIT);
 8001004:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800108c <start_normal+0x8c>
 8001008:	2000      	movs	r0, #0
 800100a:	f001 f8c1 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, ANGLE_1_INIT);
 800100e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001090 <start_normal+0x90>
 8001012:	2001      	movs	r0, #1
 8001014:	f001 f8bc 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(2, ANGLE_2_INIT);
 8001018:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001090 <start_normal+0x90>
 800101c:	2002      	movs	r0, #2
 800101e:	f001 f8b7 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(3, ANGLE_3_INIT);
 8001022:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001094 <start_normal+0x94>
 8001026:	2003      	movs	r0, #3
 8001028:	f001 f8b2 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(50);
 800102c:	2032      	movs	r0, #50	; 0x32
 800102e:	f001 fef5 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8001032:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001098 <start_normal+0x98>
 8001036:	2004      	movs	r0, #4
 8001038:	f001 f8aa 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 800103c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800109c <start_normal+0x9c>
 8001040:	2005      	movs	r0, #5
 8001042:	f001 f8a5 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 8001046:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80010a0 <start_normal+0xa0>
 800104a:	2006      	movs	r0, #6
 800104c:	f001 f8a0 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8001050:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001090 <start_normal+0x90>
 8001054:	2007      	movs	r0, #7
 8001056:	f001 f89b 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT);
 800105a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80010a4 <start_normal+0xa4>
 800105e:	2008      	movs	r0, #8
 8001060:	f001 f896 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 8001064:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80010a0 <start_normal+0xa0>
 8001068:	2009      	movs	r0, #9
 800106a:	f001 f891 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(10, ANGLE_10_INIT);
 800106e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80010a8 <start_normal+0xa8>
 8001072:	200a      	movs	r0, #10
 8001074:	f001 f88c 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(11, ANGLE_11_INIT);
 8001078:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800109c <start_normal+0x9c>
 800107c:	200b      	movs	r0, #11
 800107e:	f001 f887 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(50);
 8001082:	2032      	movs	r0, #50	; 0x32
 8001084:	f001 feca 	bl	8002e1c <HAL_Delay>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	42f00000 	.word	0x42f00000
 8001090:	42dc0000 	.word	0x42dc0000
 8001094:	42340000 	.word	0x42340000
 8001098:	42480000 	.word	0x42480000
 800109c:	420c0000 	.word	0x420c0000
 80010a0:	42c80000 	.word	0x42c80000
 80010a4:	42820000 	.word	0x42820000
 80010a8:	425c0000 	.word	0x425c0000

080010ac <walk>:

void walk(void *parameters)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	int delay_time = 50;
 80010b4:	2332      	movs	r3, #50	; 0x32
 80010b6:	60fb      	str	r3, [r7, #12]
	PCA9685_SetServoAngle(7, ANGLE_7_INIT - 30);
 80010b8:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8001224 <walk+0x178>
 80010bc:	2007      	movs	r0, #7
 80010be:	f001 f867 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fea9 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(3, ANGLE_3_INIT);
 80010ca:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001228 <walk+0x17c>
 80010ce:	2003      	movs	r0, #3
 80010d0:	f001 f85e 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fea0 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(11, ANGLE_11_INIT - 35);
 80010dc:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800122c <walk+0x180>
 80010e0:	200b      	movs	r0, #11
 80010e2:	f001 f855 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fe97 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 80010ee:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001230 <walk+0x184>
 80010f2:	2007      	movs	r0, #7
 80010f4:	f001 f84c 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fe8e 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8001100:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001230 <walk+0x184>
 8001104:	2007      	movs	r0, #7
 8001106:	f001 f843 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fe85 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT + 20);
 8001112:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8001234 <walk+0x188>
 8001116:	2004      	movs	r0, #4
 8001118:	f001 f83a 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fe7c 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT - 20);
 8001124:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8001228 <walk+0x17c>
 8001128:	2008      	movs	r0, #8
 800112a:	f001 f831 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4618      	mov	r0, r3
 8001132:	f001 fe73 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8001136:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8001238 <walk+0x18c>
 800113a:	2004      	movs	r0, #4
 800113c:	f001 f828 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fe6a 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT - 55);
 8001148:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001228 <walk+0x17c>
 800114c:	2009      	movs	r0, #9
 800114e:	f001 f81f 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(11, ANGLE_11_INIT);
 8001152:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800123c <walk+0x190>
 8001156:	200b      	movs	r0, #11
 8001158:	f001 f81a 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(2, ANGLE_2_INIT - 30);
 800115c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8001224 <walk+0x178>
 8001160:	2002      	movs	r0, #2
 8001162:	f001 f815 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4618      	mov	r0, r3
 800116a:	f001 fe57 	bl	8002e1c <HAL_Delay>

	PCA9685_SetServoAngle(6, ANGLE_6_INIT + 30);
 800116e:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8001240 <walk+0x194>
 8001172:	2006      	movs	r0, #6
 8001174:	f001 f80c 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fe4e 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(10, ANGLE_10_INIT + 30);
 8001180:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8001244 <walk+0x198>
 8001184:	200a      	movs	r0, #10
 8001186:	f001 f803 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fe45 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(2, ANGLE_2_INIT);
 8001192:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001230 <walk+0x184>
 8001196:	2002      	movs	r0, #2
 8001198:	f000 fffa 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fe3c 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 80011a4:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001248 <walk+0x19c>
 80011a8:	2006      	movs	r0, #6
 80011aa:	f000 fff1 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fe33 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(10, ANGLE_10_INIT + 30);
 80011b6:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001244 <walk+0x198>
 80011ba:	200a      	movs	r0, #10
 80011bc:	f000 ffe8 	bl	8002190 <PCA9685_SetServoAngle>

	//		STATE 2
	PCA9685_SetServoAngle(5, ANGLE_5_INIT + 30);
 80011c0:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800124c <walk+0x1a0>
 80011c4:	2005      	movs	r0, #5
 80011c6:	f000 ffe3 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fe25 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 80011d2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001248 <walk+0x19c>
 80011d6:	2009      	movs	r0, #9
 80011d8:	f000 ffda 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fe1c 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 80011e4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800123c <walk+0x190>
 80011e8:	2005      	movs	r0, #5
 80011ea:	f000 ffd1 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fe13 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT + 20);
 80011f6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001244 <walk+0x198>
 80011fa:	2008      	movs	r0, #8
 80011fc:	f000 ffc8 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(10, ANGLE_10_INIT);
 8001200:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001250 <walk+0x1a4>
 8001204:	200a      	movs	r0, #10
 8001206:	f000 ffc3 	bl	8002190 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(3, ANGLE_3_INIT + 20);
 800120a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800124c <walk+0x1a0>
 800120e:	2003      	movs	r0, #3
 8001210:	f000 ffbe 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4618      	mov	r0, r3
 8001218:	f001 fe00 	bl	8002e1c <HAL_Delay>

}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	42a00000 	.word	0x42a00000
 8001228:	42340000 	.word	0x42340000
 800122c:	00000000 	.word	0x00000000
 8001230:	42dc0000 	.word	0x42dc0000
 8001234:	428c0000 	.word	0x428c0000
 8001238:	42480000 	.word	0x42480000
 800123c:	420c0000 	.word	0x420c0000
 8001240:	43020000 	.word	0x43020000
 8001244:	42aa0000 	.word	0x42aa0000
 8001248:	42c80000 	.word	0x42c80000
 800124c:	42820000 	.word	0x42820000
 8001250:	425c0000 	.word	0x425c0000

08001254 <rotate_right>:

void rotate_right(void *parameters)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	int delay_time = 50;
 800125c:	2332      	movs	r3, #50	; 0x32
 800125e:	60fb      	str	r3, [r7, #12]

	PCA9685_SetServoAngle(4, ANGLE_4_INIT + 20);
 8001260:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8001348 <rotate_right+0xf4>
 8001264:	2004      	movs	r0, #4
 8001266:	f000 ff93 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fdd5 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT + 55);
 8001272:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800134c <rotate_right+0xf8>
 8001276:	2008      	movs	r0, #8
 8001278:	f000 ff8a 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fdcc 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8001284:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8001350 <rotate_right+0xfc>
 8001288:	2004      	movs	r0, #4
 800128a:	f000 ff81 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4618      	mov	r0, r3
 8001292:	f001 fdc3 	bl	8002e1c <HAL_Delay>

	PCA9685_SetServoAngle(6, ANGLE_6_INIT + 30);
 8001296:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001354 <rotate_right+0x100>
 800129a:	2006      	movs	r0, #6
 800129c:	f000 ff78 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fdba 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(10, ANGLE_10_INIT + 50);
 80012a8:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001358 <rotate_right+0x104>
 80012ac:	200a      	movs	r0, #10
 80012ae:	f000 ff6f 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 fdb1 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 80012ba:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800135c <rotate_right+0x108>
 80012be:	2006      	movs	r0, #6
 80012c0:	f000 ff66 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time+50);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3332      	adds	r3, #50	; 0x32
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fda7 	bl	8002e1c <HAL_Delay>

	PCA9685_SetServoAngle(5, ANGLE_5_INIT + 30);
 80012ce:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001360 <rotate_right+0x10c>
 80012d2:	2005      	movs	r0, #5
 80012d4:	f000 ff5c 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 fd9e 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT + 30);
 80012e0:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001354 <rotate_right+0x100>
 80012e4:	2009      	movs	r0, #9
 80012e6:	f000 ff53 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fd95 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 80012f2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001364 <rotate_right+0x110>
 80012f6:	2005      	movs	r0, #5
 80012f8:	f000 ff4a 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 fd8c 	bl	8002e1c <HAL_Delay>

	PCA9685_SetServoAngle(7, ANGLE_7_INIT - 30);
 8001304:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001368 <rotate_right+0x114>
 8001308:	2007      	movs	r0, #7
 800130a:	f000 ff41 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4618      	mov	r0, r3
 8001312:	f001 fd83 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(11, ANGLE_11_INIT + 30);
 8001316:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001360 <rotate_right+0x10c>
 800131a:	200b      	movs	r0, #11
 800131c:	f000 ff38 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4618      	mov	r0, r3
 8001324:	f001 fd7a 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8001328:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800136c <rotate_right+0x118>
 800132c:	2007      	movs	r0, #7
 800132e:	f000 ff2f 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4618      	mov	r0, r3
 8001336:	f001 fd71 	bl	8002e1c <HAL_Delay>

	start_normal();
 800133a:	f7ff fe61 	bl	8001000 <start_normal>

}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	428c0000 	.word	0x428c0000
 800134c:	42f00000 	.word	0x42f00000
 8001350:	42480000 	.word	0x42480000
 8001354:	43020000 	.word	0x43020000
 8001358:	42d20000 	.word	0x42d20000
 800135c:	42c80000 	.word	0x42c80000
 8001360:	42820000 	.word	0x42820000
 8001364:	420c0000 	.word	0x420c0000
 8001368:	42a00000 	.word	0x42a00000
 800136c:	42dc0000 	.word	0x42dc0000

08001370 <rotate_left>:

void rotate_left(void *parameters)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	int delay_time = 50;
 8001378:	2332      	movs	r3, #50	; 0x32
 800137a:	60fb      	str	r3, [r7, #12]

	PCA9685_SetServoAngle(4, ANGLE_4_INIT + 20);
 800137c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001460 <rotate_left+0xf0>
 8001380:	2004      	movs	r0, #4
 8001382:	f000 ff05 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4618      	mov	r0, r3
 800138a:	f001 fd47 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT - 50);
 800138e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001392:	2008      	movs	r0, #8
 8001394:	f000 fefc 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fd3e 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 80013a0:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8001464 <rotate_left+0xf4>
 80013a4:	2004      	movs	r0, #4
 80013a6:	f000 fef3 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fd35 	bl	8002e1c <HAL_Delay>

	PCA9685_SetServoAngle(6, ANGLE_6_INIT + 30);
 80013b2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8001468 <rotate_left+0xf8>
 80013b6:	2006      	movs	r0, #6
 80013b8:	f000 feea 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 fd2c 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(10, ANGLE_10_INIT - 30);
 80013c4:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 80013c8:	200a      	movs	r0, #10
 80013ca:	f000 fee1 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fd23 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 80013d6:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800146c <rotate_left+0xfc>
 80013da:	2006      	movs	r0, #6
 80013dc:	f000 fed8 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fd1a 	bl	8002e1c <HAL_Delay>

	PCA9685_SetServoAngle(5, ANGLE_5_INIT + 30);
 80013e8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001470 <rotate_left+0x100>
 80013ec:	2005      	movs	r0, #5
 80013ee:	f000 fecf 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 fd11 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT - 40);
 80013fa:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001474 <rotate_left+0x104>
 80013fe:	2009      	movs	r0, #9
 8001400:	f000 fec6 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fd08 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 800140c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001478 <rotate_left+0x108>
 8001410:	2005      	movs	r0, #5
 8001412:	f000 febd 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fcff 	bl	8002e1c <HAL_Delay>

	PCA9685_SetServoAngle(7, ANGLE_7_INIT - 30);
 800141e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800147c <rotate_left+0x10c>
 8001422:	2007      	movs	r0, #7
 8001424:	f000 feb4 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fcf6 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(11, ANGLE_11_INIT - 30);
 8001430:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001434:	200b      	movs	r0, #11
 8001436:	f000 feab 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4618      	mov	r0, r3
 800143e:	f001 fced 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8001442:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001480 <rotate_left+0x110>
 8001446:	2007      	movs	r0, #7
 8001448:	f000 fea2 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fce4 	bl	8002e1c <HAL_Delay>

	start_normal();
 8001454:	f7ff fdd4 	bl	8001000 <start_normal>

}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	428c0000 	.word	0x428c0000
 8001464:	42480000 	.word	0x42480000
 8001468:	43020000 	.word	0x43020000
 800146c:	42c80000 	.word	0x42c80000
 8001470:	42820000 	.word	0x42820000
 8001474:	42700000 	.word	0x42700000
 8001478:	420c0000 	.word	0x420c0000
 800147c:	42a00000 	.word	0x42a00000
 8001480:	42dc0000 	.word	0x42dc0000

08001484 <greet>:
	}
	vTaskDelete(NULL);
}

void greet(void *parameters)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	int delay_time = 50;
 800148c:	2332      	movs	r3, #50	; 0x32
 800148e:	60fb      	str	r3, [r7, #12]

	PCA9685_SetServoAngle(8, ANGLE_8_INIT - 45);
 8001490:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001494:	2008      	movs	r0, #8
 8001496:	f000 fe7b 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4618      	mov	r0, r3
 800149e:	f001 fcbd 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 80014a2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001520 <greet+0x9c>
 80014a6:	2004      	movs	r0, #4
 80014a8:	f000 fe72 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 fcb4 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(0, ANGLE_0_INIT);
 80014b4:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001524 <greet+0xa0>
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 fe69 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 fcab 	bl	8002e1c <HAL_Delay>

	PCA9685_SetServoAngle(1, ANGLE_1_INIT - 45);
 80014c6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001528 <greet+0xa4>
 80014ca:	2001      	movs	r0, #1
 80014cc:	f000 fe60 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time + 150);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3396      	adds	r3, #150	; 0x96
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 fca1 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(5, ANGLE_5_INIT + 65);
 80014da:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800152c <greet+0xa8>
 80014de:	2005      	movs	r0, #5
 80014e0:	f000 fe56 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time + 100);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3364      	adds	r3, #100	; 0x64
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fc97 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 80014ee:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800152c <greet+0xa8>
 80014f2:	2009      	movs	r0, #9
 80014f4:	f000 fe4c 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time + 100);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3364      	adds	r3, #100	; 0x64
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fc8d 	bl	8002e1c <HAL_Delay>
	PCA9685_SetServoAngle(1, ANGLE_1_INIT + 45);
 8001502:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001530 <greet+0xac>
 8001506:	2001      	movs	r0, #1
 8001508:	f000 fe42 	bl	8002190 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time + 150);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3396      	adds	r3, #150	; 0x96
 8001510:	4618      	mov	r0, r3
 8001512:	f001 fc83 	bl	8002e1c <HAL_Delay>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	42480000 	.word	0x42480000
 8001524:	42f00000 	.word	0x42f00000
 8001528:	42820000 	.word	0x42820000
 800152c:	42c80000 	.word	0x42c80000
 8001530:	431b0000 	.word	0x431b0000

08001534 <crouch>:

void crouch(void *paramaters)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	int delay_time = 50;
 800153c:	2332      	movs	r3, #50	; 0x32
 800153e:	60fb      	str	r3, [r7, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <bt_config>:

void bt_config(void *parameters)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	int state = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		while((head != tail) )
 8001558:	e081      	b.n	800165e <bt_config+0x112>
		{
//			deq_temp = dequeue(&q);
//			printf("deq_temp = %c \n",deq_temp);
			deq_temp = rx_buff[tail];
 800155a:	4b46      	ldr	r3, [pc, #280]	; (8001674 <bt_config+0x128>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	4b45      	ldr	r3, [pc, #276]	; (8001678 <bt_config+0x12c>)
 8001564:	5c9a      	ldrb	r2, [r3, r2]
 8001566:	4b45      	ldr	r3, [pc, #276]	; (800167c <bt_config+0x130>)
 8001568:	701a      	strb	r2, [r3, #0]
			tail = (tail + 1)%100;
 800156a:	4b42      	ldr	r3, [pc, #264]	; (8001674 <bt_config+0x128>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3301      	adds	r3, #1
 8001572:	4a43      	ldr	r2, [pc, #268]	; (8001680 <bt_config+0x134>)
 8001574:	fb82 1203 	smull	r1, r2, r2, r3
 8001578:	1151      	asrs	r1, r2, #5
 800157a:	17da      	asrs	r2, r3, #31
 800157c:	1a8a      	subs	r2, r1, r2
 800157e:	2164      	movs	r1, #100	; 0x64
 8001580:	fb01 f202 	mul.w	r2, r1, r2
 8001584:	1a9a      	subs	r2, r3, r2
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	4b3a      	ldr	r3, [pc, #232]	; (8001674 <bt_config+0x128>)
 800158a:	701a      	strb	r2, [r3, #0]
			if (deq_temp == 'w')
 800158c:	4b3b      	ldr	r3, [pc, #236]	; (800167c <bt_config+0x130>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b77      	cmp	r3, #119	; 0x77
 8001594:	d126      	bne.n	80015e4 <bt_config+0x98>
			{
				if (!state)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d11f      	bne.n	80015dc <bt_config+0x90>
				{
					int delay_time = 50;
 800159c:	2332      	movs	r3, #50	; 0x32
 800159e:	60bb      	str	r3, [r7, #8]
					start_normal(0);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fd2d 	bl	8001000 <start_normal>
					PCA9685_SetServoAngle(4, ANGLE_4_INIT + 20);
 80015a6:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001684 <bt_config+0x138>
 80015aa:	2004      	movs	r0, #4
 80015ac:	f000 fdf0 	bl	8002190 <PCA9685_SetServoAngle>
					HAL_Delay(delay_time);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 fc32 	bl	8002e1c <HAL_Delay>
					PCA9685_SetServoAngle(8, ANGLE_8_INIT + 20);
 80015b8:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8001688 <bt_config+0x13c>
 80015bc:	2008      	movs	r0, #8
 80015be:	f000 fde7 	bl	8002190 <PCA9685_SetServoAngle>
					HAL_Delay(delay_time);
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fc29 	bl	8002e1c <HAL_Delay>
					PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 80015ca:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800168c <bt_config+0x140>
 80015ce:	2004      	movs	r0, #4
 80015d0:	f000 fdde 	bl	8002190 <PCA9685_SetServoAngle>
					HAL_Delay(delay_time);
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 fc20 	bl	8002e1c <HAL_Delay>
				}
				walk(0);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fd65 	bl	80010ac <walk>
 80015e2:	e03a      	b.n	800165a <bt_config+0x10e>
			}
			else if (deq_temp == 's')
 80015e4:	4b25      	ldr	r3, [pc, #148]	; (800167c <bt_config+0x130>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b73      	cmp	r3, #115	; 0x73
 80015ec:	d104      	bne.n	80015f8 <bt_config+0xac>
			{
				state = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
				start_normal();
 80015f2:	f7ff fd05 	bl	8001000 <start_normal>
 80015f6:	e030      	b.n	800165a <bt_config+0x10e>
			}

			else if (deq_temp == 'd' )
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <bt_config+0x130>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d107      	bne.n	8001612 <bt_config+0xc6>
			{
				state = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
				start_normal();
 8001606:	f7ff fcfb 	bl	8001000 <start_normal>
				rotate_left(0);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff feb0 	bl	8001370 <rotate_left>
 8001610:	e023      	b.n	800165a <bt_config+0x10e>
			}
			else if(deq_temp == 'a')
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <bt_config+0x130>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b61      	cmp	r3, #97	; 0x61
 800161a:	d107      	bne.n	800162c <bt_config+0xe0>
			{
				state = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
				start_normal();
 8001620:	f7ff fcee 	bl	8001000 <start_normal>
				rotate_right(0);
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff fe15 	bl	8001254 <rotate_right>
 800162a:	e016      	b.n	800165a <bt_config+0x10e>
			}
			else if (deq_temp == 't')
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <bt_config+0x130>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b74      	cmp	r3, #116	; 0x74
 8001634:	d107      	bne.n	8001646 <bt_config+0xfa>
			{
				state = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
				start_normal();
 800163a:	f7ff fce1 	bl	8001000 <start_normal>
				greet(0);
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff ff20 	bl	8001484 <greet>
 8001644:	e009      	b.n	800165a <bt_config+0x10e>

			}
			else if (deq_temp == 'c')
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <bt_config+0x130>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b63      	cmp	r3, #99	; 0x63
 800164e:	d104      	bne.n	800165a <bt_config+0x10e>
			{
				state = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
				crouch(0);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff ff6d 	bl	8001534 <crouch>
			}
			start_normal();
 800165a:	f7ff fcd1 	bl	8001000 <start_normal>
		while((head != tail) )
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <bt_config+0x144>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <bt_config+0x128>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	429a      	cmp	r2, r3
 800166c:	f47f af75 	bne.w	800155a <bt_config+0xe>
 8001670:	e7f5      	b.n	800165e <bt_config+0x112>
 8001672:	bf00      	nop
 8001674:	200000b3 	.word	0x200000b3
 8001678:	200000b4 	.word	0x200000b4
 800167c:	20004f20 	.word	0x20004f20
 8001680:	51eb851f 	.word	0x51eb851f
 8001684:	428c0000 	.word	0x428c0000
 8001688:	42aa0000 	.word	0x42aa0000
 800168c:	42480000 	.word	0x42480000
 8001690:	200000b2 	.word	0x200000b2

08001694 <faces>:
	}
	vTaskDelete(NULL);
}

void faces(void *parameters)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af02      	add	r7, sp, #8
 800169a:	6078      	str	r0, [r7, #4]
	int times = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 80016a0:	2301      	movs	r3, #1
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	4a35      	ldr	r2, [pc, #212]	; (8001780 <faces+0xec>)
 80016ac:	2100      	movs	r1, #0
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 fde0 	bl	8002274 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80016b4:	f000 ff0a 	bl	80024cc <SSD1306_UpdateScreen>
		HAL_Delay(times + 1000);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 fbac 	bl	8002e1c <HAL_Delay>
		SSD1306_Clear();
 80016c4:	f000 ffa8 	bl	8002618 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face2, 128, 64, 1);
 80016c8:	2301      	movs	r3, #1
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	2340      	movs	r3, #64	; 0x40
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	4a2c      	ldr	r2, [pc, #176]	; (8001784 <faces+0xf0>)
 80016d4:	2100      	movs	r1, #0
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 fdcc 	bl	8002274 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80016dc:	f000 fef6 	bl	80024cc <SSD1306_UpdateScreen>
		HAL_Delay(times);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 fb9a 	bl	8002e1c <HAL_Delay>
		SSD1306_Clear();
 80016e8:	f000 ff96 	bl	8002618 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face3, 128, 64, 1);
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	2340      	movs	r3, #64	; 0x40
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	4a24      	ldr	r2, [pc, #144]	; (8001788 <faces+0xf4>)
 80016f8:	2100      	movs	r1, #0
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 fdba 	bl	8002274 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001700:	f000 fee4 	bl	80024cc <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4618      	mov	r0, r3
 8001708:	f001 fb88 	bl	8002e1c <HAL_Delay>
		SSD1306_Clear();
 800170c:	f000 ff84 	bl	8002618 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face4, 128, 64, 1);
 8001710:	2301      	movs	r3, #1
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2340      	movs	r3, #64	; 0x40
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <faces+0xf8>)
 800171c:	2100      	movs	r1, #0
 800171e:	2000      	movs	r0, #0
 8001720:	f000 fda8 	bl	8002274 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001724:	f000 fed2 	bl	80024cc <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4618      	mov	r0, r3
 800172c:	f001 fb76 	bl	8002e1c <HAL_Delay>
		SSD1306_Clear();
 8001730:	f000 ff72 	bl	8002618 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face5, 128, 64, 1);
 8001734:	2301      	movs	r3, #1
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	2340      	movs	r3, #64	; 0x40
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	4a14      	ldr	r2, [pc, #80]	; (8001790 <faces+0xfc>)
 8001740:	2100      	movs	r1, #0
 8001742:	2000      	movs	r0, #0
 8001744:	f000 fd96 	bl	8002274 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001748:	f000 fec0 	bl	80024cc <SSD1306_UpdateScreen>
		HAL_Delay(times);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4618      	mov	r0, r3
 8001750:	f001 fb64 	bl	8002e1c <HAL_Delay>
		SSD1306_Clear();
 8001754:	f000 ff60 	bl	8002618 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face6, 128, 64, 1);
 8001758:	2301      	movs	r3, #1
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	2340      	movs	r3, #64	; 0x40
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <faces+0x100>)
 8001764:	2100      	movs	r1, #0
 8001766:	2000      	movs	r0, #0
 8001768:	f000 fd84 	bl	8002274 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800176c:	f000 feae 	bl	80024cc <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4618      	mov	r0, r3
 8001774:	f001 fb52 	bl	8002e1c <HAL_Delay>
		SSD1306_Clear();
 8001778:	f000 ff4e 	bl	8002618 <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 800177c:	e790      	b.n	80016a0 <faces+0xc>
 800177e:	bf00      	nop
 8001780:	0800fc00 	.word	0x0800fc00
 8001784:	08010000 	.word	0x08010000
 8001788:	08010400 	.word	0x08010400
 800178c:	08010800 	.word	0x08010800
 8001790:	08010c00 	.word	0x08010c00
 8001794:	08011000 	.word	0x08011000

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800179e:	f001 fafb 	bl	8002d98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017a2:	f000 f851 	bl	8001848 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017a6:	f000 fa0b 	bl	8001bc0 <MX_GPIO_Init>
	MX_I2C1_Init();
 80017aa:	f000 f8cf 	bl	800194c <MX_I2C1_Init>
	MX_I2S3_Init();
 80017ae:	f000 f929 	bl	8001a04 <MX_I2S3_Init>
	MX_SPI1_Init();
 80017b2:	f000 f957 	bl	8001a64 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 80017b6:	f000 f9d9 	bl	8001b6c <MX_USART2_UART_Init>
	MX_I2C3_Init();
 80017ba:	f000 f8f5 	bl	80019a8 <MX_I2C3_Init>
	MX_TIM2_Init();
 80017be:	f000 f987 	bl	8001ad0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
//	init_queue(&q, 100);
	SSD1306_Init();
 80017c2:	f000 fdbf 	bl	8002344 <SSD1306_Init>
	PCA9685_Init(&hi2c3);
 80017c6:	4816      	ldr	r0, [pc, #88]	; (8001820 <main+0x88>)
 80017c8:	f000 fd3e 	bl	8002248 <PCA9685_Init>

	start_normal();
 80017cc:	f7ff fc18 	bl	8001000 <start_normal>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&temp, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	4914      	ldr	r1, [pc, #80]	; (8001824 <main+0x8c>)
 80017d4:	4814      	ldr	r0, [pc, #80]	; (8001828 <main+0x90>)
 80017d6:	f006 ff68 	bl	80086aa <HAL_UART_Receive_IT>
//	rx_buff[head] = (char)temp;
//	head = (head + 1)%100;

	xTaskHandle HT1, HT2;
	xTaskCreate(faces, "face_show", configMINIMAL_STACK_SIZE, 0, 0, &HT1);
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	2300      	movs	r3, #0
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2300      	movs	r3, #0
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	4911      	ldr	r1, [pc, #68]	; (800182c <main+0x94>)
 80017e8:	4811      	ldr	r0, [pc, #68]	; (8001830 <main+0x98>)
 80017ea:	f00b fef8 	bl	800d5de <xTaskCreate>
	xTaskCreate(bt_config, "bt", configMINIMAL_STACK_SIZE, 0, 0, &HT2);
 80017ee:	463b      	mov	r3, r7
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	2300      	movs	r3, #0
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2300      	movs	r3, #0
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	490e      	ldr	r1, [pc, #56]	; (8001834 <main+0x9c>)
 80017fc:	480e      	ldr	r0, [pc, #56]	; (8001838 <main+0xa0>)
 80017fe:	f00b feee 	bl	800d5de <xTaskCreate>
	//
	vTaskStartScheduler();
 8001802:	f00c f865 	bl	800d8d0 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001806:	f00a fdd7 	bl	800c3b8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <main+0xa4>)
 800180c:	2100      	movs	r1, #0
 800180e:	480c      	ldr	r0, [pc, #48]	; (8001840 <main+0xa8>)
 8001810:	f00a fe1c 	bl	800c44c <osThreadNew>
 8001814:	4603      	mov	r3, r0
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <main+0xac>)
 8001818:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800181a:	f00a fdf1 	bl	800c400 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
 800181e:	e7fe      	b.n	800181e <main+0x86>
 8001820:	20004e78 	.word	0x20004e78
 8001824:	20004f21 	.word	0x20004f21
 8001828:	20004fc4 	.word	0x20004fc4
 800182c:	0800fbc8 	.word	0x0800fbc8
 8001830:	08001695 	.word	0x08001695
 8001834:	0800fbd4 	.word	0x0800fbd4
 8001838:	0800154d 	.word	0x0800154d
 800183c:	08011400 	.word	0x08011400
 8001840:	08001ddd 	.word	0x08001ddd
 8001844:	20004e74 	.word	0x20004e74

08001848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b098      	sub	sp, #96	; 0x60
 800184c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001852:	2230      	movs	r2, #48	; 0x30
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f00e f832 	bl	800f8c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
  */
	__HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <SystemClock_Config+0xfc>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a30      	ldr	r2, [pc, #192]	; (8001944 <SystemClock_Config+0xfc>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <SystemClock_Config+0xfc>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <SystemClock_Config+0x100>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <SystemClock_Config+0x100>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <SystemClock_Config+0x100>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018bc:	2302      	movs	r3, #2
 80018be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80018c6:	2308      	movs	r3, #8
 80018c8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 80018ca:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018ce:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80018d4:	2307      	movs	r3, #7
 80018d6:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018dc:	4618      	mov	r0, r3
 80018de:	f005 fa77 	bl	8006dd0 <HAL_RCC_OscConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0xa4>
	{
		Error_Handler();
 80018e8:	f000 fa94 	bl	8001e14 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ec:	230f      	movs	r3, #15
 80018ee:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f0:	2302      	movs	r3, #2
 80018f2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	2105      	movs	r1, #5
 800190a:	4618      	mov	r0, r3
 800190c:	f005 fcd8 	bl	80072c0 <HAL_RCC_ClockConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8001916:	f000 fa7d 	bl	8001e14 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800191a:	2301      	movs	r3, #1
 800191c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800191e:	23c0      	movs	r3, #192	; 0xc0
 8001920:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001922:	2302      	movs	r3, #2
 8001924:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4618      	mov	r0, r3
 800192c:	f005 fef6 	bl	800771c <HAL_RCCEx_PeriphCLKConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0xf2>
	{
		Error_Handler();
 8001936:	f000 fa6d 	bl	8001e14 <Error_Handler>
	}
}
 800193a:	bf00      	nop
 800193c:	3760      	adds	r7, #96	; 0x60
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000

0800194c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <MX_I2C1_Init+0x50>)
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <MX_I2C1_Init+0x54>)
 8001954:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_I2C1_Init+0x50>)
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_I2C1_Init+0x58>)
 800195a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <MX_I2C1_Init+0x50>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_I2C1_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_I2C1_Init+0x50>)
 800196a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <MX_I2C1_Init+0x50>)
 800198a:	f003 fb13 	bl	8004fb4 <HAL_I2C_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001994:	f000 fa3e 	bl	8001e14 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20004ecc 	.word	0x20004ecc
 80019a0:	40005400 	.word	0x40005400
 80019a4:	00061a80 	.word	0x00061a80

080019a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019ae:	4a13      	ldr	r2, [pc, #76]	; (80019fc <MX_I2C3_Init+0x54>)
 80019b0:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 400000;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019b4:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <MX_I2C3_Init+0x58>)
 80019b6:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ca:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_I2C3_Init+0x50>)
 80019e6:	f003 fae5 	bl	8004fb4 <HAL_I2C_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 80019f0:	f000 fa10 	bl	8001e14 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20004e78 	.word	0x20004e78
 80019fc:	40005c00 	.word	0x40005c00
 8001a00:	00061a80 	.word	0x00061a80

08001a04 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MX_I2S3_Init+0x54>)
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <MX_I2S3_Init+0x58>)
 8001a0c:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_I2S3_Init+0x54>)
 8001a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a14:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <MX_I2S3_Init+0x54>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_I2S3_Init+0x54>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <MX_I2S3_Init+0x54>)
 8001a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a28:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_I2S3_Init+0x54>)
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <MX_I2S3_Init+0x5c>)
 8001a2e:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_I2S3_Init+0x54>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_I2S3_Init+0x54>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_I2S3_Init+0x54>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_I2S3_Init+0x54>)
 8001a44:	f004 fd24 	bl	8006490 <HAL_I2S_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 8001a4e:	f000 f9e1 	bl	8001e14 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20005008 	.word	0x20005008
 8001a5c:	40003c00 	.word	0x40003c00
 8001a60:	00017700 	.word	0x00017700

08001a64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001a6a:	4a18      	ldr	r2, [pc, #96]	; (8001acc <MX_SPI1_Init+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001a70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a74:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a94:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MX_SPI1_Init+0x64>)
 8001ab6:	f005 ff71 	bl	800799c <HAL_SPI_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001ac0:	f000 f9a8 	bl	8001e14 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20004f24 	.word	0x20004f24
 8001acc:	40013000 	.word	0x40013000

08001ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 720;
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001af6:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001afa:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1999;
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b04:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001b08:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b18:	f005 ffc9 	bl	8007aae <HAL_TIM_Base_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8001b22:	f000 f977 	bl	8001e14 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4619      	mov	r1, r3
 8001b32:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b34:	f006 f982 	bl	8007e3c <HAL_TIM_ConfigClockSource>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8001b3e:	f000 f969 	bl	8001e14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b50:	f006 fb9a 	bl	8008288 <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8001b5a:	f000 f95b 	bl	8001e14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20004f7c 	.word	0x20004f7c

08001b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_USART2_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b7c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f006 fc00 	bl	80083a8 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001bae:	f000 f931 	bl	8001e14 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20004fc4 	.word	0x20004fc4
 8001bbc:	40004400 	.word	0x40004400

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	4b79      	ldr	r3, [pc, #484]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a78      	ldr	r2, [pc, #480]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	4b72      	ldr	r3, [pc, #456]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a71      	ldr	r2, [pc, #452]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b6f      	ldr	r3, [pc, #444]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b6b      	ldr	r3, [pc, #428]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a6a      	ldr	r2, [pc, #424]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b68      	ldr	r3, [pc, #416]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a63      	ldr	r2, [pc, #396]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b61      	ldr	r3, [pc, #388]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	4b5d      	ldr	r3, [pc, #372]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a5c      	ldr	r2, [pc, #368]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a55      	ldr	r2, [pc, #340]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <MX_GPIO_Init+0x200>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2108      	movs	r1, #8
 8001c82:	4850      	ldr	r0, [pc, #320]	; (8001dc4 <MX_GPIO_Init+0x204>)
 8001c84:	f001 fbfe 	bl	8003484 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin | GPIO_PIN_8, GPIO_PIN_SET);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f240 1101 	movw	r1, #257	; 0x101
 8001c8e:	484e      	ldr	r0, [pc, #312]	; (8001dc8 <MX_GPIO_Init+0x208>)
 8001c90:	f001 fbf8 	bl	8003484 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, BLUETOOTH_RESET_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	f64f 0110 	movw	r1, #63504	; 0xf810
 8001c9a:	484c      	ldr	r0, [pc, #304]	; (8001dcc <MX_GPIO_Init+0x20c>)
 8001c9c:	f001 fbf2 	bl	8003484 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4843      	ldr	r0, [pc, #268]	; (8001dc4 <MX_GPIO_Init+0x204>)
 8001cb8:	f001 fa48 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC8 */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | GPIO_PIN_8;
 8001cbc:	f240 1301 	movw	r3, #257	; 0x101
 8001cc0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	483c      	ldr	r0, [pc, #240]	; (8001dc8 <MX_GPIO_Init+0x208>)
 8001cd6:	f001 fa39 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001cda:	2308      	movs	r3, #8
 8001cdc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cea:	2305      	movs	r3, #5
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4834      	ldr	r0, [pc, #208]	; (8001dc8 <MX_GPIO_Init+0x208>)
 8001cf6:	f001 fa29 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cfe:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <MX_GPIO_Init+0x210>)
 8001d00:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4831      	ldr	r0, [pc, #196]	; (8001dd4 <MX_GPIO_Init+0x214>)
 8001d0e:	f001 fa1d 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8001d12:	2304      	movs	r3, #4
 8001d14:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4619      	mov	r1, r3
 8001d24:	482c      	ldr	r0, [pc, #176]	; (8001dd8 <MX_GPIO_Init+0x218>)
 8001d26:	f001 fa11 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4824      	ldr	r0, [pc, #144]	; (8001dd8 <MX_GPIO_Init+0x218>)
 8001d48:	f001 fa00 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUETOOTH_RESET_Pin */
	GPIO_InitStruct.Pin = BLUETOOTH_RESET_Pin;
 8001d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d50:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BLUETOOTH_RESET_GPIO_Port, &GPIO_InitStruct);
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	4619      	mov	r1, r3
 8001d64:	4819      	ldr	r0, [pc, #100]	; (8001dcc <MX_GPIO_Init+0x20c>)
 8001d66:	f001 f9f1 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8001d6a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001d6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	4812      	ldr	r0, [pc, #72]	; (8001dcc <MX_GPIO_Init+0x20c>)
 8001d84:	f001 f9e2 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d88:	2320      	movs	r3, #32
 8001d8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480c      	ldr	r0, [pc, #48]	; (8001dcc <MX_GPIO_Init+0x20c>)
 8001d9c:	f001 f9d6 	bl	800314c <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <MX_GPIO_Init+0x210>)
 8001da6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	4619      	mov	r1, r3
 8001db2:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MX_GPIO_Init+0x204>)
 8001db4:	f001 f9ca 	bl	800314c <HAL_GPIO_Init>
}
 8001db8:	bf00      	nop
 8001dba:	3730      	adds	r7, #48	; 0x30
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	10120000 	.word	0x10120000
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40020400 	.word	0x40020400

08001ddc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8001de4:	f00d fa22 	bl	800f22c <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f00a fbc1 	bl	800c570 <osDelay>
 8001dee:	e7fb      	b.n	8001de8 <StartDefaultTask+0xc>

08001df0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8001e02:	f000 ffeb 	bl	8002ddc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40001000 	.word	0x40001000

08001e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e18:	b672      	cpsid	i
}
 8001e1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e1c:	e7fe      	b.n	8001e1c <Error_Handler+0x8>
	...

08001e20 <PCA9685_SetBit>:
#include "main.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af04      	add	r7, sp, #16
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	71bb      	strb	r3, [r7, #6]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 8001e32:	797b      	ldrb	r3, [r7, #5]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <PCA9685_SetBit+0x1c>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <PCA9685_SetBit+0xb0>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	230a      	movs	r3, #10
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	f107 030f 	add.w	r3, r7, #15
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2301      	movs	r3, #1
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	f003 fbe9 	bl	800562c <HAL_I2C_Mem_Read>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e031      	b.n	8001ec8 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8001e64:	79bb      	ldrb	r3, [r7, #6]
 8001e66:	2201      	movs	r2, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e72:	b25b      	sxtb	r3, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	b25a      	sxtb	r2, r3
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8001e84:	797b      	ldrb	r3, [r7, #5]
 8001e86:	f003 0201 	and.w	r2, r3, #1
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	b25a      	sxtb	r2, r3
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	b25b      	sxtb	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <PCA9685_SetBit+0xb0>)
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	230a      	movs	r3, #10
 8001ea8:	9302      	str	r3, [sp, #8]
 8001eaa:	2301      	movs	r3, #1
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	f107 030f 	add.w	r3, r7, #15
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	f003 fabe 	bl	8005438 <HAL_I2C_Mem_Write>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20005050 	.word	0x20005050

08001ed4 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001eda:	2306      	movs	r3, #6
 8001edc:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <PCA9685_SoftwareReset+0x30>)
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	1dfa      	adds	r2, r7, #7
 8001ee4:	230a      	movs	r3, #10
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2301      	movs	r3, #1
 8001eea:	2100      	movs	r1, #0
 8001eec:	f003 f9a6 	bl	800523c <HAL_I2C_Master_Transmit>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20005050 	.word	0x20005050

08001f08 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	461a      	mov	r2, r3
 8001f16:	2104      	movs	r1, #4
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f7ff ff81 	bl	8001e20 <PCA9685_SetBit>
 8001f1e:	4603      	mov	r3, r0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	461a      	mov	r2, r3
 8001f36:	2107      	movs	r1, #7
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f7ff ff71 	bl	8001e20 <PCA9685_SetBit>
 8001f3e:	4603      	mov	r3, r0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	461a      	mov	r2, r3
 8001f56:	2105      	movs	r1, #5
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff ff61 	bl	8001e20 <PCA9685_SetBit>
 8001f5e:	4603      	mov	r3, r0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af04      	add	r7, sp, #16
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d902      	bls.n	8001f82 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	72fb      	strb	r3, [r7, #11]
 8001f80:	e046      	b.n	8002010 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	2b18      	cmp	r3, #24
 8001f86:	d802      	bhi.n	8001f8e <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001f88:	23ff      	movs	r3, #255	; 0xff
 8001f8a:	72fb      	strb	r3, [r7, #11]
 8001f8c:	e040      	b.n	8002010 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f98:	ee17 0a90 	vmov	r0, s15
 8001f9c:	f7fe fa84 	bl	80004a8 <__aeabi_f2d>
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <PCA9685_SetPwmFrequency+0xe8>)
 8001fa6:	f7fe fad7 	bl	8000558 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	a126      	add	r1, pc, #152	; (adr r1, 8002048 <PCA9685_SetPwmFrequency+0xe0>)
 8001fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fb4:	f7fe fbfa 	bl	80007ac <__aeabi_ddiv>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	4b23      	ldr	r3, [pc, #140]	; (8002054 <PCA9685_SetPwmFrequency+0xec>)
 8001fc6:	f7fe f90f 	bl	80001e8 <__aeabi_dsub>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f7fe fd7b 	bl	8000acc <__aeabi_d2f>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7fe fa64 	bl	80004a8 <__aeabi_f2d>
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <PCA9685_SetPwmFrequency+0xf0>)
 8001fe6:	f7fe f901 	bl	80001ec <__adddf3>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	ec43 2b17 	vmov	d7, r2, r3
 8001ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff6:	eef0 0a67 	vmov.f32	s1, s15
 8001ffa:	f00d fd31 	bl	800fa60 <floor>
 8001ffe:	ec53 2b10 	vmov	r2, r3, d0
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f7fe fd41 	bl	8000a8c <__aeabi_d2uiz>
 800200a:	4603      	mov	r3, r0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8002010:	2001      	movs	r0, #1
 8002012:	f7ff ff79 	bl	8001f08 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <PCA9685_SetPwmFrequency+0xf4>)
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	230a      	movs	r3, #10
 800201c:	9302      	str	r3, [sp, #8]
 800201e:	2301      	movs	r3, #1
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	f107 030b 	add.w	r3, r7, #11
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2301      	movs	r3, #1
 800202a:	22fe      	movs	r2, #254	; 0xfe
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	f003 fa03 	bl	8005438 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff ff68 	bl	8001f08 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8002038:	2001      	movs	r0, #1
 800203a:	f7ff ff75 	bl	8001f28 <PCA9685_RestartMode>
	return PCA9685_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	00000000 	.word	0x00000000
 800204c:	4177d784 	.word	0x4177d784
 8002050:	40b00000 	.word	0x40b00000
 8002054:	3ff00000 	.word	0x3ff00000
 8002058:	3fe00000 	.word	0x3fe00000
 800205c:	20005050 	.word	0x20005050

08002060 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af04      	add	r7, sp, #16
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
 800206a:	460b      	mov	r3, r1
 800206c:	80bb      	strh	r3, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	b2db      	uxtb	r3, r3
 8002078:	3306      	adds	r3, #6
 800207a:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8002082:	88bb      	ldrh	r3, [r7, #4]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	b29b      	uxth	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	b29b      	uxth	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <PCA9685_SetPwm+0x70>)
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	230a      	movs	r3, #10
 80020a6:	9302      	str	r3, [sp, #8]
 80020a8:	2304      	movs	r3, #4
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	f107 0308 	add.w	r3, r7, #8
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2301      	movs	r3, #1
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	f003 f9bf 	bl	8005438 <HAL_I2C_Mem_Write>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20005050 	.word	0x20005050

080020d4 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
 80020de:	460b      	mov	r3, r1
 80020e0:	80bb      	strh	r3, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 80020e6:	88bb      	ldrh	r3, [r7, #4]
 80020e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ec:	d302      	bcc.n	80020f4 <PCA9685_SetPin+0x20>
 80020ee:	f640 73ff 	movw	r3, #4095	; 0xfff
 80020f2:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d025      	beq.n	8002146 <PCA9685_SetPin+0x72>
    if (Value == 0) {
 80020fa:	88bb      	ldrh	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d108      	bne.n	8002112 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2200      	movs	r2, #0
 8002104:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ffa9 	bl	8002060 <PCA9685_SetPwm>
 800210e:	4603      	mov	r3, r0
 8002110:	e03a      	b.n	8002188 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8002112:	88bb      	ldrh	r3, [r7, #4]
 8002114:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002118:	4293      	cmp	r3, r2
 800211a:	d108      	bne.n	800212e <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff9b 	bl	8002060 <PCA9685_SetPwm>
 800212a:	4603      	mov	r3, r0
 800212c:	e02c      	b.n	8002188 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 800212e:	88bb      	ldrh	r3, [r7, #4]
 8002130:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8002134:	330f      	adds	r3, #15
 8002136:	b29a      	uxth	r2, r3
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff8f 	bl	8002060 <PCA9685_SetPwm>
 8002142:	4603      	mov	r3, r0
 8002144:	e020      	b.n	8002188 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8002146:	88bb      	ldrh	r3, [r7, #4]
 8002148:	f640 72ff 	movw	r2, #4095	; 0xfff
 800214c:	4293      	cmp	r3, r2
 800214e:	d108      	bne.n	8002162 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	2200      	movs	r2, #0
 8002154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff81 	bl	8002060 <PCA9685_SetPwm>
 800215e:	4603      	mov	r3, r0
 8002160:	e012      	b.n	8002188 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8002162:	88bb      	ldrh	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d108      	bne.n	800217a <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff75 	bl	8002060 <PCA9685_SetPwm>
 8002176:	4603      	mov	r3, r0
 8002178:	e006      	b.n	8002188 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 800217a:	88ba      	ldrh	r2, [r7, #4]
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff6d 	bl	8002060 <PCA9685_SetPwm>
 8002186:	4603      	mov	r3, r0
    }
  }
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	ed87 0a00 	vstr	s0, [r7]
 800219c:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 800219e:	edd7 7a00 	vldr	s15, [r7]
 80021a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	d502      	bpl.n	80021b2 <PCA9685_SetServoAngle+0x22>
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 80021b2:	edd7 7a00 	vldr	s15, [r7]
 80021b6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002238 <PCA9685_SetServoAngle+0xa8>
 80021ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	dd01      	ble.n	80021c8 <PCA9685_SetServoAngle+0x38>
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <PCA9685_SetServoAngle+0xac>)
 80021c6:	603b      	str	r3, [r7, #0]


	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 80021c8:	6838      	ldr	r0, [r7, #0]
 80021ca:	f7fe f96d 	bl	80004a8 <__aeabi_f2d>
 80021ce:	a318      	add	r3, pc, #96	; (adr r3, 8002230 <PCA9685_SetServoAngle+0xa0>)
 80021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d4:	f7fe f9c0 	bl	8000558 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <PCA9685_SetServoAngle+0xb0>)
 80021e6:	f7fe fae1 	bl	80007ac <__aeabi_ddiv>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <PCA9685_SetServoAngle+0xb4>)
 80021f8:	f7fd fff8 	bl	80001ec <__adddf3>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	f7fe fc62 	bl	8000acc <__aeabi_d2f>
 8002208:	4603      	mov	r3, r0
 800220a:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 800220c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002214:	ee17 3a90 	vmov	r3, s15
 8002218:	b299      	uxth	r1, r3
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2200      	movs	r2, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff58 	bl	80020d4 <PCA9685_SetPin>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	00000000 	.word	0x00000000
 8002234:	407c2000 	.word	0x407c2000
 8002238:	43340000 	.word	0x43340000
 800223c:	43340000 	.word	0x43340000
 8002240:	40668000 	.word	0x40668000
 8002244:	405f4000 	.word	0x405f4000

08002248 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <PCA9685_Init+0x28>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8002256:	f7ff fe3d 	bl	8001ed4 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 800225a:	2030      	movs	r0, #48	; 0x30
 800225c:	f7ff fe84 	bl	8001f68 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8002260:	2001      	movs	r0, #1
 8002262:	f7ff fe71 	bl	8001f48 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20005050 	.word	0x20005050

08002274 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60ba      	str	r2, [r7, #8]
 800227c:	461a      	mov	r2, r3
 800227e:	4603      	mov	r3, r0
 8002280:	81fb      	strh	r3, [r7, #14]
 8002282:	460b      	mov	r3, r1
 8002284:	81bb      	strh	r3, [r7, #12]
 8002286:	4613      	mov	r3, r2
 8002288:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800228a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800228e:	3307      	adds	r3, #7
 8002290:	2b00      	cmp	r3, #0
 8002292:	da00      	bge.n	8002296 <SSD1306_DrawBitmap+0x22>
 8002294:	3307      	adds	r3, #7
 8002296:	10db      	asrs	r3, r3, #3
 8002298:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 800229e:	2300      	movs	r3, #0
 80022a0:	82bb      	strh	r3, [r7, #20]
 80022a2:	e044      	b.n	800232e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	827b      	strh	r3, [r7, #18]
 80022a8:	e02f      	b.n	800230a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80022aa:	8a7b      	ldrh	r3, [r7, #18]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
 80022ba:	e012      	b.n	80022e2 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80022bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80022c4:	fb02 f203 	mul.w	r2, r2, r3
 80022c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da00      	bge.n	80022d2 <SSD1306_DrawBitmap+0x5e>
 80022d0:	3307      	adds	r3, #7
 80022d2:	10db      	asrs	r3, r3, #3
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4413      	add	r3, r2
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80022e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	da09      	bge.n	80022fe <SSD1306_DrawBitmap+0x8a>
 80022ea:	89fa      	ldrh	r2, [r7, #14]
 80022ec:	8a7b      	ldrh	r3, [r7, #18]
 80022ee:	4413      	add	r3, r2
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	89b9      	ldrh	r1, [r7, #12]
 80022f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f92d 	bl	8002558 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80022fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002302:	b29b      	uxth	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	b29b      	uxth	r3, r3
 8002308:	827b      	strh	r3, [r7, #18]
 800230a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800230e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002312:	429a      	cmp	r2, r3
 8002314:	dbc9      	blt.n	80022aa <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002316:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800231a:	b29b      	uxth	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	b29b      	uxth	r3, r3
 8002320:	82bb      	strh	r3, [r7, #20]
 8002322:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002326:	b29b      	uxth	r3, r3
 8002328:	3301      	adds	r3, #1
 800232a:	b29b      	uxth	r3, r3
 800232c:	81bb      	strh	r3, [r7, #12]
 800232e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002332:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002336:	429a      	cmp	r2, r3
 8002338:	dbb4      	blt.n	80022a4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800233a:	bf00      	nop
 800233c:	bf00      	nop
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800234a:	f000 f96f 	bl	800262c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800234e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002352:	2201      	movs	r2, #1
 8002354:	2178      	movs	r1, #120	; 0x78
 8002356:	485b      	ldr	r0, [pc, #364]	; (80024c4 <SSD1306_Init+0x180>)
 8002358:	f003 fb8e 	bl	8005a78 <HAL_I2C_IsDeviceReady>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002362:	2300      	movs	r3, #0
 8002364:	e0a9      	b.n	80024ba <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002366:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800236a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800236c:	e002      	b.n	8002374 <SSD1306_Init+0x30>
		p--;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3b01      	subs	r3, #1
 8002372:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f9      	bne.n	800236e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800237a:	22ae      	movs	r2, #174	; 0xae
 800237c:	2100      	movs	r1, #0
 800237e:	2078      	movs	r0, #120	; 0x78
 8002380:	f000 f9b2 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002384:	2220      	movs	r2, #32
 8002386:	2100      	movs	r1, #0
 8002388:	2078      	movs	r0, #120	; 0x78
 800238a:	f000 f9ad 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800238e:	2210      	movs	r2, #16
 8002390:	2100      	movs	r1, #0
 8002392:	2078      	movs	r0, #120	; 0x78
 8002394:	f000 f9a8 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002398:	22b0      	movs	r2, #176	; 0xb0
 800239a:	2100      	movs	r1, #0
 800239c:	2078      	movs	r0, #120	; 0x78
 800239e:	f000 f9a3 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80023a2:	22c8      	movs	r2, #200	; 0xc8
 80023a4:	2100      	movs	r1, #0
 80023a6:	2078      	movs	r0, #120	; 0x78
 80023a8:	f000 f99e 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2078      	movs	r0, #120	; 0x78
 80023b2:	f000 f999 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80023b6:	2210      	movs	r2, #16
 80023b8:	2100      	movs	r1, #0
 80023ba:	2078      	movs	r0, #120	; 0x78
 80023bc:	f000 f994 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80023c0:	2240      	movs	r2, #64	; 0x40
 80023c2:	2100      	movs	r1, #0
 80023c4:	2078      	movs	r0, #120	; 0x78
 80023c6:	f000 f98f 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80023ca:	2281      	movs	r2, #129	; 0x81
 80023cc:	2100      	movs	r1, #0
 80023ce:	2078      	movs	r0, #120	; 0x78
 80023d0:	f000 f98a 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80023d4:	22ff      	movs	r2, #255	; 0xff
 80023d6:	2100      	movs	r1, #0
 80023d8:	2078      	movs	r0, #120	; 0x78
 80023da:	f000 f985 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80023de:	22a1      	movs	r2, #161	; 0xa1
 80023e0:	2100      	movs	r1, #0
 80023e2:	2078      	movs	r0, #120	; 0x78
 80023e4:	f000 f980 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80023e8:	22a6      	movs	r2, #166	; 0xa6
 80023ea:	2100      	movs	r1, #0
 80023ec:	2078      	movs	r0, #120	; 0x78
 80023ee:	f000 f97b 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80023f2:	22a8      	movs	r2, #168	; 0xa8
 80023f4:	2100      	movs	r1, #0
 80023f6:	2078      	movs	r0, #120	; 0x78
 80023f8:	f000 f976 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80023fc:	223f      	movs	r2, #63	; 0x3f
 80023fe:	2100      	movs	r1, #0
 8002400:	2078      	movs	r0, #120	; 0x78
 8002402:	f000 f971 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002406:	22a4      	movs	r2, #164	; 0xa4
 8002408:	2100      	movs	r1, #0
 800240a:	2078      	movs	r0, #120	; 0x78
 800240c:	f000 f96c 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002410:	22d3      	movs	r2, #211	; 0xd3
 8002412:	2100      	movs	r1, #0
 8002414:	2078      	movs	r0, #120	; 0x78
 8002416:	f000 f967 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	2078      	movs	r0, #120	; 0x78
 8002420:	f000 f962 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002424:	22d5      	movs	r2, #213	; 0xd5
 8002426:	2100      	movs	r1, #0
 8002428:	2078      	movs	r0, #120	; 0x78
 800242a:	f000 f95d 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800242e:	22f0      	movs	r2, #240	; 0xf0
 8002430:	2100      	movs	r1, #0
 8002432:	2078      	movs	r0, #120	; 0x78
 8002434:	f000 f958 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002438:	22d9      	movs	r2, #217	; 0xd9
 800243a:	2100      	movs	r1, #0
 800243c:	2078      	movs	r0, #120	; 0x78
 800243e:	f000 f953 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002442:	2222      	movs	r2, #34	; 0x22
 8002444:	2100      	movs	r1, #0
 8002446:	2078      	movs	r0, #120	; 0x78
 8002448:	f000 f94e 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800244c:	22da      	movs	r2, #218	; 0xda
 800244e:	2100      	movs	r1, #0
 8002450:	2078      	movs	r0, #120	; 0x78
 8002452:	f000 f949 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002456:	2212      	movs	r2, #18
 8002458:	2100      	movs	r1, #0
 800245a:	2078      	movs	r0, #120	; 0x78
 800245c:	f000 f944 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002460:	22db      	movs	r2, #219	; 0xdb
 8002462:	2100      	movs	r1, #0
 8002464:	2078      	movs	r0, #120	; 0x78
 8002466:	f000 f93f 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800246a:	2220      	movs	r2, #32
 800246c:	2100      	movs	r1, #0
 800246e:	2078      	movs	r0, #120	; 0x78
 8002470:	f000 f93a 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002474:	228d      	movs	r2, #141	; 0x8d
 8002476:	2100      	movs	r1, #0
 8002478:	2078      	movs	r0, #120	; 0x78
 800247a:	f000 f935 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800247e:	2214      	movs	r2, #20
 8002480:	2100      	movs	r1, #0
 8002482:	2078      	movs	r0, #120	; 0x78
 8002484:	f000 f930 	bl	80026e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002488:	22af      	movs	r2, #175	; 0xaf
 800248a:	2100      	movs	r1, #0
 800248c:	2078      	movs	r0, #120	; 0x78
 800248e:	f000 f92b 	bl	80026e8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002492:	222e      	movs	r2, #46	; 0x2e
 8002494:	2100      	movs	r1, #0
 8002496:	2078      	movs	r0, #120	; 0x78
 8002498:	f000 f926 	bl	80026e8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800249c:	2000      	movs	r0, #0
 800249e:	f000 f843 	bl	8002528 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80024a2:	f000 f813 	bl	80024cc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <SSD1306_Init+0x184>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <SSD1306_Init+0x184>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SSD1306_Init+0x184>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80024b8:	2301      	movs	r3, #1
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20004ecc 	.word	0x20004ecc
 80024c8:	20000518 	.word	0x20000518

080024cc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80024d2:	2300      	movs	r3, #0
 80024d4:	71fb      	strb	r3, [r7, #7]
 80024d6:	e01d      	b.n	8002514 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	3b50      	subs	r3, #80	; 0x50
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	2100      	movs	r1, #0
 80024e2:	2078      	movs	r0, #120	; 0x78
 80024e4:	f000 f900 	bl	80026e8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	2078      	movs	r0, #120	; 0x78
 80024ee:	f000 f8fb 	bl	80026e8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80024f2:	2210      	movs	r2, #16
 80024f4:	2100      	movs	r1, #0
 80024f6:	2078      	movs	r0, #120	; 0x78
 80024f8:	f000 f8f6 	bl	80026e8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	01db      	lsls	r3, r3, #7
 8002500:	4a08      	ldr	r2, [pc, #32]	; (8002524 <SSD1306_UpdateScreen+0x58>)
 8002502:	441a      	add	r2, r3
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	2140      	movs	r1, #64	; 0x40
 8002508:	2078      	movs	r0, #120	; 0x78
 800250a:	f000 f8a5 	bl	8002658 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	3301      	adds	r3, #1
 8002512:	71fb      	strb	r3, [r7, #7]
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	2b07      	cmp	r3, #7
 8002518:	d9de      	bls.n	80024d8 <SSD1306_UpdateScreen+0xc>
	}
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000118 	.word	0x20000118

08002528 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <SSD1306_Fill+0x14>
 8002538:	2300      	movs	r3, #0
 800253a:	e000      	b.n	800253e <SSD1306_Fill+0x16>
 800253c:	23ff      	movs	r3, #255	; 0xff
 800253e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002542:	4619      	mov	r1, r3
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <SSD1306_Fill+0x2c>)
 8002546:	f00d f9bb 	bl	800f8c0 <memset>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000118 	.word	0x20000118

08002558 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	80fb      	strh	r3, [r7, #6]
 8002562:	460b      	mov	r3, r1
 8002564:	80bb      	strh	r3, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	70fb      	strb	r3, [r7, #3]
	if (
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	2b7f      	cmp	r3, #127	; 0x7f
 800256e:	d848      	bhi.n	8002602 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002570:	88bb      	ldrh	r3, [r7, #4]
 8002572:	2b3f      	cmp	r3, #63	; 0x3f
 8002574:	d845      	bhi.n	8002602 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <SSD1306_DrawPixel+0xb8>)
 8002578:	791b      	ldrb	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d11a      	bne.n	80025c8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002592:	88fa      	ldrh	r2, [r7, #6]
 8002594:	88bb      	ldrh	r3, [r7, #4]
 8002596:	08db      	lsrs	r3, r3, #3
 8002598:	b298      	uxth	r0, r3
 800259a:	4603      	mov	r3, r0
 800259c:	01db      	lsls	r3, r3, #7
 800259e:	4413      	add	r3, r2
 80025a0:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <SSD1306_DrawPixel+0xbc>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	b25a      	sxtb	r2, r3
 80025a6:	88bb      	ldrh	r3, [r7, #4]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	b25b      	sxtb	r3, r3
 80025b4:	4313      	orrs	r3, r2
 80025b6:	b259      	sxtb	r1, r3
 80025b8:	88fa      	ldrh	r2, [r7, #6]
 80025ba:	4603      	mov	r3, r0
 80025bc:	01db      	lsls	r3, r3, #7
 80025be:	4413      	add	r3, r2
 80025c0:	b2c9      	uxtb	r1, r1
 80025c2:	4a14      	ldr	r2, [pc, #80]	; (8002614 <SSD1306_DrawPixel+0xbc>)
 80025c4:	54d1      	strb	r1, [r2, r3]
 80025c6:	e01d      	b.n	8002604 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025c8:	88fa      	ldrh	r2, [r7, #6]
 80025ca:	88bb      	ldrh	r3, [r7, #4]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	b298      	uxth	r0, r3
 80025d0:	4603      	mov	r3, r0
 80025d2:	01db      	lsls	r3, r3, #7
 80025d4:	4413      	add	r3, r2
 80025d6:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <SSD1306_DrawPixel+0xbc>)
 80025d8:	5cd3      	ldrb	r3, [r2, r3]
 80025da:	b25a      	sxtb	r2, r3
 80025dc:	88bb      	ldrh	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	4013      	ands	r3, r2
 80025f0:	b259      	sxtb	r1, r3
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	4603      	mov	r3, r0
 80025f6:	01db      	lsls	r3, r3, #7
 80025f8:	4413      	add	r3, r2
 80025fa:	b2c9      	uxtb	r1, r1
 80025fc:	4a05      	ldr	r2, [pc, #20]	; (8002614 <SSD1306_DrawPixel+0xbc>)
 80025fe:	54d1      	strb	r1, [r2, r3]
 8002600:	e000      	b.n	8002604 <SSD1306_DrawPixel+0xac>
		return;
 8002602:	bf00      	nop
	}
}
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000518 	.word	0x20000518
 8002614:	20000118 	.word	0x20000118

08002618 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff ff83 	bl	8002528 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002622:	f7ff ff53 	bl	80024cc <SSD1306_UpdateScreen>
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <ssd1306_I2C_Init+0x28>)
 8002634:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002636:	e002      	b.n	800263e <ssd1306_I2C_Init+0x12>
		p--;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f9      	bne.n	8002638 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	0003d090 	.word	0x0003d090

08002658 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b0c7      	sub	sp, #284	; 0x11c
 800265c:	af02      	add	r7, sp, #8
 800265e:	4604      	mov	r4, r0
 8002660:	4608      	mov	r0, r1
 8002662:	4639      	mov	r1, r7
 8002664:	600a      	str	r2, [r1, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	1dfb      	adds	r3, r7, #7
 800266a:	4622      	mov	r2, r4
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	1dbb      	adds	r3, r7, #6
 8002670:	4602      	mov	r2, r0
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	460a      	mov	r2, r1
 8002678:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	1dba      	adds	r2, r7, #6
 8002680:	7812      	ldrb	r2, [r2, #0]
 8002682:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002684:	2300      	movs	r3, #0
 8002686:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800268a:	e010      	b.n	80026ae <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800268c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002690:	463a      	mov	r2, r7
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	441a      	add	r2, r3
 8002696:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800269a:	3301      	adds	r3, #1
 800269c:	7811      	ldrb	r1, [r2, #0]
 800269e:	f107 020c 	add.w	r2, r7, #12
 80026a2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80026a4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026a8:	3301      	adds	r3, #1
 80026aa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	1d3a      	adds	r2, r7, #4
 80026b6:	8812      	ldrh	r2, [r2, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d8e7      	bhi.n	800268c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80026bc:	1dfb      	adds	r3, r7, #7
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b299      	uxth	r1, r3
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f107 020c 	add.w	r2, r7, #12
 80026ce:	200a      	movs	r0, #10
 80026d0:	9000      	str	r0, [sp, #0]
 80026d2:	4804      	ldr	r0, [pc, #16]	; (80026e4 <ssd1306_I2C_WriteMulti+0x8c>)
 80026d4:	f002 fdb2 	bl	800523c <HAL_I2C_Master_Transmit>
}
 80026d8:	bf00      	nop
 80026da:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd90      	pop	{r4, r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20004ecc 	.word	0x20004ecc

080026e8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
 80026f2:	460b      	mov	r3, r1
 80026f4:	71bb      	strb	r3, [r7, #6]
 80026f6:	4613      	mov	r3, r2
 80026f8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80026fa:	79bb      	ldrb	r3, [r7, #6]
 80026fc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80026fe:	797b      	ldrb	r3, [r7, #5]
 8002700:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	b299      	uxth	r1, r3
 8002706:	f107 020c 	add.w	r2, r7, #12
 800270a:	230a      	movs	r3, #10
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2302      	movs	r3, #2
 8002710:	4803      	ldr	r0, [pc, #12]	; (8002720 <ssd1306_I2C_Write+0x38>)
 8002712:	f002 fd93 	bl	800523c <HAL_I2C_Master_Transmit>
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20004ecc 	.word	0x20004ecc

08002724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	4b16      	ldr	r3, [pc, #88]	; (8002788 <HAL_MspInit+0x64>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a15      	ldr	r2, [pc, #84]	; (8002788 <HAL_MspInit+0x64>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_MspInit+0x64>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_MspInit+0x64>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <HAL_MspInit+0x64>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_MspInit+0x64>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	210f      	movs	r1, #15
 8002766:	f06f 0001 	mvn.w	r0, #1
 800276a:	f000 fc33 	bl	8002fd4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2105      	movs	r1, #5
 8002772:	2005      	movs	r0, #5
 8002774:	f000 fc2e 	bl	8002fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002778:	2005      	movs	r0, #5
 800277a:	f000 fc47 	bl	800300c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800

0800278c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	; 0x30
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a42      	ldr	r2, [pc, #264]	; (80028b4 <HAL_I2C_MspInit+0x128>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d12c      	bne.n	8002808 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	4b41      	ldr	r3, [pc, #260]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a40      	ldr	r2, [pc, #256]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b3e      	ldr	r3, [pc, #248]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80027ca:	23c0      	movs	r3, #192	; 0xc0
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ce:	2312      	movs	r3, #18
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d2:	2301      	movs	r3, #1
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027da:	2304      	movs	r3, #4
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027de:	f107 031c 	add.w	r3, r7, #28
 80027e2:	4619      	mov	r1, r3
 80027e4:	4835      	ldr	r0, [pc, #212]	; (80028bc <HAL_I2C_MspInit+0x130>)
 80027e6:	f000 fcb1 	bl	800314c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a31      	ldr	r2, [pc, #196]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 80027f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002806:	e050      	b.n	80028aa <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2c      	ldr	r2, [pc, #176]	; (80028c0 <HAL_I2C_MspInit+0x134>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d14b      	bne.n	80028aa <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a20      	ldr	r2, [pc, #128]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800284a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002850:	2312      	movs	r3, #18
 8002852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002854:	2301      	movs	r3, #1
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800285c:	2304      	movs	r3, #4
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	4619      	mov	r1, r3
 8002866:	4817      	ldr	r0, [pc, #92]	; (80028c4 <HAL_I2C_MspInit+0x138>)
 8002868:	f000 fc70 	bl	800314c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800286c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002872:	2312      	movs	r3, #18
 8002874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002876:	2301      	movs	r3, #1
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800287e:	2304      	movs	r3, #4
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	4619      	mov	r1, r3
 8002888:	480f      	ldr	r0, [pc, #60]	; (80028c8 <HAL_I2C_MspInit+0x13c>)
 800288a:	f000 fc5f 	bl	800314c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 8002898:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_I2C_MspInit+0x12c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
}
 80028aa:	bf00      	nop
 80028ac:	3730      	adds	r7, #48	; 0x30
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40005400 	.word	0x40005400
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40005c00 	.word	0x40005c00
 80028c4:	40020800 	.word	0x40020800
 80028c8:	40020000 	.word	0x40020000

080028cc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a28      	ldr	r2, [pc, #160]	; (800298c <HAL_I2S_MspInit+0xc0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d14a      	bne.n	8002984 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_I2S_MspInit+0xc4>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a26      	ldr	r2, [pc, #152]	; (8002990 <HAL_I2S_MspInit+0xc4>)
 80028f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_I2S_MspInit+0xc4>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <HAL_I2S_MspInit+0xc4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_I2S_MspInit+0xc4>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_I2S_MspInit+0xc4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_I2S_MspInit+0xc4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a18      	ldr	r2, [pc, #96]	; (8002990 <HAL_I2S_MspInit+0xc4>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_I2S_MspInit+0xc4>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002942:	2310      	movs	r3, #16
 8002944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002952:	2306      	movs	r3, #6
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	480d      	ldr	r0, [pc, #52]	; (8002994 <HAL_I2S_MspInit+0xc8>)
 800295e:	f000 fbf5 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002962:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002974:	2306      	movs	r3, #6
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	4619      	mov	r1, r3
 800297e:	4806      	ldr	r0, [pc, #24]	; (8002998 <HAL_I2S_MspInit+0xcc>)
 8002980:	f000 fbe4 	bl	800314c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002984:	bf00      	nop
 8002986:	3728      	adds	r7, #40	; 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40003c00 	.word	0x40003c00
 8002990:	40023800 	.word	0x40023800
 8002994:	40020000 	.word	0x40020000
 8002998:	40020800 	.word	0x40020800

0800299c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_SPI_MspInit+0x84>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12b      	bne.n	8002a16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029cc:	6453      	str	r3, [r2, #68]	; 0x44
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80029f6:	23e0      	movs	r3, #224	; 0xe0
 80029f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a06:	2305      	movs	r3, #5
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4805      	ldr	r0, [pc, #20]	; (8002a28 <HAL_SPI_MspInit+0x8c>)
 8002a12:	f000 fb9b 	bl	800314c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a16:	bf00      	nop
 8002a18:	3728      	adds	r7, #40	; 0x28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40013000 	.word	0x40013000
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020000 	.word	0x40020000

08002a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d115      	bne.n	8002a6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_TIM_Base_MspInit+0x48>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <HAL_TIM_Base_MspInit+0x48>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_TIM_Base_MspInit+0x48>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2105      	movs	r1, #5
 8002a5e:	201c      	movs	r0, #28
 8002a60:	f000 fab8 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a64:	201c      	movs	r0, #28
 8002a66:	f000 fad1 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <HAL_UART_MspInit+0x94>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d133      	bne.n	8002b02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <HAL_UART_MspInit+0x98>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <HAL_UART_MspInit+0x98>)
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_UART_MspInit+0x98>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <HAL_UART_MspInit+0x98>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <HAL_UART_MspInit+0x98>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_UART_MspInit+0x98>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ae2:	2307      	movs	r3, #7
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 0314 	add.w	r3, r7, #20
 8002aea:	4619      	mov	r1, r3
 8002aec:	4809      	ldr	r0, [pc, #36]	; (8002b14 <HAL_UART_MspInit+0x9c>)
 8002aee:	f000 fb2d 	bl	800314c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2105      	movs	r1, #5
 8002af6:	2026      	movs	r0, #38	; 0x26
 8002af8:	f000 fa6c 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002afc:	2026      	movs	r0, #38	; 0x26
 8002afe:	f000 fa85 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b02:	bf00      	nop
 8002b04:	3728      	adds	r7, #40	; 0x28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40004400 	.word	0x40004400
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020000 	.word	0x40020000

08002b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	; 0x30
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f000 fa51 	bl	8002fd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b32:	2036      	movs	r0, #54	; 0x36
 8002b34:	f000 fa6a 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <HAL_InitTick+0xa4>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <HAL_InitTick+0xa4>)
 8002b42:	f043 0310 	orr.w	r3, r3, #16
 8002b46:	6413      	str	r3, [r2, #64]	; 0x40
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_InitTick+0xa4>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b54:	f107 0210 	add.w	r2, r7, #16
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f004 fdaa 	bl	80076b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002b64:	f004 fd80 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <HAL_InitTick+0xa8>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	0c9b      	lsrs	r3, r3, #18
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_InitTick+0xac>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <HAL_InitTick+0xb0>)
 8002b80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_InitTick+0xac>)
 8002b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b8a:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <HAL_InitTick+0xac>)
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <HAL_InitTick+0xac>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_InitTick+0xac>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b9c:	4809      	ldr	r0, [pc, #36]	; (8002bc4 <HAL_InitTick+0xac>)
 8002b9e:	f004 ff86 	bl	8007aae <HAL_TIM_Base_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ba8:	4806      	ldr	r0, [pc, #24]	; (8002bc4 <HAL_InitTick+0xac>)
 8002baa:	f004 ffcf 	bl	8007b4c <HAL_TIM_Base_Start_IT>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	e000      	b.n	8002bb4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3730      	adds	r7, #48	; 0x30
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	431bde83 	.word	0x431bde83
 8002bc4:	20005054 	.word	0x20005054
 8002bc8:	40001000 	.word	0x40001000

08002bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <NMI_Handler+0x4>

08002bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd6:	e7fe      	b.n	8002bd6 <HardFault_Handler+0x4>

08002bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <MemManage_Handler+0x4>

08002bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <BusFault_Handler+0x4>

08002be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <UsageFault_Handler+0x4>

08002bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <TIM2_IRQHandler+0x30>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <TIM2_IRQHandler+0x18>
			timer_count++;
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <TIM2_IRQHandler+0x34>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <TIM2_IRQHandler+0x34>)
 8002c1e:	701a      	strb	r2, [r3, #0]

	if(timer_count>5)
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <TIM2_IRQHandler+0x34>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b05      	cmp	r3, #5
 8002c26:	d901      	bls.n	8002c2c <TIM2_IRQHandler+0x24>
		Message_handler();
 8002c28:	f7fe f94e 	bl	8000ec8 <Message_handler>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <TIM2_IRQHandler+0x38>)
 8002c2e:	f004 fffd 	bl	8007c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20004e40 	.word	0x20004e40
 8002c3c:	200000b0 	.word	0x200000b0
 8002c40:	20004f7c 	.word	0x20004f7c

08002c44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 8002c48:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <USART2_IRQHandler+0x3c>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	b2d1      	uxtb	r1, r2
 8002c50:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <USART2_IRQHandler+0x3c>)
 8002c52:	7011      	strb	r1, [r2, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <USART2_IRQHandler+0x40>)
 8002c58:	18d1      	adds	r1, r2, r3
 8002c5a:	230a      	movs	r3, #10
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	480a      	ldr	r0, [pc, #40]	; (8002c88 <USART2_IRQHandler+0x44>)
 8002c60:	f005 fc81 	bl	8008566 <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <USART2_IRQHandler+0x3c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	4a06      	ldr	r2, [pc, #24]	; (8002c84 <USART2_IRQHandler+0x40>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	2b0a      	cmp	r3, #10
 8002c70:	d101      	bne.n	8002c76 <USART2_IRQHandler+0x32>
		Message_handler();
 8002c72:	f7fe f929 	bl	8000ec8 <Message_handler>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c76:	4804      	ldr	r0, [pc, #16]	; (8002c88 <USART2_IRQHandler+0x44>)
 8002c78:	f005 fd48 	bl	800870c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200000b1 	.word	0x200000b1
 8002c84:	20004e40 	.word	0x20004e40
 8002c88:	20004fc4 	.word	0x20004fc4

08002c8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */


  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c90:	4802      	ldr	r0, [pc, #8]	; (8002c9c <TIM6_DAC_IRQHandler+0x10>)
 8002c92:	f004 ffcb 	bl	8007c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20005054 	.word	0x20005054

08002ca0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <OTG_FS_IRQHandler+0x10>)
 8002ca6:	f000 fe8b 	bl	80039c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200054e8 	.word	0x200054e8

08002cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cbc:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <_sbrk+0x5c>)
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <_sbrk+0x60>)
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <_sbrk+0x64>)
 8002cd2:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <_sbrk+0x68>)
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce4:	f00c fda4 	bl	800f830 <__errno>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	220c      	movs	r2, #12
 8002cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cf2:	e009      	b.n	8002d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <_sbrk+0x64>)
 8002d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d06:	68fb      	ldr	r3, [r7, #12]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20020000 	.word	0x20020000
 8002d14:	00000400 	.word	0x00000400
 8002d18:	20000520 	.word	0x20000520
 8002d1c:	20005800 	.word	0x20005800

08002d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <SystemInit+0x20>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <SystemInit+0x20>)
 8002d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d48:	480d      	ldr	r0, [pc, #52]	; (8002d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d4a:	490e      	ldr	r1, [pc, #56]	; (8002d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d4c:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d50:	e002      	b.n	8002d58 <LoopCopyDataInit>

08002d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d56:	3304      	adds	r3, #4

08002d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d5c:	d3f9      	bcc.n	8002d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5e:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d60:	4c0b      	ldr	r4, [pc, #44]	; (8002d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d64:	e001      	b.n	8002d6a <LoopFillZerobss>

08002d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d68:	3204      	adds	r2, #4

08002d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d6c:	d3fb      	bcc.n	8002d66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d6e:	f7ff ffd7 	bl	8002d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d72:	f00c fd63 	bl	800f83c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d76:	f7fe fd0f 	bl	8001798 <main>
  bx  lr    
 8002d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d84:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002d88:	0801144c 	.word	0x0801144c
  ldr r2, =_sbss
 8002d8c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002d90:	200057fc 	.word	0x200057fc

08002d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d94:	e7fe      	b.n	8002d94 <ADC_IRQHandler>
	...

08002d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <HAL_Init+0x40>)
 8002da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_Init+0x40>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <HAL_Init+0x40>)
 8002dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <HAL_Init+0x40>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f000 f8fc 	bl	8002fbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f7ff fea6 	bl	8002b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dcc:	f7ff fcaa 	bl	8002724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00

08002ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_IncTick+0x20>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_IncTick+0x24>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <HAL_IncTick+0x24>)
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	2000509c 	.word	0x2000509c

08002e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return uwTick;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_GetTick+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	2000509c 	.word	0x2000509c

08002e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff ffee 	bl	8002e04 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e34:	d005      	beq.n	8002e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_Delay+0x44>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e42:	bf00      	nop
 8002e44:	f7ff ffde 	bl	8002e04 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d8f7      	bhi.n	8002e44 <HAL_Delay+0x28>
  {
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000008 	.word	0x20000008

08002e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 0307 	and.w	r3, r3, #7
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0b      	blt.n	8002ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4907      	ldr	r1, [pc, #28]	; (8002f00 <__NVIC_EnableIRQ+0x38>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	db0a      	blt.n	8002f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	490c      	ldr	r1, [pc, #48]	; (8002f50 <__NVIC_SetPriority+0x4c>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	440b      	add	r3, r1
 8002f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f2c:	e00a      	b.n	8002f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4908      	ldr	r1, [pc, #32]	; (8002f54 <__NVIC_SetPriority+0x50>)
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3b04      	subs	r3, #4
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	440b      	add	r3, r1
 8002f42:	761a      	strb	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f1c3 0307 	rsb	r3, r3, #7
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	bf28      	it	cs
 8002f76:	2304      	movcs	r3, #4
 8002f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d902      	bls.n	8002f88 <NVIC_EncodePriority+0x30>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3b03      	subs	r3, #3
 8002f86:	e000      	b.n	8002f8a <NVIC_EncodePriority+0x32>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43d9      	mvns	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	4313      	orrs	r3, r2
         );
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	; 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ff4c 	bl	8002e64 <__NVIC_SetPriorityGrouping>
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe6:	f7ff ff61 	bl	8002eac <__NVIC_GetPriorityGrouping>
 8002fea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	6978      	ldr	r0, [r7, #20]
 8002ff2:	f7ff ffb1 	bl	8002f58 <NVIC_EncodePriority>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff80 	bl	8002f04 <__NVIC_SetPriority>
}
 8003004:	bf00      	nop
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff ff54 	bl	8002ec8 <__NVIC_EnableIRQ>
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003036:	f7ff fee5 	bl	8002e04 <HAL_GetTick>
 800303a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d008      	beq.n	800305a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2280      	movs	r2, #128	; 0x80
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e052      	b.n	8003100 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0216 	bic.w	r2, r2, #22
 8003068:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003078:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_DMA_Abort+0x62>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0208 	bic.w	r2, r2, #8
 8003098:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030aa:	e013      	b.n	80030d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ac:	f7ff feaa 	bl	8002e04 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d90c      	bls.n	80030d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2203      	movs	r2, #3
 80030cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e015      	b.n	8003100 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e4      	bne.n	80030ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	223f      	movs	r2, #63	; 0x3f
 80030e8:	409a      	lsls	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d004      	beq.n	8003126 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e00c      	b.n	8003140 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2205      	movs	r2, #5
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	; 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	e16b      	b.n	8003440 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003168:	2201      	movs	r2, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	429a      	cmp	r2, r3
 8003182:	f040 815a 	bne.w	800343a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d005      	beq.n	800319e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319a:	2b02      	cmp	r3, #2
 800319c:	d130      	bne.n	8003200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2203      	movs	r2, #3
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d4:	2201      	movs	r2, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 0201 	and.w	r2, r3, #1
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b03      	cmp	r3, #3
 800320a:	d017      	beq.n	800323c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	2203      	movs	r2, #3
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d123      	bne.n	8003290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	08da      	lsrs	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3208      	adds	r2, #8
 8003250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	220f      	movs	r2, #15
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	08da      	lsrs	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3208      	adds	r2, #8
 800328a:	69b9      	ldr	r1, [r7, #24]
 800328c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	2203      	movs	r2, #3
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0203 	and.w	r2, r3, #3
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80b4 	beq.w	800343a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	4b60      	ldr	r3, [pc, #384]	; (8003458 <HAL_GPIO_Init+0x30c>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	4a5f      	ldr	r2, [pc, #380]	; (8003458 <HAL_GPIO_Init+0x30c>)
 80032dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e0:	6453      	str	r3, [r2, #68]	; 0x44
 80032e2:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <HAL_GPIO_Init+0x30c>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ee:	4a5b      	ldr	r2, [pc, #364]	; (800345c <HAL_GPIO_Init+0x310>)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	3302      	adds	r3, #2
 80032f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	220f      	movs	r2, #15
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a52      	ldr	r2, [pc, #328]	; (8003460 <HAL_GPIO_Init+0x314>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02b      	beq.n	8003372 <HAL_GPIO_Init+0x226>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a51      	ldr	r2, [pc, #324]	; (8003464 <HAL_GPIO_Init+0x318>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d025      	beq.n	800336e <HAL_GPIO_Init+0x222>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a50      	ldr	r2, [pc, #320]	; (8003468 <HAL_GPIO_Init+0x31c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01f      	beq.n	800336a <HAL_GPIO_Init+0x21e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4f      	ldr	r2, [pc, #316]	; (800346c <HAL_GPIO_Init+0x320>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d019      	beq.n	8003366 <HAL_GPIO_Init+0x21a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4e      	ldr	r2, [pc, #312]	; (8003470 <HAL_GPIO_Init+0x324>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_GPIO_Init+0x216>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4d      	ldr	r2, [pc, #308]	; (8003474 <HAL_GPIO_Init+0x328>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00d      	beq.n	800335e <HAL_GPIO_Init+0x212>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4c      	ldr	r2, [pc, #304]	; (8003478 <HAL_GPIO_Init+0x32c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <HAL_GPIO_Init+0x20e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4b      	ldr	r2, [pc, #300]	; (800347c <HAL_GPIO_Init+0x330>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_GPIO_Init+0x20a>
 8003352:	2307      	movs	r3, #7
 8003354:	e00e      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003356:	2308      	movs	r3, #8
 8003358:	e00c      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800335a:	2306      	movs	r3, #6
 800335c:	e00a      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800335e:	2305      	movs	r3, #5
 8003360:	e008      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003362:	2304      	movs	r3, #4
 8003364:	e006      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003366:	2303      	movs	r3, #3
 8003368:	e004      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800336a:	2302      	movs	r3, #2
 800336c:	e002      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003372:	2300      	movs	r3, #0
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	f002 0203 	and.w	r2, r2, #3
 800337a:	0092      	lsls	r2, r2, #2
 800337c:	4093      	lsls	r3, r2
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003384:	4935      	ldr	r1, [pc, #212]	; (800345c <HAL_GPIO_Init+0x310>)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003392:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <HAL_GPIO_Init+0x334>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b6:	4a32      	ldr	r2, [pc, #200]	; (8003480 <HAL_GPIO_Init+0x334>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033bc:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_GPIO_Init+0x334>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033e0:	4a27      	ldr	r2, [pc, #156]	; (8003480 <HAL_GPIO_Init+0x334>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_GPIO_Init+0x334>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <HAL_GPIO_Init+0x334>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_GPIO_Init+0x334>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003434:	4a12      	ldr	r2, [pc, #72]	; (8003480 <HAL_GPIO_Init+0x334>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3301      	adds	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	f67f ae90 	bls.w	8003168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	40013800 	.word	0x40013800
 8003460:	40020000 	.word	0x40020000
 8003464:	40020400 	.word	0x40020400
 8003468:	40020800 	.word	0x40020800
 800346c:	40020c00 	.word	0x40020c00
 8003470:	40021000 	.word	0x40021000
 8003474:	40021400 	.word	0x40021400
 8003478:	40021800 	.word	0x40021800
 800347c:	40021c00 	.word	0x40021c00
 8003480:	40013c00 	.word	0x40013c00

08003484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
 8003490:	4613      	mov	r3, r2
 8003492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003494:	787b      	ldrb	r3, [r7, #1]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034a0:	e003      	b.n	80034aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034a2:	887b      	ldrh	r3, [r7, #2]
 80034a4:	041a      	lsls	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	619a      	str	r2, [r3, #24]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034c8:	887a      	ldrh	r2, [r7, #2]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4013      	ands	r3, r2
 80034ce:	041a      	lsls	r2, r3, #16
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43d9      	mvns	r1, r3
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	400b      	ands	r3, r1
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	619a      	str	r2, [r3, #24]
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80034ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ec:	b08f      	sub	sp, #60	; 0x3c
 80034ee:	af0a      	add	r7, sp, #40	; 0x28
 80034f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e054      	b.n	80035a6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f00b fedc 	bl	800f2d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2203      	movs	r2, #3
 8003520:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f005 feb0 	bl	80092a0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	687e      	ldr	r6, [r7, #4]
 8003548:	466d      	mov	r5, sp
 800354a:	f106 0410 	add.w	r4, r6, #16
 800354e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003556:	e894 0003 	ldmia.w	r4, {r0, r1}
 800355a:	e885 0003 	stmia.w	r5, {r0, r1}
 800355e:	1d33      	adds	r3, r6, #4
 8003560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003562:	6838      	ldr	r0, [r7, #0]
 8003564:	f005 fe2a 	bl	80091bc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f005 fea7 	bl	80092c2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	687e      	ldr	r6, [r7, #4]
 800357c:	466d      	mov	r5, sp
 800357e:	f106 0410 	add.w	r4, r6, #16
 8003582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800358e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003592:	1d33      	adds	r3, r6, #4
 8003594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f005 ffba 	bl	8009510 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80035ae:	b590      	push	{r4, r7, lr}
 80035b0:	b089      	sub	sp, #36	; 0x24
 80035b2:	af04      	add	r7, sp, #16
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	4608      	mov	r0, r1
 80035b8:	4611      	mov	r1, r2
 80035ba:	461a      	mov	r2, r3
 80035bc:	4603      	mov	r3, r0
 80035be:	70fb      	strb	r3, [r7, #3]
 80035c0:	460b      	mov	r3, r1
 80035c2:	70bb      	strb	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_HCD_HC_Init+0x28>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e076      	b.n	80036c4 <HAL_HCD_HC_Init+0x116>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	212c      	movs	r1, #44	; 0x2c
 80035e4:	fb01 f303 	mul.w	r3, r1, r3
 80035e8:	4413      	add	r3, r2
 80035ea:	333d      	adds	r3, #61	; 0x3d
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3338      	adds	r3, #56	; 0x38
 80035fe:	787a      	ldrb	r2, [r7, #1]
 8003600:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003602:	78fb      	ldrb	r3, [r7, #3]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	4413      	add	r3, r2
 800360e:	3340      	adds	r3, #64	; 0x40
 8003610:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003612:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	212c      	movs	r1, #44	; 0x2c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	3339      	adds	r3, #57	; 0x39
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	333f      	adds	r3, #63	; 0x3f
 8003634:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003638:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	78ba      	ldrb	r2, [r7, #2]
 800363e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003642:	b2d0      	uxtb	r0, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	333a      	adds	r3, #58	; 0x3a
 8003650:	4602      	mov	r2, r0
 8003652:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003654:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003658:	2b00      	cmp	r3, #0
 800365a:	da09      	bge.n	8003670 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	333b      	adds	r3, #59	; 0x3b
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	e008      	b.n	8003682 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	333b      	adds	r3, #59	; 0x3b
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	212c      	movs	r1, #44	; 0x2c
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	4413      	add	r3, r2
 800368e:	333c      	adds	r3, #60	; 0x3c
 8003690:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003694:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	787c      	ldrb	r4, [r7, #1]
 800369c:	78ba      	ldrb	r2, [r7, #2]
 800369e:	78f9      	ldrb	r1, [r7, #3]
 80036a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036a2:	9302      	str	r3, [sp, #8]
 80036a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	4623      	mov	r3, r4
 80036b2:	f006 f8af 	bl	8009814 <USB_HC_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd90      	pop	{r4, r7, pc}

080036cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_HCD_HC_Halt+0x1e>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e00f      	b.n	800370a <HAL_HCD_HC_Halt+0x3e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f006 faeb 	bl	8009cd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	4608      	mov	r0, r1
 800371e:	4611      	mov	r1, r2
 8003720:	461a      	mov	r2, r3
 8003722:	4603      	mov	r3, r0
 8003724:	70fb      	strb	r3, [r7, #3]
 8003726:	460b      	mov	r3, r1
 8003728:	70bb      	strb	r3, [r7, #2]
 800372a:	4613      	mov	r3, r2
 800372c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	212c      	movs	r1, #44	; 0x2c
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	4413      	add	r3, r2
 800373a:	333b      	adds	r3, #59	; 0x3b
 800373c:	78ba      	ldrb	r2, [r7, #2]
 800373e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	333f      	adds	r3, #63	; 0x3f
 800374e:	787a      	ldrb	r2, [r7, #1]
 8003750:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003752:	7c3b      	ldrb	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d112      	bne.n	800377e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	212c      	movs	r1, #44	; 0x2c
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	4413      	add	r3, r2
 8003764:	3342      	adds	r3, #66	; 0x42
 8003766:	2203      	movs	r2, #3
 8003768:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	212c      	movs	r1, #44	; 0x2c
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	333d      	adds	r3, #61	; 0x3d
 8003778:	7f3a      	ldrb	r2, [r7, #28]
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	e008      	b.n	8003790 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	3342      	adds	r3, #66	; 0x42
 800378c:	2202      	movs	r2, #2
 800378e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003790:	787b      	ldrb	r3, [r7, #1]
 8003792:	2b03      	cmp	r3, #3
 8003794:	f200 80c6 	bhi.w	8003924 <HAL_HCD_HC_SubmitRequest+0x210>
 8003798:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037b1 	.word	0x080037b1
 80037a4:	08003911 	.word	0x08003911
 80037a8:	08003815 	.word	0x08003815
 80037ac:	08003893 	.word	0x08003893
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80037b0:	7c3b      	ldrb	r3, [r7, #16]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	f040 80b8 	bne.w	8003928 <HAL_HCD_HC_SubmitRequest+0x214>
 80037b8:	78bb      	ldrb	r3, [r7, #2]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f040 80b4 	bne.w	8003928 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80037c0:	8b3b      	ldrh	r3, [r7, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3355      	adds	r3, #85	; 0x55
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3355      	adds	r3, #85	; 0x55
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	212c      	movs	r1, #44	; 0x2c
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	3342      	adds	r3, #66	; 0x42
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80037fe:	e093      	b.n	8003928 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	212c      	movs	r1, #44	; 0x2c
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	4413      	add	r3, r2
 800380c:	3342      	adds	r3, #66	; 0x42
 800380e:	2202      	movs	r2, #2
 8003810:	701a      	strb	r2, [r3, #0]
      break;
 8003812:	e089      	b.n	8003928 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003814:	78bb      	ldrb	r3, [r7, #2]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11d      	bne.n	8003856 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3355      	adds	r3, #85	; 0x55
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3342      	adds	r3, #66	; 0x42
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003840:	e073      	b.n	800392a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	3342      	adds	r3, #66	; 0x42
 8003850:	2202      	movs	r2, #2
 8003852:	701a      	strb	r2, [r3, #0]
      break;
 8003854:	e069      	b.n	800392a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3354      	adds	r3, #84	; 0x54
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	3342      	adds	r3, #66	; 0x42
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
      break;
 800387c:	e055      	b.n	800392a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	3342      	adds	r3, #66	; 0x42
 800388c:	2202      	movs	r2, #2
 800388e:	701a      	strb	r2, [r3, #0]
      break;
 8003890:	e04b      	b.n	800392a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003892:	78bb      	ldrb	r3, [r7, #2]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d11d      	bne.n	80038d4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	212c      	movs	r1, #44	; 0x2c
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3355      	adds	r3, #85	; 0x55
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3342      	adds	r3, #66	; 0x42
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038be:	e034      	b.n	800392a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3342      	adds	r3, #66	; 0x42
 80038ce:	2202      	movs	r2, #2
 80038d0:	701a      	strb	r2, [r3, #0]
      break;
 80038d2:	e02a      	b.n	800392a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3354      	adds	r3, #84	; 0x54
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3342      	adds	r3, #66	; 0x42
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
      break;
 80038fa:	e016      	b.n	800392a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3342      	adds	r3, #66	; 0x42
 800390a:	2202      	movs	r2, #2
 800390c:	701a      	strb	r2, [r3, #0]
      break;
 800390e:	e00c      	b.n	800392a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3342      	adds	r3, #66	; 0x42
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
      break;
 8003922:	e002      	b.n	800392a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003928:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800392a:	78fb      	ldrb	r3, [r7, #3]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	212c      	movs	r1, #44	; 0x2c
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	4413      	add	r3, r2
 8003936:	3344      	adds	r3, #68	; 0x44
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	8b3a      	ldrh	r2, [r7, #24]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	202c      	movs	r0, #44	; 0x2c
 8003944:	fb00 f303 	mul.w	r3, r0, r3
 8003948:	440b      	add	r3, r1
 800394a:	334c      	adds	r3, #76	; 0x4c
 800394c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	3360      	adds	r3, #96	; 0x60
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3350      	adds	r3, #80	; 0x50
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	3339      	adds	r3, #57	; 0x39
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	3361      	adds	r3, #97	; 0x61
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	222c      	movs	r2, #44	; 0x2c
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	3338      	adds	r3, #56	; 0x38
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	18d1      	adds	r1, r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	f006 f83e 	bl	8009a30 <USB_HC_StartXfer>
 80039b4:	4603      	mov	r3, r0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop

080039c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f005 fd57 	bl	800948a <USB_GetMode>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b01      	cmp	r3, #1
 80039e0:	f040 80ef 	bne.w	8003bc2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f005 fd3b 	bl	8009464 <USB_ReadInterrupts>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80e5 	beq.w	8003bc0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f005 fd32 	bl	8009464 <USB_ReadInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a0a:	d104      	bne.n	8003a16 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f005 fd22 	bl	8009464 <USB_ReadInterrupts>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2a:	d104      	bne.n	8003a36 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f005 fd12 	bl	8009464 <USB_ReadInterrupts>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4a:	d104      	bne.n	8003a56 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f005 fd02 	bl	8009464 <USB_ReadInterrupts>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d103      	bne.n	8003a72 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f005 fcf4 	bl	8009464 <USB_ReadInterrupts>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a86:	d115      	bne.n	8003ab4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003a90:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d108      	bne.n	8003ab4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f00b fc94 	bl	800f3d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2101      	movs	r1, #1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f005 fdea 	bl	8009688 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f005 fcd3 	bl	8009464 <USB_ReadInterrupts>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac8:	d102      	bne.n	8003ad0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f001 f9ff 	bl	8004ece <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f005 fcc5 	bl	8009464 <USB_ReadInterrupts>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d106      	bne.n	8003af2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f00b fc57 	bl	800f398 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2208      	movs	r2, #8
 8003af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f005 fcb4 	bl	8009464 <USB_ReadInterrupts>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d101      	bne.n	8003b0a <HAL_HCD_IRQHandler+0x14a>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_HCD_IRQHandler+0x14c>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d012      	beq.n	8003b36 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0210 	bic.w	r2, r2, #16
 8003b1e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f001 f902 	bl	8004d2a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0210 	orr.w	r2, r2, #16
 8003b34:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f005 fc92 	bl	8009464 <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b4a:	d13a      	bne.n	8003bc2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f006 f8af 	bl	8009cb4 <USB_HC_ReadInterrupt>
 8003b56:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	e025      	b.n	8003baa <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d018      	beq.n	8003ba4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b88:	d106      	bne.n	8003b98 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f8ab 	bl	8003cec <HCD_HC_IN_IRQHandler>
 8003b96:	e005      	b.n	8003ba4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fcc6 	bl	8004530 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d3d4      	bcc.n	8003b5e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bbc:	615a      	str	r2, [r3, #20]
 8003bbe:	e000      	b.n	8003bc2 <HAL_HCD_IRQHandler+0x202>
      return;
 8003bc0:	bf00      	nop
    }
  }
}
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_HCD_Start+0x16>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e013      	b.n	8003c06 <HAL_HCD_Start+0x3e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f005 fb47 	bl	800927e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f005 fdaa 	bl	8009750 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_HCD_Stop+0x16>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e00d      	b.n	8003c40 <HAL_HCD_Stop+0x32>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f006 f9a9 	bl	8009f88 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f005 fd51 	bl	80096fc <USB_ResetPort>
 8003c5a:	4603      	mov	r3, r0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	212c      	movs	r1, #44	; 0x2c
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3360      	adds	r3, #96	; 0x60
 8003c7e:	781b      	ldrb	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	212c      	movs	r1, #44	; 0x2c
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3350      	adds	r3, #80	; 0x50
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f005 fd95 	bl	80097f0 <USB_GetCurrentFrame>
 8003cc6:	4603      	mov	r3, r0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f005 fd70 	bl	80097c2 <USB_GetHostSpeed>
 8003ce2:	4603      	mov	r3, r0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d119      	bne.n	8003d50 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2304      	movs	r3, #4
 8003d2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	60d3      	str	r3, [r2, #12]
 8003d4e:	e101      	b.n	8003f54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d66:	d12b      	bne.n	8003dc0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d74:	461a      	mov	r2, r3
 8003d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	212c      	movs	r1, #44	; 0x2c
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	3361      	adds	r3, #97	; 0x61
 8003d8a:	2207      	movs	r2, #7
 8003d8c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	0151      	lsls	r1, r2, #5
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	440a      	add	r2, r1
 8003da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f005 ff8c 	bl	8009cd6 <USB_HC_Halt>
 8003dbe:	e0c9      	b.n	8003f54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d109      	bne.n	8003dea <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de2:	461a      	mov	r2, r3
 8003de4:	2320      	movs	r3, #32
 8003de6:	6093      	str	r3, [r2, #8]
 8003de8:	e0b4      	b.n	8003f54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d133      	bne.n	8003e68 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	0151      	lsls	r1, r2, #5
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	440a      	add	r2, r1
 8003e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e1a:	f043 0302 	orr.w	r3, r3, #2
 8003e1e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	212c      	movs	r1, #44	; 0x2c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3361      	adds	r3, #97	; 0x61
 8003e2e:	2205      	movs	r2, #5
 8003e30:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2310      	movs	r3, #16
 8003e42:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e50:	461a      	mov	r2, r3
 8003e52:	2308      	movs	r3, #8
 8003e54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f005 ff38 	bl	8009cd6 <USB_HC_Halt>
 8003e66:	e075      	b.n	8003f54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7e:	d134      	bne.n	8003eea <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	212c      	movs	r1, #44	; 0x2c
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	3361      	adds	r3, #97	; 0x61
 8003eae:	2208      	movs	r2, #8
 8003eb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ed6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f005 fef7 	bl	8009cd6 <USB_HC_Halt>
 8003ee8:	e034      	b.n	8003f54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efc:	2b80      	cmp	r3, #128	; 0x80
 8003efe:	d129      	bne.n	8003f54 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	0151      	lsls	r1, r2, #5
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	440a      	add	r2, r1
 8003f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f1a:	f043 0302 	orr.w	r3, r3, #2
 8003f1e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	212c      	movs	r1, #44	; 0x2c
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3361      	adds	r3, #97	; 0x61
 8003f2e:	2206      	movs	r2, #6
 8003f30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f005 feca 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f6a:	d122      	bne.n	8003fb2 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	0151      	lsls	r1, r2, #5
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	440a      	add	r2, r1
 8003f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f005 fe9d 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fae:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003fb0:	e2ba      	b.n	8004528 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	f040 811b 	bne.w	8004200 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d019      	beq.n	8004006 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	3348      	adds	r3, #72	; 0x48
 8003fe0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	0159      	lsls	r1, r3, #5
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	440b      	add	r3, r1
 8003fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ff4:	1ad2      	subs	r2, r2, r3
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	202c      	movs	r0, #44	; 0x2c
 8003ffc:	fb00 f303 	mul.w	r3, r0, r3
 8004000:	440b      	add	r3, r1
 8004002:	3350      	adds	r3, #80	; 0x50
 8004004:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	3361      	adds	r3, #97	; 0x61
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	212c      	movs	r1, #44	; 0x2c
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	335c      	adds	r3, #92	; 0x5c
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4413      	add	r3, r2
 8004032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004036:	461a      	mov	r2, r3
 8004038:	2301      	movs	r3, #1
 800403a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	212c      	movs	r1, #44	; 0x2c
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	333f      	adds	r3, #63	; 0x3f
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	212c      	movs	r1, #44	; 0x2c
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	4413      	add	r3, r2
 800405c:	333f      	adds	r3, #63	; 0x3f
 800405e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004060:	2b02      	cmp	r3, #2
 8004062:	d121      	bne.n	80040a8 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	0151      	lsls	r1, r2, #5
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	440a      	add	r2, r1
 800407a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800407e:	f043 0302 	orr.w	r3, r3, #2
 8004082:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f005 fe21 	bl	8009cd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4413      	add	r3, r2
 800409c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a0:	461a      	mov	r2, r3
 80040a2:	2310      	movs	r3, #16
 80040a4:	6093      	str	r3, [r2, #8]
 80040a6:	e066      	b.n	8004176 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	333f      	adds	r3, #63	; 0x3f
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d127      	bne.n	800410c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	0151      	lsls	r1, r2, #5
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	440a      	add	r2, r1
 80040d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040da:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	212c      	movs	r1, #44	; 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	3360      	adds	r3, #96	; 0x60
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	b2d9      	uxtb	r1, r3
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	202c      	movs	r0, #44	; 0x2c
 80040f8:	fb00 f303 	mul.w	r3, r0, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3360      	adds	r3, #96	; 0x60
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f00b f971 	bl	800f3ec <HAL_HCD_HC_NotifyURBChange_Callback>
 800410a:	e034      	b.n	8004176 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	333f      	adds	r3, #63	; 0x3f
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d12a      	bne.n	8004176 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	3360      	adds	r3, #96	; 0x60
 800412e:	2201      	movs	r2, #1
 8004130:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	212c      	movs	r1, #44	; 0x2c
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	4413      	add	r3, r2
 800413e:	3354      	adds	r3, #84	; 0x54
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	f083 0301 	eor.w	r3, r3, #1
 8004146:	b2d8      	uxtb	r0, r3
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	3354      	adds	r3, #84	; 0x54
 8004156:	4602      	mov	r2, r0
 8004158:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	b2d9      	uxtb	r1, r3
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	202c      	movs	r0, #44	; 0x2c
 8004164:	fb00 f303 	mul.w	r3, r0, r3
 8004168:	4413      	add	r3, r2
 800416a:	3360      	adds	r3, #96	; 0x60
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f00b f93b 	bl	800f3ec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d12b      	bne.n	80041d6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	3348      	adds	r3, #72	; 0x48
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	202c      	movs	r0, #44	; 0x2c
 8004194:	fb00 f202 	mul.w	r2, r0, r2
 8004198:	440a      	add	r2, r1
 800419a:	3240      	adds	r2, #64	; 0x40
 800419c:	8812      	ldrh	r2, [r2, #0]
 800419e:	fbb3 f3f2 	udiv	r3, r3, r2
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 81be 	beq.w	8004528 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3354      	adds	r3, #84	; 0x54
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	f083 0301 	eor.w	r3, r3, #1
 80041c0:	b2d8      	uxtb	r0, r3
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	212c      	movs	r1, #44	; 0x2c
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	3354      	adds	r3, #84	; 0x54
 80041d0:	4602      	mov	r2, r0
 80041d2:	701a      	strb	r2, [r3, #0]
}
 80041d4:	e1a8      	b.n	8004528 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	212c      	movs	r1, #44	; 0x2c
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	3354      	adds	r3, #84	; 0x54
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	f083 0301 	eor.w	r3, r3, #1
 80041ea:	b2d8      	uxtb	r0, r3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	3354      	adds	r3, #84	; 0x54
 80041fa:	4602      	mov	r2, r0
 80041fc:	701a      	strb	r2, [r3, #0]
}
 80041fe:	e193      	b.n	8004528 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	f040 8106 	bne.w	8004424 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	0151      	lsls	r1, r2, #5
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	440a      	add	r2, r1
 800422e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004232:	f023 0302 	bic.w	r3, r3, #2
 8004236:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	3361      	adds	r3, #97	; 0x61
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d109      	bne.n	8004260 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	212c      	movs	r1, #44	; 0x2c
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	4413      	add	r3, r2
 8004258:	3360      	adds	r3, #96	; 0x60
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e0c9      	b.n	80043f4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	3361      	adds	r3, #97	; 0x61
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b05      	cmp	r3, #5
 8004272:	d109      	bne.n	8004288 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	212c      	movs	r1, #44	; 0x2c
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	4413      	add	r3, r2
 8004280:	3360      	adds	r3, #96	; 0x60
 8004282:	2205      	movs	r2, #5
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	e0b5      	b.n	80043f4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	3361      	adds	r3, #97	; 0x61
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b06      	cmp	r3, #6
 800429a:	d009      	beq.n	80042b0 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	212c      	movs	r1, #44	; 0x2c
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	3361      	adds	r3, #97	; 0x61
 80042aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d150      	bne.n	8004352 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	212c      	movs	r1, #44	; 0x2c
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	335c      	adds	r3, #92	; 0x5c
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	202c      	movs	r0, #44	; 0x2c
 80042c8:	fb00 f303 	mul.w	r3, r0, r3
 80042cc:	440b      	add	r3, r1
 80042ce:	335c      	adds	r3, #92	; 0x5c
 80042d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	335c      	adds	r3, #92	; 0x5c
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d912      	bls.n	800430c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	212c      	movs	r1, #44	; 0x2c
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	335c      	adds	r3, #92	; 0x5c
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	212c      	movs	r1, #44	; 0x2c
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	4413      	add	r3, r2
 8004304:	3360      	adds	r3, #96	; 0x60
 8004306:	2204      	movs	r2, #4
 8004308:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800430a:	e073      	b.n	80043f4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	3360      	adds	r3, #96	; 0x60
 800431a:	2202      	movs	r2, #2
 800431c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004334:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800433c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4413      	add	r3, r2
 8004346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434a:	461a      	mov	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004350:	e050      	b.n	80043f4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	212c      	movs	r1, #44	; 0x2c
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	4413      	add	r3, r2
 800435e:	3361      	adds	r3, #97	; 0x61
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d122      	bne.n	80043ac <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	212c      	movs	r1, #44	; 0x2c
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	3360      	adds	r3, #96	; 0x60
 8004374:	2202      	movs	r2, #2
 8004376:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800438e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004396:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a4:	461a      	mov	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e023      	b.n	80043f4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	212c      	movs	r1, #44	; 0x2c
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	3361      	adds	r3, #97	; 0x61
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b07      	cmp	r3, #7
 80043be:	d119      	bne.n	80043f4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	212c      	movs	r1, #44	; 0x2c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	335c      	adds	r3, #92	; 0x5c
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	202c      	movs	r0, #44	; 0x2c
 80043d8:	fb00 f303 	mul.w	r3, r0, r3
 80043dc:	440b      	add	r3, r1
 80043de:	335c      	adds	r3, #92	; 0x5c
 80043e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	212c      	movs	r1, #44	; 0x2c
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	3360      	adds	r3, #96	; 0x60
 80043f0:	2204      	movs	r2, #4
 80043f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004400:	461a      	mov	r2, r3
 8004402:	2302      	movs	r3, #2
 8004404:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	b2d9      	uxtb	r1, r3
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	202c      	movs	r0, #44	; 0x2c
 8004410:	fb00 f303 	mul.w	r3, r0, r3
 8004414:	4413      	add	r3, r2
 8004416:	3360      	adds	r3, #96	; 0x60
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f00a ffe5 	bl	800f3ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004422:	e081      	b.n	8004528 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b10      	cmp	r3, #16
 8004438:	d176      	bne.n	8004528 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	212c      	movs	r1, #44	; 0x2c
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	4413      	add	r3, r2
 8004446:	333f      	adds	r3, #63	; 0x3f
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d121      	bne.n	8004492 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	212c      	movs	r1, #44	; 0x2c
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	335c      	adds	r3, #92	; 0x5c
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4413      	add	r3, r2
 8004468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	440a      	add	r2, r1
 8004476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800447a:	f043 0302 	orr.w	r3, r3, #2
 800447e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f005 fc23 	bl	8009cd6 <USB_HC_Halt>
 8004490:	e041      	b.n	8004516 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	212c      	movs	r1, #44	; 0x2c
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	4413      	add	r3, r2
 800449e:	333f      	adds	r3, #63	; 0x3f
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	212c      	movs	r1, #44	; 0x2c
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	4413      	add	r3, r2
 80044b2:	333f      	adds	r3, #63	; 0x3f
 80044b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d12d      	bne.n	8004516 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	212c      	movs	r1, #44	; 0x2c
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	4413      	add	r3, r2
 80044c6:	335c      	adds	r3, #92	; 0x5c
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d120      	bne.n	8004516 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	3361      	adds	r3, #97	; 0x61
 80044e2:	2203      	movs	r2, #3
 80044e4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004500:	f043 0302 	orr.w	r3, r3, #2
 8004504:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f005 fbe0 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4413      	add	r3, r2
 800451e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004522:	461a      	mov	r2, r3
 8004524:	2310      	movs	r3, #16
 8004526:	6093      	str	r3, [r2, #8]
}
 8004528:	bf00      	nop
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	4413      	add	r3, r2
 8004552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b04      	cmp	r3, #4
 800455e:	d119      	bne.n	8004594 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456c:	461a      	mov	r2, r3
 800456e:	2304      	movs	r3, #4
 8004570:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	440a      	add	r2, r1
 8004588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800458c:	f043 0302 	orr.w	r3, r3, #2
 8004590:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004592:	e3c6      	b.n	8004d22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d13e      	bne.n	8004628 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b6:	461a      	mov	r2, r3
 80045b8:	2320      	movs	r3, #32
 80045ba:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	212c      	movs	r1, #44	; 0x2c
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	333d      	adds	r3, #61	; 0x3d
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	f040 83a8 	bne.w	8004d22 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	212c      	movs	r1, #44	; 0x2c
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	333d      	adds	r3, #61	; 0x3d
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	212c      	movs	r1, #44	; 0x2c
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	3360      	adds	r3, #96	; 0x60
 80045f2:	2202      	movs	r2, #2
 80045f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	440a      	add	r2, r1
 800460c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f005 fb58 	bl	8009cd6 <USB_HC_Halt>
}
 8004626:	e37c      	b.n	8004d22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800463a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463e:	d122      	bne.n	8004686 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	440a      	add	r2, r1
 8004656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800465a:	f043 0302 	orr.w	r3, r3, #2
 800465e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	4611      	mov	r1, r2
 800466a:	4618      	mov	r0, r3
 800466c:	f005 fb33 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	461a      	mov	r2, r3
 800467e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004682:	6093      	str	r3, [r2, #8]
}
 8004684:	e34d      	b.n	8004d22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	4413      	add	r3, r2
 800468e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b01      	cmp	r3, #1
 800469a:	d150      	bne.n	800473e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	212c      	movs	r1, #44	; 0x2c
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	335c      	adds	r3, #92	; 0x5c
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d111      	bne.n	80046e8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	212c      	movs	r1, #44	; 0x2c
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	333d      	adds	r3, #61	; 0x3d
 80046d2:	2201      	movs	r2, #1
 80046d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e2:	461a      	mov	r2, r3
 80046e4:	2340      	movs	r3, #64	; 0x40
 80046e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004702:	f043 0302 	orr.w	r3, r3, #2
 8004706:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f005 fadf 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	4413      	add	r3, r2
 8004720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004724:	461a      	mov	r2, r3
 8004726:	2301      	movs	r3, #1
 8004728:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	212c      	movs	r1, #44	; 0x2c
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	4413      	add	r3, r2
 8004736:	3361      	adds	r3, #97	; 0x61
 8004738:	2201      	movs	r2, #1
 800473a:	701a      	strb	r2, [r3, #0]
}
 800473c:	e2f1      	b.n	8004d22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	4413      	add	r3, r2
 8004746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d13c      	bne.n	80047ce <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	3361      	adds	r3, #97	; 0x61
 8004762:	2204      	movs	r2, #4
 8004764:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	333d      	adds	r3, #61	; 0x3d
 8004774:	2201      	movs	r2, #1
 8004776:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	212c      	movs	r1, #44	; 0x2c
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	335c      	adds	r3, #92	; 0x5c
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	4413      	add	r3, r2
 8004792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047a4:	f043 0302 	orr.w	r3, r3, #2
 80047a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f005 fa8e 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c6:	461a      	mov	r2, r3
 80047c8:	2340      	movs	r3, #64	; 0x40
 80047ca:	6093      	str	r3, [r2, #8]
}
 80047cc:	e2a9      	b.n	8004d22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d12a      	bne.n	800483a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	461a      	mov	r2, r3
 80047f2:	2308      	movs	r3, #8
 80047f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	440a      	add	r2, r1
 800480c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f005 fa58 	bl	8009cd6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	212c      	movs	r1, #44	; 0x2c
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	4413      	add	r3, r2
 8004832:	3361      	adds	r3, #97	; 0x61
 8004834:	2205      	movs	r2, #5
 8004836:	701a      	strb	r2, [r3, #0]
}
 8004838:	e273      	b.n	8004d22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b10      	cmp	r3, #16
 800484e:	d150      	bne.n	80048f2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	212c      	movs	r1, #44	; 0x2c
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	4413      	add	r3, r2
 800485c:	335c      	adds	r3, #92	; 0x5c
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	212c      	movs	r1, #44	; 0x2c
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	4413      	add	r3, r2
 800486e:	3361      	adds	r3, #97	; 0x61
 8004870:	2203      	movs	r2, #3
 8004872:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	212c      	movs	r1, #44	; 0x2c
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	4413      	add	r3, r2
 8004880:	333d      	adds	r3, #61	; 0x3d
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d112      	bne.n	80048ae <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	333c      	adds	r3, #60	; 0x3c
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d108      	bne.n	80048ae <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	333d      	adds	r3, #61	; 0x3d
 80048aa:	2201      	movs	r2, #1
 80048ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048c8:	f043 0302 	orr.w	r3, r3, #2
 80048cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	4611      	mov	r1, r2
 80048d8:	4618      	mov	r0, r3
 80048da:	f005 f9fc 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	461a      	mov	r2, r3
 80048ec:	2310      	movs	r3, #16
 80048ee:	6093      	str	r3, [r2, #8]
}
 80048f0:	e217      	b.n	8004d22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d174      	bne.n	80049f2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d121      	bne.n	8004954 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	212c      	movs	r1, #44	; 0x2c
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	4413      	add	r3, r2
 800491c:	3361      	adds	r3, #97	; 0x61
 800491e:	2206      	movs	r2, #6
 8004920:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	4413      	add	r3, r2
 800492a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	440a      	add	r2, r1
 8004938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800493c:	f043 0302 	orr.w	r3, r3, #2
 8004940:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f005 f9c2 	bl	8009cd6 <USB_HC_Halt>
 8004952:	e044      	b.n	80049de <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	212c      	movs	r1, #44	; 0x2c
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	4413      	add	r3, r2
 8004960:	335c      	adds	r3, #92	; 0x5c
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	202c      	movs	r0, #44	; 0x2c
 800496c:	fb00 f303 	mul.w	r3, r0, r3
 8004970:	440b      	add	r3, r1
 8004972:	335c      	adds	r3, #92	; 0x5c
 8004974:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	335c      	adds	r3, #92	; 0x5c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d920      	bls.n	80049cc <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	212c      	movs	r1, #44	; 0x2c
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	4413      	add	r3, r2
 8004996:	335c      	adds	r3, #92	; 0x5c
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	3360      	adds	r3, #96	; 0x60
 80049aa:	2204      	movs	r2, #4
 80049ac:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	b2d9      	uxtb	r1, r3
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	202c      	movs	r0, #44	; 0x2c
 80049b8:	fb00 f303 	mul.w	r3, r0, r3
 80049bc:	4413      	add	r3, r2
 80049be:	3360      	adds	r3, #96	; 0x60
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f00a fd11 	bl	800f3ec <HAL_HCD_HC_NotifyURBChange_Callback>
 80049ca:	e008      	b.n	80049de <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	212c      	movs	r1, #44	; 0x2c
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	3360      	adds	r3, #96	; 0x60
 80049da:	2202      	movs	r2, #2
 80049dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	461a      	mov	r2, r3
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	6093      	str	r3, [r2, #8]
}
 80049f0:	e197      	b.n	8004d22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a08:	d134      	bne.n	8004a74 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a24:	f043 0302 	orr.w	r3, r3, #2
 8004a28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f005 f94e 	bl	8009cd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a46:	461a      	mov	r2, r3
 8004a48:	2310      	movs	r3, #16
 8004a4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	212c      	movs	r1, #44	; 0x2c
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3361      	adds	r3, #97	; 0x61
 8004a6e:	2208      	movs	r2, #8
 8004a70:	701a      	strb	r2, [r3, #0]
}
 8004a72:	e156      	b.n	8004d22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	f040 814b 	bne.w	8004d22 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	0151      	lsls	r1, r2, #5
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	440a      	add	r2, r1
 8004aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aa6:	f023 0302 	bic.w	r3, r3, #2
 8004aaa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	212c      	movs	r1, #44	; 0x2c
 8004ab2:	fb01 f303 	mul.w	r3, r1, r3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3361      	adds	r3, #97	; 0x61
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d179      	bne.n	8004bb4 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	212c      	movs	r1, #44	; 0x2c
 8004ac6:	fb01 f303 	mul.w	r3, r1, r3
 8004aca:	4413      	add	r3, r2
 8004acc:	3360      	adds	r3, #96	; 0x60
 8004ace:	2201      	movs	r2, #1
 8004ad0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	212c      	movs	r1, #44	; 0x2c
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	4413      	add	r3, r2
 8004ade:	333f      	adds	r3, #63	; 0x3f
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d00a      	beq.n	8004afc <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	333f      	adds	r3, #63	; 0x3f
 8004af4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	f040 80fc 	bne.w	8004cf4 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d142      	bne.n	8004b8a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	212c      	movs	r1, #44	; 0x2c
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	334c      	adds	r3, #76	; 0x4c
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80ed 	beq.w	8004cf4 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	334c      	adds	r3, #76	; 0x4c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	202c      	movs	r0, #44	; 0x2c
 8004b30:	fb00 f202 	mul.w	r2, r0, r2
 8004b34:	440a      	add	r2, r1
 8004b36:	3240      	adds	r2, #64	; 0x40
 8004b38:	8812      	ldrh	r2, [r2, #0]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	202c      	movs	r0, #44	; 0x2c
 8004b44:	fb00 f202 	mul.w	r2, r0, r2
 8004b48:	440a      	add	r2, r1
 8004b4a:	3240      	adds	r2, #64	; 0x40
 8004b4c:	8812      	ldrh	r2, [r2, #0]
 8004b4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80ca 	beq.w	8004cf4 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	212c      	movs	r1, #44	; 0x2c
 8004b66:	fb01 f303 	mul.w	r3, r1, r3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3355      	adds	r3, #85	; 0x55
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f083 0301 	eor.w	r3, r3, #1
 8004b74:	b2d8      	uxtb	r0, r3
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	212c      	movs	r1, #44	; 0x2c
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	3355      	adds	r3, #85	; 0x55
 8004b84:	4602      	mov	r2, r0
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	e0b4      	b.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	212c      	movs	r1, #44	; 0x2c
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	3355      	adds	r3, #85	; 0x55
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	f083 0301 	eor.w	r3, r3, #1
 8004b9e:	b2d8      	uxtb	r0, r3
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	212c      	movs	r1, #44	; 0x2c
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	3355      	adds	r3, #85	; 0x55
 8004bae:	4602      	mov	r2, r0
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	e09f      	b.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	212c      	movs	r1, #44	; 0x2c
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3361      	adds	r3, #97	; 0x61
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d109      	bne.n	8004bdc <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	212c      	movs	r1, #44	; 0x2c
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3360      	adds	r3, #96	; 0x60
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e08b      	b.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	3361      	adds	r3, #97	; 0x61
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d109      	bne.n	8004c04 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	212c      	movs	r1, #44	; 0x2c
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3360      	adds	r3, #96	; 0x60
 8004bfe:	2202      	movs	r2, #2
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	e077      	b.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	212c      	movs	r1, #44	; 0x2c
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	4413      	add	r3, r2
 8004c10:	3361      	adds	r3, #97	; 0x61
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d109      	bne.n	8004c2c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	212c      	movs	r1, #44	; 0x2c
 8004c1e:	fb01 f303 	mul.w	r3, r1, r3
 8004c22:	4413      	add	r3, r2
 8004c24:	3360      	adds	r3, #96	; 0x60
 8004c26:	2205      	movs	r2, #5
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e063      	b.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	212c      	movs	r1, #44	; 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3361      	adds	r3, #97	; 0x61
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b06      	cmp	r3, #6
 8004c3e:	d009      	beq.n	8004c54 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	212c      	movs	r1, #44	; 0x2c
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3361      	adds	r3, #97	; 0x61
 8004c4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d14f      	bne.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	212c      	movs	r1, #44	; 0x2c
 8004c5a:	fb01 f303 	mul.w	r3, r1, r3
 8004c5e:	4413      	add	r3, r2
 8004c60:	335c      	adds	r3, #92	; 0x5c
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	202c      	movs	r0, #44	; 0x2c
 8004c6c:	fb00 f303 	mul.w	r3, r0, r3
 8004c70:	440b      	add	r3, r1
 8004c72:	335c      	adds	r3, #92	; 0x5c
 8004c74:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	212c      	movs	r1, #44	; 0x2c
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	4413      	add	r3, r2
 8004c82:	335c      	adds	r3, #92	; 0x5c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d912      	bls.n	8004cb0 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	212c      	movs	r1, #44	; 0x2c
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	4413      	add	r3, r2
 8004c96:	335c      	adds	r3, #92	; 0x5c
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	212c      	movs	r1, #44	; 0x2c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3360      	adds	r3, #96	; 0x60
 8004caa:	2204      	movs	r2, #4
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e021      	b.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	212c      	movs	r1, #44	; 0x2c
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	3360      	adds	r3, #96	; 0x60
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cd8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ce0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cee:	461a      	mov	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d00:	461a      	mov	r2, r3
 8004d02:	2302      	movs	r3, #2
 8004d04:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	b2d9      	uxtb	r1, r3
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	202c      	movs	r0, #44	; 0x2c
 8004d10:	fb00 f303 	mul.w	r3, r0, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	3360      	adds	r3, #96	; 0x60
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f00a fb65 	bl	800f3ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d22:	bf00      	nop
 8004d24:	3720      	adds	r7, #32
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b08a      	sub	sp, #40	; 0x28
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	0c5b      	lsrs	r3, r3, #17
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d5e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d004      	beq.n	8004d70 <HCD_RXQLVL_IRQHandler+0x46>
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b05      	cmp	r3, #5
 8004d6a:	f000 80a9 	beq.w	8004ec0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004d6e:	e0aa      	b.n	8004ec6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 80a6 	beq.w	8004ec4 <HCD_RXQLVL_IRQHandler+0x19a>
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	212c      	movs	r1, #44	; 0x2c
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	4413      	add	r3, r2
 8004d84:	3344      	adds	r3, #68	; 0x44
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 809b 	beq.w	8004ec4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	212c      	movs	r1, #44	; 0x2c
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	4413      	add	r3, r2
 8004d9a:	3350      	adds	r3, #80	; 0x50
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	441a      	add	r2, r3
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	202c      	movs	r0, #44	; 0x2c
 8004da8:	fb00 f303 	mul.w	r3, r0, r3
 8004dac:	440b      	add	r3, r1
 8004dae:	334c      	adds	r3, #76	; 0x4c
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d87a      	bhi.n	8004eac <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3344      	adds	r3, #68	; 0x44
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	b292      	uxth	r2, r2
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f004 fb1f 	bl	8009412 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	212c      	movs	r1, #44	; 0x2c
 8004dda:	fb01 f303 	mul.w	r3, r1, r3
 8004dde:	4413      	add	r3, r2
 8004de0:	3344      	adds	r3, #68	; 0x44
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	441a      	add	r2, r3
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	202c      	movs	r0, #44	; 0x2c
 8004dee:	fb00 f303 	mul.w	r3, r0, r3
 8004df2:	440b      	add	r3, r1
 8004df4:	3344      	adds	r3, #68	; 0x44
 8004df6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	212c      	movs	r1, #44	; 0x2c
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	3350      	adds	r3, #80	; 0x50
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	202c      	movs	r0, #44	; 0x2c
 8004e12:	fb00 f303 	mul.w	r3, r0, r3
 8004e16:	440b      	add	r3, r1
 8004e18:	3350      	adds	r3, #80	; 0x50
 8004e1a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	0cdb      	lsrs	r3, r3, #19
 8004e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e30:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	212c      	movs	r1, #44	; 0x2c
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3340      	adds	r3, #64	; 0x40
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d13c      	bne.n	8004ec4 <HCD_RXQLVL_IRQHandler+0x19a>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d039      	beq.n	8004ec4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e66:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e6e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3354      	adds	r3, #84	; 0x54
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	f083 0301 	eor.w	r3, r3, #1
 8004e96:	b2d8      	uxtb	r0, r3
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	212c      	movs	r1, #44	; 0x2c
 8004e9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	3354      	adds	r3, #84	; 0x54
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	701a      	strb	r2, [r3, #0]
      break;
 8004eaa:	e00b      	b.n	8004ec4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	212c      	movs	r1, #44	; 0x2c
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3360      	adds	r3, #96	; 0x60
 8004eba:	2204      	movs	r2, #4
 8004ebc:	701a      	strb	r2, [r3, #0]
      break;
 8004ebe:	e001      	b.n	8004ec4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004ec0:	bf00      	nop
 8004ec2:	e000      	b.n	8004ec6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004ec4:	bf00      	nop
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b086      	sub	sp, #24
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004efa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d10b      	bne.n	8004f1e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d102      	bne.n	8004f16 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f00a fa4f 	bl	800f3b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d132      	bne.n	8004f8e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f043 0308 	orr.w	r3, r3, #8
 8004f2e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d126      	bne.n	8004f88 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d113      	bne.n	8004f6a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004f48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f4c:	d106      	bne.n	8004f5c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2102      	movs	r1, #2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f004 fb97 	bl	8009688 <USB_InitFSLSPClkSel>
 8004f5a:	e011      	b.n	8004f80 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2101      	movs	r1, #1
 8004f62:	4618      	mov	r0, r3
 8004f64:	f004 fb90 	bl	8009688 <USB_InitFSLSPClkSel>
 8004f68:	e00a      	b.n	8004f80 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d106      	bne.n	8004f80 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004f7e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f00a fa45 	bl	800f410 <HAL_HCD_PortEnabled_Callback>
 8004f86:	e002      	b.n	8004f8e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f00a fa4f 	bl	800f42c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d103      	bne.n	8004fa0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f043 0320 	orr.w	r3, r3, #32
 8004f9e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6013      	str	r3, [r2, #0]
}
 8004fac:	bf00      	nop
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e12b      	b.n	800521e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fd fbd6 	bl	800278c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2224      	movs	r2, #36	; 0x24
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005018:	f002 fb26 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 800501c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4a81      	ldr	r2, [pc, #516]	; (8005228 <HAL_I2C_Init+0x274>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d807      	bhi.n	8005038 <HAL_I2C_Init+0x84>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a80      	ldr	r2, [pc, #512]	; (800522c <HAL_I2C_Init+0x278>)
 800502c:	4293      	cmp	r3, r2
 800502e:	bf94      	ite	ls
 8005030:	2301      	movls	r3, #1
 8005032:	2300      	movhi	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	e006      	b.n	8005046 <HAL_I2C_Init+0x92>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a7d      	ldr	r2, [pc, #500]	; (8005230 <HAL_I2C_Init+0x27c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	bf94      	ite	ls
 8005040:	2301      	movls	r3, #1
 8005042:	2300      	movhi	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0e7      	b.n	800521e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4a78      	ldr	r2, [pc, #480]	; (8005234 <HAL_I2C_Init+0x280>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	0c9b      	lsrs	r3, r3, #18
 8005058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4a6a      	ldr	r2, [pc, #424]	; (8005228 <HAL_I2C_Init+0x274>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d802      	bhi.n	8005088 <HAL_I2C_Init+0xd4>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	3301      	adds	r3, #1
 8005086:	e009      	b.n	800509c <HAL_I2C_Init+0xe8>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	4a69      	ldr	r2, [pc, #420]	; (8005238 <HAL_I2C_Init+0x284>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	099b      	lsrs	r3, r3, #6
 800509a:	3301      	adds	r3, #1
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	495c      	ldr	r1, [pc, #368]	; (8005228 <HAL_I2C_Init+0x274>)
 80050b8:	428b      	cmp	r3, r1
 80050ba:	d819      	bhi.n	80050f0 <HAL_I2C_Init+0x13c>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1e59      	subs	r1, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ca:	1c59      	adds	r1, r3, #1
 80050cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050d0:	400b      	ands	r3, r1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_I2C_Init+0x138>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	1e59      	subs	r1, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80050e4:	3301      	adds	r3, #1
 80050e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ea:	e051      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 80050ec:	2304      	movs	r3, #4
 80050ee:	e04f      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d111      	bne.n	800511c <HAL_I2C_Init+0x168>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1e58      	subs	r0, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6859      	ldr	r1, [r3, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	440b      	add	r3, r1
 8005106:	fbb0 f3f3 	udiv	r3, r0, r3
 800510a:	3301      	adds	r3, #1
 800510c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e012      	b.n	8005142 <HAL_I2C_Init+0x18e>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1e58      	subs	r0, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6859      	ldr	r1, [r3, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	0099      	lsls	r1, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005132:	3301      	adds	r3, #1
 8005134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Init+0x196>
 8005146:	2301      	movs	r3, #1
 8005148:	e022      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10e      	bne.n	8005170 <HAL_I2C_Init+0x1bc>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1e58      	subs	r0, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6859      	ldr	r1, [r3, #4]
 800515a:	460b      	mov	r3, r1
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	440b      	add	r3, r1
 8005160:	fbb0 f3f3 	udiv	r3, r0, r3
 8005164:	3301      	adds	r3, #1
 8005166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516e:	e00f      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	1e58      	subs	r0, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	0099      	lsls	r1, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	fbb0 f3f3 	udiv	r3, r0, r3
 8005186:	3301      	adds	r3, #1
 8005188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	6809      	ldr	r1, [r1, #0]
 8005194:	4313      	orrs	r3, r2
 8005196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69da      	ldr	r2, [r3, #28]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6911      	ldr	r1, [r2, #16]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	68d2      	ldr	r2, [r2, #12]
 80051ca:	4311      	orrs	r1, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695a      	ldr	r2, [r3, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	000186a0 	.word	0x000186a0
 800522c:	001e847f 	.word	0x001e847f
 8005230:	003d08ff 	.word	0x003d08ff
 8005234:	431bde83 	.word	0x431bde83
 8005238:	10624dd3 	.word	0x10624dd3

0800523c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	461a      	mov	r2, r3
 8005248:	460b      	mov	r3, r1
 800524a:	817b      	strh	r3, [r7, #10]
 800524c:	4613      	mov	r3, r2
 800524e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005250:	f7fd fdd8 	bl	8002e04 <HAL_GetTick>
 8005254:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b20      	cmp	r3, #32
 8005260:	f040 80e0 	bne.w	8005424 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	2319      	movs	r3, #25
 800526a:	2201      	movs	r2, #1
 800526c:	4970      	ldr	r1, [pc, #448]	; (8005430 <HAL_I2C_Master_Transmit+0x1f4>)
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 ff30 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
 800527c:	e0d3      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_I2C_Master_Transmit+0x50>
 8005288:	2302      	movs	r3, #2
 800528a:	e0cc      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d007      	beq.n	80052b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2221      	movs	r2, #33	; 0x21
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2210      	movs	r2, #16
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	893a      	ldrh	r2, [r7, #8]
 80052e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a50      	ldr	r2, [pc, #320]	; (8005434 <HAL_I2C_Master_Transmit+0x1f8>)
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052f4:	8979      	ldrh	r1, [r7, #10]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	6a3a      	ldr	r2, [r7, #32]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fcea 	bl	8005cd4 <I2C_MasterRequestWrite>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e08d      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005320:	e066      	b.n	80053f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	6a39      	ldr	r1, [r7, #32]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 ffaa 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00d      	beq.n	800534e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	2b04      	cmp	r3, #4
 8005338:	d107      	bne.n	800534a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005348:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e06b      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	781a      	ldrb	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b04      	cmp	r3, #4
 800538a:	d11b      	bne.n	80053c4 <HAL_I2C_Master_Transmit+0x188>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d017      	beq.n	80053c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	6a39      	ldr	r1, [r7, #32]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 ff9a 	bl	8006302 <I2C_WaitOnBTFFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00d      	beq.n	80053f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d107      	bne.n	80053ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e01a      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d194      	bne.n	8005322 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	e000      	b.n	8005426 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005424:	2302      	movs	r3, #2
  }
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	00100002 	.word	0x00100002
 8005434:	ffff0000 	.word	0xffff0000

08005438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	4608      	mov	r0, r1
 8005442:	4611      	mov	r1, r2
 8005444:	461a      	mov	r2, r3
 8005446:	4603      	mov	r3, r0
 8005448:	817b      	strh	r3, [r7, #10]
 800544a:	460b      	mov	r3, r1
 800544c:	813b      	strh	r3, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005452:	f7fd fcd7 	bl	8002e04 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b20      	cmp	r3, #32
 8005462:	f040 80d9 	bne.w	8005618 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	2319      	movs	r3, #25
 800546c:	2201      	movs	r2, #1
 800546e:	496d      	ldr	r1, [pc, #436]	; (8005624 <HAL_I2C_Mem_Write+0x1ec>)
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fe2f 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800547c:	2302      	movs	r3, #2
 800547e:	e0cc      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_I2C_Mem_Write+0x56>
 800548a:	2302      	movs	r3, #2
 800548c:	e0c5      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d007      	beq.n	80054b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2221      	movs	r2, #33	; 0x21
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2240      	movs	r2, #64	; 0x40
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a3a      	ldr	r2, [r7, #32]
 80054de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a4d      	ldr	r2, [pc, #308]	; (8005628 <HAL_I2C_Mem_Write+0x1f0>)
 80054f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054f6:	88f8      	ldrh	r0, [r7, #6]
 80054f8:	893a      	ldrh	r2, [r7, #8]
 80054fa:	8979      	ldrh	r1, [r7, #10]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	4603      	mov	r3, r0
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fc66 	bl	8005dd8 <I2C_RequestMemoryWrite>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d052      	beq.n	80055b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e081      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 feb0 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00d      	beq.n	8005542 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	2b04      	cmp	r3, #4
 800552c:	d107      	bne.n	800553e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e06b      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	781a      	ldrb	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b04      	cmp	r3, #4
 800557e:	d11b      	bne.n	80055b8 <HAL_I2C_Mem_Write+0x180>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005584:	2b00      	cmp	r3, #0
 8005586:	d017      	beq.n	80055b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	781a      	ldrb	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1aa      	bne.n	8005516 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fe9c 	bl	8006302 <I2C_WaitOnBTFFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d107      	bne.n	80055e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e016      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	e000      	b.n	800561a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005618:	2302      	movs	r3, #2
  }
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	00100002 	.word	0x00100002
 8005628:	ffff0000 	.word	0xffff0000

0800562c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08c      	sub	sp, #48	; 0x30
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	4608      	mov	r0, r1
 8005636:	4611      	mov	r1, r2
 8005638:	461a      	mov	r2, r3
 800563a:	4603      	mov	r3, r0
 800563c:	817b      	strh	r3, [r7, #10]
 800563e:	460b      	mov	r3, r1
 8005640:	813b      	strh	r3, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005646:	f7fd fbdd 	bl	8002e04 <HAL_GetTick>
 800564a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b20      	cmp	r3, #32
 8005656:	f040 8208 	bne.w	8005a6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	2319      	movs	r3, #25
 8005660:	2201      	movs	r2, #1
 8005662:	497b      	ldr	r1, [pc, #492]	; (8005850 <HAL_I2C_Mem_Read+0x224>)
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fd35 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005670:	2302      	movs	r3, #2
 8005672:	e1fb      	b.n	8005a6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_I2C_Mem_Read+0x56>
 800567e:	2302      	movs	r3, #2
 8005680:	e1f4      	b.n	8005a6c <HAL_I2C_Mem_Read+0x440>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d007      	beq.n	80056a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2222      	movs	r2, #34	; 0x22
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2240      	movs	r2, #64	; 0x40
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80056d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a5b      	ldr	r2, [pc, #364]	; (8005854 <HAL_I2C_Mem_Read+0x228>)
 80056e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056ea:	88f8      	ldrh	r0, [r7, #6]
 80056ec:	893a      	ldrh	r2, [r7, #8]
 80056ee:	8979      	ldrh	r1, [r7, #10]
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4603      	mov	r3, r0
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fc02 	bl	8005f04 <I2C_RequestMemoryRead>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e1b0      	b.n	8005a6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d113      	bne.n	800573a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005712:	2300      	movs	r3, #0
 8005714:	623b      	str	r3, [r7, #32]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e184      	b.n	8005a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573e:	2b01      	cmp	r3, #1
 8005740:	d11b      	bne.n	800577a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e164      	b.n	8005a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577e:	2b02      	cmp	r3, #2
 8005780:	d11b      	bne.n	80057ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005790:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	e144      	b.n	8005a44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057d0:	e138      	b.n	8005a44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	f200 80f1 	bhi.w	80059be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d123      	bne.n	800582c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fdcb 	bl	8006384 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e139      	b.n	8005a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	855a      	strh	r2, [r3, #42]	; 0x2a
 800582a:	e10b      	b.n	8005a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005830:	2b02      	cmp	r3, #2
 8005832:	d14e      	bne.n	80058d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	2200      	movs	r2, #0
 800583c:	4906      	ldr	r1, [pc, #24]	; (8005858 <HAL_I2C_Mem_Read+0x22c>)
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fc48 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d008      	beq.n	800585c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e10e      	b.n	8005a6c <HAL_I2C_Mem_Read+0x440>
 800584e:	bf00      	nop
 8005850:	00100002 	.word	0x00100002
 8005854:	ffff0000 	.word	0xffff0000
 8005858:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058d0:	e0b8      	b.n	8005a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	2200      	movs	r2, #0
 80058da:	4966      	ldr	r1, [pc, #408]	; (8005a74 <HAL_I2C_Mem_Read+0x448>)
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fbf9 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0bf      	b.n	8005a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	2200      	movs	r2, #0
 8005936:	494f      	ldr	r1, [pc, #316]	; (8005a74 <HAL_I2C_Mem_Read+0x448>)
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fbcb 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e091      	b.n	8005a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059bc:	e042      	b.n	8005a44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 fcde 	bl	8006384 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e04c      	b.n	8005a6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d118      	bne.n	8005a44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f47f aec2 	bne.w	80057d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e000      	b.n	8005a6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005a6a:	2302      	movs	r3, #2
  }
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3728      	adds	r7, #40	; 0x28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	00010004 	.word	0x00010004

08005a78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	; 0x28
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	607a      	str	r2, [r7, #4]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	460b      	mov	r3, r1
 8005a86:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005a88:	f7fd f9bc 	bl	8002e04 <HAL_GetTick>
 8005a8c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	f040 8111 	bne.w	8005cc2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	2319      	movs	r3, #25
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	4988      	ldr	r1, [pc, #544]	; (8005ccc <HAL_I2C_IsDeviceReady+0x254>)
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fb12 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e104      	b.n	8005cc4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_I2C_IsDeviceReady+0x50>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e0fd      	b.n	8005cc4 <HAL_I2C_IsDeviceReady+0x24c>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d007      	beq.n	8005aee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005afc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2224      	movs	r2, #36	; 0x24
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4a70      	ldr	r2, [pc, #448]	; (8005cd0 <HAL_I2C_IsDeviceReady+0x258>)
 8005b10:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b20:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fad0 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00d      	beq.n	8005b56 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b48:	d103      	bne.n	8005b52 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e0b6      	b.n	8005cc4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b56:	897b      	ldrh	r3, [r7, #10]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005b66:	f7fd f94d 	bl	8002e04 <HAL_GetTick>
 8005b6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	bf0c      	ite	eq
 8005b7a:	2301      	moveq	r3, #1
 8005b7c:	2300      	movne	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b90:	bf0c      	ite	eq
 8005b92:	2301      	moveq	r3, #1
 8005b94:	2300      	movne	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b9a:	e025      	b.n	8005be8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b9c:	f7fd f932 	bl	8002e04 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d302      	bcc.n	8005bb2 <HAL_I2C_IsDeviceReady+0x13a>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d103      	bne.n	8005bba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	22a0      	movs	r2, #160	; 0xa0
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bde:	bf0c      	ite	eq
 8005be0:	2301      	moveq	r3, #1
 8005be2:	2300      	movne	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2ba0      	cmp	r3, #160	; 0xa0
 8005bf2:	d005      	beq.n	8005c00 <HAL_I2C_IsDeviceReady+0x188>
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <HAL_I2C_IsDeviceReady+0x188>
 8005bfa:	7dbb      	ldrb	r3, [r7, #22]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0cd      	beq.n	8005b9c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d129      	bne.n	8005c6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	2319      	movs	r3, #25
 8005c42:	2201      	movs	r2, #1
 8005c44:	4921      	ldr	r1, [pc, #132]	; (8005ccc <HAL_I2C_IsDeviceReady+0x254>)
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fa44 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e036      	b.n	8005cc4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e02c      	b.n	8005cc4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	2319      	movs	r3, #25
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	490f      	ldr	r1, [pc, #60]	; (8005ccc <HAL_I2C_IsDeviceReady+0x254>)
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fa20 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e012      	b.n	8005cc4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	f4ff af32 	bcc.w	8005b12 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	00100002 	.word	0x00100002
 8005cd0:	ffff0000 	.word	0xffff0000

08005cd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	607a      	str	r2, [r7, #4]
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d006      	beq.n	8005cfe <I2C_MasterRequestWrite+0x2a>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d003      	beq.n	8005cfe <I2C_MasterRequestWrite+0x2a>
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cfc:	d108      	bne.n	8005d10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e00b      	b.n	8005d28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	2b12      	cmp	r3, #18
 8005d16:	d107      	bne.n	8005d28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f9cd 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d4e:	d103      	bne.n	8005d58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e035      	b.n	8005dc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d64:	d108      	bne.n	8005d78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d66:	897b      	ldrh	r3, [r7, #10]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d74:	611a      	str	r2, [r3, #16]
 8005d76:	e01b      	b.n	8005db0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d78:	897b      	ldrh	r3, [r7, #10]
 8005d7a:	11db      	asrs	r3, r3, #7
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f003 0306 	and.w	r3, r3, #6
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f063 030f 	orn	r3, r3, #15
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	490e      	ldr	r1, [pc, #56]	; (8005dd0 <I2C_MasterRequestWrite+0xfc>)
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f9f3 	bl	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e010      	b.n	8005dc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005da6:	897b      	ldrh	r3, [r7, #10]
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	4907      	ldr	r1, [pc, #28]	; (8005dd4 <I2C_MasterRequestWrite+0x100>)
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f9e3 	bl	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	00010008 	.word	0x00010008
 8005dd4:	00010002 	.word	0x00010002

08005dd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	461a      	mov	r2, r3
 8005de6:	4603      	mov	r3, r0
 8005de8:	817b      	strh	r3, [r7, #10]
 8005dea:	460b      	mov	r3, r1
 8005dec:	813b      	strh	r3, [r7, #8]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 f960 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00d      	beq.n	8005e36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e28:	d103      	bne.n	8005e32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e05f      	b.n	8005ef6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e36:	897b      	ldrh	r3, [r7, #10]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	6a3a      	ldr	r2, [r7, #32]
 8005e4a:	492d      	ldr	r1, [pc, #180]	; (8005f00 <I2C_RequestMemoryWrite+0x128>)
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f998 	bl	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e04c      	b.n	8005ef6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e74:	6a39      	ldr	r1, [r7, #32]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 fa02 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d107      	bne.n	8005e9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e02b      	b.n	8005ef6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d105      	bne.n	8005eb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ea4:	893b      	ldrh	r3, [r7, #8]
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	611a      	str	r2, [r3, #16]
 8005eae:	e021      	b.n	8005ef4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005eb0:	893b      	ldrh	r3, [r7, #8]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec0:	6a39      	ldr	r1, [r7, #32]
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f9dc 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00d      	beq.n	8005eea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d107      	bne.n	8005ee6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e005      	b.n	8005ef6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eea:	893b      	ldrh	r3, [r7, #8]
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	00010002 	.word	0x00010002

08005f04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	4611      	mov	r1, r2
 8005f10:	461a      	mov	r2, r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	817b      	strh	r3, [r7, #10]
 8005f16:	460b      	mov	r3, r1
 8005f18:	813b      	strh	r3, [r7, #8]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f8c2 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00d      	beq.n	8005f72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f64:	d103      	bne.n	8005f6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e0aa      	b.n	80060c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f72:	897b      	ldrh	r3, [r7, #10]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	6a3a      	ldr	r2, [r7, #32]
 8005f86:	4952      	ldr	r1, [pc, #328]	; (80060d0 <I2C_RequestMemoryRead+0x1cc>)
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f8fa 	bl	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e097      	b.n	80060c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb0:	6a39      	ldr	r1, [r7, #32]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 f964 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00d      	beq.n	8005fda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d107      	bne.n	8005fd6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e076      	b.n	80060c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d105      	bne.n	8005fec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fe0:	893b      	ldrh	r3, [r7, #8]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	611a      	str	r2, [r3, #16]
 8005fea:	e021      	b.n	8006030 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fec:	893b      	ldrh	r3, [r7, #8]
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffc:	6a39      	ldr	r1, [r7, #32]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 f93e 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	2b04      	cmp	r3, #4
 8006010:	d107      	bne.n	8006022 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006020:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e050      	b.n	80060c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006026:	893b      	ldrh	r3, [r7, #8]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006032:	6a39      	ldr	r1, [r7, #32]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f923 	bl	8006280 <I2C_WaitOnTXEFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00d      	beq.n	800605c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	2b04      	cmp	r3, #4
 8006046:	d107      	bne.n	8006058 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006056:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e035      	b.n	80060c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800606a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	2200      	movs	r2, #0
 8006074:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f82b 	bl	80060d4 <I2C_WaitOnFlagUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00d      	beq.n	80060a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006092:	d103      	bne.n	800609c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800609a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e013      	b.n	80060c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060a0:	897b      	ldrh	r3, [r7, #10]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f043 0301 	orr.w	r3, r3, #1
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	6a3a      	ldr	r2, [r7, #32]
 80060b4:	4906      	ldr	r1, [pc, #24]	; (80060d0 <I2C_RequestMemoryRead+0x1cc>)
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f863 	bl	8006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	00010002 	.word	0x00010002

080060d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	4613      	mov	r3, r2
 80060e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060e4:	e025      	b.n	8006132 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060ec:	d021      	beq.n	8006132 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ee:	f7fc fe89 	bl	8002e04 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d302      	bcc.n	8006104 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d116      	bne.n	8006132 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f043 0220 	orr.w	r2, r3, #32
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e023      	b.n	800617a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	0c1b      	lsrs	r3, r3, #16
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d10d      	bne.n	8006158 <I2C_WaitOnFlagUntilTimeout+0x84>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	43da      	mvns	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4013      	ands	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	bf0c      	ite	eq
 800614e:	2301      	moveq	r3, #1
 8006150:	2300      	movne	r3, #0
 8006152:	b2db      	uxtb	r3, r3
 8006154:	461a      	mov	r2, r3
 8006156:	e00c      	b.n	8006172 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	43da      	mvns	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	429a      	cmp	r2, r3
 8006176:	d0b6      	beq.n	80060e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
 800618e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006190:	e051      	b.n	8006236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a0:	d123      	bne.n	80061ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	f043 0204 	orr.w	r2, r3, #4
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e046      	b.n	8006278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f0:	d021      	beq.n	8006236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f2:	f7fc fe07 	bl	8002e04 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d302      	bcc.n	8006208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d116      	bne.n	8006236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f043 0220 	orr.w	r2, r3, #32
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e020      	b.n	8006278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	0c1b      	lsrs	r3, r3, #16
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	d10c      	bne.n	800625a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	43da      	mvns	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4013      	ands	r3, r2
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	bf14      	ite	ne
 8006252:	2301      	movne	r3, #1
 8006254:	2300      	moveq	r3, #0
 8006256:	b2db      	uxtb	r3, r3
 8006258:	e00b      	b.n	8006272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	43da      	mvns	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4013      	ands	r3, r2
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	bf14      	ite	ne
 800626c:	2301      	movne	r3, #1
 800626e:	2300      	moveq	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d18d      	bne.n	8006192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800628c:	e02d      	b.n	80062ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f8ce 	bl	8006430 <I2C_IsAcknowledgeFailed>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e02d      	b.n	80062fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a4:	d021      	beq.n	80062ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a6:	f7fc fdad 	bl	8002e04 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d302      	bcc.n	80062bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d116      	bne.n	80062ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f043 0220 	orr.w	r2, r3, #32
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e007      	b.n	80062fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f4:	2b80      	cmp	r3, #128	; 0x80
 80062f6:	d1ca      	bne.n	800628e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800630e:	e02d      	b.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f88d 	bl	8006430 <I2C_IsAcknowledgeFailed>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e02d      	b.n	800637c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006326:	d021      	beq.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006328:	f7fc fd6c 	bl	8002e04 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	429a      	cmp	r2, r3
 8006336:	d302      	bcc.n	800633e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d116      	bne.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e007      	b.n	800637c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b04      	cmp	r3, #4
 8006378:	d1ca      	bne.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006390:	e042      	b.n	8006418 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b10      	cmp	r3, #16
 800639e:	d119      	bne.n	80063d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0210 	mvn.w	r2, #16
 80063a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e029      	b.n	8006428 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d4:	f7fc fd16 	bl	8002e04 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d302      	bcc.n	80063ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d116      	bne.n	8006418 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	f043 0220 	orr.w	r2, r3, #32
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e007      	b.n	8006428 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d1b5      	bne.n	8006392 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006446:	d11b      	bne.n	8006480 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006450:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	f043 0204 	orr.w	r2, r3, #4
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e128      	b.n	80066f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a90      	ldr	r2, [pc, #576]	; (80066fc <HAL_I2S_Init+0x26c>)
 80064ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fc fa05 	bl	80028cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2202      	movs	r2, #2
 80064c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80064d8:	f023 030f 	bic.w	r3, r3, #15
 80064dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2202      	movs	r2, #2
 80064e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d060      	beq.n	80065b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d102      	bne.n	80064fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80064f6:	2310      	movs	r3, #16
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	e001      	b.n	8006500 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80064fc:	2320      	movs	r3, #32
 80064fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	2b20      	cmp	r3, #32
 8006506:	d802      	bhi.n	800650e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800650e:	2001      	movs	r0, #1
 8006510:	f001 f9e6 	bl	80078e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006514:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800651e:	d125      	bne.n	800656c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d010      	beq.n	800654a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	461a      	mov	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	fbb2 f3f3 	udiv	r3, r2, r3
 8006544:	3305      	adds	r3, #5
 8006546:	613b      	str	r3, [r7, #16]
 8006548:	e01f      	b.n	800658a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	fbb2 f2f3 	udiv	r2, r2, r3
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	461a      	mov	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	fbb2 f3f3 	udiv	r3, r2, r3
 8006566:	3305      	adds	r3, #5
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	e00e      	b.n	800658a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	fbb2 f2f3 	udiv	r2, r2, r3
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	461a      	mov	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	fbb2 f3f3 	udiv	r3, r2, r3
 8006586:	3305      	adds	r3, #5
 8006588:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	4a5c      	ldr	r2, [pc, #368]	; (8006700 <HAL_I2S_Init+0x270>)
 800658e:	fba2 2303 	umull	r2, r3, r2, r3
 8006592:	08db      	lsrs	r3, r3, #3
 8006594:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	085b      	lsrs	r3, r3, #1
 80065a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	021b      	lsls	r3, r3, #8
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	e003      	b.n	80065b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80065b0:	2302      	movs	r3, #2
 80065b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d902      	bls.n	80065c4 <HAL_I2S_Init+0x134>
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	2bff      	cmp	r3, #255	; 0xff
 80065c2:	d907      	bls.n	80065d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c8:	f043 0210 	orr.w	r2, r3, #16
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e08f      	b.n	80066f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	ea42 0103 	orr.w	r1, r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80065f2:	f023 030f 	bic.w	r3, r3, #15
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6851      	ldr	r1, [r2, #4]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6892      	ldr	r2, [r2, #8]
 80065fe:	4311      	orrs	r1, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	68d2      	ldr	r2, [r2, #12]
 8006604:	4311      	orrs	r1, r2
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6992      	ldr	r2, [r2, #24]
 800660a:	430a      	orrs	r2, r1
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006616:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d161      	bne.n	80066e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a38      	ldr	r2, [pc, #224]	; (8006704 <HAL_I2S_Init+0x274>)
 8006624:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a37      	ldr	r2, [pc, #220]	; (8006708 <HAL_I2S_Init+0x278>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d101      	bne.n	8006634 <HAL_I2S_Init+0x1a4>
 8006630:	4b36      	ldr	r3, [pc, #216]	; (800670c <HAL_I2S_Init+0x27c>)
 8006632:	e001      	b.n	8006638 <HAL_I2S_Init+0x1a8>
 8006634:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	4932      	ldr	r1, [pc, #200]	; (8006708 <HAL_I2S_Init+0x278>)
 8006640:	428a      	cmp	r2, r1
 8006642:	d101      	bne.n	8006648 <HAL_I2S_Init+0x1b8>
 8006644:	4a31      	ldr	r2, [pc, #196]	; (800670c <HAL_I2S_Init+0x27c>)
 8006646:	e001      	b.n	800664c <HAL_I2S_Init+0x1bc>
 8006648:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800664c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006650:	f023 030f 	bic.w	r3, r3, #15
 8006654:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a2b      	ldr	r2, [pc, #172]	; (8006708 <HAL_I2S_Init+0x278>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d101      	bne.n	8006664 <HAL_I2S_Init+0x1d4>
 8006660:	4b2a      	ldr	r3, [pc, #168]	; (800670c <HAL_I2S_Init+0x27c>)
 8006662:	e001      	b.n	8006668 <HAL_I2S_Init+0x1d8>
 8006664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006668:	2202      	movs	r2, #2
 800666a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a25      	ldr	r2, [pc, #148]	; (8006708 <HAL_I2S_Init+0x278>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d101      	bne.n	800667a <HAL_I2S_Init+0x1ea>
 8006676:	4b25      	ldr	r3, [pc, #148]	; (800670c <HAL_I2S_Init+0x27c>)
 8006678:	e001      	b.n	800667e <HAL_I2S_Init+0x1ee>
 800667a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800668a:	d003      	beq.n	8006694 <HAL_I2S_Init+0x204>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d103      	bne.n	800669c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	e001      	b.n	80066a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800669c:	2300      	movs	r3, #0
 800669e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80066aa:	4313      	orrs	r3, r2
 80066ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80066b4:	4313      	orrs	r3, r2
 80066b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80066be:	4313      	orrs	r3, r2
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	897b      	ldrh	r3, [r7, #10]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80066cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a0d      	ldr	r2, [pc, #52]	; (8006708 <HAL_I2S_Init+0x278>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d101      	bne.n	80066dc <HAL_I2S_Init+0x24c>
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <HAL_I2S_Init+0x27c>)
 80066da:	e001      	b.n	80066e0 <HAL_I2S_Init+0x250>
 80066dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066e0:	897a      	ldrh	r2, [r7, #10]
 80066e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3720      	adds	r7, #32
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	08006807 	.word	0x08006807
 8006700:	cccccccd 	.word	0xcccccccd
 8006704:	0800691d 	.word	0x0800691d
 8006708:	40003800 	.word	0x40003800
 800670c:	40003400 	.word	0x40003400

08006710 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	881a      	ldrh	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	1c9a      	adds	r2, r3, #2
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676e:	b29b      	uxth	r3, r3
 8006770:	3b01      	subs	r3, #1
 8006772:	b29a      	uxth	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10e      	bne.n	80067a0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006790:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff ffb8 	bl	8006710 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	b292      	uxth	r2, r2
 80067bc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	1c9a      	adds	r2, r3, #2
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10e      	bne.n	80067fe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff ff93 	bl	8006724 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b086      	sub	sp, #24
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b04      	cmp	r3, #4
 8006820:	d13a      	bne.n	8006898 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b01      	cmp	r3, #1
 800682a:	d109      	bne.n	8006840 <I2S_IRQHandler+0x3a>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006836:	2b40      	cmp	r3, #64	; 0x40
 8006838:	d102      	bne.n	8006840 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff ffb4 	bl	80067a8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d126      	bne.n	8006898 <I2S_IRQHandler+0x92>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b20      	cmp	r3, #32
 8006856:	d11f      	bne.n	8006898 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006866:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006868:	2300      	movs	r3, #0
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	f043 0202 	orr.w	r2, r3, #2
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff ff50 	bl	8006738 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d136      	bne.n	8006912 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d109      	bne.n	80068c2 <I2S_IRQHandler+0xbc>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b8:	2b80      	cmp	r3, #128	; 0x80
 80068ba:	d102      	bne.n	80068c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7ff ff45 	bl	800674c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d122      	bne.n	8006912 <I2S_IRQHandler+0x10c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d11b      	bne.n	8006912 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006904:	f043 0204 	orr.w	r2, r3, #4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff ff13 	bl	8006738 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006912:	bf00      	nop
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4aa2      	ldr	r2, [pc, #648]	; (8006bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d101      	bne.n	800693a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006936:	4ba2      	ldr	r3, [pc, #648]	; (8006bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006938:	e001      	b.n	800693e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800693a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a9b      	ldr	r2, [pc, #620]	; (8006bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d101      	bne.n	8006958 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006954:	4b9a      	ldr	r3, [pc, #616]	; (8006bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006956:	e001      	b.n	800695c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006958:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006968:	d004      	beq.n	8006974 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 8099 	bne.w	8006aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b02      	cmp	r3, #2
 800697c:	d107      	bne.n	800698e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f925 	bl	8006bd8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b01      	cmp	r3, #1
 8006996:	d107      	bne.n	80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f9c8 	bl	8006d38 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	d13a      	bne.n	8006a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d035      	beq.n	8006a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a7e      	ldr	r2, [pc, #504]	; (8006bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d101      	bne.n	80069ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80069c6:	4b7e      	ldr	r3, [pc, #504]	; (8006bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069c8:	e001      	b.n	80069ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80069ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4979      	ldr	r1, [pc, #484]	; (8006bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069d6:	428b      	cmp	r3, r1
 80069d8:	d101      	bne.n	80069de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80069da:	4b79      	ldr	r3, [pc, #484]	; (8006bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069dc:	e001      	b.n	80069e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80069de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1a:	f043 0202 	orr.w	r2, r3, #2
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff fe88 	bl	8006738 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	2b08      	cmp	r3, #8
 8006a30:	f040 80be 	bne.w	8006bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80b8 	beq.w	8006bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a4e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a59      	ldr	r2, [pc, #356]	; (8006bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d101      	bne.n	8006a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006a5a:	4b59      	ldr	r3, [pc, #356]	; (8006bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a5c:	e001      	b.n	8006a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4954      	ldr	r1, [pc, #336]	; (8006bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a6a:	428b      	cmp	r3, r1
 8006a6c:	d101      	bne.n	8006a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006a6e:	4b54      	ldr	r3, [pc, #336]	; (8006bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a70:	e001      	b.n	8006a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a7a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60bb      	str	r3, [r7, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a96:	f043 0204 	orr.w	r2, r3, #4
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff fe4a 	bl	8006738 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006aa4:	e084      	b.n	8006bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d107      	bne.n	8006ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f8be 	bl	8006c3c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d107      	bne.n	8006ada <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f8fd 	bl	8006cd4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d12f      	bne.n	8006b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d02a      	beq.n	8006b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006afc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a2e      	ldr	r2, [pc, #184]	; (8006bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d101      	bne.n	8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006b08:	4b2d      	ldr	r3, [pc, #180]	; (8006bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b0a:	e001      	b.n	8006b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4929      	ldr	r1, [pc, #164]	; (8006bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b18:	428b      	cmp	r3, r1
 8006b1a:	d101      	bne.n	8006b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006b1c:	4b28      	ldr	r3, [pc, #160]	; (8006bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b1e:	e001      	b.n	8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b36:	f043 0202 	orr.w	r2, r3, #2
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff fdfa 	bl	8006738 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d131      	bne.n	8006bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d02c      	beq.n	8006bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d101      	bne.n	8006b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006b62:	4b17      	ldr	r3, [pc, #92]	; (8006bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b64:	e001      	b.n	8006b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006b66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4912      	ldr	r1, [pc, #72]	; (8006bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b72:	428b      	cmp	r3, r1
 8006b74:	d101      	bne.n	8006b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006b76:	4b12      	ldr	r3, [pc, #72]	; (8006bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b78:	e001      	b.n	8006b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006b7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b82:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b92:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba0:	f043 0204 	orr.w	r2, r3, #4
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff fdc5 	bl	8006738 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bae:	e000      	b.n	8006bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006bb0:	bf00      	nop
}
 8006bb2:	bf00      	nop
 8006bb4:	3720      	adds	r7, #32
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40003800 	.word	0x40003800
 8006bc0:	40003400 	.word	0x40003400

08006bc4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	1c99      	adds	r1, r3, #2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6251      	str	r1, [r2, #36]	; 0x24
 8006bea:	881a      	ldrh	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d113      	bne.n	8006c32 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff ffc9 	bl	8006bc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
	...

08006c3c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	1c99      	adds	r1, r3, #2
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6251      	str	r1, [r2, #36]	; 0x24
 8006c4e:	8819      	ldrh	r1, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a1d      	ldr	r2, [pc, #116]	; (8006ccc <I2SEx_TxISR_I2SExt+0x90>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d101      	bne.n	8006c5e <I2SEx_TxISR_I2SExt+0x22>
 8006c5a:	4b1d      	ldr	r3, [pc, #116]	; (8006cd0 <I2SEx_TxISR_I2SExt+0x94>)
 8006c5c:	e001      	b.n	8006c62 <I2SEx_TxISR_I2SExt+0x26>
 8006c5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c62:	460a      	mov	r2, r1
 8006c64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d121      	bne.n	8006cc2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a12      	ldr	r2, [pc, #72]	; (8006ccc <I2SEx_TxISR_I2SExt+0x90>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d101      	bne.n	8006c8c <I2SEx_TxISR_I2SExt+0x50>
 8006c88:	4b11      	ldr	r3, [pc, #68]	; (8006cd0 <I2SEx_TxISR_I2SExt+0x94>)
 8006c8a:	e001      	b.n	8006c90 <I2SEx_TxISR_I2SExt+0x54>
 8006c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	490d      	ldr	r1, [pc, #52]	; (8006ccc <I2SEx_TxISR_I2SExt+0x90>)
 8006c98:	428b      	cmp	r3, r1
 8006c9a:	d101      	bne.n	8006ca0 <I2SEx_TxISR_I2SExt+0x64>
 8006c9c:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <I2SEx_TxISR_I2SExt+0x94>)
 8006c9e:	e001      	b.n	8006ca4 <I2SEx_TxISR_I2SExt+0x68>
 8006ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ca8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d106      	bne.n	8006cc2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff ff81 	bl	8006bc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cc2:	bf00      	nop
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40003800 	.word	0x40003800
 8006cd0:	40003400 	.word	0x40003400

08006cd4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68d8      	ldr	r0, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	1c99      	adds	r1, r3, #2
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006cec:	b282      	uxth	r2, r0
 8006cee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d113      	bne.n	8006d30 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d16:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d106      	bne.n	8006d30 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff ff4a 	bl	8006bc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a20      	ldr	r2, [pc, #128]	; (8006dc8 <I2SEx_RxISR_I2SExt+0x90>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d101      	bne.n	8006d4e <I2SEx_RxISR_I2SExt+0x16>
 8006d4a:	4b20      	ldr	r3, [pc, #128]	; (8006dcc <I2SEx_RxISR_I2SExt+0x94>)
 8006d4c:	e001      	b.n	8006d52 <I2SEx_RxISR_I2SExt+0x1a>
 8006d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d52:	68d8      	ldr	r0, [r3, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	1c99      	adds	r1, r3, #2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006d5e:	b282      	uxth	r2, r0
 8006d60:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d121      	bne.n	8006dbe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a12      	ldr	r2, [pc, #72]	; (8006dc8 <I2SEx_RxISR_I2SExt+0x90>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d101      	bne.n	8006d88 <I2SEx_RxISR_I2SExt+0x50>
 8006d84:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <I2SEx_RxISR_I2SExt+0x94>)
 8006d86:	e001      	b.n	8006d8c <I2SEx_RxISR_I2SExt+0x54>
 8006d88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	490d      	ldr	r1, [pc, #52]	; (8006dc8 <I2SEx_RxISR_I2SExt+0x90>)
 8006d94:	428b      	cmp	r3, r1
 8006d96:	d101      	bne.n	8006d9c <I2SEx_RxISR_I2SExt+0x64>
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <I2SEx_RxISR_I2SExt+0x94>)
 8006d9a:	e001      	b.n	8006da0 <I2SEx_RxISR_I2SExt+0x68>
 8006d9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006da0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006da4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d106      	bne.n	8006dbe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff ff03 	bl	8006bc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006dbe:	bf00      	nop
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40003800 	.word	0x40003800
 8006dcc:	40003400 	.word	0x40003400

08006dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e264      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d075      	beq.n	8006eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dee:	4ba3      	ldr	r3, [pc, #652]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 030c 	and.w	r3, r3, #12
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d00c      	beq.n	8006e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dfa:	4ba0      	ldr	r3, [pc, #640]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d112      	bne.n	8006e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e06:	4b9d      	ldr	r3, [pc, #628]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e12:	d10b      	bne.n	8006e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e14:	4b99      	ldr	r3, [pc, #612]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d05b      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x108>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d157      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e23f      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e34:	d106      	bne.n	8006e44 <HAL_RCC_OscConfig+0x74>
 8006e36:	4b91      	ldr	r3, [pc, #580]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a90      	ldr	r2, [pc, #576]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	e01d      	b.n	8006e80 <HAL_RCC_OscConfig+0xb0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e4c:	d10c      	bne.n	8006e68 <HAL_RCC_OscConfig+0x98>
 8006e4e:	4b8b      	ldr	r3, [pc, #556]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a8a      	ldr	r2, [pc, #552]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	4b88      	ldr	r3, [pc, #544]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a87      	ldr	r2, [pc, #540]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	e00b      	b.n	8006e80 <HAL_RCC_OscConfig+0xb0>
 8006e68:	4b84      	ldr	r3, [pc, #528]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a83      	ldr	r2, [pc, #524]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	4b81      	ldr	r3, [pc, #516]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a80      	ldr	r2, [pc, #512]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d013      	beq.n	8006eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e88:	f7fb ffbc 	bl	8002e04 <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e90:	f7fb ffb8 	bl	8002e04 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b64      	cmp	r3, #100	; 0x64
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e204      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ea2:	4b76      	ldr	r3, [pc, #472]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0f0      	beq.n	8006e90 <HAL_RCC_OscConfig+0xc0>
 8006eae:	e014      	b.n	8006eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb0:	f7fb ffa8 	bl	8002e04 <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006eb8:	f7fb ffa4 	bl	8002e04 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b64      	cmp	r3, #100	; 0x64
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e1f0      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eca:	4b6c      	ldr	r3, [pc, #432]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1f0      	bne.n	8006eb8 <HAL_RCC_OscConfig+0xe8>
 8006ed6:	e000      	b.n	8006eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d063      	beq.n	8006fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ee6:	4b65      	ldr	r3, [pc, #404]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 030c 	and.w	r3, r3, #12
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ef2:	4b62      	ldr	r3, [pc, #392]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	d11c      	bne.n	8006f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006efe:	4b5f      	ldr	r3, [pc, #380]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d116      	bne.n	8006f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f0a:	4b5c      	ldr	r3, [pc, #368]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_RCC_OscConfig+0x152>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d001      	beq.n	8006f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e1c4      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f22:	4b56      	ldr	r3, [pc, #344]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	4952      	ldr	r1, [pc, #328]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f36:	e03a      	b.n	8006fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d020      	beq.n	8006f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f40:	4b4f      	ldr	r3, [pc, #316]	; (8007080 <HAL_RCC_OscConfig+0x2b0>)
 8006f42:	2201      	movs	r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f46:	f7fb ff5d 	bl	8002e04 <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f4e:	f7fb ff59 	bl	8002e04 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e1a5      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f60:	4b46      	ldr	r3, [pc, #280]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0f0      	beq.n	8006f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f6c:	4b43      	ldr	r3, [pc, #268]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	4940      	ldr	r1, [pc, #256]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	600b      	str	r3, [r1, #0]
 8006f80:	e015      	b.n	8006fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f82:	4b3f      	ldr	r3, [pc, #252]	; (8007080 <HAL_RCC_OscConfig+0x2b0>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f88:	f7fb ff3c 	bl	8002e04 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f90:	f7fb ff38 	bl	8002e04 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e184      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fa2:	4b36      	ldr	r3, [pc, #216]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1f0      	bne.n	8006f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d030      	beq.n	800701c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d016      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fc2:	4b30      	ldr	r3, [pc, #192]	; (8007084 <HAL_RCC_OscConfig+0x2b4>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc8:	f7fb ff1c 	bl	8002e04 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fce:	e008      	b.n	8006fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fd0:	f7fb ff18 	bl	8002e04 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e164      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fe2:	4b26      	ldr	r3, [pc, #152]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0f0      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x200>
 8006fee:	e015      	b.n	800701c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ff0:	4b24      	ldr	r3, [pc, #144]	; (8007084 <HAL_RCC_OscConfig+0x2b4>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff6:	f7fb ff05 	bl	8002e04 <HAL_GetTick>
 8006ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ffc:	e008      	b.n	8007010 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ffe:	f7fb ff01 	bl	8002e04 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e14d      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007010:	4b1a      	ldr	r3, [pc, #104]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8007012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1f0      	bne.n	8006ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 80a0 	beq.w	800716a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800702a:	2300      	movs	r3, #0
 800702c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10f      	bne.n	800705a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800703a:	2300      	movs	r3, #0
 800703c:	60bb      	str	r3, [r7, #8]
 800703e:	4b0f      	ldr	r3, [pc, #60]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	4a0e      	ldr	r2, [pc, #56]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8007044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007048:	6413      	str	r3, [r2, #64]	; 0x40
 800704a:	4b0c      	ldr	r3, [pc, #48]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007052:	60bb      	str	r3, [r7, #8]
 8007054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800705a:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <HAL_RCC_OscConfig+0x2b8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007062:	2b00      	cmp	r3, #0
 8007064:	d121      	bne.n	80070aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007066:	4b08      	ldr	r3, [pc, #32]	; (8007088 <HAL_RCC_OscConfig+0x2b8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a07      	ldr	r2, [pc, #28]	; (8007088 <HAL_RCC_OscConfig+0x2b8>)
 800706c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007072:	f7fb fec7 	bl	8002e04 <HAL_GetTick>
 8007076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007078:	e011      	b.n	800709e <HAL_RCC_OscConfig+0x2ce>
 800707a:	bf00      	nop
 800707c:	40023800 	.word	0x40023800
 8007080:	42470000 	.word	0x42470000
 8007084:	42470e80 	.word	0x42470e80
 8007088:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800708c:	f7fb feba 	bl	8002e04 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e106      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800709e:	4b85      	ldr	r3, [pc, #532]	; (80072b4 <HAL_RCC_OscConfig+0x4e4>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f0      	beq.n	800708c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d106      	bne.n	80070c0 <HAL_RCC_OscConfig+0x2f0>
 80070b2:	4b81      	ldr	r3, [pc, #516]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b6:	4a80      	ldr	r2, [pc, #512]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070b8:	f043 0301 	orr.w	r3, r3, #1
 80070bc:	6713      	str	r3, [r2, #112]	; 0x70
 80070be:	e01c      	b.n	80070fa <HAL_RCC_OscConfig+0x32a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	2b05      	cmp	r3, #5
 80070c6:	d10c      	bne.n	80070e2 <HAL_RCC_OscConfig+0x312>
 80070c8:	4b7b      	ldr	r3, [pc, #492]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070cc:	4a7a      	ldr	r2, [pc, #488]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070ce:	f043 0304 	orr.w	r3, r3, #4
 80070d2:	6713      	str	r3, [r2, #112]	; 0x70
 80070d4:	4b78      	ldr	r3, [pc, #480]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d8:	4a77      	ldr	r2, [pc, #476]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	6713      	str	r3, [r2, #112]	; 0x70
 80070e0:	e00b      	b.n	80070fa <HAL_RCC_OscConfig+0x32a>
 80070e2:	4b75      	ldr	r3, [pc, #468]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	4a74      	ldr	r2, [pc, #464]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070e8:	f023 0301 	bic.w	r3, r3, #1
 80070ec:	6713      	str	r3, [r2, #112]	; 0x70
 80070ee:	4b72      	ldr	r3, [pc, #456]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	4a71      	ldr	r2, [pc, #452]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070f4:	f023 0304 	bic.w	r3, r3, #4
 80070f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d015      	beq.n	800712e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007102:	f7fb fe7f 	bl	8002e04 <HAL_GetTick>
 8007106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007108:	e00a      	b.n	8007120 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800710a:	f7fb fe7b 	bl	8002e04 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	f241 3288 	movw	r2, #5000	; 0x1388
 8007118:	4293      	cmp	r3, r2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e0c5      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007120:	4b65      	ldr	r3, [pc, #404]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0ee      	beq.n	800710a <HAL_RCC_OscConfig+0x33a>
 800712c:	e014      	b.n	8007158 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800712e:	f7fb fe69 	bl	8002e04 <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007134:	e00a      	b.n	800714c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007136:	f7fb fe65 	bl	8002e04 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	f241 3288 	movw	r2, #5000	; 0x1388
 8007144:	4293      	cmp	r3, r2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e0af      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800714c:	4b5a      	ldr	r3, [pc, #360]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 800714e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1ee      	bne.n	8007136 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d105      	bne.n	800716a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800715e:	4b56      	ldr	r3, [pc, #344]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	4a55      	ldr	r2, [pc, #340]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007168:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 809b 	beq.w	80072aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007174:	4b50      	ldr	r3, [pc, #320]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 030c 	and.w	r3, r3, #12
 800717c:	2b08      	cmp	r3, #8
 800717e:	d05c      	beq.n	800723a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d141      	bne.n	800720c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007188:	4b4c      	ldr	r3, [pc, #304]	; (80072bc <HAL_RCC_OscConfig+0x4ec>)
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718e:	f7fb fe39 	bl	8002e04 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007196:	f7fb fe35 	bl	8002e04 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e081      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071a8:	4b43      	ldr	r3, [pc, #268]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f0      	bne.n	8007196 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	431a      	orrs	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	019b      	lsls	r3, r3, #6
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	3b01      	subs	r3, #1
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	431a      	orrs	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	061b      	lsls	r3, r3, #24
 80071d8:	4937      	ldr	r1, [pc, #220]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071de:	4b37      	ldr	r3, [pc, #220]	; (80072bc <HAL_RCC_OscConfig+0x4ec>)
 80071e0:	2201      	movs	r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e4:	f7fb fe0e 	bl	8002e04 <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ec:	f7fb fe0a 	bl	8002e04 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e056      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071fe:	4b2e      	ldr	r3, [pc, #184]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0f0      	beq.n	80071ec <HAL_RCC_OscConfig+0x41c>
 800720a:	e04e      	b.n	80072aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800720c:	4b2b      	ldr	r3, [pc, #172]	; (80072bc <HAL_RCC_OscConfig+0x4ec>)
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007212:	f7fb fdf7 	bl	8002e04 <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800721a:	f7fb fdf3 	bl	8002e04 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e03f      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800722c:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1f0      	bne.n	800721a <HAL_RCC_OscConfig+0x44a>
 8007238:	e037      	b.n	80072aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e032      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d028      	beq.n	80072a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800725e:	429a      	cmp	r2, r3
 8007260:	d121      	bne.n	80072a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800726c:	429a      	cmp	r2, r3
 800726e:	d11a      	bne.n	80072a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007276:	4013      	ands	r3, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800727c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800727e:	4293      	cmp	r3, r2
 8007280:	d111      	bne.n	80072a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	3b01      	subs	r3, #1
 8007290:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007292:	429a      	cmp	r2, r3
 8007294:	d107      	bne.n	80072a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d001      	beq.n	80072aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40007000 	.word	0x40007000
 80072b8:	40023800 	.word	0x40023800
 80072bc:	42470060 	.word	0x42470060

080072c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e0cc      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072d4:	4b68      	ldr	r3, [pc, #416]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d90c      	bls.n	80072fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072e2:	4b65      	ldr	r3, [pc, #404]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ea:	4b63      	ldr	r3, [pc, #396]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d001      	beq.n	80072fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0b8      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d020      	beq.n	800734a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007314:	4b59      	ldr	r3, [pc, #356]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	4a58      	ldr	r2, [pc, #352]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 800731a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800731e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0308 	and.w	r3, r3, #8
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800732c:	4b53      	ldr	r3, [pc, #332]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	4a52      	ldr	r2, [pc, #328]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007338:	4b50      	ldr	r3, [pc, #320]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	494d      	ldr	r1, [pc, #308]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007346:	4313      	orrs	r3, r2
 8007348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d044      	beq.n	80073e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d107      	bne.n	800736e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735e:	4b47      	ldr	r3, [pc, #284]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d119      	bne.n	800739e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e07f      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b02      	cmp	r3, #2
 8007374:	d003      	beq.n	800737e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800737a:	2b03      	cmp	r3, #3
 800737c:	d107      	bne.n	800738e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737e:	4b3f      	ldr	r3, [pc, #252]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d109      	bne.n	800739e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e06f      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800738e:	4b3b      	ldr	r3, [pc, #236]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e067      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800739e:	4b37      	ldr	r3, [pc, #220]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f023 0203 	bic.w	r2, r3, #3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	4934      	ldr	r1, [pc, #208]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073b0:	f7fb fd28 	bl	8002e04 <HAL_GetTick>
 80073b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b6:	e00a      	b.n	80073ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073b8:	f7fb fd24 	bl	8002e04 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d901      	bls.n	80073ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e04f      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ce:	4b2b      	ldr	r3, [pc, #172]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f003 020c 	and.w	r2, r3, #12
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	429a      	cmp	r2, r3
 80073de:	d1eb      	bne.n	80073b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073e0:	4b25      	ldr	r3, [pc, #148]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d20c      	bcs.n	8007408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ee:	4b22      	ldr	r3, [pc, #136]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f6:	4b20      	ldr	r3, [pc, #128]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d001      	beq.n	8007408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e032      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007414:	4b19      	ldr	r3, [pc, #100]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	4916      	ldr	r1, [pc, #88]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007422:	4313      	orrs	r3, r2
 8007424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0308 	and.w	r3, r3, #8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	490e      	ldr	r1, [pc, #56]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007442:	4313      	orrs	r3, r2
 8007444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007446:	f000 f821 	bl	800748c <HAL_RCC_GetSysClockFreq>
 800744a:	4602      	mov	r2, r0
 800744c:	4b0b      	ldr	r3, [pc, #44]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	091b      	lsrs	r3, r3, #4
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	490a      	ldr	r1, [pc, #40]	; (8007480 <HAL_RCC_ClockConfig+0x1c0>)
 8007458:	5ccb      	ldrb	r3, [r1, r3]
 800745a:	fa22 f303 	lsr.w	r3, r2, r3
 800745e:	4a09      	ldr	r2, [pc, #36]	; (8007484 <HAL_RCC_ClockConfig+0x1c4>)
 8007460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007462:	4b09      	ldr	r3, [pc, #36]	; (8007488 <HAL_RCC_ClockConfig+0x1c8>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4618      	mov	r0, r3
 8007468:	f7fb fb56 	bl	8002b18 <HAL_InitTick>

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40023c00 	.word	0x40023c00
 800747c:	40023800 	.word	0x40023800
 8007480:	08011424 	.word	0x08011424
 8007484:	20000000 	.word	0x20000000
 8007488:	20000004 	.word	0x20000004

0800748c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800748c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	607b      	str	r3, [r7, #4]
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	2300      	movs	r3, #0
 800749e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074a4:	4b67      	ldr	r3, [pc, #412]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f003 030c 	and.w	r3, r3, #12
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d00d      	beq.n	80074cc <HAL_RCC_GetSysClockFreq+0x40>
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	f200 80bd 	bhi.w	8007630 <HAL_RCC_GetSysClockFreq+0x1a4>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_RCC_GetSysClockFreq+0x34>
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d003      	beq.n	80074c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80074be:	e0b7      	b.n	8007630 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074c0:	4b61      	ldr	r3, [pc, #388]	; (8007648 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80074c2:	60bb      	str	r3, [r7, #8]
       break;
 80074c4:	e0b7      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074c6:	4b61      	ldr	r3, [pc, #388]	; (800764c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80074c8:	60bb      	str	r3, [r7, #8]
      break;
 80074ca:	e0b4      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074cc:	4b5d      	ldr	r3, [pc, #372]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074d6:	4b5b      	ldr	r3, [pc, #364]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d04d      	beq.n	800757e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074e2:	4b58      	ldr	r3, [pc, #352]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	099b      	lsrs	r3, r3, #6
 80074e8:	461a      	mov	r2, r3
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074f2:	f04f 0100 	mov.w	r1, #0
 80074f6:	ea02 0800 	and.w	r8, r2, r0
 80074fa:	ea03 0901 	and.w	r9, r3, r1
 80074fe:	4640      	mov	r0, r8
 8007500:	4649      	mov	r1, r9
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	014b      	lsls	r3, r1, #5
 800750c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007510:	0142      	lsls	r2, r0, #5
 8007512:	4610      	mov	r0, r2
 8007514:	4619      	mov	r1, r3
 8007516:	ebb0 0008 	subs.w	r0, r0, r8
 800751a:	eb61 0109 	sbc.w	r1, r1, r9
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	018b      	lsls	r3, r1, #6
 8007528:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800752c:	0182      	lsls	r2, r0, #6
 800752e:	1a12      	subs	r2, r2, r0
 8007530:	eb63 0301 	sbc.w	r3, r3, r1
 8007534:	f04f 0000 	mov.w	r0, #0
 8007538:	f04f 0100 	mov.w	r1, #0
 800753c:	00d9      	lsls	r1, r3, #3
 800753e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007542:	00d0      	lsls	r0, r2, #3
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	eb12 0208 	adds.w	r2, r2, r8
 800754c:	eb43 0309 	adc.w	r3, r3, r9
 8007550:	f04f 0000 	mov.w	r0, #0
 8007554:	f04f 0100 	mov.w	r1, #0
 8007558:	0259      	lsls	r1, r3, #9
 800755a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800755e:	0250      	lsls	r0, r2, #9
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4610      	mov	r0, r2
 8007566:	4619      	mov	r1, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	461a      	mov	r2, r3
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	f7f9 fafc 	bl	8000b6c <__aeabi_uldivmod>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4613      	mov	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	e04a      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800757e:	4b31      	ldr	r3, [pc, #196]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	099b      	lsrs	r3, r3, #6
 8007584:	461a      	mov	r2, r3
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800758e:	f04f 0100 	mov.w	r1, #0
 8007592:	ea02 0400 	and.w	r4, r2, r0
 8007596:	ea03 0501 	and.w	r5, r3, r1
 800759a:	4620      	mov	r0, r4
 800759c:	4629      	mov	r1, r5
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	014b      	lsls	r3, r1, #5
 80075a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80075ac:	0142      	lsls	r2, r0, #5
 80075ae:	4610      	mov	r0, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	1b00      	subs	r0, r0, r4
 80075b4:	eb61 0105 	sbc.w	r1, r1, r5
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	f04f 0300 	mov.w	r3, #0
 80075c0:	018b      	lsls	r3, r1, #6
 80075c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80075c6:	0182      	lsls	r2, r0, #6
 80075c8:	1a12      	subs	r2, r2, r0
 80075ca:	eb63 0301 	sbc.w	r3, r3, r1
 80075ce:	f04f 0000 	mov.w	r0, #0
 80075d2:	f04f 0100 	mov.w	r1, #0
 80075d6:	00d9      	lsls	r1, r3, #3
 80075d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075dc:	00d0      	lsls	r0, r2, #3
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	1912      	adds	r2, r2, r4
 80075e4:	eb45 0303 	adc.w	r3, r5, r3
 80075e8:	f04f 0000 	mov.w	r0, #0
 80075ec:	f04f 0100 	mov.w	r1, #0
 80075f0:	0299      	lsls	r1, r3, #10
 80075f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80075f6:	0290      	lsls	r0, r2, #10
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4610      	mov	r0, r2
 80075fe:	4619      	mov	r1, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	461a      	mov	r2, r3
 8007604:	f04f 0300 	mov.w	r3, #0
 8007608:	f7f9 fab0 	bl	8000b6c <__aeabi_uldivmod>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4613      	mov	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007614:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	0c1b      	lsrs	r3, r3, #16
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	3301      	adds	r3, #1
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	fbb2 f3f3 	udiv	r3, r2, r3
 800762c:	60bb      	str	r3, [r7, #8]
      break;
 800762e:	e002      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007632:	60bb      	str	r3, [r7, #8]
      break;
 8007634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007636:	68bb      	ldr	r3, [r7, #8]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800
 8007648:	00f42400 	.word	0x00f42400
 800764c:	007a1200 	.word	0x007a1200

08007650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007654:	4b03      	ldr	r3, [pc, #12]	; (8007664 <HAL_RCC_GetHCLKFreq+0x14>)
 8007656:	681b      	ldr	r3, [r3, #0]
}
 8007658:	4618      	mov	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20000000 	.word	0x20000000

08007668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800766c:	f7ff fff0 	bl	8007650 <HAL_RCC_GetHCLKFreq>
 8007670:	4602      	mov	r2, r0
 8007672:	4b05      	ldr	r3, [pc, #20]	; (8007688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	0a9b      	lsrs	r3, r3, #10
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	4903      	ldr	r1, [pc, #12]	; (800768c <HAL_RCC_GetPCLK1Freq+0x24>)
 800767e:	5ccb      	ldrb	r3, [r1, r3]
 8007680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007684:	4618      	mov	r0, r3
 8007686:	bd80      	pop	{r7, pc}
 8007688:	40023800 	.word	0x40023800
 800768c:	08011434 	.word	0x08011434

08007690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007694:	f7ff ffdc 	bl	8007650 <HAL_RCC_GetHCLKFreq>
 8007698:	4602      	mov	r2, r0
 800769a:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	0b5b      	lsrs	r3, r3, #13
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	4903      	ldr	r1, [pc, #12]	; (80076b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076a6:	5ccb      	ldrb	r3, [r1, r3]
 80076a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40023800 	.word	0x40023800
 80076b4:	08011434 	.word	0x08011434

080076b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	220f      	movs	r2, #15
 80076c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076c8:	4b12      	ldr	r3, [pc, #72]	; (8007714 <HAL_RCC_GetClockConfig+0x5c>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 0203 	and.w	r2, r3, #3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80076d4:	4b0f      	ldr	r3, [pc, #60]	; (8007714 <HAL_RCC_GetClockConfig+0x5c>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80076e0:	4b0c      	ldr	r3, [pc, #48]	; (8007714 <HAL_RCC_GetClockConfig+0x5c>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80076ec:	4b09      	ldr	r3, [pc, #36]	; (8007714 <HAL_RCC_GetClockConfig+0x5c>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	08db      	lsrs	r3, r3, #3
 80076f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076fa:	4b07      	ldr	r3, [pc, #28]	; (8007718 <HAL_RCC_GetClockConfig+0x60>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0207 	and.w	r2, r3, #7
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	601a      	str	r2, [r3, #0]
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	40023800 	.word	0x40023800
 8007718:	40023c00 	.word	0x40023c00

0800771c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d105      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007740:	2b00      	cmp	r3, #0
 8007742:	d035      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007744:	4b62      	ldr	r3, [pc, #392]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800774a:	f7fb fb5b 	bl	8002e04 <HAL_GetTick>
 800774e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007750:	e008      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007752:	f7fb fb57 	bl	8002e04 <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	2b02      	cmp	r3, #2
 800775e:	d901      	bls.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e0b0      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007764:	4b5b      	ldr	r3, [pc, #364]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1f0      	bne.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	019a      	lsls	r2, r3, #6
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	071b      	lsls	r3, r3, #28
 800777c:	4955      	ldr	r1, [pc, #340]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007784:	4b52      	ldr	r3, [pc, #328]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007786:	2201      	movs	r2, #1
 8007788:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800778a:	f7fb fb3b 	bl	8002e04 <HAL_GetTick>
 800778e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007790:	e008      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007792:	f7fb fb37 	bl	8002e04 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	d901      	bls.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e090      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077a4:	4b4b      	ldr	r3, [pc, #300]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d0f0      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8083 	beq.w	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	4b44      	ldr	r3, [pc, #272]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	4a43      	ldr	r2, [pc, #268]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077cc:	6413      	str	r3, [r2, #64]	; 0x40
 80077ce:	4b41      	ldr	r3, [pc, #260]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80077da:	4b3f      	ldr	r3, [pc, #252]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a3e      	ldr	r2, [pc, #248]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077e6:	f7fb fb0d 	bl	8002e04 <HAL_GetTick>
 80077ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077ec:	e008      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80077ee:	f7fb fb09 	bl	8002e04 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e062      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007800:	4b35      	ldr	r3, [pc, #212]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0f0      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800780c:	4b31      	ldr	r3, [pc, #196]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800780e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007814:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d02f      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	429a      	cmp	r2, r3
 8007828:	d028      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800782a:	4b2a      	ldr	r3, [pc, #168]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800782c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007832:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007834:	4b29      	ldr	r3, [pc, #164]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007836:	2201      	movs	r2, #1
 8007838:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800783a:	4b28      	ldr	r3, [pc, #160]	; (80078dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007840:	4a24      	ldr	r2, [pc, #144]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007846:	4b23      	ldr	r3, [pc, #140]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b01      	cmp	r3, #1
 8007850:	d114      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007852:	f7fb fad7 	bl	8002e04 <HAL_GetTick>
 8007856:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007858:	e00a      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800785a:	f7fb fad3 	bl	8002e04 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	f241 3288 	movw	r2, #5000	; 0x1388
 8007868:	4293      	cmp	r3, r2
 800786a:	d901      	bls.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e02a      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007870:	4b18      	ldr	r3, [pc, #96]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0ee      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007884:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007888:	d10d      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800788a:	4b12      	ldr	r3, [pc, #72]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800789a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800789e:	490d      	ldr	r1, [pc, #52]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	608b      	str	r3, [r1, #8]
 80078a4:	e005      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80078a6:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	4a0a      	ldr	r2, [pc, #40]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80078b0:	6093      	str	r3, [r2, #8]
 80078b2:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078be:	4905      	ldr	r1, [pc, #20]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	42470068 	.word	0x42470068
 80078d4:	40023800 	.word	0x40023800
 80078d8:	40007000 	.word	0x40007000
 80078dc:	42470e40 	.word	0x42470e40

080078e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d13e      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80078fe:	4b23      	ldr	r3, [pc, #140]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d12f      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007914:	4b1e      	ldr	r3, [pc, #120]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007916:	617b      	str	r3, [r7, #20]
          break;
 8007918:	e02f      	b.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800791a:	4b1c      	ldr	r3, [pc, #112]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007926:	d108      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007928:	4b18      	ldr	r3, [pc, #96]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007930:	4a18      	ldr	r2, [pc, #96]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007932:	fbb2 f3f3 	udiv	r3, r2, r3
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	e007      	b.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800793a:	4b14      	ldr	r3, [pc, #80]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007942:	4a15      	ldr	r2, [pc, #84]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007944:	fbb2 f3f3 	udiv	r3, r2, r3
 8007948:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800794a:	4b10      	ldr	r3, [pc, #64]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800794c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007950:	099b      	lsrs	r3, r3, #6
 8007952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	fb02 f303 	mul.w	r3, r2, r3
 800795c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800795e:	4b0b      	ldr	r3, [pc, #44]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007964:	0f1b      	lsrs	r3, r3, #28
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007970:	617b      	str	r3, [r7, #20]
          break;
 8007972:	e002      	b.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]
          break;
 8007978:	bf00      	nop
        }
      }
      break;
 800797a:	bf00      	nop
    }
  }
  return frequency;
 800797c:	697b      	ldr	r3, [r7, #20]
}
 800797e:	4618      	mov	r0, r3
 8007980:	371c      	adds	r7, #28
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40023800 	.word	0x40023800
 8007990:	00bb8000 	.word	0x00bb8000
 8007994:	007a1200 	.word	0x007a1200
 8007998:	00f42400 	.word	0x00f42400

0800799c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e07b      	b.n	8007aa6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d108      	bne.n	80079c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079be:	d009      	beq.n	80079d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	61da      	str	r2, [r3, #28]
 80079c6:	e005      	b.n	80079d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fa ffd4 	bl	800299c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a58:	ea42 0103 	orr.w	r1, r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	0c1b      	lsrs	r3, r3, #16
 8007a72:	f003 0104 	and.w	r1, r3, #4
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7a:	f003 0210 	and.w	r2, r3, #16
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69da      	ldr	r2, [r3, #28]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e041      	b.n	8007b44 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fa ffa9 	bl	8002a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f000 fa91 	bl	8008014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d001      	beq.n	8007b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e04e      	b.n	8007c02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a23      	ldr	r2, [pc, #140]	; (8007c10 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d022      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8e:	d01d      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d018      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a1c      	ldr	r2, [pc, #112]	; (8007c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00e      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d009      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a19      	ldr	r2, [pc, #100]	; (8007c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d004      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x80>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a18      	ldr	r2, [pc, #96]	; (8007c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d111      	bne.n	8007bf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b06      	cmp	r3, #6
 8007bdc:	d010      	beq.n	8007c00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f042 0201 	orr.w	r2, r2, #1
 8007bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bee:	e007      	b.n	8007c00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0201 	orr.w	r2, r2, #1
 8007bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	40010000 	.word	0x40010000
 8007c14:	40000400 	.word	0x40000400
 8007c18:	40000800 	.word	0x40000800
 8007c1c:	40000c00 	.word	0x40000c00
 8007c20:	40010400 	.word	0x40010400
 8007c24:	40014000 	.word	0x40014000
 8007c28:	40001800 	.word	0x40001800

08007c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d122      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d11b      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0202 	mvn.w	r2, #2
 8007c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	f003 0303 	and.w	r3, r3, #3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f9b2 	bl	8007fd8 <HAL_TIM_IC_CaptureCallback>
 8007c74:	e005      	b.n	8007c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9a4 	bl	8007fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f9b5 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d122      	bne.n	8007cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0304 	and.w	r3, r3, #4
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d11b      	bne.n	8007cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0204 	mvn.w	r2, #4
 8007cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f988 	bl	8007fd8 <HAL_TIM_IC_CaptureCallback>
 8007cc8:	e005      	b.n	8007cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f97a 	bl	8007fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f98b 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b08      	cmp	r3, #8
 8007ce8:	d122      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b08      	cmp	r3, #8
 8007cf6:	d11b      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f06f 0208 	mvn.w	r2, #8
 8007d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2204      	movs	r2, #4
 8007d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f95e 	bl	8007fd8 <HAL_TIM_IC_CaptureCallback>
 8007d1c:	e005      	b.n	8007d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f950 	bl	8007fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f961 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 0310 	and.w	r3, r3, #16
 8007d3a:	2b10      	cmp	r3, #16
 8007d3c:	d122      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b10      	cmp	r3, #16
 8007d4a:	d11b      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0210 	mvn.w	r2, #16
 8007d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2208      	movs	r2, #8
 8007d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f934 	bl	8007fd8 <HAL_TIM_IC_CaptureCallback>
 8007d70:	e005      	b.n	8007d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f926 	bl	8007fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f937 	bl	8007fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d10e      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d107      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0201 	mvn.w	r2, #1
 8007da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fa f820 	bl	8001df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dba:	2b80      	cmp	r3, #128	; 0x80
 8007dbc:	d10e      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc8:	2b80      	cmp	r3, #128	; 0x80
 8007dca:	d107      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fadc 	bl	8008394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b40      	cmp	r3, #64	; 0x40
 8007de8:	d10e      	bne.n	8007e08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df4:	2b40      	cmp	r3, #64	; 0x40
 8007df6:	d107      	bne.n	8007e08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f8fc 	bl	8008000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d10e      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	d107      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f06f 0220 	mvn.w	r2, #32
 8007e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 faa6 	bl	8008380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e34:	bf00      	nop
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d101      	bne.n	8007e54 <HAL_TIM_ConfigClockSource+0x18>
 8007e50:	2302      	movs	r3, #2
 8007e52:	e0b3      	b.n	8007fbc <HAL_TIM_ConfigClockSource+0x180>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8c:	d03e      	beq.n	8007f0c <HAL_TIM_ConfigClockSource+0xd0>
 8007e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e92:	f200 8087 	bhi.w	8007fa4 <HAL_TIM_ConfigClockSource+0x168>
 8007e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9a:	f000 8085 	beq.w	8007fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8007e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea2:	d87f      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x168>
 8007ea4:	2b70      	cmp	r3, #112	; 0x70
 8007ea6:	d01a      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0xa2>
 8007ea8:	2b70      	cmp	r3, #112	; 0x70
 8007eaa:	d87b      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x168>
 8007eac:	2b60      	cmp	r3, #96	; 0x60
 8007eae:	d050      	beq.n	8007f52 <HAL_TIM_ConfigClockSource+0x116>
 8007eb0:	2b60      	cmp	r3, #96	; 0x60
 8007eb2:	d877      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x168>
 8007eb4:	2b50      	cmp	r3, #80	; 0x50
 8007eb6:	d03c      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0xf6>
 8007eb8:	2b50      	cmp	r3, #80	; 0x50
 8007eba:	d873      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x168>
 8007ebc:	2b40      	cmp	r3, #64	; 0x40
 8007ebe:	d058      	beq.n	8007f72 <HAL_TIM_ConfigClockSource+0x136>
 8007ec0:	2b40      	cmp	r3, #64	; 0x40
 8007ec2:	d86f      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x168>
 8007ec4:	2b30      	cmp	r3, #48	; 0x30
 8007ec6:	d064      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x156>
 8007ec8:	2b30      	cmp	r3, #48	; 0x30
 8007eca:	d86b      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x168>
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	d060      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x156>
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d867      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x168>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d05c      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x156>
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d05a      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007edc:	e062      	b.n	8007fa4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	6899      	ldr	r1, [r3, #8]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f000 f9ab 	bl	8008248 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	609a      	str	r2, [r3, #8]
      break;
 8007f0a:	e04e      	b.n	8007faa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	6899      	ldr	r1, [r3, #8]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f000 f994 	bl	8008248 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f2e:	609a      	str	r2, [r3, #8]
      break;
 8007f30:	e03b      	b.n	8007faa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6859      	ldr	r1, [r3, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f000 f908 	bl	8008154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2150      	movs	r1, #80	; 0x50
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 f961 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007f50:	e02b      	b.n	8007faa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6859      	ldr	r1, [r3, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f000 f927 	bl	80081b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2160      	movs	r1, #96	; 0x60
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f951 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007f70:	e01b      	b.n	8007faa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	6859      	ldr	r1, [r3, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f000 f8e8 	bl	8008154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2140      	movs	r1, #64	; 0x40
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f941 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007f90:	e00b      	b.n	8007faa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	f000 f938 	bl	8008212 <TIM_ITRx_SetConfig>
        break;
 8007fa2:	e002      	b.n	8007faa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007fa4:	bf00      	nop
 8007fa6:	e000      	b.n	8007faa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007fa8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a40      	ldr	r2, [pc, #256]	; (8008128 <TIM_Base_SetConfig+0x114>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d013      	beq.n	8008054 <TIM_Base_SetConfig+0x40>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008032:	d00f      	beq.n	8008054 <TIM_Base_SetConfig+0x40>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a3d      	ldr	r2, [pc, #244]	; (800812c <TIM_Base_SetConfig+0x118>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00b      	beq.n	8008054 <TIM_Base_SetConfig+0x40>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a3c      	ldr	r2, [pc, #240]	; (8008130 <TIM_Base_SetConfig+0x11c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d007      	beq.n	8008054 <TIM_Base_SetConfig+0x40>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a3b      	ldr	r2, [pc, #236]	; (8008134 <TIM_Base_SetConfig+0x120>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_Base_SetConfig+0x40>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a3a      	ldr	r2, [pc, #232]	; (8008138 <TIM_Base_SetConfig+0x124>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d108      	bne.n	8008066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a2f      	ldr	r2, [pc, #188]	; (8008128 <TIM_Base_SetConfig+0x114>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d02b      	beq.n	80080c6 <TIM_Base_SetConfig+0xb2>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008074:	d027      	beq.n	80080c6 <TIM_Base_SetConfig+0xb2>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a2c      	ldr	r2, [pc, #176]	; (800812c <TIM_Base_SetConfig+0x118>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d023      	beq.n	80080c6 <TIM_Base_SetConfig+0xb2>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a2b      	ldr	r2, [pc, #172]	; (8008130 <TIM_Base_SetConfig+0x11c>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d01f      	beq.n	80080c6 <TIM_Base_SetConfig+0xb2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a2a      	ldr	r2, [pc, #168]	; (8008134 <TIM_Base_SetConfig+0x120>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d01b      	beq.n	80080c6 <TIM_Base_SetConfig+0xb2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a29      	ldr	r2, [pc, #164]	; (8008138 <TIM_Base_SetConfig+0x124>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d017      	beq.n	80080c6 <TIM_Base_SetConfig+0xb2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a28      	ldr	r2, [pc, #160]	; (800813c <TIM_Base_SetConfig+0x128>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d013      	beq.n	80080c6 <TIM_Base_SetConfig+0xb2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a27      	ldr	r2, [pc, #156]	; (8008140 <TIM_Base_SetConfig+0x12c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00f      	beq.n	80080c6 <TIM_Base_SetConfig+0xb2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a26      	ldr	r2, [pc, #152]	; (8008144 <TIM_Base_SetConfig+0x130>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d00b      	beq.n	80080c6 <TIM_Base_SetConfig+0xb2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a25      	ldr	r2, [pc, #148]	; (8008148 <TIM_Base_SetConfig+0x134>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d007      	beq.n	80080c6 <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a24      	ldr	r2, [pc, #144]	; (800814c <TIM_Base_SetConfig+0x138>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d003      	beq.n	80080c6 <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a23      	ldr	r2, [pc, #140]	; (8008150 <TIM_Base_SetConfig+0x13c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d108      	bne.n	80080d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a0a      	ldr	r2, [pc, #40]	; (8008128 <TIM_Base_SetConfig+0x114>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d003      	beq.n	800810c <TIM_Base_SetConfig+0xf8>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a0c      	ldr	r2, [pc, #48]	; (8008138 <TIM_Base_SetConfig+0x124>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d103      	bne.n	8008114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	615a      	str	r2, [r3, #20]
}
 800811a:	bf00      	nop
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	40010000 	.word	0x40010000
 800812c:	40000400 	.word	0x40000400
 8008130:	40000800 	.word	0x40000800
 8008134:	40000c00 	.word	0x40000c00
 8008138:	40010400 	.word	0x40010400
 800813c:	40014000 	.word	0x40014000
 8008140:	40014400 	.word	0x40014400
 8008144:	40014800 	.word	0x40014800
 8008148:	40001800 	.word	0x40001800
 800814c:	40001c00 	.word	0x40001c00
 8008150:	40002000 	.word	0x40002000

08008154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	f023 0201 	bic.w	r2, r3, #1
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800817e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f023 030a 	bic.w	r3, r3, #10
 8008190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b087      	sub	sp, #28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	f023 0210 	bic.w	r2, r3, #16
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	031b      	lsls	r3, r3, #12
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	621a      	str	r2, [r3, #32]
}
 8008206:	bf00      	nop
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4313      	orrs	r3, r2
 8008230:	f043 0307 	orr.w	r3, r3, #7
 8008234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	609a      	str	r2, [r3, #8]
}
 800823c:	bf00      	nop
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	021a      	lsls	r2, r3, #8
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	431a      	orrs	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4313      	orrs	r3, r2
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	4313      	orrs	r3, r2
 8008274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	609a      	str	r2, [r3, #8]
}
 800827c:	bf00      	nop
 800827e:	371c      	adds	r7, #28
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008298:	2b01      	cmp	r3, #1
 800829a:	d101      	bne.n	80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800829c:	2302      	movs	r3, #2
 800829e:	e05a      	b.n	8008356 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a21      	ldr	r2, [pc, #132]	; (8008364 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d022      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ec:	d01d      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a1d      	ldr	r2, [pc, #116]	; (8008368 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d018      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a1b      	ldr	r2, [pc, #108]	; (800836c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d013      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a1a      	ldr	r2, [pc, #104]	; (8008370 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00e      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a18      	ldr	r2, [pc, #96]	; (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d009      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d004      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a15      	ldr	r2, [pc, #84]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d10c      	bne.n	8008344 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	4313      	orrs	r3, r2
 800833a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40010000 	.word	0x40010000
 8008368:	40000400 	.word	0x40000400
 800836c:	40000800 	.word	0x40000800
 8008370:	40000c00 	.word	0x40000c00
 8008374:	40010400 	.word	0x40010400
 8008378:	40014000 	.word	0x40014000
 800837c:	40001800 	.word	0x40001800

08008380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e03f      	b.n	800843a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fa fb52 	bl	8002a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2224      	movs	r2, #36	; 0x24
 80083d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68da      	ldr	r2, [r3, #12]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fd1d 	bl	8008e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	695a      	ldr	r2, [r3, #20]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b08a      	sub	sp, #40	; 0x28
 8008446:	af02      	add	r7, sp, #8
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	603b      	str	r3, [r7, #0]
 800844e:	4613      	mov	r3, r2
 8008450:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b20      	cmp	r3, #32
 8008460:	d17c      	bne.n	800855c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <HAL_UART_Transmit+0x2c>
 8008468:	88fb      	ldrh	r3, [r7, #6]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e075      	b.n	800855e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008478:	2b01      	cmp	r3, #1
 800847a:	d101      	bne.n	8008480 <HAL_UART_Transmit+0x3e>
 800847c:	2302      	movs	r3, #2
 800847e:	e06e      	b.n	800855e <HAL_UART_Transmit+0x11c>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2221      	movs	r2, #33	; 0x21
 8008492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008496:	f7fa fcb5 	bl	8002e04 <HAL_GetTick>
 800849a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	88fa      	ldrh	r2, [r7, #6]
 80084a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	88fa      	ldrh	r2, [r7, #6]
 80084a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b0:	d108      	bne.n	80084c4 <HAL_UART_Transmit+0x82>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d104      	bne.n	80084c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	e003      	b.n	80084cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80084d4:	e02a      	b.n	800852c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2200      	movs	r2, #0
 80084de:	2180      	movs	r1, #128	; 0x80
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 fadf 	bl	8008aa4 <UART_WaitOnFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e036      	b.n	800855e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008504:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	3302      	adds	r3, #2
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	e007      	b.n	800851e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	781a      	ldrb	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	3301      	adds	r3, #1
 800851c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1cf      	bne.n	80084d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2200      	movs	r2, #0
 800853e:	2140      	movs	r1, #64	; 0x40
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 faaf 	bl	8008aa4 <UART_WaitOnFlagUntilTimeout>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e006      	b.n	800855e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2220      	movs	r2, #32
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	e000      	b.n	800855e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800855c:	2302      	movs	r3, #2
  }
}
 800855e:	4618      	mov	r0, r3
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b08a      	sub	sp, #40	; 0x28
 800856a:	af02      	add	r7, sp, #8
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	603b      	str	r3, [r7, #0]
 8008572:	4613      	mov	r3, r2
 8008574:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b20      	cmp	r3, #32
 8008584:	f040 808c 	bne.w	80086a0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <HAL_UART_Receive+0x2e>
 800858e:	88fb      	ldrh	r3, [r7, #6]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e084      	b.n	80086a2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_UART_Receive+0x40>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e07d      	b.n	80086a2 <HAL_UART_Receive+0x13c>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2222      	movs	r2, #34	; 0x22
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085c2:	f7fa fc1f 	bl	8002e04 <HAL_GetTick>
 80085c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	88fa      	ldrh	r2, [r7, #6]
 80085cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	88fa      	ldrh	r2, [r7, #6]
 80085d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085dc:	d108      	bne.n	80085f0 <HAL_UART_Receive+0x8a>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d104      	bne.n	80085f0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	61bb      	str	r3, [r7, #24]
 80085ee:	e003      	b.n	80085f8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085f4:	2300      	movs	r3, #0
 80085f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008600:	e043      	b.n	800868a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2200      	movs	r2, #0
 800860a:	2120      	movs	r1, #32
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 fa49 	bl	8008aa4 <UART_WaitOnFlagUntilTimeout>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e042      	b.n	80086a2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10c      	bne.n	800863c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	b29b      	uxth	r3, r3
 800862a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862e:	b29a      	uxth	r2, r3
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	3302      	adds	r3, #2
 8008638:	61bb      	str	r3, [r7, #24]
 800863a:	e01f      	b.n	800867c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008644:	d007      	beq.n	8008656 <HAL_UART_Receive+0xf0>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <HAL_UART_Receive+0xfe>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d106      	bne.n	8008664 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	b2da      	uxtb	r2, r3
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	e008      	b.n	8008676 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008670:	b2da      	uxtb	r2, r3
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	3301      	adds	r3, #1
 800867a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008680:	b29b      	uxth	r3, r3
 8008682:	3b01      	subs	r3, #1
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800868e:	b29b      	uxth	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1b6      	bne.n	8008602 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2220      	movs	r2, #32
 8008698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	e000      	b.n	80086a2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80086a0:	2302      	movs	r3, #2
  }
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3720      	adds	r7, #32
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	60b9      	str	r1, [r7, #8]
 80086b4:	4613      	mov	r3, r2
 80086b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	d11d      	bne.n	8008700 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <HAL_UART_Receive_IT+0x26>
 80086ca:	88fb      	ldrh	r3, [r7, #6]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e016      	b.n	8008702 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d101      	bne.n	80086e2 <HAL_UART_Receive_IT+0x38>
 80086de:	2302      	movs	r3, #2
 80086e0:	e00f      	b.n	8008702 <HAL_UART_Receive_IT+0x58>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	461a      	mov	r2, r3
 80086f4:	68b9      	ldr	r1, [r7, #8]
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 fa1e 	bl	8008b38 <UART_Start_Receive_IT>
 80086fc:	4603      	mov	r3, r0
 80086fe:	e000      	b.n	8008702 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008700:	2302      	movs	r3, #2
  }
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800872c:	2300      	movs	r3, #0
 800872e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008730:	2300      	movs	r3, #0
 8008732:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10d      	bne.n	800875e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d008      	beq.n	800875e <HAL_UART_IRQHandler+0x52>
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	f003 0320 	and.w	r3, r3, #32
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fad1 	bl	8008cfe <UART_Receive_IT>
      return;
 800875c:	e17c      	b.n	8008a58 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 80b1 	beq.w	80088c8 <HAL_UART_IRQHandler+0x1bc>
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d105      	bne.n	800877c <HAL_UART_IRQHandler+0x70>
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 80a6 	beq.w	80088c8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <HAL_UART_IRQHandler+0x90>
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	f043 0201 	orr.w	r2, r3, #1
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	f003 0304 	and.w	r3, r3, #4
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <HAL_UART_IRQHandler+0xb0>
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d005      	beq.n	80087bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b4:	f043 0202 	orr.w	r2, r3, #2
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <HAL_UART_IRQHandler+0xd0>
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d4:	f043 0204 	orr.w	r2, r3, #4
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	f003 0308 	and.w	r3, r3, #8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00f      	beq.n	8008806 <HAL_UART_IRQHandler+0xfa>
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d104      	bne.n	80087fa <HAL_UART_IRQHandler+0xee>
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	f043 0208 	orr.w	r2, r3, #8
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 811f 	beq.w	8008a4e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	f003 0320 	and.w	r3, r3, #32
 8008816:	2b00      	cmp	r3, #0
 8008818:	d007      	beq.n	800882a <HAL_UART_IRQHandler+0x11e>
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	f003 0320 	and.w	r3, r3, #32
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fa6a 	bl	8008cfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008834:	2b40      	cmp	r3, #64	; 0x40
 8008836:	bf0c      	ite	eq
 8008838:	2301      	moveq	r3, #1
 800883a:	2300      	movne	r3, #0
 800883c:	b2db      	uxtb	r3, r3
 800883e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008844:	f003 0308 	and.w	r3, r3, #8
 8008848:	2b00      	cmp	r3, #0
 800884a:	d102      	bne.n	8008852 <HAL_UART_IRQHandler+0x146>
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d031      	beq.n	80088b6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f9aa 	bl	8008bac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008862:	2b40      	cmp	r3, #64	; 0x40
 8008864:	d123      	bne.n	80088ae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	695a      	ldr	r2, [r3, #20]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008874:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887a:	2b00      	cmp	r3, #0
 800887c:	d013      	beq.n	80088a6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008882:	4a77      	ldr	r2, [pc, #476]	; (8008a60 <HAL_UART_IRQHandler+0x354>)
 8008884:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888a:	4618      	mov	r0, r3
 800888c:	f7fa fc3c 	bl	8003108 <HAL_DMA_Abort_IT>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d016      	beq.n	80088c4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088a0:	4610      	mov	r0, r2
 80088a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a4:	e00e      	b.n	80088c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f8e6 	bl	8008a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ac:	e00a      	b.n	80088c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f8e2 	bl	8008a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b4:	e006      	b.n	80088c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f8de 	bl	8008a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80088c2:	e0c4      	b.n	8008a4e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c4:	bf00      	nop
    return;
 80088c6:	e0c2      	b.n	8008a4e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	f040 80a2 	bne.w	8008a16 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 809c 	beq.w	8008a16 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	f003 0310 	and.w	r3, r3, #16
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 8096 	beq.w	8008a16 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890a:	2b40      	cmp	r3, #64	; 0x40
 800890c:	d14f      	bne.n	80089ae <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008918:	8a3b      	ldrh	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 8099 	beq.w	8008a52 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008924:	8a3a      	ldrh	r2, [r7, #16]
 8008926:	429a      	cmp	r2, r3
 8008928:	f080 8093 	bcs.w	8008a52 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	8a3a      	ldrh	r2, [r7, #16]
 8008930:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800893c:	d02b      	beq.n	8008996 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800894c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	695a      	ldr	r2, [r3, #20]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0201 	bic.w	r2, r2, #1
 800895c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	695a      	ldr	r2, [r3, #20]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800896c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2220      	movs	r2, #32
 8008972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0210 	bic.w	r2, r2, #16
 800898a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	4618      	mov	r0, r3
 8008992:	f7fa fb49 	bl	8003028 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800899e:	b29b      	uxth	r3, r3
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f870 	bl	8008a8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80089ac:	e051      	b.n	8008a52 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d047      	beq.n	8008a56 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80089c6:	8a7b      	ldrh	r3, [r7, #18]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d044      	beq.n	8008a56 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089da:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	695a      	ldr	r2, [r3, #20]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0201 	bic.w	r2, r2, #1
 80089ea:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0210 	bic.w	r2, r2, #16
 8008a08:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a0a:	8a7b      	ldrh	r3, [r7, #18]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f83c 	bl	8008a8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008a14:	e01f      	b.n	8008a56 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d008      	beq.n	8008a32 <HAL_UART_IRQHandler+0x326>
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f8ff 	bl	8008c2e <UART_Transmit_IT>
    return;
 8008a30:	e012      	b.n	8008a58 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00d      	beq.n	8008a58 <HAL_UART_IRQHandler+0x34c>
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d008      	beq.n	8008a58 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f941 	bl	8008cce <UART_EndTransmit_IT>
    return;
 8008a4c:	e004      	b.n	8008a58 <HAL_UART_IRQHandler+0x34c>
    return;
 8008a4e:	bf00      	nop
 8008a50:	e002      	b.n	8008a58 <HAL_UART_IRQHandler+0x34c>
      return;
 8008a52:	bf00      	nop
 8008a54:	e000      	b.n	8008a58 <HAL_UART_IRQHandler+0x34c>
      return;
 8008a56:	bf00      	nop
  }
}
 8008a58:	3728      	adds	r7, #40	; 0x28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	08008c07 	.word	0x08008c07

08008a64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ab4:	e02c      	b.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008abc:	d028      	beq.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d007      	beq.n	8008ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ac4:	f7fa f99e 	bl	8002e04 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d21d      	bcs.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ae2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695a      	ldr	r2, [r3, #20]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0201 	bic.w	r2, r2, #1
 8008af2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e00f      	b.n	8008b30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	bf0c      	ite	eq
 8008b20:	2301      	moveq	r3, #1
 8008b22:	2300      	movne	r3, #0
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	79fb      	ldrb	r3, [r7, #7]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d0c3      	beq.n	8008ab6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	4613      	mov	r3, r2
 8008b44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	88fa      	ldrh	r2, [r7, #6]
 8008b50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2222      	movs	r2, #34	; 0x22
 8008b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b7c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	695a      	ldr	r2, [r3, #20]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f042 0201 	orr.w	r2, r2, #1
 8008b8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f042 0220 	orr.w	r2, r2, #32
 8008b9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bc2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	695a      	ldr	r2, [r3, #20]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f022 0201 	bic.w	r2, r2, #1
 8008bd2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d107      	bne.n	8008bec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68da      	ldr	r2, [r3, #12]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f022 0210 	bic.w	r2, r2, #16
 8008bea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008bfa:	bf00      	nop
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f7ff ff29 	bl	8008a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c26:	bf00      	nop
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b085      	sub	sp, #20
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b21      	cmp	r3, #33	; 0x21
 8008c40:	d13e      	bne.n	8008cc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c4a:	d114      	bne.n	8008c76 <UART_Transmit_IT+0x48>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d110      	bne.n	8008c76 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	1c9a      	adds	r2, r3, #2
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	621a      	str	r2, [r3, #32]
 8008c74:	e008      	b.n	8008c88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	1c59      	adds	r1, r3, #1
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	6211      	str	r1, [r2, #32]
 8008c80:	781a      	ldrb	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	4619      	mov	r1, r3
 8008c96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10f      	bne.n	8008cbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008caa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	e000      	b.n	8008cc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008cc0:	2302      	movs	r3, #2
  }
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff feb8 	bl	8008a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b22      	cmp	r3, #34	; 0x22
 8008d10:	f040 8087 	bne.w	8008e22 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1c:	d117      	bne.n	8008d4e <UART_Receive_IT+0x50>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d113      	bne.n	8008d4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d26:	2300      	movs	r3, #0
 8008d28:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d46:	1c9a      	adds	r2, r3, #2
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8008d4c:	e026      	b.n	8008d9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d52:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d60:	d007      	beq.n	8008d72 <UART_Receive_IT+0x74>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10a      	bne.n	8008d80 <UART_Receive_IT+0x82>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	e008      	b.n	8008d92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	4619      	mov	r1, r3
 8008daa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d136      	bne.n	8008e1e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 0220 	bic.w	r2, r2, #32
 8008dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695a      	ldr	r2, [r3, #20]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 0201 	bic.w	r2, r2, #1
 8008dde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d10e      	bne.n	8008e0e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 0210 	bic.w	r2, r2, #16
 8008dfe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff fe40 	bl	8008a8c <HAL_UARTEx_RxEventCallback>
 8008e0c:	e002      	b.n	8008e14 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7f8 f8c0 	bl	8000f94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e002      	b.n	8008e24 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e000      	b.n	8008e24 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008e22:	2302      	movs	r3, #2
  }
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e30:	b09f      	sub	sp, #124	; 0x7c
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e42:	68d9      	ldr	r1, [r3, #12]
 8008e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	ea40 0301 	orr.w	r3, r0, r1
 8008e4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e50:	689a      	ldr	r2, [r3, #8]
 8008e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	431a      	orrs	r2, r3
 8008e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e70:	f021 010c 	bic.w	r1, r1, #12
 8008e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e7a:	430b      	orrs	r3, r1
 8008e7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e8a:	6999      	ldr	r1, [r3, #24]
 8008e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	ea40 0301 	orr.w	r3, r0, r1
 8008e94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	4bc5      	ldr	r3, [pc, #788]	; (80091b0 <UART_SetConfig+0x384>)
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d004      	beq.n	8008eaa <UART_SetConfig+0x7e>
 8008ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	4bc3      	ldr	r3, [pc, #780]	; (80091b4 <UART_SetConfig+0x388>)
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d103      	bne.n	8008eb2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008eaa:	f7fe fbf1 	bl	8007690 <HAL_RCC_GetPCLK2Freq>
 8008eae:	6778      	str	r0, [r7, #116]	; 0x74
 8008eb0:	e002      	b.n	8008eb8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008eb2:	f7fe fbd9 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 8008eb6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ec0:	f040 80b6 	bne.w	8009030 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ec6:	461c      	mov	r4, r3
 8008ec8:	f04f 0500 	mov.w	r5, #0
 8008ecc:	4622      	mov	r2, r4
 8008ece:	462b      	mov	r3, r5
 8008ed0:	1891      	adds	r1, r2, r2
 8008ed2:	6439      	str	r1, [r7, #64]	; 0x40
 8008ed4:	415b      	adcs	r3, r3
 8008ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ed8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008edc:	1912      	adds	r2, r2, r4
 8008ede:	eb45 0303 	adc.w	r3, r5, r3
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f04f 0100 	mov.w	r1, #0
 8008eea:	00d9      	lsls	r1, r3, #3
 8008eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ef0:	00d0      	lsls	r0, r2, #3
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	1911      	adds	r1, r2, r4
 8008ef8:	6639      	str	r1, [r7, #96]	; 0x60
 8008efa:	416b      	adcs	r3, r5
 8008efc:	667b      	str	r3, [r7, #100]	; 0x64
 8008efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	1891      	adds	r1, r2, r2
 8008f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f0c:	415b      	adcs	r3, r3
 8008f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008f18:	f7f7 fe28 	bl	8000b6c <__aeabi_uldivmod>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4ba5      	ldr	r3, [pc, #660]	; (80091b8 <UART_SetConfig+0x38c>)
 8008f22:	fba3 2302 	umull	r2, r3, r3, r2
 8008f26:	095b      	lsrs	r3, r3, #5
 8008f28:	011e      	lsls	r6, r3, #4
 8008f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f2c:	461c      	mov	r4, r3
 8008f2e:	f04f 0500 	mov.w	r5, #0
 8008f32:	4622      	mov	r2, r4
 8008f34:	462b      	mov	r3, r5
 8008f36:	1891      	adds	r1, r2, r2
 8008f38:	6339      	str	r1, [r7, #48]	; 0x30
 8008f3a:	415b      	adcs	r3, r3
 8008f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008f42:	1912      	adds	r2, r2, r4
 8008f44:	eb45 0303 	adc.w	r3, r5, r3
 8008f48:	f04f 0000 	mov.w	r0, #0
 8008f4c:	f04f 0100 	mov.w	r1, #0
 8008f50:	00d9      	lsls	r1, r3, #3
 8008f52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f56:	00d0      	lsls	r0, r2, #3
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	1911      	adds	r1, r2, r4
 8008f5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f60:	416b      	adcs	r3, r5
 8008f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	f04f 0300 	mov.w	r3, #0
 8008f6e:	1891      	adds	r1, r2, r2
 8008f70:	62b9      	str	r1, [r7, #40]	; 0x28
 8008f72:	415b      	adcs	r3, r3
 8008f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008f7e:	f7f7 fdf5 	bl	8000b6c <__aeabi_uldivmod>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4b8c      	ldr	r3, [pc, #560]	; (80091b8 <UART_SetConfig+0x38c>)
 8008f88:	fba3 1302 	umull	r1, r3, r3, r2
 8008f8c:	095b      	lsrs	r3, r3, #5
 8008f8e:	2164      	movs	r1, #100	; 0x64
 8008f90:	fb01 f303 	mul.w	r3, r1, r3
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	3332      	adds	r3, #50	; 0x32
 8008f9a:	4a87      	ldr	r2, [pc, #540]	; (80091b8 <UART_SetConfig+0x38c>)
 8008f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa0:	095b      	lsrs	r3, r3, #5
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fa8:	441e      	add	r6, r3
 8008faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fac:	4618      	mov	r0, r3
 8008fae:	f04f 0100 	mov.w	r1, #0
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	1894      	adds	r4, r2, r2
 8008fb8:	623c      	str	r4, [r7, #32]
 8008fba:	415b      	adcs	r3, r3
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008fbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008fc2:	1812      	adds	r2, r2, r0
 8008fc4:	eb41 0303 	adc.w	r3, r1, r3
 8008fc8:	f04f 0400 	mov.w	r4, #0
 8008fcc:	f04f 0500 	mov.w	r5, #0
 8008fd0:	00dd      	lsls	r5, r3, #3
 8008fd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008fd6:	00d4      	lsls	r4, r2, #3
 8008fd8:	4622      	mov	r2, r4
 8008fda:	462b      	mov	r3, r5
 8008fdc:	1814      	adds	r4, r2, r0
 8008fde:	653c      	str	r4, [r7, #80]	; 0x50
 8008fe0:	414b      	adcs	r3, r1
 8008fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8008fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f04f 0300 	mov.w	r3, #0
 8008fee:	1891      	adds	r1, r2, r2
 8008ff0:	61b9      	str	r1, [r7, #24]
 8008ff2:	415b      	adcs	r3, r3
 8008ff4:	61fb      	str	r3, [r7, #28]
 8008ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ffa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008ffe:	f7f7 fdb5 	bl	8000b6c <__aeabi_uldivmod>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4b6c      	ldr	r3, [pc, #432]	; (80091b8 <UART_SetConfig+0x38c>)
 8009008:	fba3 1302 	umull	r1, r3, r3, r2
 800900c:	095b      	lsrs	r3, r3, #5
 800900e:	2164      	movs	r1, #100	; 0x64
 8009010:	fb01 f303 	mul.w	r3, r1, r3
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	3332      	adds	r3, #50	; 0x32
 800901a:	4a67      	ldr	r2, [pc, #412]	; (80091b8 <UART_SetConfig+0x38c>)
 800901c:	fba2 2303 	umull	r2, r3, r2, r3
 8009020:	095b      	lsrs	r3, r3, #5
 8009022:	f003 0207 	and.w	r2, r3, #7
 8009026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4432      	add	r2, r6
 800902c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800902e:	e0b9      	b.n	80091a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009032:	461c      	mov	r4, r3
 8009034:	f04f 0500 	mov.w	r5, #0
 8009038:	4622      	mov	r2, r4
 800903a:	462b      	mov	r3, r5
 800903c:	1891      	adds	r1, r2, r2
 800903e:	6139      	str	r1, [r7, #16]
 8009040:	415b      	adcs	r3, r3
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009048:	1912      	adds	r2, r2, r4
 800904a:	eb45 0303 	adc.w	r3, r5, r3
 800904e:	f04f 0000 	mov.w	r0, #0
 8009052:	f04f 0100 	mov.w	r1, #0
 8009056:	00d9      	lsls	r1, r3, #3
 8009058:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800905c:	00d0      	lsls	r0, r2, #3
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	eb12 0804 	adds.w	r8, r2, r4
 8009066:	eb43 0905 	adc.w	r9, r3, r5
 800906a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	4618      	mov	r0, r3
 8009070:	f04f 0100 	mov.w	r1, #0
 8009074:	f04f 0200 	mov.w	r2, #0
 8009078:	f04f 0300 	mov.w	r3, #0
 800907c:	008b      	lsls	r3, r1, #2
 800907e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009082:	0082      	lsls	r2, r0, #2
 8009084:	4640      	mov	r0, r8
 8009086:	4649      	mov	r1, r9
 8009088:	f7f7 fd70 	bl	8000b6c <__aeabi_uldivmod>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4b49      	ldr	r3, [pc, #292]	; (80091b8 <UART_SetConfig+0x38c>)
 8009092:	fba3 2302 	umull	r2, r3, r3, r2
 8009096:	095b      	lsrs	r3, r3, #5
 8009098:	011e      	lsls	r6, r3, #4
 800909a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800909c:	4618      	mov	r0, r3
 800909e:	f04f 0100 	mov.w	r1, #0
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	1894      	adds	r4, r2, r2
 80090a8:	60bc      	str	r4, [r7, #8]
 80090aa:	415b      	adcs	r3, r3
 80090ac:	60fb      	str	r3, [r7, #12]
 80090ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090b2:	1812      	adds	r2, r2, r0
 80090b4:	eb41 0303 	adc.w	r3, r1, r3
 80090b8:	f04f 0400 	mov.w	r4, #0
 80090bc:	f04f 0500 	mov.w	r5, #0
 80090c0:	00dd      	lsls	r5, r3, #3
 80090c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80090c6:	00d4      	lsls	r4, r2, #3
 80090c8:	4622      	mov	r2, r4
 80090ca:	462b      	mov	r3, r5
 80090cc:	1814      	adds	r4, r2, r0
 80090ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80090d0:	414b      	adcs	r3, r1
 80090d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	4618      	mov	r0, r3
 80090da:	f04f 0100 	mov.w	r1, #0
 80090de:	f04f 0200 	mov.w	r2, #0
 80090e2:	f04f 0300 	mov.w	r3, #0
 80090e6:	008b      	lsls	r3, r1, #2
 80090e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80090ec:	0082      	lsls	r2, r0, #2
 80090ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80090f2:	f7f7 fd3b 	bl	8000b6c <__aeabi_uldivmod>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4b2f      	ldr	r3, [pc, #188]	; (80091b8 <UART_SetConfig+0x38c>)
 80090fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009100:	095b      	lsrs	r3, r3, #5
 8009102:	2164      	movs	r1, #100	; 0x64
 8009104:	fb01 f303 	mul.w	r3, r1, r3
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	011b      	lsls	r3, r3, #4
 800910c:	3332      	adds	r3, #50	; 0x32
 800910e:	4a2a      	ldr	r2, [pc, #168]	; (80091b8 <UART_SetConfig+0x38c>)
 8009110:	fba2 2303 	umull	r2, r3, r2, r3
 8009114:	095b      	lsrs	r3, r3, #5
 8009116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800911a:	441e      	add	r6, r3
 800911c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800911e:	4618      	mov	r0, r3
 8009120:	f04f 0100 	mov.w	r1, #0
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	1894      	adds	r4, r2, r2
 800912a:	603c      	str	r4, [r7, #0]
 800912c:	415b      	adcs	r3, r3
 800912e:	607b      	str	r3, [r7, #4]
 8009130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009134:	1812      	adds	r2, r2, r0
 8009136:	eb41 0303 	adc.w	r3, r1, r3
 800913a:	f04f 0400 	mov.w	r4, #0
 800913e:	f04f 0500 	mov.w	r5, #0
 8009142:	00dd      	lsls	r5, r3, #3
 8009144:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009148:	00d4      	lsls	r4, r2, #3
 800914a:	4622      	mov	r2, r4
 800914c:	462b      	mov	r3, r5
 800914e:	eb12 0a00 	adds.w	sl, r2, r0
 8009152:	eb43 0b01 	adc.w	fp, r3, r1
 8009156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	4618      	mov	r0, r3
 800915c:	f04f 0100 	mov.w	r1, #0
 8009160:	f04f 0200 	mov.w	r2, #0
 8009164:	f04f 0300 	mov.w	r3, #0
 8009168:	008b      	lsls	r3, r1, #2
 800916a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800916e:	0082      	lsls	r2, r0, #2
 8009170:	4650      	mov	r0, sl
 8009172:	4659      	mov	r1, fp
 8009174:	f7f7 fcfa 	bl	8000b6c <__aeabi_uldivmod>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4b0e      	ldr	r3, [pc, #56]	; (80091b8 <UART_SetConfig+0x38c>)
 800917e:	fba3 1302 	umull	r1, r3, r3, r2
 8009182:	095b      	lsrs	r3, r3, #5
 8009184:	2164      	movs	r1, #100	; 0x64
 8009186:	fb01 f303 	mul.w	r3, r1, r3
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	011b      	lsls	r3, r3, #4
 800918e:	3332      	adds	r3, #50	; 0x32
 8009190:	4a09      	ldr	r2, [pc, #36]	; (80091b8 <UART_SetConfig+0x38c>)
 8009192:	fba2 2303 	umull	r2, r3, r2, r3
 8009196:	095b      	lsrs	r3, r3, #5
 8009198:	f003 020f 	and.w	r2, r3, #15
 800919c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4432      	add	r2, r6
 80091a2:	609a      	str	r2, [r3, #8]
}
 80091a4:	bf00      	nop
 80091a6:	377c      	adds	r7, #124	; 0x7c
 80091a8:	46bd      	mov	sp, r7
 80091aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ae:	bf00      	nop
 80091b0:	40011000 	.word	0x40011000
 80091b4:	40011400 	.word	0x40011400
 80091b8:	51eb851f 	.word	0x51eb851f

080091bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091bc:	b084      	sub	sp, #16
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	f107 001c 	add.w	r0, r7, #28
 80091ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d122      	bne.n	800921a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80091e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d105      	bne.n	800920e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f94a 	bl	80094a8 <USB_CoreReset>
 8009214:	4603      	mov	r3, r0
 8009216:	73fb      	strb	r3, [r7, #15]
 8009218:	e01a      	b.n	8009250 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f93e 	bl	80094a8 <USB_CoreReset>
 800922c:	4603      	mov	r3, r0
 800922e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009232:	2b00      	cmp	r3, #0
 8009234:	d106      	bne.n	8009244 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	639a      	str	r2, [r3, #56]	; 0x38
 8009242:	e005      	b.n	8009250 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009248:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	2b01      	cmp	r3, #1
 8009254:	d10b      	bne.n	800926e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f043 0206 	orr.w	r2, r3, #6
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f043 0220 	orr.w	r2, r3, #32
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800927a:	b004      	add	sp, #16
 800927c:	4770      	bx	lr

0800927e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f043 0201 	orr.w	r2, r3, #1
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f023 0201 	bic.w	r2, r3, #1
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	460b      	mov	r3, r1
 80092cc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d106      	bne.n	80092ee <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	60da      	str	r2, [r3, #12]
 80092ec:	e00b      	b.n	8009306 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80092ee:	78fb      	ldrb	r3, [r7, #3]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d106      	bne.n	8009302 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	60da      	str	r2, [r3, #12]
 8009300:	e001      	b.n	8009306 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e003      	b.n	800930e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009306:	2032      	movs	r0, #50	; 0x32
 8009308:	f7f9 fd88 	bl	8002e1c <HAL_Delay>

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	019b      	lsls	r3, r3, #6
 800932a:	f043 0220 	orr.w	r2, r3, #32
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3301      	adds	r3, #1
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4a09      	ldr	r2, [pc, #36]	; (8009360 <USB_FlushTxFifo+0x48>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d901      	bls.n	8009344 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	e006      	b.n	8009352 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f003 0320 	and.w	r3, r3, #32
 800934c:	2b20      	cmp	r3, #32
 800934e:	d0f0      	beq.n	8009332 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	00030d40 	.word	0x00030d40

08009364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2210      	movs	r2, #16
 8009374:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4a09      	ldr	r2, [pc, #36]	; (80093a4 <USB_FlushRxFifo+0x40>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d901      	bls.n	8009388 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e006      	b.n	8009396 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	f003 0310 	and.w	r3, r3, #16
 8009390:	2b10      	cmp	r3, #16
 8009392:	d0f0      	beq.n	8009376 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	00030d40 	.word	0x00030d40

080093a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b089      	sub	sp, #36	; 0x24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	4611      	mov	r1, r2
 80093b4:	461a      	mov	r2, r3
 80093b6:	460b      	mov	r3, r1
 80093b8:	71fb      	strb	r3, [r7, #7]
 80093ba:	4613      	mov	r3, r2
 80093bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80093c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d11a      	bne.n	8009404 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80093ce:	88bb      	ldrh	r3, [r7, #4]
 80093d0:	3303      	adds	r3, #3
 80093d2:	089b      	lsrs	r3, r3, #2
 80093d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80093d6:	2300      	movs	r3, #0
 80093d8:	61bb      	str	r3, [r7, #24]
 80093da:	e00f      	b.n	80093fc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80093dc:	79fb      	ldrb	r3, [r7, #7]
 80093de:	031a      	lsls	r2, r3, #12
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e8:	461a      	mov	r2, r3
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	3304      	adds	r3, #4
 80093f4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	3301      	adds	r3, #1
 80093fa:	61bb      	str	r3, [r7, #24]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	429a      	cmp	r2, r3
 8009402:	d3eb      	bcc.n	80093dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3724      	adds	r7, #36	; 0x24
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009412:	b480      	push	{r7}
 8009414:	b089      	sub	sp, #36	; 0x24
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	4613      	mov	r3, r2
 800941e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009428:	88fb      	ldrh	r3, [r7, #6]
 800942a:	3303      	adds	r3, #3
 800942c:	089b      	lsrs	r3, r3, #2
 800942e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009430:	2300      	movs	r3, #0
 8009432:	61bb      	str	r3, [r7, #24]
 8009434:	e00b      	b.n	800944e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	601a      	str	r2, [r3, #0]
    pDest++;
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	3304      	adds	r3, #4
 8009446:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	3301      	adds	r3, #1
 800944c:	61bb      	str	r3, [r7, #24]
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	429a      	cmp	r2, r3
 8009454:	d3ef      	bcc.n	8009436 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009456:	69fb      	ldr	r3, [r7, #28]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3724      	adds	r7, #36	; 0x24
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	4013      	ands	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800947c:	68fb      	ldr	r3, [r7, #12]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	f003 0301 	and.w	r3, r3, #1
}
 800949a:	4618      	mov	r0, r3
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
	...

080094a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	3301      	adds	r3, #1
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4a13      	ldr	r2, [pc, #76]	; (800950c <USB_CoreReset+0x64>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d901      	bls.n	80094c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e01b      	b.n	80094fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	daf2      	bge.n	80094b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f043 0201 	orr.w	r2, r3, #1
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3301      	adds	r3, #1
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4a09      	ldr	r2, [pc, #36]	; (800950c <USB_CoreReset+0x64>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d901      	bls.n	80094f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e006      	b.n	80094fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d0f0      	beq.n	80094de <USB_CoreReset+0x36>

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	00030d40 	.word	0x00030d40

08009510 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009510:	b084      	sub	sp, #16
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	f107 001c 	add.w	r0, r7, #28
 800951e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800952c:	461a      	mov	r2, r3
 800952e:	2300      	movs	r3, #0
 8009530:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009542:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955e:	2b00      	cmp	r3, #0
 8009560:	d018      	beq.n	8009594 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	2b01      	cmp	r3, #1
 8009566:	d10a      	bne.n	800957e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009576:	f043 0304 	orr.w	r3, r3, #4
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	e014      	b.n	80095a8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800958c:	f023 0304 	bic.w	r3, r3, #4
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	e009      	b.n	80095a8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095a2:	f023 0304 	bic.w	r3, r3, #4
 80095a6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80095a8:	2110      	movs	r1, #16
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff feb4 	bl	8009318 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7ff fed7 	bl	8009364 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	e015      	b.n	80095e8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c8:	461a      	mov	r2, r3
 80095ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095ce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095dc:	461a      	mov	r2, r3
 80095de:	2300      	movs	r3, #0
 80095e0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3301      	adds	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d3e5      	bcc.n	80095bc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80095f0:	2101      	movs	r1, #1
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f8ac 	bl	8009750 <USB_DriveVbus>

  HAL_Delay(200U);
 80095f8:	20c8      	movs	r0, #200	; 0xc8
 80095fa:	f7f9 fc0f 	bl	8002e1c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800960a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00b      	beq.n	8009630 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800961e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a14      	ldr	r2, [pc, #80]	; (8009674 <USB_HostInit+0x164>)
 8009624:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a13      	ldr	r2, [pc, #76]	; (8009678 <USB_HostInit+0x168>)
 800962a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800962e:	e009      	b.n	8009644 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2280      	movs	r2, #128	; 0x80
 8009634:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a10      	ldr	r2, [pc, #64]	; (800967c <USB_HostInit+0x16c>)
 800963a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a10      	ldr	r2, [pc, #64]	; (8009680 <USB_HostInit+0x170>)
 8009640:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	2b00      	cmp	r3, #0
 8009648:	d105      	bne.n	8009656 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	f043 0210 	orr.w	r2, r3, #16
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	699a      	ldr	r2, [r3, #24]
 800965a:	4b0a      	ldr	r3, [pc, #40]	; (8009684 <USB_HostInit+0x174>)
 800965c:	4313      	orrs	r3, r2
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800966e:	b004      	add	sp, #16
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	01000200 	.word	0x01000200
 8009678:	00e00300 	.word	0x00e00300
 800967c:	00600080 	.word	0x00600080
 8009680:	004000e0 	.word	0x004000e0
 8009684:	a3200008 	.word	0xa3200008

08009688 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096a6:	f023 0303 	bic.w	r3, r3, #3
 80096aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	68f9      	ldr	r1, [r7, #12]
 80096bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80096c0:	4313      	orrs	r3, r2
 80096c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d107      	bne.n	80096da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096d0:	461a      	mov	r2, r3
 80096d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80096d6:	6053      	str	r3, [r2, #4]
 80096d8:	e009      	b.n	80096ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d106      	bne.n	80096ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096e6:	461a      	mov	r2, r3
 80096e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80096ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009708:	2300      	movs	r3, #0
 800970a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800971c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800972a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800972c:	2064      	movs	r0, #100	; 0x64
 800972e:	f7f9 fb75 	bl	8002e1c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800973a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800973e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009740:	200a      	movs	r0, #10
 8009742:	f7f9 fb6b 	bl	8002e1c <HAL_Delay>

  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009774:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d109      	bne.n	8009794 <USB_DriveVbus+0x44>
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d106      	bne.n	8009794 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800978e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009792:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800979a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800979e:	d109      	bne.n	80097b4 <USB_DriveVbus+0x64>
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80097ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097b2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b085      	sub	sp, #20
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	0c5b      	lsrs	r3, r3, #17
 80097e0:	f003 0303 	and.w	r3, r3, #3
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	b29b      	uxth	r3, r3
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
	...

08009814 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	4608      	mov	r0, r1
 800981e:	4611      	mov	r1, r2
 8009820:	461a      	mov	r2, r3
 8009822:	4603      	mov	r3, r0
 8009824:	70fb      	strb	r3, [r7, #3]
 8009826:	460b      	mov	r3, r1
 8009828:	70bb      	strb	r3, [r7, #2]
 800982a:	4613      	mov	r3, r2
 800982c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	4413      	add	r3, r2
 800983e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009842:	461a      	mov	r2, r3
 8009844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009848:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800984a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800984e:	2b03      	cmp	r3, #3
 8009850:	d87e      	bhi.n	8009950 <USB_HC_Init+0x13c>
 8009852:	a201      	add	r2, pc, #4	; (adr r2, 8009858 <USB_HC_Init+0x44>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	08009869 	.word	0x08009869
 800985c:	08009913 	.word	0x08009913
 8009860:	08009869 	.word	0x08009869
 8009864:	080098d5 	.word	0x080098d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009868:	78fb      	ldrb	r3, [r7, #3]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	4413      	add	r3, r2
 8009870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009874:	461a      	mov	r2, r3
 8009876:	f240 439d 	movw	r3, #1181	; 0x49d
 800987a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800987c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009880:	2b00      	cmp	r3, #0
 8009882:	da10      	bge.n	80098a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009884:	78fb      	ldrb	r3, [r7, #3]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	4413      	add	r3, r2
 800988c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	0151      	lsls	r1, r2, #5
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	440a      	add	r2, r1
 800989a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800989e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098a2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80098a4:	e057      	b.n	8009956 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d051      	beq.n	8009956 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	78fa      	ldrb	r2, [r7, #3]
 80098c2:	0151      	lsls	r1, r2, #5
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	440a      	add	r2, r1
 80098c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80098d0:	60d3      	str	r3, [r2, #12]
      break;
 80098d2:	e040      	b.n	8009956 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e0:	461a      	mov	r2, r3
 80098e2:	f240 639d 	movw	r3, #1693	; 0x69d
 80098e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80098e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	da34      	bge.n	800995a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	78fa      	ldrb	r2, [r7, #3]
 8009900:	0151      	lsls	r1, r2, #5
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	440a      	add	r2, r1
 8009906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800990a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800990e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009910:	e023      	b.n	800995a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009912:	78fb      	ldrb	r3, [r7, #3]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	4413      	add	r3, r2
 800991a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800991e:	461a      	mov	r2, r3
 8009920:	f240 2325 	movw	r3, #549	; 0x225
 8009924:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009926:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800992a:	2b00      	cmp	r3, #0
 800992c:	da17      	bge.n	800995e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800992e:	78fb      	ldrb	r3, [r7, #3]
 8009930:	015a      	lsls	r2, r3, #5
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	4413      	add	r3, r2
 8009936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	78fa      	ldrb	r2, [r7, #3]
 800993e:	0151      	lsls	r1, r2, #5
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	440a      	add	r2, r1
 8009944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009948:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800994c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800994e:	e006      	b.n	800995e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	77fb      	strb	r3, [r7, #31]
      break;
 8009954:	e004      	b.n	8009960 <USB_HC_Init+0x14c>
      break;
 8009956:	bf00      	nop
 8009958:	e002      	b.n	8009960 <USB_HC_Init+0x14c>
      break;
 800995a:	bf00      	nop
 800995c:	e000      	b.n	8009960 <USB_HC_Init+0x14c>
      break;
 800995e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009966:	699a      	ldr	r2, [r3, #24]
 8009968:	78fb      	ldrb	r3, [r7, #3]
 800996a:	f003 030f 	and.w	r3, r3, #15
 800996e:	2101      	movs	r1, #1
 8009970:	fa01 f303 	lsl.w	r3, r1, r3
 8009974:	6939      	ldr	r1, [r7, #16]
 8009976:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800997a:	4313      	orrs	r3, r2
 800997c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800998a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800998e:	2b00      	cmp	r3, #0
 8009990:	da03      	bge.n	800999a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009996:	61bb      	str	r3, [r7, #24]
 8009998:	e001      	b.n	800999e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff ff0f 	bl	80097c2 <USB_GetHostSpeed>
 80099a4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80099a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d106      	bne.n	80099bc <USB_HC_Init+0x1a8>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d003      	beq.n	80099bc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80099b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	e001      	b.n	80099c0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099c0:	787b      	ldrb	r3, [r7, #1]
 80099c2:	059b      	lsls	r3, r3, #22
 80099c4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80099c8:	78bb      	ldrb	r3, [r7, #2]
 80099ca:	02db      	lsls	r3, r3, #11
 80099cc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099d0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80099d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099d6:	049b      	lsls	r3, r3, #18
 80099d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80099dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80099e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80099e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	0159      	lsls	r1, r3, #5
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	440b      	add	r3, r1
 80099f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099f6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099fc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80099fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	d10f      	bne.n	8009a26 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	78fa      	ldrb	r2, [r7, #3]
 8009a16:	0151      	lsls	r1, r2, #5
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	440a      	add	r2, r1
 8009a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08c      	sub	sp, #48	; 0x30
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a4c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d02d      	beq.n	8009ab6 <USB_HC_StartXfer+0x86>
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	791b      	ldrb	r3, [r3, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d129      	bne.n	8009ab6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d117      	bne.n	8009a98 <USB_HC_StartXfer+0x68>
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	79db      	ldrb	r3, [r3, #7]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d003      	beq.n	8009a78 <USB_HC_StartXfer+0x48>
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	79db      	ldrb	r3, [r3, #7]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d10f      	bne.n	8009a98 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	69fa      	ldr	r2, [r7, #28]
 8009a88:	0151      	lsls	r1, r2, #5
 8009a8a:	6a3a      	ldr	r2, [r7, #32]
 8009a8c:	440a      	add	r2, r1
 8009a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a96:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009a98:	79fb      	ldrb	r3, [r7, #7]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10b      	bne.n	8009ab6 <USB_HC_StartXfer+0x86>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	795b      	ldrb	r3, [r3, #5]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d107      	bne.n	8009ab6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	785b      	ldrb	r3, [r3, #1]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 fa2f 	bl	8009f10 <USB_DoPing>
      return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e0f8      	b.n	8009ca8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d018      	beq.n	8009af0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	8912      	ldrh	r2, [r2, #8]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	8912      	ldrh	r2, [r2, #8]
 8009ace:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ad2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009ad4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ad6:	8b7b      	ldrh	r3, [r7, #26]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d90b      	bls.n	8009af4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009adc:	8b7b      	ldrh	r3, [r7, #26]
 8009ade:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009ae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	8912      	ldrh	r2, [r2, #8]
 8009ae6:	fb02 f203 	mul.w	r2, r2, r3
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	611a      	str	r2, [r3, #16]
 8009aee:	e001      	b.n	8009af4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009af0:	2301      	movs	r3, #1
 8009af2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	78db      	ldrb	r3, [r3, #3]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d007      	beq.n	8009b0c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009afc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	8912      	ldrh	r2, [r2, #8]
 8009b02:	fb02 f203 	mul.w	r2, r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	611a      	str	r2, [r3, #16]
 8009b0a:	e003      	b.n	8009b14 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	695a      	ldr	r2, [r3, #20]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b1e:	04d9      	lsls	r1, r3, #19
 8009b20:	4b63      	ldr	r3, [pc, #396]	; (8009cb0 <USB_HC_StartXfer+0x280>)
 8009b22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	7a9b      	ldrb	r3, [r3, #10]
 8009b2a:	075b      	lsls	r3, r3, #29
 8009b2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b30:	69f9      	ldr	r1, [r7, #28]
 8009b32:	0148      	lsls	r0, r1, #5
 8009b34:	6a39      	ldr	r1, [r7, #32]
 8009b36:	4401      	add	r1, r0
 8009b38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009b40:	79fb      	ldrb	r3, [r7, #7]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d009      	beq.n	8009b5a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	68d9      	ldr	r1, [r3, #12]
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b56:	460a      	mov	r2, r1
 8009b58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bf0c      	ite	eq
 8009b6a:	2301      	moveq	r3, #1
 8009b6c:	2300      	movne	r3, #0
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69fa      	ldr	r2, [r7, #28]
 8009b82:	0151      	lsls	r1, r2, #5
 8009b84:	6a3a      	ldr	r2, [r7, #32]
 8009b86:	440a      	add	r2, r1
 8009b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	015a      	lsls	r2, r3, #5
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	4413      	add	r3, r2
 8009b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	7e7b      	ldrb	r3, [r7, #25]
 8009ba2:	075b      	lsls	r3, r3, #29
 8009ba4:	69f9      	ldr	r1, [r7, #28]
 8009ba6:	0148      	lsls	r0, r1, #5
 8009ba8:	6a39      	ldr	r1, [r7, #32]
 8009baa:	4401      	add	r1, r0
 8009bac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	78db      	ldrb	r3, [r3, #3]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d004      	beq.n	8009bde <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bda:	613b      	str	r3, [r7, #16]
 8009bdc:	e003      	b.n	8009be6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009be4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009c00:	79fb      	ldrb	r3, [r7, #7]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	e04e      	b.n	8009ca8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	78db      	ldrb	r3, [r3, #3]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d149      	bne.n	8009ca6 <USB_HC_StartXfer+0x276>
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d045      	beq.n	8009ca6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	79db      	ldrb	r3, [r3, #7]
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d830      	bhi.n	8009c84 <USB_HC_StartXfer+0x254>
 8009c22:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <USB_HC_StartXfer+0x1f8>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c39 	.word	0x08009c39
 8009c2c:	08009c5d 	.word	0x08009c5d
 8009c30:	08009c39 	.word	0x08009c39
 8009c34:	08009c5d 	.word	0x08009c5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	3303      	adds	r3, #3
 8009c3e:	089b      	lsrs	r3, r3, #2
 8009c40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009c42:	8afa      	ldrh	r2, [r7, #22]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d91c      	bls.n	8009c88 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	f043 0220 	orr.w	r2, r3, #32
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c5a:	e015      	b.n	8009c88 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	3303      	adds	r3, #3
 8009c62:	089b      	lsrs	r3, r3, #2
 8009c64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009c66:	8afa      	ldrh	r2, [r7, #22]
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d90a      	bls.n	8009c8c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c82:	e003      	b.n	8009c8c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009c84:	bf00      	nop
 8009c86:	e002      	b.n	8009c8e <USB_HC_StartXfer+0x25e>
        break;
 8009c88:	bf00      	nop
 8009c8a:	e000      	b.n	8009c8e <USB_HC_StartXfer+0x25e>
        break;
 8009c8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	68d9      	ldr	r1, [r3, #12]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	785a      	ldrb	r2, [r3, #1]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	9000      	str	r0, [sp, #0]
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7ff fb81 	bl	80093a8 <USB_WritePacket>
  }

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3728      	adds	r7, #40	; 0x28
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	1ff80000 	.word	0x1ff80000

08009cb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	b29b      	uxth	r3, r3
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b089      	sub	sp, #36	; 0x24
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009ce6:	78fb      	ldrb	r3, [r7, #3]
 8009ce8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	0c9b      	lsrs	r3, r3, #18
 8009cfe:	f003 0303 	and.w	r3, r3, #3
 8009d02:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	0fdb      	lsrs	r3, r3, #31
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f003 0320 	and.w	r3, r3, #32
 8009d22:	2b20      	cmp	r3, #32
 8009d24:	d104      	bne.n	8009d30 <USB_HC_Halt+0x5a>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e0e8      	b.n	8009f02 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d002      	beq.n	8009d3c <USB_HC_Halt+0x66>
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d173      	bne.n	8009e24 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	697a      	ldr	r2, [r7, #20]
 8009d4c:	0151      	lsls	r1, r2, #5
 8009d4e:	69ba      	ldr	r2, [r7, #24]
 8009d50:	440a      	add	r2, r1
 8009d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f003 0320 	and.w	r3, r3, #32
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f040 80cb 	bne.w	8009f00 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d143      	bne.n	8009dfe <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	015a      	lsls	r2, r3, #5
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	0151      	lsls	r1, r2, #5
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	440a      	add	r2, r1
 8009d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	015a      	lsls	r2, r3, #5
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	0151      	lsls	r1, r2, #5
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	440a      	add	r2, r1
 8009dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009db4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	015a      	lsls	r2, r3, #5
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	697a      	ldr	r2, [r7, #20]
 8009dc6:	0151      	lsls	r1, r2, #5
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	440a      	add	r2, r1
 8009dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dd4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	61fb      	str	r3, [r7, #28]
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009de2:	d81d      	bhi.n	8009e20 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	015a      	lsls	r2, r3, #5
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dfa:	d0ec      	beq.n	8009dd6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009dfc:	e080      	b.n	8009f00 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	0151      	lsls	r1, r2, #5
 8009e10:	69ba      	ldr	r2, [r7, #24]
 8009e12:	440a      	add	r2, r1
 8009e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e1c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009e1e:	e06f      	b.n	8009f00 <USB_HC_Halt+0x22a>
            break;
 8009e20:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009e22:	e06d      	b.n	8009f00 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e42:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d143      	bne.n	8009edc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	69ba      	ldr	r2, [r7, #24]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	69ba      	ldr	r2, [r7, #24]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e92:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	0151      	lsls	r1, r2, #5
 8009ea6:	69ba      	ldr	r2, [r7, #24]
 8009ea8:	440a      	add	r2, r1
 8009eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009eae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009eb2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	61fb      	str	r3, [r7, #28]
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ec0:	d81d      	bhi.n	8009efe <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ed8:	d0ec      	beq.n	8009eb4 <USB_HC_Halt+0x1de>
 8009eda:	e011      	b.n	8009f00 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	0151      	lsls	r1, r2, #5
 8009eee:	69ba      	ldr	r2, [r7, #24]
 8009ef0:	440a      	add	r2, r1
 8009ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ef6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	e000      	b.n	8009f00 <USB_HC_Halt+0x22a>
          break;
 8009efe:	bf00      	nop
    }
  }

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3724      	adds	r7, #36	; 0x24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
	...

08009f10 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009f24:	2301      	movs	r3, #1
 8009f26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	04da      	lsls	r2, r3, #19
 8009f2c:	4b15      	ldr	r3, [pc, #84]	; (8009f84 <USB_DoPing+0x74>)
 8009f2e:	4013      	ands	r3, r2
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	0151      	lsls	r1, r2, #5
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	440a      	add	r2, r1
 8009f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f40:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f58:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f60:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f6e:	461a      	mov	r2, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	371c      	adds	r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	1ff80000 	.word	0x1ff80000

08009f88 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff f981 	bl	80092a0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009f9e:	2110      	movs	r1, #16
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff f9b9 	bl	8009318 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7ff f9dc 	bl	8009364 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009fac:	2300      	movs	r3, #0
 8009fae:	613b      	str	r3, [r7, #16]
 8009fb0:	e01f      	b.n	8009ff2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fc8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fd0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fd8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	015a      	lsls	r2, r3, #5
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	613b      	str	r3, [r7, #16]
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	2b0f      	cmp	r3, #15
 8009ff6:	d9dc      	bls.n	8009fb2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	613b      	str	r3, [r7, #16]
 8009ffc:	e034      	b.n	800a068 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	015a      	lsls	r2, r3, #5
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	4413      	add	r3, r2
 800a006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a014:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a01c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a024:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	015a      	lsls	r2, r3, #5
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4413      	add	r3, r2
 800a02e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a032:	461a      	mov	r2, r3
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	3301      	adds	r3, #1
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a044:	d80c      	bhi.n	800a060 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a05c:	d0ec      	beq.n	800a038 <USB_StopHost+0xb0>
 800a05e:	e000      	b.n	800a062 <USB_StopHost+0xda>
        break;
 800a060:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	3301      	adds	r3, #1
 800a066:	613b      	str	r3, [r7, #16]
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	2b0f      	cmp	r3, #15
 800a06c:	d9c7      	bls.n	8009ffe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a074:	461a      	mov	r2, r3
 800a076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a07a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a082:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff f8fa 	bl	800927e <USB_EnableGlobalInt>

  return HAL_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a094:	b590      	push	{r4, r7, lr}
 800a096:	b089      	sub	sp, #36	; 0x24
 800a098:	af04      	add	r7, sp, #16
 800a09a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a09c:	2301      	movs	r3, #1
 800a09e:	2202      	movs	r2, #2
 800a0a0:	2102      	movs	r1, #2
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fcb2 	bl	800aa0c <USBH_FindInterface>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	2bff      	cmp	r3, #255	; 0xff
 800a0b0:	d002      	beq.n	800a0b8 <USBH_CDC_InterfaceInit+0x24>
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d901      	bls.n	800a0bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e13d      	b.n	800a338 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fc87 	bl	800a9d4 <USBH_SelectInterface>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	e131      	b.n	800a338 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a0da:	2050      	movs	r0, #80	; 0x50
 800a0dc:	f005 fbd2 	bl	800f884 <malloc>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	e11f      	b.n	800a338 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a0f8:	2250      	movs	r2, #80	; 0x50
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	68b8      	ldr	r0, [r7, #8]
 800a0fe:	f005 fbdf 	bl	800f8c0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a102:	7bfb      	ldrb	r3, [r7, #15]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	211a      	movs	r1, #26
 800a108:	fb01 f303 	mul.w	r3, r1, r3
 800a10c:	4413      	add	r3, r2
 800a10e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	b25b      	sxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	da15      	bge.n	800a146 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	211a      	movs	r1, #26
 800a120:	fb01 f303 	mul.w	r3, r1, r3
 800a124:	4413      	add	r3, r2
 800a126:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a12a:	781a      	ldrb	r2, [r3, #0]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a130:	7bfb      	ldrb	r3, [r7, #15]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	211a      	movs	r1, #26
 800a136:	fb01 f303 	mul.w	r3, r1, r3
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a140:	881a      	ldrh	r2, [r3, #0]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	785b      	ldrb	r3, [r3, #1]
 800a14a:	4619      	mov	r1, r3
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f002 f88c 	bl	800c26a <USBH_AllocPipe>
 800a152:	4603      	mov	r3, r0
 800a154:	461a      	mov	r2, r3
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	7819      	ldrb	r1, [r3, #0]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	7858      	ldrb	r0, [r3, #1]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	8952      	ldrh	r2, [r2, #10]
 800a172:	9202      	str	r2, [sp, #8]
 800a174:	2203      	movs	r2, #3
 800a176:	9201      	str	r2, [sp, #4]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	4623      	mov	r3, r4
 800a17c:	4602      	mov	r2, r0
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f002 f844 	bl	800c20c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2200      	movs	r2, #0
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f005 facb 	bl	800f728 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a192:	2300      	movs	r3, #0
 800a194:	2200      	movs	r2, #0
 800a196:	210a      	movs	r1, #10
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fc37 	bl	800aa0c <USBH_FindInterface>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
 800a1a4:	2bff      	cmp	r3, #255	; 0xff
 800a1a6:	d002      	beq.n	800a1ae <USBH_CDC_InterfaceInit+0x11a>
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d901      	bls.n	800a1b2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	e0c2      	b.n	800a338 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	211a      	movs	r1, #26
 800a1b8:	fb01 f303 	mul.w	r3, r1, r3
 800a1bc:	4413      	add	r3, r2
 800a1be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	b25b      	sxtb	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	da16      	bge.n	800a1f8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	211a      	movs	r1, #26
 800a1d0:	fb01 f303 	mul.w	r3, r1, r3
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	211a      	movs	r1, #26
 800a1e6:	fb01 f303 	mul.w	r3, r1, r3
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a1f0:	881a      	ldrh	r2, [r3, #0]
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	835a      	strh	r2, [r3, #26]
 800a1f6:	e015      	b.n	800a224 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	211a      	movs	r1, #26
 800a1fe:	fb01 f303 	mul.w	r3, r1, r3
 800a202:	4413      	add	r3, r2
 800a204:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a208:	781a      	ldrb	r2, [r3, #0]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	211a      	movs	r1, #26
 800a214:	fb01 f303 	mul.w	r3, r1, r3
 800a218:	4413      	add	r3, r2
 800a21a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a21e:	881a      	ldrh	r2, [r3, #0]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	211a      	movs	r1, #26
 800a22a:	fb01 f303 	mul.w	r3, r1, r3
 800a22e:	4413      	add	r3, r2
 800a230:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b25b      	sxtb	r3, r3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da16      	bge.n	800a26a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	211a      	movs	r1, #26
 800a242:	fb01 f303 	mul.w	r3, r1, r3
 800a246:	4413      	add	r3, r2
 800a248:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a24c:	781a      	ldrb	r2, [r3, #0]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a252:	7bfb      	ldrb	r3, [r7, #15]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	211a      	movs	r1, #26
 800a258:	fb01 f303 	mul.w	r3, r1, r3
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a262:	881a      	ldrh	r2, [r3, #0]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	835a      	strh	r2, [r3, #26]
 800a268:	e015      	b.n	800a296 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	211a      	movs	r1, #26
 800a270:	fb01 f303 	mul.w	r3, r1, r3
 800a274:	4413      	add	r3, r2
 800a276:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a27a:	781a      	ldrb	r2, [r3, #0]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a280:	7bfb      	ldrb	r3, [r7, #15]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	211a      	movs	r1, #26
 800a286:	fb01 f303 	mul.w	r3, r1, r3
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a290:	881a      	ldrh	r2, [r3, #0]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	7b9b      	ldrb	r3, [r3, #14]
 800a29a:	4619      	mov	r1, r3
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f001 ffe4 	bl	800c26a <USBH_AllocPipe>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	7bdb      	ldrb	r3, [r3, #15]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 ffda 	bl	800c26a <USBH_AllocPipe>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	7b59      	ldrb	r1, [r3, #13]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	7b98      	ldrb	r0, [r3, #14]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	8b12      	ldrh	r2, [r2, #24]
 800a2d6:	9202      	str	r2, [sp, #8]
 800a2d8:	2202      	movs	r2, #2
 800a2da:	9201      	str	r2, [sp, #4]
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	4623      	mov	r3, r4
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f001 ff92 	bl	800c20c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	7b19      	ldrb	r1, [r3, #12]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	7bd8      	ldrb	r0, [r3, #15]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	8b52      	ldrh	r2, [r2, #26]
 800a300:	9202      	str	r2, [sp, #8]
 800a302:	2202      	movs	r2, #2
 800a304:	9201      	str	r2, [sp, #4]
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4623      	mov	r3, r4
 800a30a:	4602      	mov	r2, r0
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f001 ff7d 	bl	800c20c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	7b5b      	ldrb	r3, [r3, #13]
 800a31e:	2200      	movs	r2, #0
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f005 fa00 	bl	800f728 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	7b1b      	ldrb	r3, [r3, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f005 f9f9 	bl	800f728 <USBH_LL_SetToggle>

  return USBH_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd90      	pop	{r4, r7, pc}

0800a340 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00e      	beq.n	800a378 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 ff72 	bl	800c24a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f001 ff9d 	bl	800c2ac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	7b1b      	ldrb	r3, [r3, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00e      	beq.n	800a39e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	7b1b      	ldrb	r3, [r3, #12]
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 ff5f 	bl	800c24a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	7b1b      	ldrb	r3, [r3, #12]
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f001 ff8a 	bl	800c2ac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	7b5b      	ldrb	r3, [r3, #13]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00e      	beq.n	800a3c4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	7b5b      	ldrb	r3, [r3, #13]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f001 ff4c 	bl	800c24a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	7b5b      	ldrb	r3, [r3, #13]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f001 ff77 	bl	800c2ac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00b      	beq.n	800a3e8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3d6:	69db      	ldr	r3, [r3, #28]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f005 fa5b 	bl	800f894 <free>
    phost->pActiveClass->pData = 0U;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a400:	69db      	ldr	r3, [r3, #28]
 800a402:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	3340      	adds	r3, #64	; 0x40
 800a408:	4619      	mov	r1, r3
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f8b1 	bl	800a572 <GetLineCoding>
 800a410:	4603      	mov	r3, r0
 800a412:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a414:	7afb      	ldrb	r3, [r7, #11]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d105      	bne.n	800a426 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a420:	2102      	movs	r1, #2
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a426:	7afb      	ldrb	r3, [r7, #11]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a438:	2301      	movs	r3, #1
 800a43a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a446:	69db      	ldr	r3, [r3, #28]
 800a448:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a450:	2b04      	cmp	r3, #4
 800a452:	d877      	bhi.n	800a544 <USBH_CDC_Process+0x114>
 800a454:	a201      	add	r2, pc, #4	; (adr r2, 800a45c <USBH_CDC_Process+0x2c>)
 800a456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45a:	bf00      	nop
 800a45c:	0800a471 	.word	0x0800a471
 800a460:	0800a477 	.word	0x0800a477
 800a464:	0800a4a7 	.word	0x0800a4a7
 800a468:	0800a51b 	.word	0x0800a51b
 800a46c:	0800a529 	.word	0x0800a529
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]
      break;
 800a474:	e06d      	b.n	800a552 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f897 	bl	800a5b0 <SetLineCoding>
 800a482:	4603      	mov	r3, r0
 800a484:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a486:	7bbb      	ldrb	r3, [r7, #14]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d104      	bne.n	800a496 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2202      	movs	r2, #2
 800a490:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a494:	e058      	b.n	800a548 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a496:	7bbb      	ldrb	r3, [r7, #14]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d055      	beq.n	800a548 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2204      	movs	r2, #4
 800a4a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a4a4:	e050      	b.n	800a548 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	3340      	adds	r3, #64	; 0x40
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f860 	bl	800a572 <GetLineCoding>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a4b6:	7bbb      	ldrb	r3, [r7, #14]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d126      	bne.n	800a50a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ce:	791b      	ldrb	r3, [r3, #4]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d13b      	bne.n	800a54c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4de:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d133      	bne.n	800a54c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d12b      	bne.n	800a54c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4fc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d124      	bne.n	800a54c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f982 	bl	800a80c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a508:	e020      	b.n	800a54c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a50a:	7bbb      	ldrb	r3, [r7, #14]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d01d      	beq.n	800a54c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2204      	movs	r2, #4
 800a514:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a518:	e018      	b.n	800a54c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f867 	bl	800a5ee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f8f6 	bl	800a712 <CDC_ProcessReception>
      break;
 800a526:	e014      	b.n	800a552 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a528:	2100      	movs	r1, #0
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f001 f94d 	bl	800b7ca <USBH_ClrFeature>
 800a530:	4603      	mov	r3, r0
 800a532:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10a      	bne.n	800a550 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a542:	e005      	b.n	800a550 <USBH_CDC_Process+0x120>

    default:
      break;
 800a544:	bf00      	nop
 800a546:	e004      	b.n	800a552 <USBH_CDC_Process+0x122>
      break;
 800a548:	bf00      	nop
 800a54a:	e002      	b.n	800a552 <USBH_CDC_Process+0x122>
      break;
 800a54c:	bf00      	nop
 800a54e:	e000      	b.n	800a552 <USBH_CDC_Process+0x122>
      break;
 800a550:	bf00      	nop

  }

  return status;
 800a552:	7bfb      	ldrb	r3, [r7, #15]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	22a1      	movs	r2, #161	; 0xa1
 800a580:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2221      	movs	r2, #33	; 0x21
 800a586:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2207      	movs	r2, #7
 800a598:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2207      	movs	r2, #7
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 faf2 	bl	800bb8a <USBH_CtlReq>
 800a5a6:	4603      	mov	r3, r0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2221      	movs	r2, #33	; 0x21
 800a5be:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2207      	movs	r2, #7
 800a5d6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2207      	movs	r2, #7
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 fad3 	bl	800bb8a <USBH_CtlReq>
 800a5e4:	4603      	mov	r3, r0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b086      	sub	sp, #24
 800a5f2:	af02      	add	r7, sp, #8
 800a5f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5fc:	69db      	ldr	r3, [r3, #28]
 800a5fe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a600:	2300      	movs	r3, #0
 800a602:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d002      	beq.n	800a614 <CDC_ProcessTransmission+0x26>
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d023      	beq.n	800a65a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a612:	e07a      	b.n	800a70a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	8b12      	ldrh	r2, [r2, #24]
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d90b      	bls.n	800a638 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	69d9      	ldr	r1, [r3, #28]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	8b1a      	ldrh	r2, [r3, #24]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	7b5b      	ldrb	r3, [r3, #13]
 800a62c:	2001      	movs	r0, #1
 800a62e:	9000      	str	r0, [sp, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 fda8 	bl	800c186 <USBH_BulkSendData>
 800a636:	e00b      	b.n	800a650 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a640:	b29a      	uxth	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	7b5b      	ldrb	r3, [r3, #13]
 800a646:	2001      	movs	r0, #1
 800a648:	9000      	str	r0, [sp, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 fd9b 	bl	800c186 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2202      	movs	r2, #2
 800a654:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a658:	e057      	b.n	800a70a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	7b5b      	ldrb	r3, [r3, #13]
 800a65e:	4619      	mov	r1, r3
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f005 f837 	bl	800f6d4 <USBH_LL_GetURBState>
 800a666:	4603      	mov	r3, r0
 800a668:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a66a:	7afb      	ldrb	r3, [r7, #11]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d136      	bne.n	800a6de <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	8b12      	ldrh	r2, [r2, #24]
 800a678:	4293      	cmp	r3, r2
 800a67a:	d90e      	bls.n	800a69a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	8b12      	ldrh	r2, [r2, #24]
 800a684:	1a9a      	subs	r2, r3, r2
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	69db      	ldr	r3, [r3, #28]
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	8b12      	ldrh	r2, [r2, #24]
 800a692:	441a      	add	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	61da      	str	r2, [r3, #28]
 800a698:	e002      	b.n	800a6a0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d004      	beq.n	800a6b2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a6b0:	e006      	b.n	800a6c0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f892 	bl	800a7e4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2204      	movs	r2, #4
 800a6c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f001 ffd8 	bl	800c68c <osMessageQueuePut>
      break;
 800a6dc:	e014      	b.n	800a708 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a6de:	7afb      	ldrb	r3, [r7, #11]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d111      	bne.n	800a708 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2204      	movs	r2, #4
 800a6f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a700:	2300      	movs	r3, #0
 800a702:	2200      	movs	r2, #0
 800a704:	f001 ffc2 	bl	800c68c <osMessageQueuePut>
      break;
 800a708:	bf00      	nop
  }
}
 800a70a:	bf00      	nop
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b086      	sub	sp, #24
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a724:	2300      	movs	r3, #0
 800a726:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a72e:	2b03      	cmp	r3, #3
 800a730:	d002      	beq.n	800a738 <CDC_ProcessReception+0x26>
 800a732:	2b04      	cmp	r3, #4
 800a734:	d00e      	beq.n	800a754 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a736:	e051      	b.n	800a7dc <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	6a19      	ldr	r1, [r3, #32]
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	8b5a      	ldrh	r2, [r3, #26]
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	7b1b      	ldrb	r3, [r3, #12]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f001 fd43 	bl	800c1d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	2204      	movs	r2, #4
 800a74e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a752:	e043      	b.n	800a7dc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	7b1b      	ldrb	r3, [r3, #12]
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f004 ffba 	bl	800f6d4 <USBH_LL_GetURBState>
 800a760:	4603      	mov	r3, r0
 800a762:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a764:	7cfb      	ldrb	r3, [r7, #19]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d137      	bne.n	800a7da <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	7b1b      	ldrb	r3, [r3, #12]
 800a76e:	4619      	mov	r1, r3
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f004 ff1d 	bl	800f5b0 <USBH_LL_GetLastXferSize>
 800a776:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d016      	beq.n	800a7b0 <CDC_ProcessReception+0x9e>
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	8b5b      	ldrh	r3, [r3, #26]
 800a786:	461a      	mov	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d910      	bls.n	800a7b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	1ad2      	subs	r2, r2, r3
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	6a1a      	ldr	r2, [r3, #32]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	441a      	add	r2, r3
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	2203      	movs	r2, #3
 800a7aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a7ae:	e006      	b.n	800a7be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f81d 	bl	800a7f8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2204      	movs	r2, #4
 800a7c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f001 ff59 	bl	800c68c <osMessageQueuePut>
      break;
 800a7da:	bf00      	nop
  }
}
 800a7dc:	bf00      	nop
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	4613      	mov	r3, r2
 800a82c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a834:	2302      	movs	r3, #2
 800a836:	e044      	b.n	800a8c2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	79fa      	ldrb	r2, [r7, #7]
 800a83c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f000 f841 	bl	800a8d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d003      	beq.n	800a884 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a884:	2200      	movs	r2, #0
 800a886:	2104      	movs	r1, #4
 800a888:	2010      	movs	r0, #16
 800a88a:	f001 fe8c 	bl	800c5a6 <osMessageQueueNew>
 800a88e:	4602      	mov	r2, r0
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a896:	4b0d      	ldr	r3, [pc, #52]	; (800a8cc <USBH_Init+0xac>)
 800a898:	4a0d      	ldr	r2, [pc, #52]	; (800a8d0 <USBH_Init+0xb0>)
 800a89a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a89c:	4b0b      	ldr	r3, [pc, #44]	; (800a8cc <USBH_Init+0xac>)
 800a89e:	2280      	movs	r2, #128	; 0x80
 800a8a0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a8a2:	4b0a      	ldr	r3, [pc, #40]	; (800a8cc <USBH_Init+0xac>)
 800a8a4:	2218      	movs	r2, #24
 800a8a6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a8a8:	4a08      	ldr	r2, [pc, #32]	; (800a8cc <USBH_Init+0xac>)
 800a8aa:	68f9      	ldr	r1, [r7, #12]
 800a8ac:	4809      	ldr	r0, [pc, #36]	; (800a8d4 <USBH_Init+0xb4>)
 800a8ae:	f001 fdcd 	bl	800c44c <osThreadNew>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f004 fdc4 	bl	800f448 <USBH_LL_Init>

  return USBH_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	200050a0 	.word	0x200050a0
 800a8d0:	0800fbdc 	.word	0x0800fbdc
 800a8d4:	0800b541 	.word	0x0800b541

0800a8d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]
 800a8e8:	e009      	b.n	800a8fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	33e0      	adds	r3, #224	; 0xe0
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	60fb      	str	r3, [r7, #12]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2b0e      	cmp	r3, #14
 800a902:	d9f2      	bls.n	800a8ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a904:	2300      	movs	r3, #0
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	e009      	b.n	800a91e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a914:	2200      	movs	r2, #0
 800a916:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	3301      	adds	r3, #1
 800a91c:	60fb      	str	r3, [r7, #12]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a924:	d3f1      	bcc.n	800a90a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2240      	movs	r2, #64	; 0x40
 800a94a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d016      	beq.n	800a9c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10e      	bne.n	800a9bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a9a4:	1c59      	adds	r1, r3, #1
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	33de      	adds	r3, #222	; 0xde
 800a9b0:	6839      	ldr	r1, [r7, #0]
 800a9b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73fb      	strb	r3, [r7, #15]
 800a9ba:	e004      	b.n	800a9c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a9bc:	2302      	movs	r3, #2
 800a9be:	73fb      	strb	r3, [r7, #15]
 800a9c0:	e001      	b.n	800a9c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a9c2:	2302      	movs	r3, #2
 800a9c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a9ea:	78fa      	ldrb	r2, [r7, #3]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d204      	bcs.n	800a9fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	78fa      	ldrb	r2, [r7, #3]
 800a9f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a9f8:	e001      	b.n	800a9fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	4608      	mov	r0, r1
 800aa16:	4611      	mov	r1, r2
 800aa18:	461a      	mov	r2, r3
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	70fb      	strb	r3, [r7, #3]
 800aa1e:	460b      	mov	r3, r1
 800aa20:	70bb      	strb	r3, [r7, #2]
 800aa22:	4613      	mov	r3, r2
 800aa24:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aa26:	2300      	movs	r3, #0
 800aa28:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aa34:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aa36:	e025      	b.n	800aa84 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800aa38:	7dfb      	ldrb	r3, [r7, #23]
 800aa3a:	221a      	movs	r2, #26
 800aa3c:	fb02 f303 	mul.w	r3, r2, r3
 800aa40:	3308      	adds	r3, #8
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	3302      	adds	r3, #2
 800aa48:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	795b      	ldrb	r3, [r3, #5]
 800aa4e:	78fa      	ldrb	r2, [r7, #3]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d002      	beq.n	800aa5a <USBH_FindInterface+0x4e>
 800aa54:	78fb      	ldrb	r3, [r7, #3]
 800aa56:	2bff      	cmp	r3, #255	; 0xff
 800aa58:	d111      	bne.n	800aa7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aa5e:	78ba      	ldrb	r2, [r7, #2]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d002      	beq.n	800aa6a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aa64:	78bb      	ldrb	r3, [r7, #2]
 800aa66:	2bff      	cmp	r3, #255	; 0xff
 800aa68:	d109      	bne.n	800aa7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aa6e:	787a      	ldrb	r2, [r7, #1]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d002      	beq.n	800aa7a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aa74:	787b      	ldrb	r3, [r7, #1]
 800aa76:	2bff      	cmp	r3, #255	; 0xff
 800aa78:	d101      	bne.n	800aa7e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
 800aa7c:	e006      	b.n	800aa8c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
 800aa80:	3301      	adds	r3, #1
 800aa82:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d9d6      	bls.n	800aa38 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800aa8a:	23ff      	movs	r3, #255	; 0xff
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	371c      	adds	r7, #28
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f004 fd0d 	bl	800f4c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f004 fe26 	bl	800f6fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af04      	add	r7, sp, #16
 800aabe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800aac0:	2302      	movs	r3, #2
 800aac2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800aac4:	2300      	movs	r3, #0
 800aac6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d102      	bne.n	800aada <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2203      	movs	r2, #3
 800aad8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b0b      	cmp	r3, #11
 800aae2:	f200 823c 	bhi.w	800af5e <USBH_Process+0x4a6>
 800aae6:	a201      	add	r2, pc, #4	; (adr r2, 800aaec <USBH_Process+0x34>)
 800aae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaec:	0800ab1d 	.word	0x0800ab1d
 800aaf0:	0800ab6b 	.word	0x0800ab6b
 800aaf4:	0800abef 	.word	0x0800abef
 800aaf8:	0800aedd 	.word	0x0800aedd
 800aafc:	0800af5f 	.word	0x0800af5f
 800ab00:	0800acaf 	.word	0x0800acaf
 800ab04:	0800ae67 	.word	0x0800ae67
 800ab08:	0800ad01 	.word	0x0800ad01
 800ab0c:	0800ad3d 	.word	0x0800ad3d
 800ab10:	0800ad77 	.word	0x0800ad77
 800ab14:	0800adbf 	.word	0x0800adbf
 800ab18:	0800aec5 	.word	0x0800aec5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 821c 	beq.w	800af62 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ab30:	20c8      	movs	r0, #200	; 0xc8
 800ab32:	f004 fe29 	bl	800f788 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f004 fd1f 	bl	800f57a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ab60:	2300      	movs	r3, #0
 800ab62:	2200      	movs	r2, #0
 800ab64:	f001 fd92 	bl	800c68c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800ab68:	e1fb      	b.n	800af62 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d107      	bne.n	800ab84 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2202      	movs	r2, #2
 800ab80:	701a      	strb	r2, [r3, #0]
 800ab82:	e025      	b.n	800abd0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab8e:	d914      	bls.n	800abba <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ab96:	3301      	adds	r3, #1
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d903      	bls.n	800abb2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	220d      	movs	r2, #13
 800abae:	701a      	strb	r2, [r3, #0]
 800abb0:	e00e      	b.n	800abd0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	701a      	strb	r2, [r3, #0]
 800abb8:	e00a      	b.n	800abd0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800abc0:	f103 020a 	add.w	r2, r3, #10
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800abca:	200a      	movs	r0, #10
 800abcc:	f004 fddc 	bl	800f788 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800abe4:	2300      	movs	r3, #0
 800abe6:	2200      	movs	r2, #0
 800abe8:	f001 fd50 	bl	800c68c <osMessageQueuePut>
#endif
#endif
      break;
 800abec:	e1c0      	b.n	800af70 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d005      	beq.n	800ac04 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abfe:	2104      	movs	r1, #4
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ac04:	2064      	movs	r0, #100	; 0x64
 800ac06:	f004 fdbf 	bl	800f788 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f004 fc8e 	bl	800f52c <USBH_LL_GetSpeed>
 800ac10:	4603      	mov	r3, r0
 800ac12:	461a      	mov	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2205      	movs	r2, #5
 800ac1e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ac20:	2100      	movs	r1, #0
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f001 fb21 	bl	800c26a <USBH_AllocPipe>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ac30:	2180      	movs	r1, #128	; 0x80
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f001 fb19 	bl	800c26a <USBH_AllocPipe>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	7919      	ldrb	r1, [r3, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ac54:	b292      	uxth	r2, r2
 800ac56:	9202      	str	r2, [sp, #8]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	9201      	str	r2, [sp, #4]
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2280      	movs	r2, #128	; 0x80
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f001 fad2 	bl	800c20c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	7959      	ldrb	r1, [r3, #5]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ac7c:	b292      	uxth	r2, r2
 800ac7e:	9202      	str	r2, [sp, #8]
 800ac80:	2200      	movs	r2, #0
 800ac82:	9201      	str	r2, [sp, #4]
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	4603      	mov	r3, r0
 800ac88:	2200      	movs	r2, #0
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f001 fabe 	bl	800c20c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aca4:	2300      	movs	r3, #0
 800aca6:	2200      	movs	r2, #0
 800aca8:	f001 fcf0 	bl	800c68c <osMessageQueuePut>
#endif
#endif
      break;
 800acac:	e160      	b.n	800af70 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f964 	bl	800af7c <USBH_HandleEnum>
 800acb4:	4603      	mov	r3, r0
 800acb6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800acb8:	7bbb      	ldrb	r3, [r7, #14]
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f040 8152 	bne.w	800af66 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d103      	bne.n	800acdc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2208      	movs	r2, #8
 800acd8:	701a      	strb	r2, [r3, #0]
 800acda:	e002      	b.n	800ace2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2207      	movs	r2, #7
 800ace0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2205      	movs	r2, #5
 800ace6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800acf6:	2300      	movs	r3, #0
 800acf8:	2200      	movs	r2, #0
 800acfa:	f001 fcc7 	bl	800c68c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800acfe:	e132      	b.n	800af66 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f000 812f 	beq.w	800af6a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad12:	2101      	movs	r1, #1
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2208      	movs	r2, #8
 800ad1c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2205      	movs	r2, #5
 800ad22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ad32:	2300      	movs	r3, #0
 800ad34:	2200      	movs	r2, #0
 800ad36:	f001 fca9 	bl	800c68c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800ad3a:	e116      	b.n	800af6a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fcf8 	bl	800b73c <USBH_SetCfg>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d102      	bne.n	800ad58 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2209      	movs	r2, #9
 800ad56:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f001 fc8c 	bl	800c68c <osMessageQueuePut>
#endif
#endif
      break;
 800ad74:	e0fc      	b.n	800af70 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ad7c:	f003 0320 	and.w	r3, r3, #32
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00a      	beq.n	800ad9a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ad84:	2101      	movs	r1, #1
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fcfb 	bl	800b782 <USBH_SetFeature>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d106      	bne.n	800ada0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	220a      	movs	r2, #10
 800ad96:	701a      	strb	r2, [r3, #0]
 800ad98:	e002      	b.n	800ada0 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	220a      	movs	r2, #10
 800ad9e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800adb4:	2300      	movs	r3, #0
 800adb6:	2200      	movs	r2, #0
 800adb8:	f001 fc68 	bl	800c68c <osMessageQueuePut>
#endif
#endif
      break;
 800adbc:	e0d8      	b.n	800af70 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d03f      	beq.n	800ae48 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800add0:	2300      	movs	r3, #0
 800add2:	73fb      	strb	r3, [r7, #15]
 800add4:	e016      	b.n	800ae04 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800add6:	7bfa      	ldrb	r2, [r7, #15]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	32de      	adds	r2, #222	; 0xde
 800addc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade0:	791a      	ldrb	r2, [r3, #4]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ade8:	429a      	cmp	r2, r3
 800adea:	d108      	bne.n	800adfe <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800adec:	7bfa      	ldrb	r2, [r7, #15]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	32de      	adds	r2, #222	; 0xde
 800adf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800adfc:	e005      	b.n	800ae0a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
 800ae00:	3301      	adds	r3, #1
 800ae02:	73fb      	strb	r3, [r7, #15]
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d0e5      	beq.n	800add6 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d016      	beq.n	800ae42 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	4798      	blx	r3
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d109      	bne.n	800ae3a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2206      	movs	r2, #6
 800ae2a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae32:	2103      	movs	r1, #3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	4798      	blx	r3
 800ae38:	e006      	b.n	800ae48 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	220d      	movs	r2, #13
 800ae3e:	701a      	strb	r2, [r3, #0]
 800ae40:	e002      	b.n	800ae48 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	220d      	movs	r2, #13
 800ae46:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2205      	movs	r2, #5
 800ae4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f001 fc14 	bl	800c68c <osMessageQueuePut>
#endif
#endif
      break;
 800ae64:	e084      	b.n	800af70 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d017      	beq.n	800aea0 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	4798      	blx	r3
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ae80:	7bbb      	ldrb	r3, [r7, #14]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d103      	bne.n	800ae90 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	220b      	movs	r2, #11
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	e00a      	b.n	800aea6 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800ae90:	7bbb      	ldrb	r3, [r7, #14]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d106      	bne.n	800aea6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	220d      	movs	r2, #13
 800ae9c:	701a      	strb	r2, [r3, #0]
 800ae9e:	e002      	b.n	800aea6 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	220d      	movs	r2, #13
 800aea4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2205      	movs	r2, #5
 800aeaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aeba:	2300      	movs	r3, #0
 800aebc:	2200      	movs	r2, #0
 800aebe:	f001 fbe5 	bl	800c68c <osMessageQueuePut>
#endif
#endif
      break;
 800aec2:	e055      	b.n	800af70 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d04f      	beq.n	800af6e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	4798      	blx	r3
      }
      break;
 800aeda:	e048      	b.n	800af6e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff fcf7 	bl	800a8d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d009      	beq.n	800af08 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d005      	beq.n	800af1e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af18:	2105      	movs	r1, #5
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b01      	cmp	r3, #1
 800af28:	d107      	bne.n	800af3a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7ff fdb0 	bl	800aa98 <USBH_Start>
 800af38:	e002      	b.n	800af40 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f004 fac0 	bl	800f4c0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af54:	2300      	movs	r3, #0
 800af56:	2200      	movs	r2, #0
 800af58:	f001 fb98 	bl	800c68c <osMessageQueuePut>
#endif
#endif
      break;
 800af5c:	e008      	b.n	800af70 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800af5e:	bf00      	nop
 800af60:	e006      	b.n	800af70 <USBH_Process+0x4b8>
      break;
 800af62:	bf00      	nop
 800af64:	e004      	b.n	800af70 <USBH_Process+0x4b8>
      break;
 800af66:	bf00      	nop
 800af68:	e002      	b.n	800af70 <USBH_Process+0x4b8>
    break;
 800af6a:	bf00      	nop
 800af6c:	e000      	b.n	800af70 <USBH_Process+0x4b8>
      break;
 800af6e:	bf00      	nop
  }
  return USBH_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop

0800af7c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b088      	sub	sp, #32
 800af80:	af04      	add	r7, sp, #16
 800af82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800af84:	2301      	movs	r3, #1
 800af86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800af88:	2301      	movs	r3, #1
 800af8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	785b      	ldrb	r3, [r3, #1]
 800af90:	2b07      	cmp	r3, #7
 800af92:	f200 8208 	bhi.w	800b3a6 <USBH_HandleEnum+0x42a>
 800af96:	a201      	add	r2, pc, #4	; (adr r2, 800af9c <USBH_HandleEnum+0x20>)
 800af98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9c:	0800afbd 	.word	0x0800afbd
 800afa0:	0800b07b 	.word	0x0800b07b
 800afa4:	0800b0e5 	.word	0x0800b0e5
 800afa8:	0800b173 	.word	0x0800b173
 800afac:	0800b1dd 	.word	0x0800b1dd
 800afb0:	0800b24d 	.word	0x0800b24d
 800afb4:	0800b2e9 	.word	0x0800b2e9
 800afb8:	0800b367 	.word	0x0800b367
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800afbc:	2108      	movs	r1, #8
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 faec 	bl	800b59c <USBH_Get_DevDesc>
 800afc4:	4603      	mov	r3, r0
 800afc6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d130      	bne.n	800b030 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	7919      	ldrb	r1, [r3, #4]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aff2:	b292      	uxth	r2, r2
 800aff4:	9202      	str	r2, [sp, #8]
 800aff6:	2200      	movs	r2, #0
 800aff8:	9201      	str	r2, [sp, #4]
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	4603      	mov	r3, r0
 800affe:	2280      	movs	r2, #128	; 0x80
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f001 f903 	bl	800c20c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	7959      	ldrb	r1, [r3, #5]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b01a:	b292      	uxth	r2, r2
 800b01c:	9202      	str	r2, [sp, #8]
 800b01e:	2200      	movs	r2, #0
 800b020:	9201      	str	r2, [sp, #4]
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	4603      	mov	r3, r0
 800b026:	2200      	movs	r2, #0
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f001 f8ef 	bl	800c20c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b02e:	e1bc      	b.n	800b3aa <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	2b03      	cmp	r3, #3
 800b034:	f040 81b9 	bne.w	800b3aa <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b03e:	3301      	adds	r3, #1
 800b040:	b2da      	uxtb	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d903      	bls.n	800b05a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	220d      	movs	r2, #13
 800b056:	701a      	strb	r2, [r3, #0]
      break;
 800b058:	e1a7      	b.n	800b3aa <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	795b      	ldrb	r3, [r3, #5]
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f001 f923 	bl	800c2ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	791b      	ldrb	r3, [r3, #4]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 f91d 	bl	800c2ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	701a      	strb	r2, [r3, #0]
      break;
 800b078:	e197      	b.n	800b3aa <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b07a:	2112      	movs	r1, #18
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fa8d 	bl	800b59c <USBH_Get_DevDesc>
 800b082:	4603      	mov	r3, r0
 800b084:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b086:	7bbb      	ldrb	r3, [r7, #14]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d103      	bne.n	800b094 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2202      	movs	r2, #2
 800b090:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b092:	e18c      	b.n	800b3ae <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b094:	7bbb      	ldrb	r3, [r7, #14]
 800b096:	2b03      	cmp	r3, #3
 800b098:	f040 8189 	bne.w	800b3ae <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d903      	bls.n	800b0be <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	220d      	movs	r2, #13
 800b0ba:	701a      	strb	r2, [r3, #0]
      break;
 800b0bc:	e177      	b.n	800b3ae <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	795b      	ldrb	r3, [r3, #5]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f001 f8f1 	bl	800c2ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	791b      	ldrb	r3, [r3, #4]
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f001 f8eb 	bl	800c2ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	701a      	strb	r2, [r3, #0]
      break;
 800b0e2:	e164      	b.n	800b3ae <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b0e4:	2101      	movs	r1, #1
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fb04 	bl	800b6f4 <USBH_SetAddress>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d132      	bne.n	800b15c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b0f6:	2002      	movs	r0, #2
 800b0f8:	f004 fb46 	bl	800f788 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2203      	movs	r2, #3
 800b108:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	7919      	ldrb	r1, [r3, #4]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b11e:	b292      	uxth	r2, r2
 800b120:	9202      	str	r2, [sp, #8]
 800b122:	2200      	movs	r2, #0
 800b124:	9201      	str	r2, [sp, #4]
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	4603      	mov	r3, r0
 800b12a:	2280      	movs	r2, #128	; 0x80
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f001 f86d 	bl	800c20c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	7959      	ldrb	r1, [r3, #5]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b146:	b292      	uxth	r2, r2
 800b148:	9202      	str	r2, [sp, #8]
 800b14a:	2200      	movs	r2, #0
 800b14c:	9201      	str	r2, [sp, #4]
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	4603      	mov	r3, r0
 800b152:	2200      	movs	r2, #0
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f001 f859 	bl	800c20c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b15a:	e12a      	b.n	800b3b2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	2b03      	cmp	r3, #3
 800b160:	f040 8127 	bne.w	800b3b2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	220d      	movs	r2, #13
 800b168:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	705a      	strb	r2, [r3, #1]
      break;
 800b170:	e11f      	b.n	800b3b2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b172:	2109      	movs	r1, #9
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fa39 	bl	800b5ec <USBH_Get_CfgDesc>
 800b17a:	4603      	mov	r3, r0
 800b17c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b17e:	7bbb      	ldrb	r3, [r7, #14]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d103      	bne.n	800b18c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2204      	movs	r2, #4
 800b188:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b18a:	e114      	b.n	800b3b6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b18c:	7bbb      	ldrb	r3, [r7, #14]
 800b18e:	2b03      	cmp	r3, #3
 800b190:	f040 8111 	bne.w	800b3b6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b19a:	3301      	adds	r3, #1
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1aa:	2b03      	cmp	r3, #3
 800b1ac:	d903      	bls.n	800b1b6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	220d      	movs	r2, #13
 800b1b2:	701a      	strb	r2, [r3, #0]
      break;
 800b1b4:	e0ff      	b.n	800b3b6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	795b      	ldrb	r3, [r3, #5]
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f001 f875 	bl	800c2ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	791b      	ldrb	r3, [r3, #4]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 f86f 	bl	800c2ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	701a      	strb	r2, [r3, #0]
      break;
 800b1da:	e0ec      	b.n	800b3b6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fa01 	bl	800b5ec <USBH_Get_CfgDesc>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1ee:	7bbb      	ldrb	r3, [r7, #14]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d103      	bne.n	800b1fc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2205      	movs	r2, #5
 800b1f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b1fa:	e0de      	b.n	800b3ba <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	f040 80db 	bne.w	800b3ba <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b20a:	3301      	adds	r3, #1
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b21a:	2b03      	cmp	r3, #3
 800b21c:	d903      	bls.n	800b226 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	220d      	movs	r2, #13
 800b222:	701a      	strb	r2, [r3, #0]
      break;
 800b224:	e0c9      	b.n	800b3ba <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	795b      	ldrb	r3, [r3, #5]
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 f83d 	bl	800c2ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	791b      	ldrb	r3, [r3, #4]
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f001 f837 	bl	800c2ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	701a      	strb	r2, [r3, #0]
      break;
 800b24a:	e0b6      	b.n	800b3ba <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b252:	2b00      	cmp	r3, #0
 800b254:	d036      	beq.n	800b2c4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b262:	23ff      	movs	r3, #255	; 0xff
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f9e5 	bl	800b634 <USBH_Get_StringDesc>
 800b26a:	4603      	mov	r3, r0
 800b26c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b26e:	7bbb      	ldrb	r3, [r7, #14]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d111      	bne.n	800b298 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2206      	movs	r2, #6
 800b278:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2205      	movs	r2, #5
 800b27e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b28e:	2300      	movs	r3, #0
 800b290:	2200      	movs	r2, #0
 800b292:	f001 f9fb 	bl	800c68c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b296:	e092      	b.n	800b3be <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b298:	7bbb      	ldrb	r3, [r7, #14]
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	f040 808f 	bne.w	800b3be <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2206      	movs	r2, #6
 800b2a4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2205      	movs	r2, #5
 800b2aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f001 f9e5 	bl	800c68c <osMessageQueuePut>
      break;
 800b2c2:	e07c      	b.n	800b3be <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2206      	movs	r2, #6
 800b2c8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2205      	movs	r2, #5
 800b2ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b2de:	2300      	movs	r3, #0
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f001 f9d3 	bl	800c68c <osMessageQueuePut>
      break;
 800b2e6:	e06a      	b.n	800b3be <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d027      	beq.n	800b342 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b2fe:	23ff      	movs	r3, #255	; 0xff
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f997 	bl	800b634 <USBH_Get_StringDesc>
 800b306:	4603      	mov	r3, r0
 800b308:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b30a:	7bbb      	ldrb	r3, [r7, #14]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d103      	bne.n	800b318 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2207      	movs	r2, #7
 800b314:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b316:	e054      	b.n	800b3c2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b318:	7bbb      	ldrb	r3, [r7, #14]
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d151      	bne.n	800b3c2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2207      	movs	r2, #7
 800b322:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2205      	movs	r2, #5
 800b328:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b338:	2300      	movs	r3, #0
 800b33a:	2200      	movs	r2, #0
 800b33c:	f001 f9a6 	bl	800c68c <osMessageQueuePut>
      break;
 800b340:	e03f      	b.n	800b3c2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2207      	movs	r2, #7
 800b346:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2205      	movs	r2, #5
 800b34c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b35c:	2300      	movs	r3, #0
 800b35e:	2200      	movs	r2, #0
 800b360:	f001 f994 	bl	800c68c <osMessageQueuePut>
      break;
 800b364:	e02d      	b.n	800b3c2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d017      	beq.n	800b3a0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b37c:	23ff      	movs	r3, #255	; 0xff
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f958 	bl	800b634 <USBH_Get_StringDesc>
 800b384:	4603      	mov	r3, r0
 800b386:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d102      	bne.n	800b394 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b392:	e018      	b.n	800b3c6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	2b03      	cmp	r3, #3
 800b398:	d115      	bne.n	800b3c6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	73fb      	strb	r3, [r7, #15]
      break;
 800b39e:	e012      	b.n	800b3c6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3a4:	e00f      	b.n	800b3c6 <USBH_HandleEnum+0x44a>

    default:
      break;
 800b3a6:	bf00      	nop
 800b3a8:	e00e      	b.n	800b3c8 <USBH_HandleEnum+0x44c>
      break;
 800b3aa:	bf00      	nop
 800b3ac:	e00c      	b.n	800b3c8 <USBH_HandleEnum+0x44c>
      break;
 800b3ae:	bf00      	nop
 800b3b0:	e00a      	b.n	800b3c8 <USBH_HandleEnum+0x44c>
      break;
 800b3b2:	bf00      	nop
 800b3b4:	e008      	b.n	800b3c8 <USBH_HandleEnum+0x44c>
      break;
 800b3b6:	bf00      	nop
 800b3b8:	e006      	b.n	800b3c8 <USBH_HandleEnum+0x44c>
      break;
 800b3ba:	bf00      	nop
 800b3bc:	e004      	b.n	800b3c8 <USBH_HandleEnum+0x44c>
      break;
 800b3be:	bf00      	nop
 800b3c0:	e002      	b.n	800b3c8 <USBH_HandleEnum+0x44c>
      break;
 800b3c2:	bf00      	nop
 800b3c4:	e000      	b.n	800b3c8 <USBH_HandleEnum+0x44c>
      break;
 800b3c6:	bf00      	nop
  }
  return Status;
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop

0800b3d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b3e6:	bf00      	nop
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b082      	sub	sp, #8
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b400:	1c5a      	adds	r2, r3, #1
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f804 	bl	800b416 <USBH_HandleSof>
}
 800b40e:	bf00      	nop
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b082      	sub	sp, #8
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b0b      	cmp	r3, #11
 800b426:	d10a      	bne.n	800b43e <USBH_HandleSof+0x28>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d005      	beq.n	800b43e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	4798      	blx	r3
  }
}
 800b43e:	bf00      	nop
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b082      	sub	sp, #8
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b46a:	2300      	movs	r3, #0
 800b46c:	2200      	movs	r2, #0
 800b46e:	f001 f90d 	bl	800c68c <osMessageQueuePut>
#endif
#endif

  return;
 800b472:	bf00      	nop
}
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b47a:	b480      	push	{r7}
 800b47c:	b083      	sub	sp, #12
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b48a:	bf00      	nop
}
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f001 f8dd 	bl	800c68c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f003 fffa 	bl	800f4f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	791b      	ldrb	r3, [r3, #4]
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fecf 	bl	800c2ac <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	795b      	ldrb	r3, [r3, #5]
 800b512:	4619      	mov	r1, r3
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fec9 	bl	800c2ac <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b52e:	2300      	movs	r3, #0
 800b530:	2200      	movs	r2, #0
 800b532:	f001 f8ab 	bl	800c68c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b558:	2200      	movs	r2, #0
 800b55a:	f001 f8f7 	bl	800c74c <osMessageQueueGet>
 800b55e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1f0      	bne.n	800b548 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7ff faa6 	bl	800aab8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b56c:	e7ec      	b.n	800b548 <USBH_Process_OS+0x8>

0800b56e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b082      	sub	sp, #8
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b58a:	2300      	movs	r3, #0
 800b58c:	2200      	movs	r2, #0
 800b58e:	f001 f87d 	bl	800c68c <osMessageQueuePut>
#endif

  return USBH_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af02      	add	r7, sp, #8
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b5ae:	78fb      	ldrb	r3, [r7, #3]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f864 	bl	800b68a <USBH_GetDescriptor>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	73fb      	strb	r3, [r7, #15]
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5d8:	78fa      	ldrb	r2, [r7, #3]
 800b5da:	b292      	uxth	r2, r2
 800b5dc:	4619      	mov	r1, r3
 800b5de:	f000 f918 	bl	800b812 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af02      	add	r7, sp, #8
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	331c      	adds	r3, #28
 800b5fc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b5fe:	887b      	ldrh	r3, [r7, #2]
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b608:	2100      	movs	r1, #0
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f83d 	bl	800b68a <USBH_GetDescriptor>
 800b610:	4603      	mov	r3, r0
 800b612:	72fb      	strb	r3, [r7, #11]
 800b614:	7afb      	ldrb	r3, [r7, #11]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d107      	bne.n	800b62a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b620:	887a      	ldrh	r2, [r7, #2]
 800b622:	68f9      	ldr	r1, [r7, #12]
 800b624:	4618      	mov	r0, r3
 800b626:	f000 f964 	bl	800b8f2 <USBH_ParseCfgDesc>
  }

  return status;
 800b62a:	7afb      	ldrb	r3, [r7, #11]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af02      	add	r7, sp, #8
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	607a      	str	r2, [r7, #4]
 800b63e:	461a      	mov	r2, r3
 800b640:	460b      	mov	r3, r1
 800b642:	72fb      	strb	r3, [r7, #11]
 800b644:	4613      	mov	r3, r2
 800b646:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b648:	7afb      	ldrb	r3, [r7, #11]
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b650:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b658:	893b      	ldrh	r3, [r7, #8]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	460b      	mov	r3, r1
 800b65e:	2100      	movs	r1, #0
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 f812 	bl	800b68a <USBH_GetDescriptor>
 800b666:	4603      	mov	r3, r0
 800b668:	75fb      	strb	r3, [r7, #23]
 800b66a:	7dfb      	ldrb	r3, [r7, #23]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d107      	bne.n	800b680 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b676:	893a      	ldrh	r2, [r7, #8]
 800b678:	6879      	ldr	r1, [r7, #4]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fa37 	bl	800baee <USBH_ParseStringDesc>
  }

  return status;
 800b680:	7dfb      	ldrb	r3, [r7, #23]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	60f8      	str	r0, [r7, #12]
 800b692:	607b      	str	r3, [r7, #4]
 800b694:	460b      	mov	r3, r1
 800b696:	72fb      	strb	r3, [r7, #11]
 800b698:	4613      	mov	r3, r2
 800b69a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	789b      	ldrb	r3, [r3, #2]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d11c      	bne.n	800b6de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b6a4:	7afb      	ldrb	r3, [r7, #11]
 800b6a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b6aa:	b2da      	uxtb	r2, r3
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2206      	movs	r2, #6
 800b6b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	893a      	ldrh	r2, [r7, #8]
 800b6ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b6bc:	893b      	ldrh	r3, [r7, #8]
 800b6be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b6c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6c6:	d104      	bne.n	800b6d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f240 4209 	movw	r2, #1033	; 0x409
 800b6ce:	829a      	strh	r2, [r3, #20]
 800b6d0:	e002      	b.n	800b6d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	8b3a      	ldrh	r2, [r7, #24]
 800b6dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b6de:	8b3b      	ldrh	r3, [r7, #24]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	6879      	ldr	r1, [r7, #4]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f000 fa50 	bl	800bb8a <USBH_CtlReq>
 800b6ea:	4603      	mov	r3, r0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	789b      	ldrb	r3, [r3, #2]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d10f      	bne.n	800b728 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2205      	movs	r2, #5
 800b712:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b714:	78fb      	ldrb	r3, [r7, #3]
 800b716:	b29a      	uxth	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b728:	2200      	movs	r2, #0
 800b72a:	2100      	movs	r1, #0
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fa2c 	bl	800bb8a <USBH_CtlReq>
 800b732:	4603      	mov	r3, r0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	460b      	mov	r3, r1
 800b746:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	789b      	ldrb	r3, [r3, #2]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d10e      	bne.n	800b76e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2209      	movs	r2, #9
 800b75a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	887a      	ldrh	r2, [r7, #2]
 800b760:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b76e:	2200      	movs	r2, #0
 800b770:	2100      	movs	r1, #0
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fa09 	bl	800bb8a <USBH_CtlReq>
 800b778:	4603      	mov	r3, r0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b082      	sub	sp, #8
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	460b      	mov	r3, r1
 800b78c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	789b      	ldrb	r3, [r3, #2]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d10f      	bne.n	800b7b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2203      	movs	r2, #3
 800b7a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b7a2:	78fb      	ldrb	r3, [r7, #3]
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f9e5 	bl	800bb8a <USBH_CtlReq>
 800b7c0:	4603      	mov	r3, r0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	789b      	ldrb	r3, [r3, #2]
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d10f      	bne.n	800b7fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2202      	movs	r2, #2
 800b7e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b7f0:	78fb      	ldrb	r3, [r7, #3]
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b7fe:	2200      	movs	r2, #0
 800b800:	2100      	movs	r1, #0
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 f9c1 	bl	800bb8a <USBH_CtlReq>
 800b808:	4603      	mov	r3, r0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b812:	b480      	push	{r7}
 800b814:	b085      	sub	sp, #20
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	4613      	mov	r3, r2
 800b81e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	781a      	ldrb	r2, [r3, #0]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	785a      	ldrb	r2, [r3, #1]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	3302      	adds	r3, #2
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	b29a      	uxth	r2, r3
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	3303      	adds	r3, #3
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	b29b      	uxth	r3, r3
 800b840:	021b      	lsls	r3, r3, #8
 800b842:	b29b      	uxth	r3, r3
 800b844:	4313      	orrs	r3, r2
 800b846:	b29a      	uxth	r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	791a      	ldrb	r2, [r3, #4]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	795a      	ldrb	r2, [r3, #5]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	799a      	ldrb	r2, [r3, #6]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	79da      	ldrb	r2, [r3, #7]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b86c:	88fb      	ldrh	r3, [r7, #6]
 800b86e:	2b08      	cmp	r3, #8
 800b870:	d939      	bls.n	800b8e6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	3308      	adds	r3, #8
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	b29a      	uxth	r2, r3
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	3309      	adds	r3, #9
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	b29b      	uxth	r3, r3
 800b882:	021b      	lsls	r3, r3, #8
 800b884:	b29b      	uxth	r3, r3
 800b886:	4313      	orrs	r3, r2
 800b888:	b29a      	uxth	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	330a      	adds	r3, #10
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	b29a      	uxth	r2, r3
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	330b      	adds	r3, #11
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	021b      	lsls	r3, r3, #8
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	330c      	adds	r3, #12
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	330d      	adds	r3, #13
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	021b      	lsls	r3, r3, #8
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	7b9a      	ldrb	r2, [r3, #14]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	7bda      	ldrb	r2, [r3, #15]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	7c1a      	ldrb	r2, [r3, #16]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	7c5a      	ldrb	r2, [r3, #17]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	745a      	strb	r2, [r3, #17]
  }
}
 800b8e6:	bf00      	nop
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b08a      	sub	sp, #40	; 0x28
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	60f8      	str	r0, [r7, #12]
 800b8fa:	60b9      	str	r1, [r7, #8]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b90a:	2300      	movs	r3, #0
 800b90c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	781a      	ldrb	r2, [r3, #0]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	785a      	ldrb	r2, [r3, #1]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3302      	adds	r3, #2
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	3303      	adds	r3, #3
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	b29b      	uxth	r3, r3
 800b934:	021b      	lsls	r3, r3, #8
 800b936:	b29b      	uxth	r3, r3
 800b938:	4313      	orrs	r3, r2
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	791a      	ldrb	r2, [r3, #4]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	795a      	ldrb	r2, [r3, #5]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	799a      	ldrb	r2, [r3, #6]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	79da      	ldrb	r2, [r3, #7]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	7a1a      	ldrb	r2, [r3, #8]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b968:	88fb      	ldrh	r3, [r7, #6]
 800b96a:	2b09      	cmp	r3, #9
 800b96c:	d95f      	bls.n	800ba2e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b96e:	2309      	movs	r3, #9
 800b970:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b972:	2300      	movs	r3, #0
 800b974:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b976:	e051      	b.n	800ba1c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b978:	f107 0316 	add.w	r3, r7, #22
 800b97c:	4619      	mov	r1, r3
 800b97e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b980:	f000 f8e8 	bl	800bb54 <USBH_GetNextDesc>
 800b984:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b988:	785b      	ldrb	r3, [r3, #1]
 800b98a:	2b04      	cmp	r3, #4
 800b98c:	d146      	bne.n	800ba1c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b98e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b992:	221a      	movs	r2, #26
 800b994:	fb02 f303 	mul.w	r3, r2, r3
 800b998:	3308      	adds	r3, #8
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	4413      	add	r3, r2
 800b99e:	3302      	adds	r3, #2
 800b9a0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b9a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9a4:	69f8      	ldr	r0, [r7, #28]
 800b9a6:	f000 f846 	bl	800ba36 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b9b4:	e022      	b.n	800b9fc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b9b6:	f107 0316 	add.w	r3, r7, #22
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9be:	f000 f8c9 	bl	800bb54 <USBH_GetNextDesc>
 800b9c2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	785b      	ldrb	r3, [r3, #1]
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	d117      	bne.n	800b9fc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b9cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b9d4:	3201      	adds	r2, #1
 800b9d6:	00d2      	lsls	r2, r2, #3
 800b9d8:	211a      	movs	r1, #26
 800b9da:	fb01 f303 	mul.w	r3, r1, r3
 800b9de:	4413      	add	r3, r2
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b9ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9ec:	69b8      	ldr	r0, [r7, #24]
 800b9ee:	f000 f851 	bl	800ba94 <USBH_ParseEPDesc>
            ep_ix++;
 800b9f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	791b      	ldrb	r3, [r3, #4]
 800ba00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d204      	bcs.n	800ba12 <USBH_ParseCfgDesc+0x120>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	885a      	ldrh	r2, [r3, #2]
 800ba0c:	8afb      	ldrh	r3, [r7, #22]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d8d1      	bhi.n	800b9b6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ba12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba16:	3301      	adds	r3, #1
 800ba18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ba1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d804      	bhi.n	800ba2e <USBH_ParseCfgDesc+0x13c>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	885a      	ldrh	r2, [r3, #2]
 800ba28:	8afb      	ldrh	r3, [r7, #22]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d8a4      	bhi.n	800b978 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ba2e:	bf00      	nop
 800ba30:	3728      	adds	r7, #40	; 0x28
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	781a      	ldrb	r2, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	785a      	ldrb	r2, [r3, #1]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	789a      	ldrb	r2, [r3, #2]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	78da      	ldrb	r2, [r3, #3]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	791a      	ldrb	r2, [r3, #4]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	795a      	ldrb	r2, [r3, #5]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	799a      	ldrb	r2, [r3, #6]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	79da      	ldrb	r2, [r3, #7]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	7a1a      	ldrb	r2, [r3, #8]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	721a      	strb	r2, [r3, #8]
}
 800ba88:	bf00      	nop
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	781a      	ldrb	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	785a      	ldrb	r2, [r3, #1]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	789a      	ldrb	r2, [r3, #2]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	78da      	ldrb	r2, [r3, #3]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	3304      	adds	r3, #4
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	3305      	adds	r3, #5
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	021b      	lsls	r3, r3, #8
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	4313      	orrs	r3, r2
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	799a      	ldrb	r2, [r3, #6]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	719a      	strb	r2, [r3, #6]
}
 800bae2:	bf00      	nop
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800baee:	b480      	push	{r7}
 800baf0:	b087      	sub	sp, #28
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	4613      	mov	r3, r2
 800bafa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	3301      	adds	r3, #1
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	2b03      	cmp	r3, #3
 800bb04:	d120      	bne.n	800bb48 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	1e9a      	subs	r2, r3, #2
 800bb0c:	88fb      	ldrh	r3, [r7, #6]
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	bf28      	it	cs
 800bb12:	4613      	movcs	r3, r2
 800bb14:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	3302      	adds	r3, #2
 800bb1a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	82fb      	strh	r3, [r7, #22]
 800bb20:	e00b      	b.n	800bb3a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bb22:	8afb      	ldrh	r3, [r7, #22]
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	4413      	add	r3, r2
 800bb28:	781a      	ldrb	r2, [r3, #0]
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	3301      	adds	r3, #1
 800bb32:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bb34:	8afb      	ldrh	r3, [r7, #22]
 800bb36:	3302      	adds	r3, #2
 800bb38:	82fb      	strh	r3, [r7, #22]
 800bb3a:	8afa      	ldrh	r2, [r7, #22]
 800bb3c:	8abb      	ldrh	r3, [r7, #20]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d3ef      	bcc.n	800bb22 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	2200      	movs	r2, #0
 800bb46:	701a      	strb	r2, [r3, #0]
  }
}
 800bb48:	bf00      	nop
 800bb4a:	371c      	adds	r7, #28
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	881a      	ldrh	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	4413      	add	r3, r2
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4413      	add	r3, r2
 800bb7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b086      	sub	sp, #24
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	4613      	mov	r3, r2
 800bb96:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	789b      	ldrb	r3, [r3, #2]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d002      	beq.n	800bbaa <USBH_CtlReq+0x20>
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d01d      	beq.n	800bbe4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800bba8:	e043      	b.n	800bc32 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	88fa      	ldrh	r2, [r7, #6]
 800bbb4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2203      	movs	r2, #3
 800bbca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bbda:	2300      	movs	r3, #0
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f000 fd55 	bl	800c68c <osMessageQueuePut>
      break;
 800bbe2:	e026      	b.n	800bc32 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 f829 	bl	800bc3c <USBH_HandleControl>
 800bbea:	4603      	mov	r3, r0
 800bbec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <USBH_CtlReq+0x70>
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	d106      	bne.n	800bc08 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	761a      	strb	r2, [r3, #24]
 800bc06:	e005      	b.n	800bc14 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d102      	bne.n	800bc14 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2201      	movs	r2, #1
 800bc12:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2203      	movs	r2, #3
 800bc18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc28:	2300      	movs	r3, #0
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f000 fd2e 	bl	800c68c <osMessageQueuePut>
      break;
 800bc30:	bf00      	nop
  }
  return status;
 800bc32:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3718      	adds	r7, #24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af02      	add	r7, sp, #8
 800bc42:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bc44:	2301      	movs	r3, #1
 800bc46:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	7e1b      	ldrb	r3, [r3, #24]
 800bc50:	3b01      	subs	r3, #1
 800bc52:	2b0a      	cmp	r3, #10
 800bc54:	f200 8229 	bhi.w	800c0aa <USBH_HandleControl+0x46e>
 800bc58:	a201      	add	r2, pc, #4	; (adr r2, 800bc60 <USBH_HandleControl+0x24>)
 800bc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc5e:	bf00      	nop
 800bc60:	0800bc8d 	.word	0x0800bc8d
 800bc64:	0800bca7 	.word	0x0800bca7
 800bc68:	0800bd49 	.word	0x0800bd49
 800bc6c:	0800bd6f 	.word	0x0800bd6f
 800bc70:	0800bdfb 	.word	0x0800bdfb
 800bc74:	0800be25 	.word	0x0800be25
 800bc78:	0800bee7 	.word	0x0800bee7
 800bc7c:	0800bf09 	.word	0x0800bf09
 800bc80:	0800bf9b 	.word	0x0800bf9b
 800bc84:	0800bfc1 	.word	0x0800bfc1
 800bc88:	0800c053 	.word	0x0800c053
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f103 0110 	add.w	r1, r3, #16
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	795b      	ldrb	r3, [r3, #5]
 800bc96:	461a      	mov	r2, r3
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f000 fa17 	bl	800c0cc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2202      	movs	r2, #2
 800bca2:	761a      	strb	r2, [r3, #24]
      break;
 800bca4:	e20c      	b.n	800c0c0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	795b      	ldrb	r3, [r3, #5]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f003 fd11 	bl	800f6d4 <USBH_LL_GetURBState>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bcb6:	7bbb      	ldrb	r3, [r7, #14]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d12c      	bne.n	800bd16 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	7c1b      	ldrb	r3, [r3, #16]
 800bcc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bcc4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	8adb      	ldrh	r3, [r3, #22]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00a      	beq.n	800bce4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bcce:	7b7b      	ldrb	r3, [r7, #13]
 800bcd0:	2b80      	cmp	r3, #128	; 0x80
 800bcd2:	d103      	bne.n	800bcdc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2203      	movs	r2, #3
 800bcd8:	761a      	strb	r2, [r3, #24]
 800bcda:	e00d      	b.n	800bcf8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2205      	movs	r2, #5
 800bce0:	761a      	strb	r2, [r3, #24]
 800bce2:	e009      	b.n	800bcf8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800bce4:	7b7b      	ldrb	r3, [r7, #13]
 800bce6:	2b80      	cmp	r3, #128	; 0x80
 800bce8:	d103      	bne.n	800bcf2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2209      	movs	r2, #9
 800bcee:	761a      	strb	r2, [r3, #24]
 800bcf0:	e002      	b.n	800bcf8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2207      	movs	r2, #7
 800bcf6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2203      	movs	r2, #3
 800bcfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f000 fcbc 	bl	800c68c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bd14:	e1cb      	b.n	800c0ae <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bd16:	7bbb      	ldrb	r3, [r7, #14]
 800bd18:	2b04      	cmp	r3, #4
 800bd1a:	d003      	beq.n	800bd24 <USBH_HandleControl+0xe8>
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	f040 81c5 	bne.w	800c0ae <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	220b      	movs	r2, #11
 800bd28:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2203      	movs	r2, #3
 800bd2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd3e:	2300      	movs	r3, #0
 800bd40:	2200      	movs	r2, #0
 800bd42:	f000 fca3 	bl	800c68c <osMessageQueuePut>
      break;
 800bd46:	e1b2      	b.n	800c0ae <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6899      	ldr	r1, [r3, #8]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	899a      	ldrh	r2, [r3, #12]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	791b      	ldrb	r3, [r3, #4]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 f9f2 	bl	800c14a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2204      	movs	r2, #4
 800bd6a:	761a      	strb	r2, [r3, #24]
      break;
 800bd6c:	e1a8      	b.n	800c0c0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	791b      	ldrb	r3, [r3, #4]
 800bd72:	4619      	mov	r1, r3
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f003 fcad 	bl	800f6d4 <USBH_LL_GetURBState>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bd7e:	7bbb      	ldrb	r3, [r7, #14]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d110      	bne.n	800bda6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2209      	movs	r2, #9
 800bd88:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2203      	movs	r2, #3
 800bd8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd9e:	2300      	movs	r3, #0
 800bda0:	2200      	movs	r2, #0
 800bda2:	f000 fc73 	bl	800c68c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	2b05      	cmp	r3, #5
 800bdaa:	d110      	bne.n	800bdce <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bdac:	2303      	movs	r3, #3
 800bdae:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2203      	movs	r2, #3
 800bdb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f000 fc60 	bl	800c68c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bdcc:	e171      	b.n	800c0b2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800bdce:	7bbb      	ldrb	r3, [r7, #14]
 800bdd0:	2b04      	cmp	r3, #4
 800bdd2:	f040 816e 	bne.w	800c0b2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	220b      	movs	r2, #11
 800bdda:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2203      	movs	r2, #3
 800bde0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f000 fc4a 	bl	800c68c <osMessageQueuePut>
      break;
 800bdf8:	e15b      	b.n	800c0b2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6899      	ldr	r1, [r3, #8]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	899a      	ldrh	r2, [r3, #12]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	795b      	ldrb	r3, [r3, #5]
 800be06:	2001      	movs	r0, #1
 800be08:	9000      	str	r0, [sp, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f978 	bl	800c100 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be16:	b29a      	uxth	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2206      	movs	r2, #6
 800be20:	761a      	strb	r2, [r3, #24]
      break;
 800be22:	e14d      	b.n	800c0c0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	795b      	ldrb	r3, [r3, #5]
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f003 fc52 	bl	800f6d4 <USBH_LL_GetURBState>
 800be30:	4603      	mov	r3, r0
 800be32:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800be34:	7bbb      	ldrb	r3, [r7, #14]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d111      	bne.n	800be5e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2207      	movs	r2, #7
 800be3e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2203      	movs	r2, #3
 800be44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be54:	2300      	movs	r3, #0
 800be56:	2200      	movs	r2, #0
 800be58:	f000 fc18 	bl	800c68c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800be5c:	e12b      	b.n	800c0b6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800be5e:	7bbb      	ldrb	r3, [r7, #14]
 800be60:	2b05      	cmp	r3, #5
 800be62:	d113      	bne.n	800be8c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	220c      	movs	r2, #12
 800be68:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800be6a:	2303      	movs	r3, #3
 800be6c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2203      	movs	r2, #3
 800be72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be82:	2300      	movs	r3, #0
 800be84:	2200      	movs	r2, #0
 800be86:	f000 fc01 	bl	800c68c <osMessageQueuePut>
      break;
 800be8a:	e114      	b.n	800c0b6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800be8c:	7bbb      	ldrb	r3, [r7, #14]
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d111      	bne.n	800beb6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2205      	movs	r2, #5
 800be96:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2203      	movs	r2, #3
 800be9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800beac:	2300      	movs	r3, #0
 800beae:	2200      	movs	r2, #0
 800beb0:	f000 fbec 	bl	800c68c <osMessageQueuePut>
      break;
 800beb4:	e0ff      	b.n	800c0b6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800beb6:	7bbb      	ldrb	r3, [r7, #14]
 800beb8:	2b04      	cmp	r3, #4
 800beba:	f040 80fc 	bne.w	800c0b6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	220b      	movs	r2, #11
 800bec2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bec4:	2302      	movs	r3, #2
 800bec6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2203      	movs	r2, #3
 800becc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bedc:	2300      	movs	r3, #0
 800bede:	2200      	movs	r2, #0
 800bee0:	f000 fbd4 	bl	800c68c <osMessageQueuePut>
      break;
 800bee4:	e0e7      	b.n	800c0b6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	791b      	ldrb	r3, [r3, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	2100      	movs	r1, #0
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f92b 	bl	800c14a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800befa:	b29a      	uxth	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2208      	movs	r2, #8
 800bf04:	761a      	strb	r2, [r3, #24]

      break;
 800bf06:	e0db      	b.n	800c0c0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	791b      	ldrb	r3, [r3, #4]
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f003 fbe0 	bl	800f6d4 <USBH_LL_GetURBState>
 800bf14:	4603      	mov	r3, r0
 800bf16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bf18:	7bbb      	ldrb	r3, [r7, #14]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d113      	bne.n	800bf46 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	220d      	movs	r2, #13
 800bf22:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bf24:	2300      	movs	r3, #0
 800bf26:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2203      	movs	r2, #3
 800bf2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f000 fba4 	bl	800c68c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bf44:	e0b9      	b.n	800c0ba <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800bf46:	7bbb      	ldrb	r3, [r7, #14]
 800bf48:	2b04      	cmp	r3, #4
 800bf4a:	d111      	bne.n	800bf70 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	220b      	movs	r2, #11
 800bf50:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2203      	movs	r2, #3
 800bf56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bf66:	2300      	movs	r3, #0
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f000 fb8f 	bl	800c68c <osMessageQueuePut>
      break;
 800bf6e:	e0a4      	b.n	800c0ba <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800bf70:	7bbb      	ldrb	r3, [r7, #14]
 800bf72:	2b05      	cmp	r3, #5
 800bf74:	f040 80a1 	bne.w	800c0ba <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2203      	movs	r2, #3
 800bf80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bf90:	2300      	movs	r3, #0
 800bf92:	2200      	movs	r2, #0
 800bf94:	f000 fb7a 	bl	800c68c <osMessageQueuePut>
      break;
 800bf98:	e08f      	b.n	800c0ba <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	795b      	ldrb	r3, [r3, #5]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	9200      	str	r2, [sp, #0]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f8aa 	bl	800c100 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	220a      	movs	r2, #10
 800bfbc:	761a      	strb	r2, [r3, #24]
      break;
 800bfbe:	e07f      	b.n	800c0c0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	795b      	ldrb	r3, [r3, #5]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f003 fb84 	bl	800f6d4 <USBH_LL_GetURBState>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bfd0:	7bbb      	ldrb	r3, [r7, #14]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d113      	bne.n	800bffe <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	220d      	movs	r2, #13
 800bfde:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2203      	movs	r2, #3
 800bfe4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bff4:	2300      	movs	r3, #0
 800bff6:	2200      	movs	r2, #0
 800bff8:	f000 fb48 	bl	800c68c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bffc:	e05f      	b.n	800c0be <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bffe:	7bbb      	ldrb	r3, [r7, #14]
 800c000:	2b02      	cmp	r3, #2
 800c002:	d111      	bne.n	800c028 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2209      	movs	r2, #9
 800c008:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2203      	movs	r2, #3
 800c00e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c01e:	2300      	movs	r3, #0
 800c020:	2200      	movs	r2, #0
 800c022:	f000 fb33 	bl	800c68c <osMessageQueuePut>
      break;
 800c026:	e04a      	b.n	800c0be <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800c028:	7bbb      	ldrb	r3, [r7, #14]
 800c02a:	2b04      	cmp	r3, #4
 800c02c:	d147      	bne.n	800c0be <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	220b      	movs	r2, #11
 800c032:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2203      	movs	r2, #3
 800c038:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c048:	2300      	movs	r3, #0
 800c04a:	2200      	movs	r2, #0
 800c04c:	f000 fb1e 	bl	800c68c <osMessageQueuePut>
      break;
 800c050:	e035      	b.n	800c0be <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	7e5b      	ldrb	r3, [r3, #25]
 800c056:	3301      	adds	r3, #1
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	765a      	strb	r2, [r3, #25]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	7e5b      	ldrb	r3, [r3, #25]
 800c062:	2b02      	cmp	r3, #2
 800c064:	d806      	bhi.n	800c074 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2201      	movs	r2, #1
 800c06a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c072:	e025      	b.n	800c0c0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c07a:	2106      	movs	r1, #6
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	795b      	ldrb	r3, [r3, #5]
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f90d 	bl	800c2ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	791b      	ldrb	r3, [r3, #4]
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f907 	bl	800c2ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c0a4:	2302      	movs	r3, #2
 800c0a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c0a8:	e00a      	b.n	800c0c0 <USBH_HandleControl+0x484>

    default:
      break;
 800c0aa:	bf00      	nop
 800c0ac:	e008      	b.n	800c0c0 <USBH_HandleControl+0x484>
      break;
 800c0ae:	bf00      	nop
 800c0b0:	e006      	b.n	800c0c0 <USBH_HandleControl+0x484>
      break;
 800c0b2:	bf00      	nop
 800c0b4:	e004      	b.n	800c0c0 <USBH_HandleControl+0x484>
      break;
 800c0b6:	bf00      	nop
 800c0b8:	e002      	b.n	800c0c0 <USBH_HandleControl+0x484>
      break;
 800c0ba:	bf00      	nop
 800c0bc:	e000      	b.n	800c0c0 <USBH_HandleControl+0x484>
      break;
 800c0be:	bf00      	nop
  }

  return status;
 800c0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop

0800c0cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b088      	sub	sp, #32
 800c0d0:	af04      	add	r7, sp, #16
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c0da:	79f9      	ldrb	r1, [r7, #7]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	9303      	str	r3, [sp, #12]
 800c0e0:	2308      	movs	r3, #8
 800c0e2:	9302      	str	r3, [sp, #8]
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	9301      	str	r3, [sp, #4]
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f003 fabe 	bl	800f672 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b088      	sub	sp, #32
 800c104:	af04      	add	r7, sp, #16
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	4611      	mov	r1, r2
 800c10c:	461a      	mov	r2, r3
 800c10e:	460b      	mov	r3, r1
 800c110:	80fb      	strh	r3, [r7, #6]
 800c112:	4613      	mov	r3, r2
 800c114:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c120:	2300      	movs	r3, #0
 800c122:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c124:	7979      	ldrb	r1, [r7, #5]
 800c126:	7e3b      	ldrb	r3, [r7, #24]
 800c128:	9303      	str	r3, [sp, #12]
 800c12a:	88fb      	ldrh	r3, [r7, #6]
 800c12c:	9302      	str	r3, [sp, #8]
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	2301      	movs	r3, #1
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	2300      	movs	r3, #0
 800c138:	2200      	movs	r2, #0
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f003 fa99 	bl	800f672 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b088      	sub	sp, #32
 800c14e:	af04      	add	r7, sp, #16
 800c150:	60f8      	str	r0, [r7, #12]
 800c152:	60b9      	str	r1, [r7, #8]
 800c154:	4611      	mov	r1, r2
 800c156:	461a      	mov	r2, r3
 800c158:	460b      	mov	r3, r1
 800c15a:	80fb      	strh	r3, [r7, #6]
 800c15c:	4613      	mov	r3, r2
 800c15e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c160:	7979      	ldrb	r1, [r7, #5]
 800c162:	2300      	movs	r3, #0
 800c164:	9303      	str	r3, [sp, #12]
 800c166:	88fb      	ldrh	r3, [r7, #6]
 800c168:	9302      	str	r3, [sp, #8]
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	9301      	str	r3, [sp, #4]
 800c16e:	2301      	movs	r3, #1
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	2300      	movs	r3, #0
 800c174:	2201      	movs	r2, #1
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	f003 fa7b 	bl	800f672 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c17c:	2300      	movs	r3, #0

}
 800c17e:	4618      	mov	r0, r3
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b088      	sub	sp, #32
 800c18a:	af04      	add	r7, sp, #16
 800c18c:	60f8      	str	r0, [r7, #12]
 800c18e:	60b9      	str	r1, [r7, #8]
 800c190:	4611      	mov	r1, r2
 800c192:	461a      	mov	r2, r3
 800c194:	460b      	mov	r3, r1
 800c196:	80fb      	strh	r3, [r7, #6]
 800c198:	4613      	mov	r3, r2
 800c19a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c1aa:	7979      	ldrb	r1, [r7, #5]
 800c1ac:	7e3b      	ldrb	r3, [r7, #24]
 800c1ae:	9303      	str	r3, [sp, #12]
 800c1b0:	88fb      	ldrh	r3, [r7, #6]
 800c1b2:	9302      	str	r3, [sp, #8]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	9301      	str	r3, [sp, #4]
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	2302      	movs	r3, #2
 800c1be:	2200      	movs	r2, #0
 800c1c0:	68f8      	ldr	r0, [r7, #12]
 800c1c2:	f003 fa56 	bl	800f672 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af04      	add	r7, sp, #16
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	4611      	mov	r1, r2
 800c1dc:	461a      	mov	r2, r3
 800c1de:	460b      	mov	r3, r1
 800c1e0:	80fb      	strh	r3, [r7, #6]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c1e6:	7979      	ldrb	r1, [r7, #5]
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	9303      	str	r3, [sp, #12]
 800c1ec:	88fb      	ldrh	r3, [r7, #6]
 800c1ee:	9302      	str	r3, [sp, #8]
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f003 fa38 	bl	800f672 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b086      	sub	sp, #24
 800c210:	af04      	add	r7, sp, #16
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	4608      	mov	r0, r1
 800c216:	4611      	mov	r1, r2
 800c218:	461a      	mov	r2, r3
 800c21a:	4603      	mov	r3, r0
 800c21c:	70fb      	strb	r3, [r7, #3]
 800c21e:	460b      	mov	r3, r1
 800c220:	70bb      	strb	r3, [r7, #2]
 800c222:	4613      	mov	r3, r2
 800c224:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c226:	7878      	ldrb	r0, [r7, #1]
 800c228:	78ba      	ldrb	r2, [r7, #2]
 800c22a:	78f9      	ldrb	r1, [r7, #3]
 800c22c:	8b3b      	ldrh	r3, [r7, #24]
 800c22e:	9302      	str	r3, [sp, #8]
 800c230:	7d3b      	ldrb	r3, [r7, #20]
 800c232:	9301      	str	r3, [sp, #4]
 800c234:	7c3b      	ldrb	r3, [r7, #16]
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	4603      	mov	r3, r0
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f003 f9cb 	bl	800f5d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b082      	sub	sp, #8
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	460b      	mov	r3, r1
 800c254:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c256:	78fb      	ldrb	r3, [r7, #3]
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f003 f9ea 	bl	800f634 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b084      	sub	sp, #16
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	460b      	mov	r3, r1
 800c274:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f836 	bl	800c2e8 <USBH_GetFreePipe>
 800c27c:	4603      	mov	r3, r0
 800c27e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c280:	89fb      	ldrh	r3, [r7, #14]
 800c282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c286:	4293      	cmp	r3, r2
 800c288:	d00a      	beq.n	800c2a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c28a:	78fa      	ldrb	r2, [r7, #3]
 800c28c:	89fb      	ldrh	r3, [r7, #14]
 800c28e:	f003 030f 	and.w	r3, r3, #15
 800c292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c296:	6879      	ldr	r1, [r7, #4]
 800c298:	33e0      	adds	r3, #224	; 0xe0
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	440b      	add	r3, r1
 800c29e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c2a0:	89fb      	ldrh	r3, [r7, #14]
 800c2a2:	b2db      	uxtb	r3, r3
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c2b8:	78fb      	ldrb	r3, [r7, #3]
 800c2ba:	2b0a      	cmp	r3, #10
 800c2bc:	d80d      	bhi.n	800c2da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c2be:	78fb      	ldrb	r3, [r7, #3]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	33e0      	adds	r3, #224	; 0xe0
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	78fb      	ldrb	r3, [r7, #3]
 800c2cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c2d0:	6879      	ldr	r1, [r7, #4]
 800c2d2:	33e0      	adds	r3, #224	; 0xe0
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	440b      	add	r3, r1
 800c2d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	73fb      	strb	r3, [r7, #15]
 800c2f8:	e00f      	b.n	800c31a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	33e0      	adds	r3, #224	; 0xe0
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d102      	bne.n	800c314 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	b29b      	uxth	r3, r3
 800c312:	e007      	b.n	800c324 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c314:	7bfb      	ldrb	r3, [r7, #15]
 800c316:	3301      	adds	r3, #1
 800c318:	73fb      	strb	r3, [r7, #15]
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
 800c31c:	2b0a      	cmp	r3, #10
 800c31e:	d9ec      	bls.n	800c2fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c320:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c324:	4618      	mov	r0, r3
 800c326:	3714      	adds	r7, #20
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <__NVIC_SetPriority>:
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	4603      	mov	r3, r0
 800c338:	6039      	str	r1, [r7, #0]
 800c33a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c33c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c340:	2b00      	cmp	r3, #0
 800c342:	db0a      	blt.n	800c35a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	b2da      	uxtb	r2, r3
 800c348:	490c      	ldr	r1, [pc, #48]	; (800c37c <__NVIC_SetPriority+0x4c>)
 800c34a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c34e:	0112      	lsls	r2, r2, #4
 800c350:	b2d2      	uxtb	r2, r2
 800c352:	440b      	add	r3, r1
 800c354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c358:	e00a      	b.n	800c370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	4908      	ldr	r1, [pc, #32]	; (800c380 <__NVIC_SetPriority+0x50>)
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	f003 030f 	and.w	r3, r3, #15
 800c366:	3b04      	subs	r3, #4
 800c368:	0112      	lsls	r2, r2, #4
 800c36a:	b2d2      	uxtb	r2, r2
 800c36c:	440b      	add	r3, r1
 800c36e:	761a      	strb	r2, [r3, #24]
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr
 800c37c:	e000e100 	.word	0xe000e100
 800c380:	e000ed00 	.word	0xe000ed00

0800c384 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c384:	b580      	push	{r7, lr}
 800c386:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c388:	4b05      	ldr	r3, [pc, #20]	; (800c3a0 <SysTick_Handler+0x1c>)
 800c38a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c38c:	f001 fee8 	bl	800e160 <xTaskGetSchedulerState>
 800c390:	4603      	mov	r3, r0
 800c392:	2b01      	cmp	r3, #1
 800c394:	d001      	beq.n	800c39a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c396:	f002 fccf 	bl	800ed38 <xPortSysTickHandler>
  }
}
 800c39a:	bf00      	nop
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	e000e010 	.word	0xe000e010

0800c3a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	f06f 0004 	mvn.w	r0, #4
 800c3ae:	f7ff ffbf 	bl	800c330 <__NVIC_SetPriority>
#endif
}
 800c3b2:	bf00      	nop
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3be:	f3ef 8305 	mrs	r3, IPSR
 800c3c2:	603b      	str	r3, [r7, #0]
  return(result);
 800c3c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d003      	beq.n	800c3d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c3ca:	f06f 0305 	mvn.w	r3, #5
 800c3ce:	607b      	str	r3, [r7, #4]
 800c3d0:	e00c      	b.n	800c3ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c3d2:	4b0a      	ldr	r3, [pc, #40]	; (800c3fc <osKernelInitialize+0x44>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d105      	bne.n	800c3e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c3da:	4b08      	ldr	r3, [pc, #32]	; (800c3fc <osKernelInitialize+0x44>)
 800c3dc:	2201      	movs	r2, #1
 800c3de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	607b      	str	r3, [r7, #4]
 800c3e4:	e002      	b.n	800c3ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c3e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c3ec:	687b      	ldr	r3, [r7, #4]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	370c      	adds	r7, #12
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	20000524 	.word	0x20000524

0800c400 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c406:	f3ef 8305 	mrs	r3, IPSR
 800c40a:	603b      	str	r3, [r7, #0]
  return(result);
 800c40c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c412:	f06f 0305 	mvn.w	r3, #5
 800c416:	607b      	str	r3, [r7, #4]
 800c418:	e010      	b.n	800c43c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c41a:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <osKernelStart+0x48>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d109      	bne.n	800c436 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c422:	f7ff ffbf 	bl	800c3a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c426:	4b08      	ldr	r3, [pc, #32]	; (800c448 <osKernelStart+0x48>)
 800c428:	2202      	movs	r2, #2
 800c42a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c42c:	f001 fa50 	bl	800d8d0 <vTaskStartScheduler>
      stat = osOK;
 800c430:	2300      	movs	r3, #0
 800c432:	607b      	str	r3, [r7, #4]
 800c434:	e002      	b.n	800c43c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c43a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c43c:	687b      	ldr	r3, [r7, #4]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	20000524 	.word	0x20000524

0800c44c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b08e      	sub	sp, #56	; 0x38
 800c450:	af04      	add	r7, sp, #16
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c458:	2300      	movs	r3, #0
 800c45a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c45c:	f3ef 8305 	mrs	r3, IPSR
 800c460:	617b      	str	r3, [r7, #20]
  return(result);
 800c462:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c464:	2b00      	cmp	r3, #0
 800c466:	d17e      	bne.n	800c566 <osThreadNew+0x11a>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d07b      	beq.n	800c566 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c46e:	2380      	movs	r3, #128	; 0x80
 800c470:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c472:	2318      	movs	r3, #24
 800c474:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c476:	2300      	movs	r3, #0
 800c478:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c47a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c47e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d045      	beq.n	800c512 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d002      	beq.n	800c494 <osThreadNew+0x48>
        name = attr->name;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d002      	beq.n	800c4a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	699b      	ldr	r3, [r3, #24]
 800c4a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d008      	beq.n	800c4ba <osThreadNew+0x6e>
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	2b38      	cmp	r3, #56	; 0x38
 800c4ac:	d805      	bhi.n	800c4ba <osThreadNew+0x6e>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <osThreadNew+0x72>
        return (NULL);
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e054      	b.n	800c568 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d003      	beq.n	800c4ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	089b      	lsrs	r3, r3, #2
 800c4cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00e      	beq.n	800c4f4 <osThreadNew+0xa8>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	2b5b      	cmp	r3, #91	; 0x5b
 800c4dc:	d90a      	bls.n	800c4f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d006      	beq.n	800c4f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d002      	beq.n	800c4f4 <osThreadNew+0xa8>
        mem = 1;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	61bb      	str	r3, [r7, #24]
 800c4f2:	e010      	b.n	800c516 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10c      	bne.n	800c516 <osThreadNew+0xca>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d108      	bne.n	800c516 <osThreadNew+0xca>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d104      	bne.n	800c516 <osThreadNew+0xca>
          mem = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	61bb      	str	r3, [r7, #24]
 800c510:	e001      	b.n	800c516 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c512:	2300      	movs	r3, #0
 800c514:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d110      	bne.n	800c53e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c524:	9202      	str	r2, [sp, #8]
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	6a3a      	ldr	r2, [r7, #32]
 800c530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f000 fff6 	bl	800d524 <xTaskCreateStatic>
 800c538:	4603      	mov	r3, r0
 800c53a:	613b      	str	r3, [r7, #16]
 800c53c:	e013      	b.n	800c566 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d110      	bne.n	800c566 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c544:	6a3b      	ldr	r3, [r7, #32]
 800c546:	b29a      	uxth	r2, r3
 800c548:	f107 0310 	add.w	r3, r7, #16
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f001 f841 	bl	800d5de <xTaskCreate>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d001      	beq.n	800c566 <osThreadNew+0x11a>
            hTask = NULL;
 800c562:	2300      	movs	r3, #0
 800c564:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c566:	693b      	ldr	r3, [r7, #16]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3728      	adds	r7, #40	; 0x28
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c578:	f3ef 8305 	mrs	r3, IPSR
 800c57c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c57e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c580:	2b00      	cmp	r3, #0
 800c582:	d003      	beq.n	800c58c <osDelay+0x1c>
    stat = osErrorISR;
 800c584:	f06f 0305 	mvn.w	r3, #5
 800c588:	60fb      	str	r3, [r7, #12]
 800c58a:	e007      	b.n	800c59c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d002      	beq.n	800c59c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f001 f966 	bl	800d868 <vTaskDelay>
    }
  }

  return (stat);
 800c59c:	68fb      	ldr	r3, [r7, #12]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b08a      	sub	sp, #40	; 0x28
 800c5aa:	af02      	add	r7, sp, #8
 800c5ac:	60f8      	str	r0, [r7, #12]
 800c5ae:	60b9      	str	r1, [r7, #8]
 800c5b0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5b6:	f3ef 8305 	mrs	r3, IPSR
 800c5ba:	613b      	str	r3, [r7, #16]
  return(result);
 800c5bc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d15f      	bne.n	800c682 <osMessageQueueNew+0xdc>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d05c      	beq.n	800c682 <osMessageQueueNew+0xdc>
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d059      	beq.n	800c682 <osMessageQueueNew+0xdc>
    mem = -1;
 800c5ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d029      	beq.n	800c62e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d012      	beq.n	800c608 <osMessageQueueNew+0x62>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	2b4f      	cmp	r3, #79	; 0x4f
 800c5e8:	d90e      	bls.n	800c608 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00a      	beq.n	800c608 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	695a      	ldr	r2, [r3, #20]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	68b9      	ldr	r1, [r7, #8]
 800c5fa:	fb01 f303 	mul.w	r3, r1, r3
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d302      	bcc.n	800c608 <osMessageQueueNew+0x62>
        mem = 1;
 800c602:	2301      	movs	r3, #1
 800c604:	61bb      	str	r3, [r7, #24]
 800c606:	e014      	b.n	800c632 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d110      	bne.n	800c632 <osMessageQueueNew+0x8c>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10c      	bne.n	800c632 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d108      	bne.n	800c632 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d104      	bne.n	800c632 <osMessageQueueNew+0x8c>
          mem = 0;
 800c628:	2300      	movs	r3, #0
 800c62a:	61bb      	str	r3, [r7, #24]
 800c62c:	e001      	b.n	800c632 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d10b      	bne.n	800c650 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	691a      	ldr	r2, [r3, #16]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	2100      	movs	r1, #0
 800c642:	9100      	str	r1, [sp, #0]
 800c644:	68b9      	ldr	r1, [r7, #8]
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f000 fa2e 	bl	800caa8 <xQueueGenericCreateStatic>
 800c64c:	61f8      	str	r0, [r7, #28]
 800c64e:	e008      	b.n	800c662 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d105      	bne.n	800c662 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c656:	2200      	movs	r2, #0
 800c658:	68b9      	ldr	r1, [r7, #8]
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	f000 fa9c 	bl	800cb98 <xQueueGenericCreate>
 800c660:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00c      	beq.n	800c682 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	617b      	str	r3, [r7, #20]
 800c674:	e001      	b.n	800c67a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c676:	2300      	movs	r3, #0
 800c678:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c67a:	6979      	ldr	r1, [r7, #20]
 800c67c:	69f8      	ldr	r0, [r7, #28]
 800c67e:	f000 fef3 	bl	800d468 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c682:	69fb      	ldr	r3, [r7, #28]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3720      	adds	r7, #32
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b088      	sub	sp, #32
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	603b      	str	r3, [r7, #0]
 800c698:	4613      	mov	r3, r2
 800c69a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6a4:	f3ef 8305 	mrs	r3, IPSR
 800c6a8:	617b      	str	r3, [r7, #20]
  return(result);
 800c6aa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d028      	beq.n	800c702 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d005      	beq.n	800c6c2 <osMessageQueuePut+0x36>
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d002      	beq.n	800c6c2 <osMessageQueuePut+0x36>
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d003      	beq.n	800c6ca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c6c2:	f06f 0303 	mvn.w	r3, #3
 800c6c6:	61fb      	str	r3, [r7, #28]
 800c6c8:	e038      	b.n	800c73c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c6ce:	f107 0210 	add.w	r2, r7, #16
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	68b9      	ldr	r1, [r7, #8]
 800c6d6:	69b8      	ldr	r0, [r7, #24]
 800c6d8:	f000 fbba 	bl	800ce50 <xQueueGenericSendFromISR>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d003      	beq.n	800c6ea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c6e2:	f06f 0302 	mvn.w	r3, #2
 800c6e6:	61fb      	str	r3, [r7, #28]
 800c6e8:	e028      	b.n	800c73c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d025      	beq.n	800c73c <osMessageQueuePut+0xb0>
 800c6f0:	4b15      	ldr	r3, [pc, #84]	; (800c748 <osMessageQueuePut+0xbc>)
 800c6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	e01c      	b.n	800c73c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d002      	beq.n	800c70e <osMessageQueuePut+0x82>
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d103      	bne.n	800c716 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c70e:	f06f 0303 	mvn.w	r3, #3
 800c712:	61fb      	str	r3, [r7, #28]
 800c714:	e012      	b.n	800c73c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c716:	2300      	movs	r3, #0
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	68b9      	ldr	r1, [r7, #8]
 800c71c:	69b8      	ldr	r0, [r7, #24]
 800c71e:	f000 fa99 	bl	800cc54 <xQueueGenericSend>
 800c722:	4603      	mov	r3, r0
 800c724:	2b01      	cmp	r3, #1
 800c726:	d009      	beq.n	800c73c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d003      	beq.n	800c736 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c72e:	f06f 0301 	mvn.w	r3, #1
 800c732:	61fb      	str	r3, [r7, #28]
 800c734:	e002      	b.n	800c73c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c736:	f06f 0302 	mvn.w	r3, #2
 800c73a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c73c:	69fb      	ldr	r3, [r7, #28]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3720      	adds	r7, #32
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	e000ed04 	.word	0xe000ed04

0800c74c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b088      	sub	sp, #32
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
 800c758:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c75e:	2300      	movs	r3, #0
 800c760:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c762:	f3ef 8305 	mrs	r3, IPSR
 800c766:	617b      	str	r3, [r7, #20]
  return(result);
 800c768:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d028      	beq.n	800c7c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d005      	beq.n	800c780 <osMessageQueueGet+0x34>
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d002      	beq.n	800c780 <osMessageQueueGet+0x34>
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d003      	beq.n	800c788 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c780:	f06f 0303 	mvn.w	r3, #3
 800c784:	61fb      	str	r3, [r7, #28]
 800c786:	e037      	b.n	800c7f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c788:	2300      	movs	r3, #0
 800c78a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c78c:	f107 0310 	add.w	r3, r7, #16
 800c790:	461a      	mov	r2, r3
 800c792:	68b9      	ldr	r1, [r7, #8]
 800c794:	69b8      	ldr	r0, [r7, #24]
 800c796:	f000 fcd7 	bl	800d148 <xQueueReceiveFromISR>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d003      	beq.n	800c7a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c7a0:	f06f 0302 	mvn.w	r3, #2
 800c7a4:	61fb      	str	r3, [r7, #28]
 800c7a6:	e027      	b.n	800c7f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d024      	beq.n	800c7f8 <osMessageQueueGet+0xac>
 800c7ae:	4b15      	ldr	r3, [pc, #84]	; (800c804 <osMessageQueueGet+0xb8>)
 800c7b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7b4:	601a      	str	r2, [r3, #0]
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	e01b      	b.n	800c7f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d002      	beq.n	800c7cc <osMessageQueueGet+0x80>
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d103      	bne.n	800c7d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c7cc:	f06f 0303 	mvn.w	r3, #3
 800c7d0:	61fb      	str	r3, [r7, #28]
 800c7d2:	e011      	b.n	800c7f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c7d4:	683a      	ldr	r2, [r7, #0]
 800c7d6:	68b9      	ldr	r1, [r7, #8]
 800c7d8:	69b8      	ldr	r0, [r7, #24]
 800c7da:	f000 fbd5 	bl	800cf88 <xQueueReceive>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d009      	beq.n	800c7f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d003      	beq.n	800c7f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c7ea:	f06f 0301 	mvn.w	r3, #1
 800c7ee:	61fb      	str	r3, [r7, #28]
 800c7f0:	e002      	b.n	800c7f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c7f2:	f06f 0302 	mvn.w	r3, #2
 800c7f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c7f8:	69fb      	ldr	r3, [r7, #28]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3720      	adds	r7, #32
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	e000ed04 	.word	0xe000ed04

0800c808 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	4a07      	ldr	r2, [pc, #28]	; (800c834 <vApplicationGetIdleTaskMemory+0x2c>)
 800c818:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	4a06      	ldr	r2, [pc, #24]	; (800c838 <vApplicationGetIdleTaskMemory+0x30>)
 800c81e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2280      	movs	r2, #128	; 0x80
 800c824:	601a      	str	r2, [r3, #0]
}
 800c826:	bf00      	nop
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	20000528 	.word	0x20000528
 800c838:	20000584 	.word	0x20000584

0800c83c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c83c:	b480      	push	{r7}
 800c83e:	b085      	sub	sp, #20
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4a07      	ldr	r2, [pc, #28]	; (800c868 <vApplicationGetTimerTaskMemory+0x2c>)
 800c84c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	4a06      	ldr	r2, [pc, #24]	; (800c86c <vApplicationGetTimerTaskMemory+0x30>)
 800c852:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c85a:	601a      	str	r2, [r3, #0]
}
 800c85c:	bf00      	nop
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr
 800c868:	20000784 	.word	0x20000784
 800c86c:	200007e0 	.word	0x200007e0

0800c870 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f103 0208 	add.w	r2, r3, #8
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c888:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f103 0208 	add.w	r2, r3, #8
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f103 0208 	add.w	r2, r3, #8
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c8be:	bf00      	nop
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b085      	sub	sp, #20
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	689a      	ldr	r2, [r3, #8]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	683a      	ldr	r2, [r7, #0]
 800c8f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	1c5a      	adds	r2, r3, #1
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	601a      	str	r2, [r3, #0]
}
 800c906:	bf00      	nop
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c912:	b480      	push	{r7}
 800c914:	b085      	sub	sp, #20
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
 800c91a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c928:	d103      	bne.n	800c932 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	60fb      	str	r3, [r7, #12]
 800c930:	e00c      	b.n	800c94c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	3308      	adds	r3, #8
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	e002      	b.n	800c940 <vListInsert+0x2e>
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d2f6      	bcs.n	800c93a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	685a      	ldr	r2, [r3, #4]
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	683a      	ldr	r2, [r7, #0]
 800c966:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	1c5a      	adds	r2, r3, #1
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	601a      	str	r2, [r3, #0]
}
 800c978:	bf00      	nop
 800c97a:	3714      	adds	r7, #20
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	6892      	ldr	r2, [r2, #8]
 800c99a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	6852      	ldr	r2, [r2, #4]
 800c9a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d103      	bne.n	800c9b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	689a      	ldr	r2, [r3, #8]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	1e5a      	subs	r2, r3, #1
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d10a      	bne.n	800ca02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f0:	f383 8811 	msr	BASEPRI, r3
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c9fe:	bf00      	nop
 800ca00:	e7fe      	b.n	800ca00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ca02:	f002 f907 	bl	800ec14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca0e:	68f9      	ldr	r1, [r7, #12]
 800ca10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca12:	fb01 f303 	mul.w	r3, r1, r3
 800ca16:	441a      	add	r2, r3
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca32:	3b01      	subs	r3, #1
 800ca34:	68f9      	ldr	r1, [r7, #12]
 800ca36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca38:	fb01 f303 	mul.w	r3, r1, r3
 800ca3c:	441a      	add	r2, r3
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	22ff      	movs	r2, #255	; 0xff
 800ca46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	22ff      	movs	r2, #255	; 0xff
 800ca4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d114      	bne.n	800ca82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d01a      	beq.n	800ca96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	3310      	adds	r3, #16
 800ca64:	4618      	mov	r0, r3
 800ca66:	f001 f9bd 	bl	800dde4 <xTaskRemoveFromEventList>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d012      	beq.n	800ca96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ca70:	4b0c      	ldr	r3, [pc, #48]	; (800caa4 <xQueueGenericReset+0xcc>)
 800ca72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca76:	601a      	str	r2, [r3, #0]
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	e009      	b.n	800ca96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	3310      	adds	r3, #16
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7ff fef2 	bl	800c870 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	3324      	adds	r3, #36	; 0x24
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7ff feed 	bl	800c870 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ca96:	f002 f8ed 	bl	800ec74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ca9a:	2301      	movs	r3, #1
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	e000ed04 	.word	0xe000ed04

0800caa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08e      	sub	sp, #56	; 0x38
 800caac:	af02      	add	r7, sp, #8
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
 800cab4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10a      	bne.n	800cad2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac0:	f383 8811 	msr	BASEPRI, r3
 800cac4:	f3bf 8f6f 	isb	sy
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cace:	bf00      	nop
 800cad0:	e7fe      	b.n	800cad0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10a      	bne.n	800caee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800caea:	bf00      	nop
 800caec:	e7fe      	b.n	800caec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d002      	beq.n	800cafa <xQueueGenericCreateStatic+0x52>
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <xQueueGenericCreateStatic+0x56>
 800cafa:	2301      	movs	r3, #1
 800cafc:	e000      	b.n	800cb00 <xQueueGenericCreateStatic+0x58>
 800cafe:	2300      	movs	r3, #0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10a      	bne.n	800cb1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb08:	f383 8811 	msr	BASEPRI, r3
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	623b      	str	r3, [r7, #32]
}
 800cb16:	bf00      	nop
 800cb18:	e7fe      	b.n	800cb18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d102      	bne.n	800cb26 <xQueueGenericCreateStatic+0x7e>
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <xQueueGenericCreateStatic+0x82>
 800cb26:	2301      	movs	r3, #1
 800cb28:	e000      	b.n	800cb2c <xQueueGenericCreateStatic+0x84>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10a      	bne.n	800cb46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	61fb      	str	r3, [r7, #28]
}
 800cb42:	bf00      	nop
 800cb44:	e7fe      	b.n	800cb44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cb46:	2350      	movs	r3, #80	; 0x50
 800cb48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	2b50      	cmp	r3, #80	; 0x50
 800cb4e:	d00a      	beq.n	800cb66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	61bb      	str	r3, [r7, #24]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cb66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00d      	beq.n	800cb8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb74:	2201      	movs	r2, #1
 800cb76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	4613      	mov	r3, r2
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	68b9      	ldr	r1, [r7, #8]
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	f000 f83f 	bl	800cc0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3730      	adds	r7, #48	; 0x30
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b08a      	sub	sp, #40	; 0x28
 800cb9c:	af02      	add	r7, sp, #8
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	4613      	mov	r3, r2
 800cba4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10a      	bne.n	800cbc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	613b      	str	r3, [r7, #16]
}
 800cbbe:	bf00      	nop
 800cbc0:	e7fe      	b.n	800cbc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	fb02 f303 	mul.w	r3, r2, r3
 800cbca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	3350      	adds	r3, #80	; 0x50
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f002 f941 	bl	800ee58 <pvPortMalloc>
 800cbd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d011      	beq.n	800cc02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	3350      	adds	r3, #80	; 0x50
 800cbe6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	2200      	movs	r2, #0
 800cbec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cbf0:	79fa      	ldrb	r2, [r7, #7]
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	697a      	ldr	r2, [r7, #20]
 800cbfa:	68b9      	ldr	r1, [r7, #8]
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f000 f805 	bl	800cc0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc02:	69bb      	ldr	r3, [r7, #24]
	}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3720      	adds	r7, #32
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d103      	bne.n	800cc28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	e002      	b.n	800cc2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	69b8      	ldr	r0, [r7, #24]
 800cc3e:	f7ff fecb 	bl	800c9d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	78fa      	ldrb	r2, [r7, #3]
 800cc46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cc4a:	bf00      	nop
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b08e      	sub	sp, #56	; 0x38
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc62:	2300      	movs	r3, #0
 800cc64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10a      	bne.n	800cc86 <xQueueGenericSend+0x32>
	__asm volatile
 800cc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc74:	f383 8811 	msr	BASEPRI, r3
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc82:	bf00      	nop
 800cc84:	e7fe      	b.n	800cc84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d103      	bne.n	800cc94 <xQueueGenericSend+0x40>
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <xQueueGenericSend+0x44>
 800cc94:	2301      	movs	r3, #1
 800cc96:	e000      	b.n	800cc9a <xQueueGenericSend+0x46>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d10a      	bne.n	800ccb4 <xQueueGenericSend+0x60>
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccb0:	bf00      	nop
 800ccb2:	e7fe      	b.n	800ccb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d103      	bne.n	800ccc2 <xQueueGenericSend+0x6e>
 800ccba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d101      	bne.n	800ccc6 <xQueueGenericSend+0x72>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e000      	b.n	800ccc8 <xQueueGenericSend+0x74>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d10a      	bne.n	800cce2 <xQueueGenericSend+0x8e>
	__asm volatile
 800cccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd0:	f383 8811 	msr	BASEPRI, r3
 800ccd4:	f3bf 8f6f 	isb	sy
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	623b      	str	r3, [r7, #32]
}
 800ccde:	bf00      	nop
 800cce0:	e7fe      	b.n	800cce0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cce2:	f001 fa3d 	bl	800e160 <xTaskGetSchedulerState>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d102      	bne.n	800ccf2 <xQueueGenericSend+0x9e>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d101      	bne.n	800ccf6 <xQueueGenericSend+0xa2>
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e000      	b.n	800ccf8 <xQueueGenericSend+0xa4>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10a      	bne.n	800cd12 <xQueueGenericSend+0xbe>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	61fb      	str	r3, [r7, #28]
}
 800cd0e:	bf00      	nop
 800cd10:	e7fe      	b.n	800cd10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd12:	f001 ff7f 	bl	800ec14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d302      	bcc.n	800cd28 <xQueueGenericSend+0xd4>
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d129      	bne.n	800cd7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd2e:	f000 fa8b 	bl	800d248 <prvCopyDataToQueue>
 800cd32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d010      	beq.n	800cd5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3e:	3324      	adds	r3, #36	; 0x24
 800cd40:	4618      	mov	r0, r3
 800cd42:	f001 f84f 	bl	800dde4 <xTaskRemoveFromEventList>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d013      	beq.n	800cd74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd4c:	4b3f      	ldr	r3, [pc, #252]	; (800ce4c <xQueueGenericSend+0x1f8>)
 800cd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd52:	601a      	str	r2, [r3, #0]
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	e00a      	b.n	800cd74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d007      	beq.n	800cd74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd64:	4b39      	ldr	r3, [pc, #228]	; (800ce4c <xQueueGenericSend+0x1f8>)
 800cd66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd6a:	601a      	str	r2, [r3, #0]
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cd74:	f001 ff7e 	bl	800ec74 <vPortExitCritical>
				return pdPASS;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e063      	b.n	800ce44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d103      	bne.n	800cd8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd82:	f001 ff77 	bl	800ec74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	e05c      	b.n	800ce44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d106      	bne.n	800cd9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd90:	f107 0314 	add.w	r3, r7, #20
 800cd94:	4618      	mov	r0, r3
 800cd96:	f001 f889 	bl	800deac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd9e:	f001 ff69 	bl	800ec74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cda2:	f000 fdfb 	bl	800d99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cda6:	f001 ff35 	bl	800ec14 <vPortEnterCritical>
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdb0:	b25b      	sxtb	r3, r3
 800cdb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdb6:	d103      	bne.n	800cdc0 <xQueueGenericSend+0x16c>
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdc6:	b25b      	sxtb	r3, r3
 800cdc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdcc:	d103      	bne.n	800cdd6 <xQueueGenericSend+0x182>
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdd6:	f001 ff4d 	bl	800ec74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdda:	1d3a      	adds	r2, r7, #4
 800cddc:	f107 0314 	add.w	r3, r7, #20
 800cde0:	4611      	mov	r1, r2
 800cde2:	4618      	mov	r0, r3
 800cde4:	f001 f878 	bl	800ded8 <xTaskCheckForTimeOut>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d124      	bne.n	800ce38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cdee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdf0:	f000 fb22 	bl	800d438 <prvIsQueueFull>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d018      	beq.n	800ce2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	3310      	adds	r3, #16
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	4611      	mov	r1, r2
 800ce02:	4618      	mov	r0, r3
 800ce04:	f000 ff9e 	bl	800dd44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce0a:	f000 faad 	bl	800d368 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce0e:	f000 fdd3 	bl	800d9b8 <xTaskResumeAll>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f47f af7c 	bne.w	800cd12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ce1a:	4b0c      	ldr	r3, [pc, #48]	; (800ce4c <xQueueGenericSend+0x1f8>)
 800ce1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	f3bf 8f4f 	dsb	sy
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	e772      	b.n	800cd12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce2e:	f000 fa9b 	bl	800d368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce32:	f000 fdc1 	bl	800d9b8 <xTaskResumeAll>
 800ce36:	e76c      	b.n	800cd12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce3a:	f000 fa95 	bl	800d368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce3e:	f000 fdbb 	bl	800d9b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3738      	adds	r7, #56	; 0x38
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	e000ed04 	.word	0xe000ed04

0800ce50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b090      	sub	sp, #64	; 0x40
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10a      	bne.n	800ce7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce7a:	bf00      	nop
 800ce7c:	e7fe      	b.n	800ce7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d103      	bne.n	800ce8c <xQueueGenericSendFromISR+0x3c>
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d101      	bne.n	800ce90 <xQueueGenericSendFromISR+0x40>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e000      	b.n	800ce92 <xQueueGenericSendFromISR+0x42>
 800ce90:	2300      	movs	r3, #0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10a      	bne.n	800ceac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ce96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9a:	f383 8811 	msr	BASEPRI, r3
 800ce9e:	f3bf 8f6f 	isb	sy
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cea8:	bf00      	nop
 800ceaa:	e7fe      	b.n	800ceaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d103      	bne.n	800ceba <xQueueGenericSendFromISR+0x6a>
 800ceb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d101      	bne.n	800cebe <xQueueGenericSendFromISR+0x6e>
 800ceba:	2301      	movs	r3, #1
 800cebc:	e000      	b.n	800cec0 <xQueueGenericSendFromISR+0x70>
 800cebe:	2300      	movs	r3, #0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10a      	bne.n	800ceda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	623b      	str	r3, [r7, #32]
}
 800ced6:	bf00      	nop
 800ced8:	e7fe      	b.n	800ced8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ceda:	f001 ff7d 	bl	800edd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cede:	f3ef 8211 	mrs	r2, BASEPRI
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	f383 8811 	msr	BASEPRI, r3
 800ceea:	f3bf 8f6f 	isb	sy
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	61fa      	str	r2, [r7, #28]
 800cef4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cef6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cef8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d302      	bcc.n	800cf0c <xQueueGenericSendFromISR+0xbc>
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d12f      	bne.n	800cf6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	68b9      	ldr	r1, [r7, #8]
 800cf20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf22:	f000 f991 	bl	800d248 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cf2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf2e:	d112      	bne.n	800cf56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d016      	beq.n	800cf66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3a:	3324      	adds	r3, #36	; 0x24
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f000 ff51 	bl	800dde4 <xTaskRemoveFromEventList>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00e      	beq.n	800cf66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00b      	beq.n	800cf66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	e007      	b.n	800cf66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	b25a      	sxtb	r2, r3
 800cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf66:	2301      	movs	r3, #1
 800cf68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cf6a:	e001      	b.n	800cf70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3740      	adds	r7, #64	; 0x40
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
	...

0800cf88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08c      	sub	sp, #48	; 0x30
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf94:	2300      	movs	r3, #0
 800cf96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d10a      	bne.n	800cfb8 <xQueueReceive+0x30>
	__asm volatile
 800cfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa6:	f383 8811 	msr	BASEPRI, r3
 800cfaa:	f3bf 8f6f 	isb	sy
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	623b      	str	r3, [r7, #32]
}
 800cfb4:	bf00      	nop
 800cfb6:	e7fe      	b.n	800cfb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d103      	bne.n	800cfc6 <xQueueReceive+0x3e>
 800cfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d101      	bne.n	800cfca <xQueueReceive+0x42>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e000      	b.n	800cfcc <xQueueReceive+0x44>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d10a      	bne.n	800cfe6 <xQueueReceive+0x5e>
	__asm volatile
 800cfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd4:	f383 8811 	msr	BASEPRI, r3
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	61fb      	str	r3, [r7, #28]
}
 800cfe2:	bf00      	nop
 800cfe4:	e7fe      	b.n	800cfe4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfe6:	f001 f8bb 	bl	800e160 <xTaskGetSchedulerState>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d102      	bne.n	800cff6 <xQueueReceive+0x6e>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d101      	bne.n	800cffa <xQueueReceive+0x72>
 800cff6:	2301      	movs	r3, #1
 800cff8:	e000      	b.n	800cffc <xQueueReceive+0x74>
 800cffa:	2300      	movs	r3, #0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <xQueueReceive+0x8e>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	61bb      	str	r3, [r7, #24]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d016:	f001 fdfd 	bl	800ec14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d022:	2b00      	cmp	r3, #0
 800d024:	d01f      	beq.n	800d066 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d026:	68b9      	ldr	r1, [r7, #8]
 800d028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d02a:	f000 f977 	bl	800d31c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d030:	1e5a      	subs	r2, r3, #1
 800d032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d034:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d038:	691b      	ldr	r3, [r3, #16]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00f      	beq.n	800d05e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d040:	3310      	adds	r3, #16
 800d042:	4618      	mov	r0, r3
 800d044:	f000 fece 	bl	800dde4 <xTaskRemoveFromEventList>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d007      	beq.n	800d05e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d04e:	4b3d      	ldr	r3, [pc, #244]	; (800d144 <xQueueReceive+0x1bc>)
 800d050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d05e:	f001 fe09 	bl	800ec74 <vPortExitCritical>
				return pdPASS;
 800d062:	2301      	movs	r3, #1
 800d064:	e069      	b.n	800d13a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d103      	bne.n	800d074 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d06c:	f001 fe02 	bl	800ec74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d070:	2300      	movs	r3, #0
 800d072:	e062      	b.n	800d13a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d076:	2b00      	cmp	r3, #0
 800d078:	d106      	bne.n	800d088 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d07a:	f107 0310 	add.w	r3, r7, #16
 800d07e:	4618      	mov	r0, r3
 800d080:	f000 ff14 	bl	800deac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d084:	2301      	movs	r3, #1
 800d086:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d088:	f001 fdf4 	bl	800ec74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d08c:	f000 fc86 	bl	800d99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d090:	f001 fdc0 	bl	800ec14 <vPortEnterCritical>
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d09a:	b25b      	sxtb	r3, r3
 800d09c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0a0:	d103      	bne.n	800d0aa <xQueueReceive+0x122>
 800d0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0b0:	b25b      	sxtb	r3, r3
 800d0b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0b6:	d103      	bne.n	800d0c0 <xQueueReceive+0x138>
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0c0:	f001 fdd8 	bl	800ec74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0c4:	1d3a      	adds	r2, r7, #4
 800d0c6:	f107 0310 	add.w	r3, r7, #16
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f000 ff03 	bl	800ded8 <xTaskCheckForTimeOut>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d123      	bne.n	800d120 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0da:	f000 f997 	bl	800d40c <prvIsQueueEmpty>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d017      	beq.n	800d114 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e6:	3324      	adds	r3, #36	; 0x24
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	4611      	mov	r1, r2
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 fe29 	bl	800dd44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d0f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0f4:	f000 f938 	bl	800d368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0f8:	f000 fc5e 	bl	800d9b8 <xTaskResumeAll>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d189      	bne.n	800d016 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d102:	4b10      	ldr	r3, [pc, #64]	; (800d144 <xQueueReceive+0x1bc>)
 800d104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	f3bf 8f6f 	isb	sy
 800d112:	e780      	b.n	800d016 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d116:	f000 f927 	bl	800d368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d11a:	f000 fc4d 	bl	800d9b8 <xTaskResumeAll>
 800d11e:	e77a      	b.n	800d016 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d122:	f000 f921 	bl	800d368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d126:	f000 fc47 	bl	800d9b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d12a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d12c:	f000 f96e 	bl	800d40c <prvIsQueueEmpty>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	f43f af6f 	beq.w	800d016 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d138:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3730      	adds	r7, #48	; 0x30
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	e000ed04 	.word	0xe000ed04

0800d148 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b08e      	sub	sp, #56	; 0x38
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10a      	bne.n	800d174 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	623b      	str	r3, [r7, #32]
}
 800d170:	bf00      	nop
 800d172:	e7fe      	b.n	800d172 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d103      	bne.n	800d182 <xQueueReceiveFromISR+0x3a>
 800d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d101      	bne.n	800d186 <xQueueReceiveFromISR+0x3e>
 800d182:	2301      	movs	r3, #1
 800d184:	e000      	b.n	800d188 <xQueueReceiveFromISR+0x40>
 800d186:	2300      	movs	r3, #0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10a      	bne.n	800d1a2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	61fb      	str	r3, [r7, #28]
}
 800d19e:	bf00      	nop
 800d1a0:	e7fe      	b.n	800d1a0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1a2:	f001 fe19 	bl	800edd8 <vPortValidateInterruptPriority>
	__asm volatile
 800d1a6:	f3ef 8211 	mrs	r2, BASEPRI
 800d1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	61ba      	str	r2, [r7, #24]
 800d1bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d1be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d02f      	beq.n	800d22e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1d8:	68b9      	ldr	r1, [r7, #8]
 800d1da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1dc:	f000 f89e 	bl	800d31c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e2:	1e5a      	subs	r2, r3, #1
 800d1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d1e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1f0:	d112      	bne.n	800d218 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d016      	beq.n	800d228 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fc:	3310      	adds	r3, #16
 800d1fe:	4618      	mov	r0, r3
 800d200:	f000 fdf0 	bl	800dde4 <xTaskRemoveFromEventList>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00e      	beq.n	800d228 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00b      	beq.n	800d228 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	601a      	str	r2, [r3, #0]
 800d216:	e007      	b.n	800d228 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d21c:	3301      	adds	r3, #1
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	b25a      	sxtb	r2, r3
 800d222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d228:	2301      	movs	r3, #1
 800d22a:	637b      	str	r3, [r7, #52]	; 0x34
 800d22c:	e001      	b.n	800d232 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d22e:	2300      	movs	r3, #0
 800d230:	637b      	str	r3, [r7, #52]	; 0x34
 800d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d234:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	f383 8811 	msr	BASEPRI, r3
}
 800d23c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d240:	4618      	mov	r0, r3
 800d242:	3738      	adds	r7, #56	; 0x38
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d254:	2300      	movs	r3, #0
 800d256:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d25c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10d      	bne.n	800d282 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d14d      	bne.n	800d30a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	4618      	mov	r0, r3
 800d274:	f000 ff92 	bl	800e19c <xTaskPriorityDisinherit>
 800d278:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2200      	movs	r2, #0
 800d27e:	609a      	str	r2, [r3, #8]
 800d280:	e043      	b.n	800d30a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d119      	bne.n	800d2bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6858      	ldr	r0, [r3, #4]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d290:	461a      	mov	r2, r3
 800d292:	68b9      	ldr	r1, [r7, #8]
 800d294:	f002 fb06 	bl	800f8a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	685a      	ldr	r2, [r3, #4]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a0:	441a      	add	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d32b      	bcc.n	800d30a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	605a      	str	r2, [r3, #4]
 800d2ba:	e026      	b.n	800d30a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	68d8      	ldr	r0, [r3, #12]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	68b9      	ldr	r1, [r7, #8]
 800d2c8:	f002 faec 	bl	800f8a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	68da      	ldr	r2, [r3, #12]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d4:	425b      	negs	r3, r3
 800d2d6:	441a      	add	r2, r3
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	68da      	ldr	r2, [r3, #12]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d207      	bcs.n	800d2f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	689a      	ldr	r2, [r3, #8]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f0:	425b      	negs	r3, r3
 800d2f2:	441a      	add	r2, r3
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b02      	cmp	r3, #2
 800d2fc:	d105      	bne.n	800d30a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d002      	beq.n	800d30a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	3b01      	subs	r3, #1
 800d308:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	1c5a      	adds	r2, r3, #1
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d312:	697b      	ldr	r3, [r7, #20]
}
 800d314:	4618      	mov	r0, r3
 800d316:	3718      	adds	r7, #24
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d018      	beq.n	800d360 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	68da      	ldr	r2, [r3, #12]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d336:	441a      	add	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68da      	ldr	r2, [r3, #12]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	429a      	cmp	r2, r3
 800d346:	d303      	bcc.n	800d350 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	68d9      	ldr	r1, [r3, #12]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d358:	461a      	mov	r2, r3
 800d35a:	6838      	ldr	r0, [r7, #0]
 800d35c:	f002 faa2 	bl	800f8a4 <memcpy>
	}
}
 800d360:	bf00      	nop
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d370:	f001 fc50 	bl	800ec14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d37a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d37c:	e011      	b.n	800d3a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d382:	2b00      	cmp	r3, #0
 800d384:	d012      	beq.n	800d3ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	3324      	adds	r3, #36	; 0x24
 800d38a:	4618      	mov	r0, r3
 800d38c:	f000 fd2a 	bl	800dde4 <xTaskRemoveFromEventList>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d396:	f000 fe01 	bl	800df9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d39a:	7bfb      	ldrb	r3, [r7, #15]
 800d39c:	3b01      	subs	r3, #1
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	dce9      	bgt.n	800d37e <prvUnlockQueue+0x16>
 800d3aa:	e000      	b.n	800d3ae <prvUnlockQueue+0x46>
					break;
 800d3ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	22ff      	movs	r2, #255	; 0xff
 800d3b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d3b6:	f001 fc5d 	bl	800ec74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d3ba:	f001 fc2b 	bl	800ec14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3c6:	e011      	b.n	800d3ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d012      	beq.n	800d3f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	3310      	adds	r3, #16
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 fd05 	bl	800dde4 <xTaskRemoveFromEventList>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d001      	beq.n	800d3e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d3e0:	f000 fddc 	bl	800df9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d3e4:	7bbb      	ldrb	r3, [r7, #14]
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	dce9      	bgt.n	800d3c8 <prvUnlockQueue+0x60>
 800d3f4:	e000      	b.n	800d3f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d3f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	22ff      	movs	r2, #255	; 0xff
 800d3fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d400:	f001 fc38 	bl	800ec74 <vPortExitCritical>
}
 800d404:	bf00      	nop
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d414:	f001 fbfe 	bl	800ec14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d102      	bne.n	800d426 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d420:	2301      	movs	r3, #1
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	e001      	b.n	800d42a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d426:	2300      	movs	r3, #0
 800d428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d42a:	f001 fc23 	bl	800ec74 <vPortExitCritical>

	return xReturn;
 800d42e:	68fb      	ldr	r3, [r7, #12]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d440:	f001 fbe8 	bl	800ec14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d102      	bne.n	800d456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d450:	2301      	movs	r3, #1
 800d452:	60fb      	str	r3, [r7, #12]
 800d454:	e001      	b.n	800d45a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d456:	2300      	movs	r3, #0
 800d458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d45a:	f001 fc0b 	bl	800ec74 <vPortExitCritical>

	return xReturn;
 800d45e:	68fb      	ldr	r3, [r7, #12]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d472:	2300      	movs	r3, #0
 800d474:	60fb      	str	r3, [r7, #12]
 800d476:	e014      	b.n	800d4a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d478:	4a0f      	ldr	r2, [pc, #60]	; (800d4b8 <vQueueAddToRegistry+0x50>)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d10b      	bne.n	800d49c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d484:	490c      	ldr	r1, [pc, #48]	; (800d4b8 <vQueueAddToRegistry+0x50>)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	683a      	ldr	r2, [r7, #0]
 800d48a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d48e:	4a0a      	ldr	r2, [pc, #40]	; (800d4b8 <vQueueAddToRegistry+0x50>)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	4413      	add	r3, r2
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d49a:	e006      	b.n	800d4aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	60fb      	str	r3, [r7, #12]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b07      	cmp	r3, #7
 800d4a6:	d9e7      	bls.n	800d478 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d4a8:	bf00      	nop
 800d4aa:	bf00      	nop
 800d4ac:	3714      	adds	r7, #20
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	200050c4 	.word	0x200050c4

0800d4bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b086      	sub	sp, #24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4cc:	f001 fba2 	bl	800ec14 <vPortEnterCritical>
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4d6:	b25b      	sxtb	r3, r3
 800d4d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4dc:	d103      	bne.n	800d4e6 <vQueueWaitForMessageRestricted+0x2a>
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4ec:	b25b      	sxtb	r3, r3
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4f2:	d103      	bne.n	800d4fc <vQueueWaitForMessageRestricted+0x40>
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4fc:	f001 fbba 	bl	800ec74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d504:	2b00      	cmp	r3, #0
 800d506:	d106      	bne.n	800d516 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	3324      	adds	r3, #36	; 0x24
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	68b9      	ldr	r1, [r7, #8]
 800d510:	4618      	mov	r0, r3
 800d512:	f000 fc3b 	bl	800dd8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d516:	6978      	ldr	r0, [r7, #20]
 800d518:	f7ff ff26 	bl	800d368 <prvUnlockQueue>
	}
 800d51c:	bf00      	nop
 800d51e:	3718      	adds	r7, #24
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d524:	b580      	push	{r7, lr}
 800d526:	b08e      	sub	sp, #56	; 0x38
 800d528:	af04      	add	r7, sp, #16
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
 800d530:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10a      	bne.n	800d54e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53c:	f383 8811 	msr	BASEPRI, r3
 800d540:	f3bf 8f6f 	isb	sy
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	623b      	str	r3, [r7, #32]
}
 800d54a:	bf00      	nop
 800d54c:	e7fe      	b.n	800d54c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d550:	2b00      	cmp	r3, #0
 800d552:	d10a      	bne.n	800d56a <xTaskCreateStatic+0x46>
	__asm volatile
 800d554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d558:	f383 8811 	msr	BASEPRI, r3
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	f3bf 8f4f 	dsb	sy
 800d564:	61fb      	str	r3, [r7, #28]
}
 800d566:	bf00      	nop
 800d568:	e7fe      	b.n	800d568 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d56a:	235c      	movs	r3, #92	; 0x5c
 800d56c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	2b5c      	cmp	r3, #92	; 0x5c
 800d572:	d00a      	beq.n	800d58a <xTaskCreateStatic+0x66>
	__asm volatile
 800d574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d578:	f383 8811 	msr	BASEPRI, r3
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	61bb      	str	r3, [r7, #24]
}
 800d586:	bf00      	nop
 800d588:	e7fe      	b.n	800d588 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d58a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d01e      	beq.n	800d5d0 <xTaskCreateStatic+0xac>
 800d592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d594:	2b00      	cmp	r3, #0
 800d596:	d01b      	beq.n	800d5d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	9303      	str	r3, [sp, #12]
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b0:	9302      	str	r3, [sp, #8]
 800d5b2:	f107 0314 	add.w	r3, r7, #20
 800d5b6:	9301      	str	r3, [sp, #4]
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	68b9      	ldr	r1, [r7, #8]
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f000 f850 	bl	800d668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5ca:	f000 f8dd 	bl	800d788 <prvAddNewTaskToReadyList>
 800d5ce:	e001      	b.n	800d5d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d5d4:	697b      	ldr	r3, [r7, #20]
	}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3728      	adds	r7, #40	; 0x28
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b08c      	sub	sp, #48	; 0x30
 800d5e2:	af04      	add	r7, sp, #16
 800d5e4:	60f8      	str	r0, [r7, #12]
 800d5e6:	60b9      	str	r1, [r7, #8]
 800d5e8:	603b      	str	r3, [r7, #0]
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d5ee:	88fb      	ldrh	r3, [r7, #6]
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f001 fc30 	bl	800ee58 <pvPortMalloc>
 800d5f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00e      	beq.n	800d61e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d600:	205c      	movs	r0, #92	; 0x5c
 800d602:	f001 fc29 	bl	800ee58 <pvPortMalloc>
 800d606:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d003      	beq.n	800d616 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	697a      	ldr	r2, [r7, #20]
 800d612:	631a      	str	r2, [r3, #48]	; 0x30
 800d614:	e005      	b.n	800d622 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d616:	6978      	ldr	r0, [r7, #20]
 800d618:	f001 fcea 	bl	800eff0 <vPortFree>
 800d61c:	e001      	b.n	800d622 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d61e:	2300      	movs	r3, #0
 800d620:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d017      	beq.n	800d658 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d630:	88fa      	ldrh	r2, [r7, #6]
 800d632:	2300      	movs	r3, #0
 800d634:	9303      	str	r3, [sp, #12]
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	9302      	str	r3, [sp, #8]
 800d63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63c:	9301      	str	r3, [sp, #4]
 800d63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d640:	9300      	str	r3, [sp, #0]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	68b9      	ldr	r1, [r7, #8]
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f000 f80e 	bl	800d668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d64c:	69f8      	ldr	r0, [r7, #28]
 800d64e:	f000 f89b 	bl	800d788 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d652:	2301      	movs	r3, #1
 800d654:	61bb      	str	r3, [r7, #24]
 800d656:	e002      	b.n	800d65e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d65c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d65e:	69bb      	ldr	r3, [r7, #24]
	}
 800d660:	4618      	mov	r0, r3
 800d662:	3720      	adds	r7, #32
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b088      	sub	sp, #32
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	607a      	str	r2, [r7, #4]
 800d674:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	461a      	mov	r2, r3
 800d680:	21a5      	movs	r1, #165	; 0xa5
 800d682:	f002 f91d 	bl	800f8c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d690:	3b01      	subs	r3, #1
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	4413      	add	r3, r2
 800d696:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	f023 0307 	bic.w	r3, r3, #7
 800d69e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	f003 0307 	and.w	r3, r3, #7
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00a      	beq.n	800d6c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ae:	f383 8811 	msr	BASEPRI, r3
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	f3bf 8f4f 	dsb	sy
 800d6ba:	617b      	str	r3, [r7, #20]
}
 800d6bc:	bf00      	nop
 800d6be:	e7fe      	b.n	800d6be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d01f      	beq.n	800d706 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	61fb      	str	r3, [r7, #28]
 800d6ca:	e012      	b.n	800d6f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	7819      	ldrb	r1, [r3, #0]
 800d6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	4413      	add	r3, r2
 800d6da:	3334      	adds	r3, #52	; 0x34
 800d6dc:	460a      	mov	r2, r1
 800d6de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d6e0:	68ba      	ldr	r2, [r7, #8]
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d006      	beq.n	800d6fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	61fb      	str	r3, [r7, #28]
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	2b0f      	cmp	r3, #15
 800d6f6:	d9e9      	bls.n	800d6cc <prvInitialiseNewTask+0x64>
 800d6f8:	e000      	b.n	800d6fc <prvInitialiseNewTask+0x94>
			{
				break;
 800d6fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fe:	2200      	movs	r2, #0
 800d700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d704:	e003      	b.n	800d70e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d708:	2200      	movs	r2, #0
 800d70a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d710:	2b37      	cmp	r3, #55	; 0x37
 800d712:	d901      	bls.n	800d718 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d714:	2337      	movs	r3, #55	; 0x37
 800d716:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d71c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d722:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d726:	2200      	movs	r2, #0
 800d728:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	3304      	adds	r3, #4
 800d72e:	4618      	mov	r0, r3
 800d730:	f7ff f8be 	bl	800c8b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d736:	3318      	adds	r3, #24
 800d738:	4618      	mov	r0, r3
 800d73a:	f7ff f8b9 	bl	800c8b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d742:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d752:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d756:	2200      	movs	r2, #0
 800d758:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	2200      	movs	r2, #0
 800d75e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d762:	683a      	ldr	r2, [r7, #0]
 800d764:	68f9      	ldr	r1, [r7, #12]
 800d766:	69b8      	ldr	r0, [r7, #24]
 800d768:	f001 f928 	bl	800e9bc <pxPortInitialiseStack>
 800d76c:	4602      	mov	r2, r0
 800d76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d770:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d774:	2b00      	cmp	r3, #0
 800d776:	d002      	beq.n	800d77e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d77c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d77e:	bf00      	nop
 800d780:	3720      	adds	r7, #32
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
	...

0800d788 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d790:	f001 fa40 	bl	800ec14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d794:	4b2d      	ldr	r3, [pc, #180]	; (800d84c <prvAddNewTaskToReadyList+0xc4>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	3301      	adds	r3, #1
 800d79a:	4a2c      	ldr	r2, [pc, #176]	; (800d84c <prvAddNewTaskToReadyList+0xc4>)
 800d79c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d79e:	4b2c      	ldr	r3, [pc, #176]	; (800d850 <prvAddNewTaskToReadyList+0xc8>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d109      	bne.n	800d7ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7a6:	4a2a      	ldr	r2, [pc, #168]	; (800d850 <prvAddNewTaskToReadyList+0xc8>)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7ac:	4b27      	ldr	r3, [pc, #156]	; (800d84c <prvAddNewTaskToReadyList+0xc4>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d110      	bne.n	800d7d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7b4:	f000 fc16 	bl	800dfe4 <prvInitialiseTaskLists>
 800d7b8:	e00d      	b.n	800d7d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7ba:	4b26      	ldr	r3, [pc, #152]	; (800d854 <prvAddNewTaskToReadyList+0xcc>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d109      	bne.n	800d7d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7c2:	4b23      	ldr	r3, [pc, #140]	; (800d850 <prvAddNewTaskToReadyList+0xc8>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d802      	bhi.n	800d7d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d7d0:	4a1f      	ldr	r2, [pc, #124]	; (800d850 <prvAddNewTaskToReadyList+0xc8>)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d7d6:	4b20      	ldr	r3, [pc, #128]	; (800d858 <prvAddNewTaskToReadyList+0xd0>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	4a1e      	ldr	r2, [pc, #120]	; (800d858 <prvAddNewTaskToReadyList+0xd0>)
 800d7de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d7e0:	4b1d      	ldr	r3, [pc, #116]	; (800d858 <prvAddNewTaskToReadyList+0xd0>)
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ec:	4b1b      	ldr	r3, [pc, #108]	; (800d85c <prvAddNewTaskToReadyList+0xd4>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d903      	bls.n	800d7fc <prvAddNewTaskToReadyList+0x74>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f8:	4a18      	ldr	r2, [pc, #96]	; (800d85c <prvAddNewTaskToReadyList+0xd4>)
 800d7fa:	6013      	str	r3, [r2, #0]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d800:	4613      	mov	r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	4413      	add	r3, r2
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	4a15      	ldr	r2, [pc, #84]	; (800d860 <prvAddNewTaskToReadyList+0xd8>)
 800d80a:	441a      	add	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3304      	adds	r3, #4
 800d810:	4619      	mov	r1, r3
 800d812:	4610      	mov	r0, r2
 800d814:	f7ff f859 	bl	800c8ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d818:	f001 fa2c 	bl	800ec74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d81c:	4b0d      	ldr	r3, [pc, #52]	; (800d854 <prvAddNewTaskToReadyList+0xcc>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d00e      	beq.n	800d842 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d824:	4b0a      	ldr	r3, [pc, #40]	; (800d850 <prvAddNewTaskToReadyList+0xc8>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82e:	429a      	cmp	r2, r3
 800d830:	d207      	bcs.n	800d842 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d832:	4b0c      	ldr	r3, [pc, #48]	; (800d864 <prvAddNewTaskToReadyList+0xdc>)
 800d834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d842:	bf00      	nop
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	200010b4 	.word	0x200010b4
 800d850:	20000be0 	.word	0x20000be0
 800d854:	200010c0 	.word	0x200010c0
 800d858:	200010d0 	.word	0x200010d0
 800d85c:	200010bc 	.word	0x200010bc
 800d860:	20000be4 	.word	0x20000be4
 800d864:	e000ed04 	.word	0xe000ed04

0800d868 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d870:	2300      	movs	r3, #0
 800d872:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d017      	beq.n	800d8aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d87a:	4b13      	ldr	r3, [pc, #76]	; (800d8c8 <vTaskDelay+0x60>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00a      	beq.n	800d898 <vTaskDelay+0x30>
	__asm volatile
 800d882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d886:	f383 8811 	msr	BASEPRI, r3
 800d88a:	f3bf 8f6f 	isb	sy
 800d88e:	f3bf 8f4f 	dsb	sy
 800d892:	60bb      	str	r3, [r7, #8]
}
 800d894:	bf00      	nop
 800d896:	e7fe      	b.n	800d896 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d898:	f000 f880 	bl	800d99c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d89c:	2100      	movs	r1, #0
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 fcea 	bl	800e278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d8a4:	f000 f888 	bl	800d9b8 <xTaskResumeAll>
 800d8a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d107      	bne.n	800d8c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d8b0:	4b06      	ldr	r3, [pc, #24]	; (800d8cc <vTaskDelay+0x64>)
 800d8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b6:	601a      	str	r2, [r3, #0]
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8c0:	bf00      	nop
 800d8c2:	3710      	adds	r7, #16
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	200010dc 	.word	0x200010dc
 800d8cc:	e000ed04 	.word	0xe000ed04

0800d8d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b08a      	sub	sp, #40	; 0x28
 800d8d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d8de:	463a      	mov	r2, r7
 800d8e0:	1d39      	adds	r1, r7, #4
 800d8e2:	f107 0308 	add.w	r3, r7, #8
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fe ff8e 	bl	800c808 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d8ec:	6839      	ldr	r1, [r7, #0]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	68ba      	ldr	r2, [r7, #8]
 800d8f2:	9202      	str	r2, [sp, #8]
 800d8f4:	9301      	str	r3, [sp, #4]
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	9300      	str	r3, [sp, #0]
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	460a      	mov	r2, r1
 800d8fe:	4921      	ldr	r1, [pc, #132]	; (800d984 <vTaskStartScheduler+0xb4>)
 800d900:	4821      	ldr	r0, [pc, #132]	; (800d988 <vTaskStartScheduler+0xb8>)
 800d902:	f7ff fe0f 	bl	800d524 <xTaskCreateStatic>
 800d906:	4603      	mov	r3, r0
 800d908:	4a20      	ldr	r2, [pc, #128]	; (800d98c <vTaskStartScheduler+0xbc>)
 800d90a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d90c:	4b1f      	ldr	r3, [pc, #124]	; (800d98c <vTaskStartScheduler+0xbc>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d914:	2301      	movs	r3, #1
 800d916:	617b      	str	r3, [r7, #20]
 800d918:	e001      	b.n	800d91e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d91a:	2300      	movs	r3, #0
 800d91c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	2b01      	cmp	r3, #1
 800d922:	d102      	bne.n	800d92a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d924:	f000 fcfc 	bl	800e320 <xTimerCreateTimerTask>
 800d928:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d116      	bne.n	800d95e <vTaskStartScheduler+0x8e>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	613b      	str	r3, [r7, #16]
}
 800d942:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d944:	4b12      	ldr	r3, [pc, #72]	; (800d990 <vTaskStartScheduler+0xc0>)
 800d946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d94a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d94c:	4b11      	ldr	r3, [pc, #68]	; (800d994 <vTaskStartScheduler+0xc4>)
 800d94e:	2201      	movs	r2, #1
 800d950:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d952:	4b11      	ldr	r3, [pc, #68]	; (800d998 <vTaskStartScheduler+0xc8>)
 800d954:	2200      	movs	r2, #0
 800d956:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d958:	f001 f8ba 	bl	800ead0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d95c:	e00e      	b.n	800d97c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d964:	d10a      	bne.n	800d97c <vTaskStartScheduler+0xac>
	__asm volatile
 800d966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96a:	f383 8811 	msr	BASEPRI, r3
 800d96e:	f3bf 8f6f 	isb	sy
 800d972:	f3bf 8f4f 	dsb	sy
 800d976:	60fb      	str	r3, [r7, #12]
}
 800d978:	bf00      	nop
 800d97a:	e7fe      	b.n	800d97a <vTaskStartScheduler+0xaa>
}
 800d97c:	bf00      	nop
 800d97e:	3718      	adds	r7, #24
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	0800fbe8 	.word	0x0800fbe8
 800d988:	0800dfb5 	.word	0x0800dfb5
 800d98c:	200010d8 	.word	0x200010d8
 800d990:	200010d4 	.word	0x200010d4
 800d994:	200010c0 	.word	0x200010c0
 800d998:	200010b8 	.word	0x200010b8

0800d99c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d99c:	b480      	push	{r7}
 800d99e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d9a0:	4b04      	ldr	r3, [pc, #16]	; (800d9b4 <vTaskSuspendAll+0x18>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	4a03      	ldr	r2, [pc, #12]	; (800d9b4 <vTaskSuspendAll+0x18>)
 800d9a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d9aa:	bf00      	nop
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	200010dc 	.word	0x200010dc

0800d9b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d9c6:	4b42      	ldr	r3, [pc, #264]	; (800dad0 <xTaskResumeAll+0x118>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10a      	bne.n	800d9e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d2:	f383 8811 	msr	BASEPRI, r3
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	f3bf 8f4f 	dsb	sy
 800d9de:	603b      	str	r3, [r7, #0]
}
 800d9e0:	bf00      	nop
 800d9e2:	e7fe      	b.n	800d9e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d9e4:	f001 f916 	bl	800ec14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d9e8:	4b39      	ldr	r3, [pc, #228]	; (800dad0 <xTaskResumeAll+0x118>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	4a38      	ldr	r2, [pc, #224]	; (800dad0 <xTaskResumeAll+0x118>)
 800d9f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9f2:	4b37      	ldr	r3, [pc, #220]	; (800dad0 <xTaskResumeAll+0x118>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d162      	bne.n	800dac0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d9fa:	4b36      	ldr	r3, [pc, #216]	; (800dad4 <xTaskResumeAll+0x11c>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d05e      	beq.n	800dac0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da02:	e02f      	b.n	800da64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da04:	4b34      	ldr	r3, [pc, #208]	; (800dad8 <xTaskResumeAll+0x120>)
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	3318      	adds	r3, #24
 800da10:	4618      	mov	r0, r3
 800da12:	f7fe ffb7 	bl	800c984 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	3304      	adds	r3, #4
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe ffb2 	bl	800c984 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da24:	4b2d      	ldr	r3, [pc, #180]	; (800dadc <xTaskResumeAll+0x124>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d903      	bls.n	800da34 <xTaskResumeAll+0x7c>
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da30:	4a2a      	ldr	r2, [pc, #168]	; (800dadc <xTaskResumeAll+0x124>)
 800da32:	6013      	str	r3, [r2, #0]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da38:	4613      	mov	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	4413      	add	r3, r2
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	4a27      	ldr	r2, [pc, #156]	; (800dae0 <xTaskResumeAll+0x128>)
 800da42:	441a      	add	r2, r3
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	3304      	adds	r3, #4
 800da48:	4619      	mov	r1, r3
 800da4a:	4610      	mov	r0, r2
 800da4c:	f7fe ff3d 	bl	800c8ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da54:	4b23      	ldr	r3, [pc, #140]	; (800dae4 <xTaskResumeAll+0x12c>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d302      	bcc.n	800da64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800da5e:	4b22      	ldr	r3, [pc, #136]	; (800dae8 <xTaskResumeAll+0x130>)
 800da60:	2201      	movs	r2, #1
 800da62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da64:	4b1c      	ldr	r3, [pc, #112]	; (800dad8 <xTaskResumeAll+0x120>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1cb      	bne.n	800da04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d001      	beq.n	800da76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da72:	f000 fb55 	bl	800e120 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800da76:	4b1d      	ldr	r3, [pc, #116]	; (800daec <xTaskResumeAll+0x134>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d010      	beq.n	800daa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da82:	f000 f847 	bl	800db14 <xTaskIncrementTick>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800da8c:	4b16      	ldr	r3, [pc, #88]	; (800dae8 <xTaskResumeAll+0x130>)
 800da8e:	2201      	movs	r2, #1
 800da90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	3b01      	subs	r3, #1
 800da96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1f1      	bne.n	800da82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800da9e:	4b13      	ldr	r3, [pc, #76]	; (800daec <xTaskResumeAll+0x134>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800daa4:	4b10      	ldr	r3, [pc, #64]	; (800dae8 <xTaskResumeAll+0x130>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d009      	beq.n	800dac0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800daac:	2301      	movs	r3, #1
 800daae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dab0:	4b0f      	ldr	r3, [pc, #60]	; (800daf0 <xTaskResumeAll+0x138>)
 800dab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dab6:	601a      	str	r2, [r3, #0]
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dac0:	f001 f8d8 	bl	800ec74 <vPortExitCritical>

	return xAlreadyYielded;
 800dac4:	68bb      	ldr	r3, [r7, #8]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	200010dc 	.word	0x200010dc
 800dad4:	200010b4 	.word	0x200010b4
 800dad8:	20001074 	.word	0x20001074
 800dadc:	200010bc 	.word	0x200010bc
 800dae0:	20000be4 	.word	0x20000be4
 800dae4:	20000be0 	.word	0x20000be0
 800dae8:	200010c8 	.word	0x200010c8
 800daec:	200010c4 	.word	0x200010c4
 800daf0:	e000ed04 	.word	0xe000ed04

0800daf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dafa:	4b05      	ldr	r3, [pc, #20]	; (800db10 <xTaskGetTickCount+0x1c>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db00:	687b      	ldr	r3, [r7, #4]
}
 800db02:	4618      	mov	r0, r3
 800db04:	370c      	adds	r7, #12
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	200010b8 	.word	0x200010b8

0800db14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b086      	sub	sp, #24
 800db18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db1a:	2300      	movs	r3, #0
 800db1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db1e:	4b4f      	ldr	r3, [pc, #316]	; (800dc5c <xTaskIncrementTick+0x148>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	f040 808f 	bne.w	800dc46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db28:	4b4d      	ldr	r3, [pc, #308]	; (800dc60 <xTaskIncrementTick+0x14c>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	3301      	adds	r3, #1
 800db2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db30:	4a4b      	ldr	r2, [pc, #300]	; (800dc60 <xTaskIncrementTick+0x14c>)
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d120      	bne.n	800db7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800db3c:	4b49      	ldr	r3, [pc, #292]	; (800dc64 <xTaskIncrementTick+0x150>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00a      	beq.n	800db5c <xTaskIncrementTick+0x48>
	__asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	603b      	str	r3, [r7, #0]
}
 800db58:	bf00      	nop
 800db5a:	e7fe      	b.n	800db5a <xTaskIncrementTick+0x46>
 800db5c:	4b41      	ldr	r3, [pc, #260]	; (800dc64 <xTaskIncrementTick+0x150>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	60fb      	str	r3, [r7, #12]
 800db62:	4b41      	ldr	r3, [pc, #260]	; (800dc68 <xTaskIncrementTick+0x154>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a3f      	ldr	r2, [pc, #252]	; (800dc64 <xTaskIncrementTick+0x150>)
 800db68:	6013      	str	r3, [r2, #0]
 800db6a:	4a3f      	ldr	r2, [pc, #252]	; (800dc68 <xTaskIncrementTick+0x154>)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6013      	str	r3, [r2, #0]
 800db70:	4b3e      	ldr	r3, [pc, #248]	; (800dc6c <xTaskIncrementTick+0x158>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3301      	adds	r3, #1
 800db76:	4a3d      	ldr	r2, [pc, #244]	; (800dc6c <xTaskIncrementTick+0x158>)
 800db78:	6013      	str	r3, [r2, #0]
 800db7a:	f000 fad1 	bl	800e120 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db7e:	4b3c      	ldr	r3, [pc, #240]	; (800dc70 <xTaskIncrementTick+0x15c>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	693a      	ldr	r2, [r7, #16]
 800db84:	429a      	cmp	r2, r3
 800db86:	d349      	bcc.n	800dc1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db88:	4b36      	ldr	r3, [pc, #216]	; (800dc64 <xTaskIncrementTick+0x150>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d104      	bne.n	800db9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db92:	4b37      	ldr	r3, [pc, #220]	; (800dc70 <xTaskIncrementTick+0x15c>)
 800db94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db98:	601a      	str	r2, [r3, #0]
					break;
 800db9a:	e03f      	b.n	800dc1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9c:	4b31      	ldr	r3, [pc, #196]	; (800dc64 <xTaskIncrementTick+0x150>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbac:	693a      	ldr	r2, [r7, #16]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d203      	bcs.n	800dbbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbb4:	4a2e      	ldr	r2, [pc, #184]	; (800dc70 <xTaskIncrementTick+0x15c>)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dbba:	e02f      	b.n	800dc1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	3304      	adds	r3, #4
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7fe fedf 	bl	800c984 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d004      	beq.n	800dbd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	3318      	adds	r3, #24
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fe fed6 	bl	800c984 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbdc:	4b25      	ldr	r3, [pc, #148]	; (800dc74 <xTaskIncrementTick+0x160>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d903      	bls.n	800dbec <xTaskIncrementTick+0xd8>
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe8:	4a22      	ldr	r2, [pc, #136]	; (800dc74 <xTaskIncrementTick+0x160>)
 800dbea:	6013      	str	r3, [r2, #0]
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4a1f      	ldr	r2, [pc, #124]	; (800dc78 <xTaskIncrementTick+0x164>)
 800dbfa:	441a      	add	r2, r3
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	3304      	adds	r3, #4
 800dc00:	4619      	mov	r1, r3
 800dc02:	4610      	mov	r0, r2
 800dc04:	f7fe fe61 	bl	800c8ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc0c:	4b1b      	ldr	r3, [pc, #108]	; (800dc7c <xTaskIncrementTick+0x168>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d3b8      	bcc.n	800db88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dc16:	2301      	movs	r3, #1
 800dc18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc1a:	e7b5      	b.n	800db88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc1c:	4b17      	ldr	r3, [pc, #92]	; (800dc7c <xTaskIncrementTick+0x168>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc22:	4915      	ldr	r1, [pc, #84]	; (800dc78 <xTaskIncrementTick+0x164>)
 800dc24:	4613      	mov	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	440b      	add	r3, r1
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d901      	bls.n	800dc38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dc34:	2301      	movs	r3, #1
 800dc36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc38:	4b11      	ldr	r3, [pc, #68]	; (800dc80 <xTaskIncrementTick+0x16c>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d007      	beq.n	800dc50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dc40:	2301      	movs	r3, #1
 800dc42:	617b      	str	r3, [r7, #20]
 800dc44:	e004      	b.n	800dc50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dc46:	4b0f      	ldr	r3, [pc, #60]	; (800dc84 <xTaskIncrementTick+0x170>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	4a0d      	ldr	r2, [pc, #52]	; (800dc84 <xTaskIncrementTick+0x170>)
 800dc4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dc50:	697b      	ldr	r3, [r7, #20]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3718      	adds	r7, #24
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	200010dc 	.word	0x200010dc
 800dc60:	200010b8 	.word	0x200010b8
 800dc64:	2000106c 	.word	0x2000106c
 800dc68:	20001070 	.word	0x20001070
 800dc6c:	200010cc 	.word	0x200010cc
 800dc70:	200010d4 	.word	0x200010d4
 800dc74:	200010bc 	.word	0x200010bc
 800dc78:	20000be4 	.word	0x20000be4
 800dc7c:	20000be0 	.word	0x20000be0
 800dc80:	200010c8 	.word	0x200010c8
 800dc84:	200010c4 	.word	0x200010c4

0800dc88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b085      	sub	sp, #20
 800dc8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc8e:	4b28      	ldr	r3, [pc, #160]	; (800dd30 <vTaskSwitchContext+0xa8>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc96:	4b27      	ldr	r3, [pc, #156]	; (800dd34 <vTaskSwitchContext+0xac>)
 800dc98:	2201      	movs	r2, #1
 800dc9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc9c:	e041      	b.n	800dd22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800dc9e:	4b25      	ldr	r3, [pc, #148]	; (800dd34 <vTaskSwitchContext+0xac>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dca4:	4b24      	ldr	r3, [pc, #144]	; (800dd38 <vTaskSwitchContext+0xb0>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	60fb      	str	r3, [r7, #12]
 800dcaa:	e010      	b.n	800dcce <vTaskSwitchContext+0x46>
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d10a      	bne.n	800dcc8 <vTaskSwitchContext+0x40>
	__asm volatile
 800dcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb6:	f383 8811 	msr	BASEPRI, r3
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	607b      	str	r3, [r7, #4]
}
 800dcc4:	bf00      	nop
 800dcc6:	e7fe      	b.n	800dcc6 <vTaskSwitchContext+0x3e>
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	3b01      	subs	r3, #1
 800dccc:	60fb      	str	r3, [r7, #12]
 800dcce:	491b      	ldr	r1, [pc, #108]	; (800dd3c <vTaskSwitchContext+0xb4>)
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	4613      	mov	r3, r2
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	4413      	add	r3, r2
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	440b      	add	r3, r1
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d0e4      	beq.n	800dcac <vTaskSwitchContext+0x24>
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	4613      	mov	r3, r2
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	4413      	add	r3, r2
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	4a13      	ldr	r2, [pc, #76]	; (800dd3c <vTaskSwitchContext+0xb4>)
 800dcee:	4413      	add	r3, r2
 800dcf0:	60bb      	str	r3, [r7, #8]
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	685a      	ldr	r2, [r3, #4]
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	605a      	str	r2, [r3, #4]
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	685a      	ldr	r2, [r3, #4]
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	3308      	adds	r3, #8
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d104      	bne.n	800dd12 <vTaskSwitchContext+0x8a>
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	685a      	ldr	r2, [r3, #4]
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	605a      	str	r2, [r3, #4]
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	4a09      	ldr	r2, [pc, #36]	; (800dd40 <vTaskSwitchContext+0xb8>)
 800dd1a:	6013      	str	r3, [r2, #0]
 800dd1c:	4a06      	ldr	r2, [pc, #24]	; (800dd38 <vTaskSwitchContext+0xb0>)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6013      	str	r3, [r2, #0]
}
 800dd22:	bf00      	nop
 800dd24:	3714      	adds	r7, #20
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	200010dc 	.word	0x200010dc
 800dd34:	200010c8 	.word	0x200010c8
 800dd38:	200010bc 	.word	0x200010bc
 800dd3c:	20000be4 	.word	0x20000be4
 800dd40:	20000be0 	.word	0x20000be0

0800dd44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10a      	bne.n	800dd6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd58:	f383 8811 	msr	BASEPRI, r3
 800dd5c:	f3bf 8f6f 	isb	sy
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	60fb      	str	r3, [r7, #12]
}
 800dd66:	bf00      	nop
 800dd68:	e7fe      	b.n	800dd68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd6a:	4b07      	ldr	r3, [pc, #28]	; (800dd88 <vTaskPlaceOnEventList+0x44>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	3318      	adds	r3, #24
 800dd70:	4619      	mov	r1, r3
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7fe fdcd 	bl	800c912 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd78:	2101      	movs	r1, #1
 800dd7a:	6838      	ldr	r0, [r7, #0]
 800dd7c:	f000 fa7c 	bl	800e278 <prvAddCurrentTaskToDelayedList>
}
 800dd80:	bf00      	nop
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	20000be0 	.word	0x20000be0

0800dd8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10a      	bne.n	800ddb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda2:	f383 8811 	msr	BASEPRI, r3
 800dda6:	f3bf 8f6f 	isb	sy
 800ddaa:	f3bf 8f4f 	dsb	sy
 800ddae:	617b      	str	r3, [r7, #20]
}
 800ddb0:	bf00      	nop
 800ddb2:	e7fe      	b.n	800ddb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddb4:	4b0a      	ldr	r3, [pc, #40]	; (800dde0 <vTaskPlaceOnEventListRestricted+0x54>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	3318      	adds	r3, #24
 800ddba:	4619      	mov	r1, r3
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f7fe fd84 	bl	800c8ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ddc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddcc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ddce:	6879      	ldr	r1, [r7, #4]
 800ddd0:	68b8      	ldr	r0, [r7, #8]
 800ddd2:	f000 fa51 	bl	800e278 <prvAddCurrentTaskToDelayedList>
	}
 800ddd6:	bf00      	nop
 800ddd8:	3718      	adds	r7, #24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	20000be0 	.word	0x20000be0

0800dde4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b086      	sub	sp, #24
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10a      	bne.n	800de10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ddfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfe:	f383 8811 	msr	BASEPRI, r3
 800de02:	f3bf 8f6f 	isb	sy
 800de06:	f3bf 8f4f 	dsb	sy
 800de0a:	60fb      	str	r3, [r7, #12]
}
 800de0c:	bf00      	nop
 800de0e:	e7fe      	b.n	800de0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	3318      	adds	r3, #24
 800de14:	4618      	mov	r0, r3
 800de16:	f7fe fdb5 	bl	800c984 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de1a:	4b1e      	ldr	r3, [pc, #120]	; (800de94 <xTaskRemoveFromEventList+0xb0>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d11d      	bne.n	800de5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	3304      	adds	r3, #4
 800de26:	4618      	mov	r0, r3
 800de28:	f7fe fdac 	bl	800c984 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de30:	4b19      	ldr	r3, [pc, #100]	; (800de98 <xTaskRemoveFromEventList+0xb4>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	429a      	cmp	r2, r3
 800de36:	d903      	bls.n	800de40 <xTaskRemoveFromEventList+0x5c>
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de3c:	4a16      	ldr	r2, [pc, #88]	; (800de98 <xTaskRemoveFromEventList+0xb4>)
 800de3e:	6013      	str	r3, [r2, #0]
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de44:	4613      	mov	r3, r2
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	4413      	add	r3, r2
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4a13      	ldr	r2, [pc, #76]	; (800de9c <xTaskRemoveFromEventList+0xb8>)
 800de4e:	441a      	add	r2, r3
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	3304      	adds	r3, #4
 800de54:	4619      	mov	r1, r3
 800de56:	4610      	mov	r0, r2
 800de58:	f7fe fd37 	bl	800c8ca <vListInsertEnd>
 800de5c:	e005      	b.n	800de6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	3318      	adds	r3, #24
 800de62:	4619      	mov	r1, r3
 800de64:	480e      	ldr	r0, [pc, #56]	; (800dea0 <xTaskRemoveFromEventList+0xbc>)
 800de66:	f7fe fd30 	bl	800c8ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de6e:	4b0d      	ldr	r3, [pc, #52]	; (800dea4 <xTaskRemoveFromEventList+0xc0>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de74:	429a      	cmp	r2, r3
 800de76:	d905      	bls.n	800de84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800de78:	2301      	movs	r3, #1
 800de7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800de7c:	4b0a      	ldr	r3, [pc, #40]	; (800dea8 <xTaskRemoveFromEventList+0xc4>)
 800de7e:	2201      	movs	r2, #1
 800de80:	601a      	str	r2, [r3, #0]
 800de82:	e001      	b.n	800de88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800de84:	2300      	movs	r3, #0
 800de86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800de88:	697b      	ldr	r3, [r7, #20]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3718      	adds	r7, #24
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	200010dc 	.word	0x200010dc
 800de98:	200010bc 	.word	0x200010bc
 800de9c:	20000be4 	.word	0x20000be4
 800dea0:	20001074 	.word	0x20001074
 800dea4:	20000be0 	.word	0x20000be0
 800dea8:	200010c8 	.word	0x200010c8

0800deac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800deb4:	4b06      	ldr	r3, [pc, #24]	; (800ded0 <vTaskInternalSetTimeOutState+0x24>)
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800debc:	4b05      	ldr	r3, [pc, #20]	; (800ded4 <vTaskInternalSetTimeOutState+0x28>)
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	605a      	str	r2, [r3, #4]
}
 800dec4:	bf00      	nop
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr
 800ded0:	200010cc 	.word	0x200010cc
 800ded4:	200010b8 	.word	0x200010b8

0800ded8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b088      	sub	sp, #32
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10a      	bne.n	800defe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deec:	f383 8811 	msr	BASEPRI, r3
 800def0:	f3bf 8f6f 	isb	sy
 800def4:	f3bf 8f4f 	dsb	sy
 800def8:	613b      	str	r3, [r7, #16]
}
 800defa:	bf00      	nop
 800defc:	e7fe      	b.n	800defc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10a      	bne.n	800df1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800df04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df08:	f383 8811 	msr	BASEPRI, r3
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	60fb      	str	r3, [r7, #12]
}
 800df16:	bf00      	nop
 800df18:	e7fe      	b.n	800df18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800df1a:	f000 fe7b 	bl	800ec14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df1e:	4b1d      	ldr	r3, [pc, #116]	; (800df94 <xTaskCheckForTimeOut+0xbc>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	69ba      	ldr	r2, [r7, #24]
 800df2a:	1ad3      	subs	r3, r2, r3
 800df2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df36:	d102      	bne.n	800df3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df38:	2300      	movs	r3, #0
 800df3a:	61fb      	str	r3, [r7, #28]
 800df3c:	e023      	b.n	800df86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	4b15      	ldr	r3, [pc, #84]	; (800df98 <xTaskCheckForTimeOut+0xc0>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	429a      	cmp	r2, r3
 800df48:	d007      	beq.n	800df5a <xTaskCheckForTimeOut+0x82>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	69ba      	ldr	r2, [r7, #24]
 800df50:	429a      	cmp	r2, r3
 800df52:	d302      	bcc.n	800df5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df54:	2301      	movs	r3, #1
 800df56:	61fb      	str	r3, [r7, #28]
 800df58:	e015      	b.n	800df86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	429a      	cmp	r2, r3
 800df62:	d20b      	bcs.n	800df7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	1ad2      	subs	r2, r2, r3
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f7ff ff9b 	bl	800deac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800df76:	2300      	movs	r3, #0
 800df78:	61fb      	str	r3, [r7, #28]
 800df7a:	e004      	b.n	800df86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	2200      	movs	r2, #0
 800df80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800df82:	2301      	movs	r3, #1
 800df84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800df86:	f000 fe75 	bl	800ec74 <vPortExitCritical>

	return xReturn;
 800df8a:	69fb      	ldr	r3, [r7, #28]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3720      	adds	r7, #32
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	200010b8 	.word	0x200010b8
 800df98:	200010cc 	.word	0x200010cc

0800df9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800df9c:	b480      	push	{r7}
 800df9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dfa0:	4b03      	ldr	r3, [pc, #12]	; (800dfb0 <vTaskMissedYield+0x14>)
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	601a      	str	r2, [r3, #0]
}
 800dfa6:	bf00      	nop
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr
 800dfb0:	200010c8 	.word	0x200010c8

0800dfb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dfbc:	f000 f852 	bl	800e064 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfc0:	4b06      	ldr	r3, [pc, #24]	; (800dfdc <prvIdleTask+0x28>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d9f9      	bls.n	800dfbc <prvIdleTask+0x8>
			{
				taskYIELD();
 800dfc8:	4b05      	ldr	r3, [pc, #20]	; (800dfe0 <prvIdleTask+0x2c>)
 800dfca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfce:	601a      	str	r2, [r3, #0]
 800dfd0:	f3bf 8f4f 	dsb	sy
 800dfd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dfd8:	e7f0      	b.n	800dfbc <prvIdleTask+0x8>
 800dfda:	bf00      	nop
 800dfdc:	20000be4 	.word	0x20000be4
 800dfe0:	e000ed04 	.word	0xe000ed04

0800dfe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfea:	2300      	movs	r3, #0
 800dfec:	607b      	str	r3, [r7, #4]
 800dfee:	e00c      	b.n	800e00a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	4613      	mov	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4413      	add	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	4a12      	ldr	r2, [pc, #72]	; (800e044 <prvInitialiseTaskLists+0x60>)
 800dffc:	4413      	add	r3, r2
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fe fc36 	bl	800c870 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	3301      	adds	r3, #1
 800e008:	607b      	str	r3, [r7, #4]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2b37      	cmp	r3, #55	; 0x37
 800e00e:	d9ef      	bls.n	800dff0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e010:	480d      	ldr	r0, [pc, #52]	; (800e048 <prvInitialiseTaskLists+0x64>)
 800e012:	f7fe fc2d 	bl	800c870 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e016:	480d      	ldr	r0, [pc, #52]	; (800e04c <prvInitialiseTaskLists+0x68>)
 800e018:	f7fe fc2a 	bl	800c870 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e01c:	480c      	ldr	r0, [pc, #48]	; (800e050 <prvInitialiseTaskLists+0x6c>)
 800e01e:	f7fe fc27 	bl	800c870 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e022:	480c      	ldr	r0, [pc, #48]	; (800e054 <prvInitialiseTaskLists+0x70>)
 800e024:	f7fe fc24 	bl	800c870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e028:	480b      	ldr	r0, [pc, #44]	; (800e058 <prvInitialiseTaskLists+0x74>)
 800e02a:	f7fe fc21 	bl	800c870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e02e:	4b0b      	ldr	r3, [pc, #44]	; (800e05c <prvInitialiseTaskLists+0x78>)
 800e030:	4a05      	ldr	r2, [pc, #20]	; (800e048 <prvInitialiseTaskLists+0x64>)
 800e032:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e034:	4b0a      	ldr	r3, [pc, #40]	; (800e060 <prvInitialiseTaskLists+0x7c>)
 800e036:	4a05      	ldr	r2, [pc, #20]	; (800e04c <prvInitialiseTaskLists+0x68>)
 800e038:	601a      	str	r2, [r3, #0]
}
 800e03a:	bf00      	nop
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	20000be4 	.word	0x20000be4
 800e048:	20001044 	.word	0x20001044
 800e04c:	20001058 	.word	0x20001058
 800e050:	20001074 	.word	0x20001074
 800e054:	20001088 	.word	0x20001088
 800e058:	200010a0 	.word	0x200010a0
 800e05c:	2000106c 	.word	0x2000106c
 800e060:	20001070 	.word	0x20001070

0800e064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e06a:	e019      	b.n	800e0a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e06c:	f000 fdd2 	bl	800ec14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e070:	4b10      	ldr	r3, [pc, #64]	; (800e0b4 <prvCheckTasksWaitingTermination+0x50>)
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	3304      	adds	r3, #4
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe fc81 	bl	800c984 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e082:	4b0d      	ldr	r3, [pc, #52]	; (800e0b8 <prvCheckTasksWaitingTermination+0x54>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	3b01      	subs	r3, #1
 800e088:	4a0b      	ldr	r2, [pc, #44]	; (800e0b8 <prvCheckTasksWaitingTermination+0x54>)
 800e08a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e08c:	4b0b      	ldr	r3, [pc, #44]	; (800e0bc <prvCheckTasksWaitingTermination+0x58>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	3b01      	subs	r3, #1
 800e092:	4a0a      	ldr	r2, [pc, #40]	; (800e0bc <prvCheckTasksWaitingTermination+0x58>)
 800e094:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e096:	f000 fded 	bl	800ec74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 f810 	bl	800e0c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0a0:	4b06      	ldr	r3, [pc, #24]	; (800e0bc <prvCheckTasksWaitingTermination+0x58>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d1e1      	bne.n	800e06c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0a8:	bf00      	nop
 800e0aa:	bf00      	nop
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	20001088 	.word	0x20001088
 800e0b8:	200010b4 	.word	0x200010b4
 800e0bc:	2000109c 	.word	0x2000109c

0800e0c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d108      	bne.n	800e0e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f000 ff8a 	bl	800eff0 <vPortFree>
				vPortFree( pxTCB );
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 ff87 	bl	800eff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e0e2:	e018      	b.n	800e116 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d103      	bne.n	800e0f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 ff7e 	bl	800eff0 <vPortFree>
	}
 800e0f4:	e00f      	b.n	800e116 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e0fc:	2b02      	cmp	r3, #2
 800e0fe:	d00a      	beq.n	800e116 <prvDeleteTCB+0x56>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	60fb      	str	r3, [r7, #12]
}
 800e112:	bf00      	nop
 800e114:	e7fe      	b.n	800e114 <prvDeleteTCB+0x54>
	}
 800e116:	bf00      	nop
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
	...

0800e120 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e120:	b480      	push	{r7}
 800e122:	b083      	sub	sp, #12
 800e124:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e126:	4b0c      	ldr	r3, [pc, #48]	; (800e158 <prvResetNextTaskUnblockTime+0x38>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d104      	bne.n	800e13a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e130:	4b0a      	ldr	r3, [pc, #40]	; (800e15c <prvResetNextTaskUnblockTime+0x3c>)
 800e132:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e136:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e138:	e008      	b.n	800e14c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e13a:	4b07      	ldr	r3, [pc, #28]	; (800e158 <prvResetNextTaskUnblockTime+0x38>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	4a04      	ldr	r2, [pc, #16]	; (800e15c <prvResetNextTaskUnblockTime+0x3c>)
 800e14a:	6013      	str	r3, [r2, #0]
}
 800e14c:	bf00      	nop
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr
 800e158:	2000106c 	.word	0x2000106c
 800e15c:	200010d4 	.word	0x200010d4

0800e160 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e166:	4b0b      	ldr	r3, [pc, #44]	; (800e194 <xTaskGetSchedulerState+0x34>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d102      	bne.n	800e174 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e16e:	2301      	movs	r3, #1
 800e170:	607b      	str	r3, [r7, #4]
 800e172:	e008      	b.n	800e186 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e174:	4b08      	ldr	r3, [pc, #32]	; (800e198 <xTaskGetSchedulerState+0x38>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d102      	bne.n	800e182 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e17c:	2302      	movs	r3, #2
 800e17e:	607b      	str	r3, [r7, #4]
 800e180:	e001      	b.n	800e186 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e182:	2300      	movs	r3, #0
 800e184:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e186:	687b      	ldr	r3, [r7, #4]
	}
 800e188:	4618      	mov	r0, r3
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr
 800e194:	200010c0 	.word	0x200010c0
 800e198:	200010dc 	.word	0x200010dc

0800e19c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b086      	sub	sp, #24
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d056      	beq.n	800e260 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e1b2:	4b2e      	ldr	r3, [pc, #184]	; (800e26c <xTaskPriorityDisinherit+0xd0>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	693a      	ldr	r2, [r7, #16]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d00a      	beq.n	800e1d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c0:	f383 8811 	msr	BASEPRI, r3
 800e1c4:	f3bf 8f6f 	isb	sy
 800e1c8:	f3bf 8f4f 	dsb	sy
 800e1cc:	60fb      	str	r3, [r7, #12]
}
 800e1ce:	bf00      	nop
 800e1d0:	e7fe      	b.n	800e1d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d10a      	bne.n	800e1f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1de:	f383 8811 	msr	BASEPRI, r3
 800e1e2:	f3bf 8f6f 	isb	sy
 800e1e6:	f3bf 8f4f 	dsb	sy
 800e1ea:	60bb      	str	r3, [r7, #8]
}
 800e1ec:	bf00      	nop
 800e1ee:	e7fe      	b.n	800e1ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1f4:	1e5a      	subs	r2, r3, #1
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e202:	429a      	cmp	r2, r3
 800e204:	d02c      	beq.n	800e260 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d128      	bne.n	800e260 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	3304      	adds	r3, #4
 800e212:	4618      	mov	r0, r3
 800e214:	f7fe fbb6 	bl	800c984 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e224:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e230:	4b0f      	ldr	r3, [pc, #60]	; (800e270 <xTaskPriorityDisinherit+0xd4>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	429a      	cmp	r2, r3
 800e236:	d903      	bls.n	800e240 <xTaskPriorityDisinherit+0xa4>
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23c:	4a0c      	ldr	r2, [pc, #48]	; (800e270 <xTaskPriorityDisinherit+0xd4>)
 800e23e:	6013      	str	r3, [r2, #0]
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e244:	4613      	mov	r3, r2
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	4413      	add	r3, r2
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	4a09      	ldr	r2, [pc, #36]	; (800e274 <xTaskPriorityDisinherit+0xd8>)
 800e24e:	441a      	add	r2, r3
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	3304      	adds	r3, #4
 800e254:	4619      	mov	r1, r3
 800e256:	4610      	mov	r0, r2
 800e258:	f7fe fb37 	bl	800c8ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e25c:	2301      	movs	r3, #1
 800e25e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e260:	697b      	ldr	r3, [r7, #20]
	}
 800e262:	4618      	mov	r0, r3
 800e264:	3718      	adds	r7, #24
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	20000be0 	.word	0x20000be0
 800e270:	200010bc 	.word	0x200010bc
 800e274:	20000be4 	.word	0x20000be4

0800e278 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e282:	4b21      	ldr	r3, [pc, #132]	; (800e308 <prvAddCurrentTaskToDelayedList+0x90>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e288:	4b20      	ldr	r3, [pc, #128]	; (800e30c <prvAddCurrentTaskToDelayedList+0x94>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3304      	adds	r3, #4
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fe fb78 	bl	800c984 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e29a:	d10a      	bne.n	800e2b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d007      	beq.n	800e2b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2a2:	4b1a      	ldr	r3, [pc, #104]	; (800e30c <prvAddCurrentTaskToDelayedList+0x94>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	4819      	ldr	r0, [pc, #100]	; (800e310 <prvAddCurrentTaskToDelayedList+0x98>)
 800e2ac:	f7fe fb0d 	bl	800c8ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e2b0:	e026      	b.n	800e300 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2ba:	4b14      	ldr	r3, [pc, #80]	; (800e30c <prvAddCurrentTaskToDelayedList+0x94>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	68ba      	ldr	r2, [r7, #8]
 800e2c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e2c2:	68ba      	ldr	r2, [r7, #8]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d209      	bcs.n	800e2de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2ca:	4b12      	ldr	r3, [pc, #72]	; (800e314 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	4b0f      	ldr	r3, [pc, #60]	; (800e30c <prvAddCurrentTaskToDelayedList+0x94>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3304      	adds	r3, #4
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4610      	mov	r0, r2
 800e2d8:	f7fe fb1b 	bl	800c912 <vListInsert>
}
 800e2dc:	e010      	b.n	800e300 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2de:	4b0e      	ldr	r3, [pc, #56]	; (800e318 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	4b0a      	ldr	r3, [pc, #40]	; (800e30c <prvAddCurrentTaskToDelayedList+0x94>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3304      	adds	r3, #4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f7fe fb11 	bl	800c912 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e2f0:	4b0a      	ldr	r3, [pc, #40]	; (800e31c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d202      	bcs.n	800e300 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e2fa:	4a08      	ldr	r2, [pc, #32]	; (800e31c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	6013      	str	r3, [r2, #0]
}
 800e300:	bf00      	nop
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	200010b8 	.word	0x200010b8
 800e30c:	20000be0 	.word	0x20000be0
 800e310:	200010a0 	.word	0x200010a0
 800e314:	20001070 	.word	0x20001070
 800e318:	2000106c 	.word	0x2000106c
 800e31c:	200010d4 	.word	0x200010d4

0800e320 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b08a      	sub	sp, #40	; 0x28
 800e324:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e326:	2300      	movs	r3, #0
 800e328:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e32a:	f000 fb07 	bl	800e93c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e32e:	4b1c      	ldr	r3, [pc, #112]	; (800e3a0 <xTimerCreateTimerTask+0x80>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d021      	beq.n	800e37a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e336:	2300      	movs	r3, #0
 800e338:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e33a:	2300      	movs	r3, #0
 800e33c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e33e:	1d3a      	adds	r2, r7, #4
 800e340:	f107 0108 	add.w	r1, r7, #8
 800e344:	f107 030c 	add.w	r3, r7, #12
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fe fa77 	bl	800c83c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e34e:	6879      	ldr	r1, [r7, #4]
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	9202      	str	r2, [sp, #8]
 800e356:	9301      	str	r3, [sp, #4]
 800e358:	2302      	movs	r3, #2
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	2300      	movs	r3, #0
 800e35e:	460a      	mov	r2, r1
 800e360:	4910      	ldr	r1, [pc, #64]	; (800e3a4 <xTimerCreateTimerTask+0x84>)
 800e362:	4811      	ldr	r0, [pc, #68]	; (800e3a8 <xTimerCreateTimerTask+0x88>)
 800e364:	f7ff f8de 	bl	800d524 <xTaskCreateStatic>
 800e368:	4603      	mov	r3, r0
 800e36a:	4a10      	ldr	r2, [pc, #64]	; (800e3ac <xTimerCreateTimerTask+0x8c>)
 800e36c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e36e:	4b0f      	ldr	r3, [pc, #60]	; (800e3ac <xTimerCreateTimerTask+0x8c>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d001      	beq.n	800e37a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e376:	2301      	movs	r3, #1
 800e378:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10a      	bne.n	800e396 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	613b      	str	r3, [r7, #16]
}
 800e392:	bf00      	nop
 800e394:	e7fe      	b.n	800e394 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e396:	697b      	ldr	r3, [r7, #20]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	20001110 	.word	0x20001110
 800e3a4:	0800fbf0 	.word	0x0800fbf0
 800e3a8:	0800e4e5 	.word	0x0800e4e5
 800e3ac:	20001114 	.word	0x20001114

0800e3b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b08a      	sub	sp, #40	; 0x28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d10a      	bne.n	800e3de <xTimerGenericCommand+0x2e>
	__asm volatile
 800e3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3cc:	f383 8811 	msr	BASEPRI, r3
 800e3d0:	f3bf 8f6f 	isb	sy
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	623b      	str	r3, [r7, #32]
}
 800e3da:	bf00      	nop
 800e3dc:	e7fe      	b.n	800e3dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e3de:	4b1a      	ldr	r3, [pc, #104]	; (800e448 <xTimerGenericCommand+0x98>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d02a      	beq.n	800e43c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	2b05      	cmp	r3, #5
 800e3f6:	dc18      	bgt.n	800e42a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e3f8:	f7ff feb2 	bl	800e160 <xTaskGetSchedulerState>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b02      	cmp	r3, #2
 800e400:	d109      	bne.n	800e416 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e402:	4b11      	ldr	r3, [pc, #68]	; (800e448 <xTimerGenericCommand+0x98>)
 800e404:	6818      	ldr	r0, [r3, #0]
 800e406:	f107 0110 	add.w	r1, r7, #16
 800e40a:	2300      	movs	r3, #0
 800e40c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e40e:	f7fe fc21 	bl	800cc54 <xQueueGenericSend>
 800e412:	6278      	str	r0, [r7, #36]	; 0x24
 800e414:	e012      	b.n	800e43c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e416:	4b0c      	ldr	r3, [pc, #48]	; (800e448 <xTimerGenericCommand+0x98>)
 800e418:	6818      	ldr	r0, [r3, #0]
 800e41a:	f107 0110 	add.w	r1, r7, #16
 800e41e:	2300      	movs	r3, #0
 800e420:	2200      	movs	r2, #0
 800e422:	f7fe fc17 	bl	800cc54 <xQueueGenericSend>
 800e426:	6278      	str	r0, [r7, #36]	; 0x24
 800e428:	e008      	b.n	800e43c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e42a:	4b07      	ldr	r3, [pc, #28]	; (800e448 <xTimerGenericCommand+0x98>)
 800e42c:	6818      	ldr	r0, [r3, #0]
 800e42e:	f107 0110 	add.w	r1, r7, #16
 800e432:	2300      	movs	r3, #0
 800e434:	683a      	ldr	r2, [r7, #0]
 800e436:	f7fe fd0b 	bl	800ce50 <xQueueGenericSendFromISR>
 800e43a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3728      	adds	r7, #40	; 0x28
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	20001110 	.word	0x20001110

0800e44c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af02      	add	r7, sp, #8
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e456:	4b22      	ldr	r3, [pc, #136]	; (800e4e0 <prvProcessExpiredTimer+0x94>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	3304      	adds	r3, #4
 800e464:	4618      	mov	r0, r3
 800e466:	f7fe fa8d 	bl	800c984 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e470:	f003 0304 	and.w	r3, r3, #4
 800e474:	2b00      	cmp	r3, #0
 800e476:	d022      	beq.n	800e4be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	699a      	ldr	r2, [r3, #24]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	18d1      	adds	r1, r2, r3
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	683a      	ldr	r2, [r7, #0]
 800e484:	6978      	ldr	r0, [r7, #20]
 800e486:	f000 f8d1 	bl	800e62c <prvInsertTimerInActiveList>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d01f      	beq.n	800e4d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e490:	2300      	movs	r3, #0
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	2300      	movs	r3, #0
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	2100      	movs	r1, #0
 800e49a:	6978      	ldr	r0, [r7, #20]
 800e49c:	f7ff ff88 	bl	800e3b0 <xTimerGenericCommand>
 800e4a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d113      	bne.n	800e4d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ac:	f383 8811 	msr	BASEPRI, r3
 800e4b0:	f3bf 8f6f 	isb	sy
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	60fb      	str	r3, [r7, #12]
}
 800e4ba:	bf00      	nop
 800e4bc:	e7fe      	b.n	800e4bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4c4:	f023 0301 	bic.w	r3, r3, #1
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	6a1b      	ldr	r3, [r3, #32]
 800e4d4:	6978      	ldr	r0, [r7, #20]
 800e4d6:	4798      	blx	r3
}
 800e4d8:	bf00      	nop
 800e4da:	3718      	adds	r7, #24
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	20001108 	.word	0x20001108

0800e4e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e4ec:	f107 0308 	add.w	r3, r7, #8
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f000 f857 	bl	800e5a4 <prvGetNextExpireTime>
 800e4f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	68f8      	ldr	r0, [r7, #12]
 800e4fe:	f000 f803 	bl	800e508 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e502:	f000 f8d5 	bl	800e6b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e506:	e7f1      	b.n	800e4ec <prvTimerTask+0x8>

0800e508 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e512:	f7ff fa43 	bl	800d99c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e516:	f107 0308 	add.w	r3, r7, #8
 800e51a:	4618      	mov	r0, r3
 800e51c:	f000 f866 	bl	800e5ec <prvSampleTimeNow>
 800e520:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d130      	bne.n	800e58a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10a      	bne.n	800e544 <prvProcessTimerOrBlockTask+0x3c>
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	429a      	cmp	r2, r3
 800e534:	d806      	bhi.n	800e544 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e536:	f7ff fa3f 	bl	800d9b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e53a:	68f9      	ldr	r1, [r7, #12]
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f7ff ff85 	bl	800e44c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e542:	e024      	b.n	800e58e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d008      	beq.n	800e55c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e54a:	4b13      	ldr	r3, [pc, #76]	; (800e598 <prvProcessTimerOrBlockTask+0x90>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d101      	bne.n	800e558 <prvProcessTimerOrBlockTask+0x50>
 800e554:	2301      	movs	r3, #1
 800e556:	e000      	b.n	800e55a <prvProcessTimerOrBlockTask+0x52>
 800e558:	2300      	movs	r3, #0
 800e55a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e55c:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <prvProcessTimerOrBlockTask+0x94>)
 800e55e:	6818      	ldr	r0, [r3, #0]
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	1ad3      	subs	r3, r2, r3
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	4619      	mov	r1, r3
 800e56a:	f7fe ffa7 	bl	800d4bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e56e:	f7ff fa23 	bl	800d9b8 <xTaskResumeAll>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d10a      	bne.n	800e58e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e578:	4b09      	ldr	r3, [pc, #36]	; (800e5a0 <prvProcessTimerOrBlockTask+0x98>)
 800e57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e57e:	601a      	str	r2, [r3, #0]
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	f3bf 8f6f 	isb	sy
}
 800e588:	e001      	b.n	800e58e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e58a:	f7ff fa15 	bl	800d9b8 <xTaskResumeAll>
}
 800e58e:	bf00      	nop
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	2000110c 	.word	0x2000110c
 800e59c:	20001110 	.word	0x20001110
 800e5a0:	e000ed04 	.word	0xe000ed04

0800e5a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5ac:	4b0e      	ldr	r3, [pc, #56]	; (800e5e8 <prvGetNextExpireTime+0x44>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d101      	bne.n	800e5ba <prvGetNextExpireTime+0x16>
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	e000      	b.n	800e5bc <prvGetNextExpireTime+0x18>
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d105      	bne.n	800e5d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5c8:	4b07      	ldr	r3, [pc, #28]	; (800e5e8 <prvGetNextExpireTime+0x44>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	60fb      	str	r3, [r7, #12]
 800e5d2:	e001      	b.n	800e5d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3714      	adds	r7, #20
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	20001108 	.word	0x20001108

0800e5ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e5f4:	f7ff fa7e 	bl	800daf4 <xTaskGetTickCount>
 800e5f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e5fa:	4b0b      	ldr	r3, [pc, #44]	; (800e628 <prvSampleTimeNow+0x3c>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	68fa      	ldr	r2, [r7, #12]
 800e600:	429a      	cmp	r2, r3
 800e602:	d205      	bcs.n	800e610 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e604:	f000 f936 	bl	800e874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2201      	movs	r2, #1
 800e60c:	601a      	str	r2, [r3, #0]
 800e60e:	e002      	b.n	800e616 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e616:	4a04      	ldr	r2, [pc, #16]	; (800e628 <prvSampleTimeNow+0x3c>)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e61c:	68fb      	ldr	r3, [r7, #12]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	20001118 	.word	0x20001118

0800e62c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	607a      	str	r2, [r7, #4]
 800e638:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e63a:	2300      	movs	r3, #0
 800e63c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	68fa      	ldr	r2, [r7, #12]
 800e648:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d812      	bhi.n	800e678 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	1ad2      	subs	r2, r2, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	699b      	ldr	r3, [r3, #24]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d302      	bcc.n	800e666 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e660:	2301      	movs	r3, #1
 800e662:	617b      	str	r3, [r7, #20]
 800e664:	e01b      	b.n	800e69e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e666:	4b10      	ldr	r3, [pc, #64]	; (800e6a8 <prvInsertTimerInActiveList+0x7c>)
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	3304      	adds	r3, #4
 800e66e:	4619      	mov	r1, r3
 800e670:	4610      	mov	r0, r2
 800e672:	f7fe f94e 	bl	800c912 <vListInsert>
 800e676:	e012      	b.n	800e69e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d206      	bcs.n	800e68e <prvInsertTimerInActiveList+0x62>
 800e680:	68ba      	ldr	r2, [r7, #8]
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	429a      	cmp	r2, r3
 800e686:	d302      	bcc.n	800e68e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e688:	2301      	movs	r3, #1
 800e68a:	617b      	str	r3, [r7, #20]
 800e68c:	e007      	b.n	800e69e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e68e:	4b07      	ldr	r3, [pc, #28]	; (800e6ac <prvInsertTimerInActiveList+0x80>)
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	3304      	adds	r3, #4
 800e696:	4619      	mov	r1, r3
 800e698:	4610      	mov	r0, r2
 800e69a:	f7fe f93a 	bl	800c912 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e69e:	697b      	ldr	r3, [r7, #20]
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3718      	adds	r7, #24
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	2000110c 	.word	0x2000110c
 800e6ac:	20001108 	.word	0x20001108

0800e6b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b08e      	sub	sp, #56	; 0x38
 800e6b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6b6:	e0ca      	b.n	800e84e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	da18      	bge.n	800e6f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e6be:	1d3b      	adds	r3, r7, #4
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d10a      	bne.n	800e6e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	61fb      	str	r3, [r7, #28]
}
 800e6dc:	bf00      	nop
 800e6de:	e7fe      	b.n	800e6de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6e6:	6850      	ldr	r0, [r2, #4]
 800e6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6ea:	6892      	ldr	r2, [r2, #8]
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f2c0 80aa 	blt.w	800e84c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fe:	695b      	ldr	r3, [r3, #20]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d004      	beq.n	800e70e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e706:	3304      	adds	r3, #4
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fe f93b 	bl	800c984 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e70e:	463b      	mov	r3, r7
 800e710:	4618      	mov	r0, r3
 800e712:	f7ff ff6b 	bl	800e5ec <prvSampleTimeNow>
 800e716:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b09      	cmp	r3, #9
 800e71c:	f200 8097 	bhi.w	800e84e <prvProcessReceivedCommands+0x19e>
 800e720:	a201      	add	r2, pc, #4	; (adr r2, 800e728 <prvProcessReceivedCommands+0x78>)
 800e722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e726:	bf00      	nop
 800e728:	0800e751 	.word	0x0800e751
 800e72c:	0800e751 	.word	0x0800e751
 800e730:	0800e751 	.word	0x0800e751
 800e734:	0800e7c5 	.word	0x0800e7c5
 800e738:	0800e7d9 	.word	0x0800e7d9
 800e73c:	0800e823 	.word	0x0800e823
 800e740:	0800e751 	.word	0x0800e751
 800e744:	0800e751 	.word	0x0800e751
 800e748:	0800e7c5 	.word	0x0800e7c5
 800e74c:	0800e7d9 	.word	0x0800e7d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e756:	f043 0301 	orr.w	r3, r3, #1
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e766:	699b      	ldr	r3, [r3, #24]
 800e768:	18d1      	adds	r1, r2, r3
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e76e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e770:	f7ff ff5c 	bl	800e62c <prvInsertTimerInActiveList>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d069      	beq.n	800e84e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	6a1b      	ldr	r3, [r3, #32]
 800e77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e780:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e788:	f003 0304 	and.w	r3, r3, #4
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d05e      	beq.n	800e84e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	441a      	add	r2, r3
 800e798:	2300      	movs	r3, #0
 800e79a:	9300      	str	r3, [sp, #0]
 800e79c:	2300      	movs	r3, #0
 800e79e:	2100      	movs	r1, #0
 800e7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7a2:	f7ff fe05 	bl	800e3b0 <xTimerGenericCommand>
 800e7a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e7a8:	6a3b      	ldr	r3, [r7, #32]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d14f      	bne.n	800e84e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	61bb      	str	r3, [r7, #24]
}
 800e7c0:	bf00      	nop
 800e7c2:	e7fe      	b.n	800e7c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7ca:	f023 0301 	bic.w	r3, r3, #1
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e7d6:	e03a      	b.n	800e84e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7de:	f043 0301 	orr.w	r3, r3, #1
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	699b      	ldr	r3, [r3, #24]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10a      	bne.n	800e80e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fc:	f383 8811 	msr	BASEPRI, r3
 800e800:	f3bf 8f6f 	isb	sy
 800e804:	f3bf 8f4f 	dsb	sy
 800e808:	617b      	str	r3, [r7, #20]
}
 800e80a:	bf00      	nop
 800e80c:	e7fe      	b.n	800e80c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e810:	699a      	ldr	r2, [r3, #24]
 800e812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e814:	18d1      	adds	r1, r2, r3
 800e816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e81a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e81c:	f7ff ff06 	bl	800e62c <prvInsertTimerInActiveList>
					break;
 800e820:	e015      	b.n	800e84e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e828:	f003 0302 	and.w	r3, r3, #2
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d103      	bne.n	800e838 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e832:	f000 fbdd 	bl	800eff0 <vPortFree>
 800e836:	e00a      	b.n	800e84e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e83e:	f023 0301 	bic.w	r3, r3, #1
 800e842:	b2da      	uxtb	r2, r3
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e84a:	e000      	b.n	800e84e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e84c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e84e:	4b08      	ldr	r3, [pc, #32]	; (800e870 <prvProcessReceivedCommands+0x1c0>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	1d39      	adds	r1, r7, #4
 800e854:	2200      	movs	r2, #0
 800e856:	4618      	mov	r0, r3
 800e858:	f7fe fb96 	bl	800cf88 <xQueueReceive>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f47f af2a 	bne.w	800e6b8 <prvProcessReceivedCommands+0x8>
	}
}
 800e864:	bf00      	nop
 800e866:	bf00      	nop
 800e868:	3730      	adds	r7, #48	; 0x30
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	20001110 	.word	0x20001110

0800e874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b088      	sub	sp, #32
 800e878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e87a:	e048      	b.n	800e90e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e87c:	4b2d      	ldr	r3, [pc, #180]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e886:	4b2b      	ldr	r3, [pc, #172]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	3304      	adds	r3, #4
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe f875 	bl	800c984 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6a1b      	ldr	r3, [r3, #32]
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8a8:	f003 0304 	and.w	r3, r3, #4
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d02e      	beq.n	800e90e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	699b      	ldr	r3, [r3, #24]
 800e8b4:	693a      	ldr	r2, [r7, #16]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d90e      	bls.n	800e8e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	68ba      	ldr	r2, [r7, #8]
 800e8c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8ce:	4b19      	ldr	r3, [pc, #100]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	4610      	mov	r0, r2
 800e8da:	f7fe f81a 	bl	800c912 <vListInsert>
 800e8de:	e016      	b.n	800e90e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	9300      	str	r3, [sp, #0]
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	693a      	ldr	r2, [r7, #16]
 800e8e8:	2100      	movs	r1, #0
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f7ff fd60 	bl	800e3b0 <xTimerGenericCommand>
 800e8f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d10a      	bne.n	800e90e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fc:	f383 8811 	msr	BASEPRI, r3
 800e900:	f3bf 8f6f 	isb	sy
 800e904:	f3bf 8f4f 	dsb	sy
 800e908:	603b      	str	r3, [r7, #0]
}
 800e90a:	bf00      	nop
 800e90c:	e7fe      	b.n	800e90c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e90e:	4b09      	ldr	r3, [pc, #36]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d1b1      	bne.n	800e87c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e918:	4b06      	ldr	r3, [pc, #24]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e91e:	4b06      	ldr	r3, [pc, #24]	; (800e938 <prvSwitchTimerLists+0xc4>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4a04      	ldr	r2, [pc, #16]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e924:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e926:	4a04      	ldr	r2, [pc, #16]	; (800e938 <prvSwitchTimerLists+0xc4>)
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	6013      	str	r3, [r2, #0]
}
 800e92c:	bf00      	nop
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	20001108 	.word	0x20001108
 800e938:	2000110c 	.word	0x2000110c

0800e93c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e942:	f000 f967 	bl	800ec14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e946:	4b15      	ldr	r3, [pc, #84]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d120      	bne.n	800e990 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e94e:	4814      	ldr	r0, [pc, #80]	; (800e9a0 <prvCheckForValidListAndQueue+0x64>)
 800e950:	f7fd ff8e 	bl	800c870 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e954:	4813      	ldr	r0, [pc, #76]	; (800e9a4 <prvCheckForValidListAndQueue+0x68>)
 800e956:	f7fd ff8b 	bl	800c870 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e95a:	4b13      	ldr	r3, [pc, #76]	; (800e9a8 <prvCheckForValidListAndQueue+0x6c>)
 800e95c:	4a10      	ldr	r2, [pc, #64]	; (800e9a0 <prvCheckForValidListAndQueue+0x64>)
 800e95e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e960:	4b12      	ldr	r3, [pc, #72]	; (800e9ac <prvCheckForValidListAndQueue+0x70>)
 800e962:	4a10      	ldr	r2, [pc, #64]	; (800e9a4 <prvCheckForValidListAndQueue+0x68>)
 800e964:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e966:	2300      	movs	r3, #0
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	4b11      	ldr	r3, [pc, #68]	; (800e9b0 <prvCheckForValidListAndQueue+0x74>)
 800e96c:	4a11      	ldr	r2, [pc, #68]	; (800e9b4 <prvCheckForValidListAndQueue+0x78>)
 800e96e:	2110      	movs	r1, #16
 800e970:	200a      	movs	r0, #10
 800e972:	f7fe f899 	bl	800caa8 <xQueueGenericCreateStatic>
 800e976:	4603      	mov	r3, r0
 800e978:	4a08      	ldr	r2, [pc, #32]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e97a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e97c:	4b07      	ldr	r3, [pc, #28]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d005      	beq.n	800e990 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e984:	4b05      	ldr	r3, [pc, #20]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	490b      	ldr	r1, [pc, #44]	; (800e9b8 <prvCheckForValidListAndQueue+0x7c>)
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fe fd6c 	bl	800d468 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e990:	f000 f970 	bl	800ec74 <vPortExitCritical>
}
 800e994:	bf00      	nop
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	20001110 	.word	0x20001110
 800e9a0:	200010e0 	.word	0x200010e0
 800e9a4:	200010f4 	.word	0x200010f4
 800e9a8:	20001108 	.word	0x20001108
 800e9ac:	2000110c 	.word	0x2000110c
 800e9b0:	200011bc 	.word	0x200011bc
 800e9b4:	2000111c 	.word	0x2000111c
 800e9b8:	0800fbf8 	.word	0x0800fbf8

0800e9bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	3b04      	subs	r3, #4
 800e9cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	3b04      	subs	r3, #4
 800e9da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	f023 0201 	bic.w	r2, r3, #1
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	3b04      	subs	r3, #4
 800e9ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e9ec:	4a0c      	ldr	r2, [pc, #48]	; (800ea20 <pxPortInitialiseStack+0x64>)
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3b14      	subs	r3, #20
 800e9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	3b04      	subs	r3, #4
 800ea02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f06f 0202 	mvn.w	r2, #2
 800ea0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	3b20      	subs	r3, #32
 800ea10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea12:	68fb      	ldr	r3, [r7, #12]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3714      	adds	r7, #20
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr
 800ea20:	0800ea25 	.word	0x0800ea25

0800ea24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea24:	b480      	push	{r7}
 800ea26:	b085      	sub	sp, #20
 800ea28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea2e:	4b12      	ldr	r3, [pc, #72]	; (800ea78 <prvTaskExitError+0x54>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea36:	d00a      	beq.n	800ea4e <prvTaskExitError+0x2a>
	__asm volatile
 800ea38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3c:	f383 8811 	msr	BASEPRI, r3
 800ea40:	f3bf 8f6f 	isb	sy
 800ea44:	f3bf 8f4f 	dsb	sy
 800ea48:	60fb      	str	r3, [r7, #12]
}
 800ea4a:	bf00      	nop
 800ea4c:	e7fe      	b.n	800ea4c <prvTaskExitError+0x28>
	__asm volatile
 800ea4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea52:	f383 8811 	msr	BASEPRI, r3
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	60bb      	str	r3, [r7, #8]
}
 800ea60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea62:	bf00      	nop
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d0fc      	beq.n	800ea64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea6a:	bf00      	nop
 800ea6c:	bf00      	nop
 800ea6e:	3714      	adds	r7, #20
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr
 800ea78:	2000002c 	.word	0x2000002c
 800ea7c:	00000000 	.word	0x00000000

0800ea80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea80:	4b07      	ldr	r3, [pc, #28]	; (800eaa0 <pxCurrentTCBConst2>)
 800ea82:	6819      	ldr	r1, [r3, #0]
 800ea84:	6808      	ldr	r0, [r1, #0]
 800ea86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8a:	f380 8809 	msr	PSP, r0
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f04f 0000 	mov.w	r0, #0
 800ea96:	f380 8811 	msr	BASEPRI, r0
 800ea9a:	4770      	bx	lr
 800ea9c:	f3af 8000 	nop.w

0800eaa0 <pxCurrentTCBConst2>:
 800eaa0:	20000be0 	.word	0x20000be0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eaa4:	bf00      	nop
 800eaa6:	bf00      	nop

0800eaa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eaa8:	4808      	ldr	r0, [pc, #32]	; (800eacc <prvPortStartFirstTask+0x24>)
 800eaaa:	6800      	ldr	r0, [r0, #0]
 800eaac:	6800      	ldr	r0, [r0, #0]
 800eaae:	f380 8808 	msr	MSP, r0
 800eab2:	f04f 0000 	mov.w	r0, #0
 800eab6:	f380 8814 	msr	CONTROL, r0
 800eaba:	b662      	cpsie	i
 800eabc:	b661      	cpsie	f
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	f3bf 8f6f 	isb	sy
 800eac6:	df00      	svc	0
 800eac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eaca:	bf00      	nop
 800eacc:	e000ed08 	.word	0xe000ed08

0800ead0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ead6:	4b46      	ldr	r3, [pc, #280]	; (800ebf0 <xPortStartScheduler+0x120>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4a46      	ldr	r2, [pc, #280]	; (800ebf4 <xPortStartScheduler+0x124>)
 800eadc:	4293      	cmp	r3, r2
 800eade:	d10a      	bne.n	800eaf6 <xPortStartScheduler+0x26>
	__asm volatile
 800eae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae4:	f383 8811 	msr	BASEPRI, r3
 800eae8:	f3bf 8f6f 	isb	sy
 800eaec:	f3bf 8f4f 	dsb	sy
 800eaf0:	613b      	str	r3, [r7, #16]
}
 800eaf2:	bf00      	nop
 800eaf4:	e7fe      	b.n	800eaf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eaf6:	4b3e      	ldr	r3, [pc, #248]	; (800ebf0 <xPortStartScheduler+0x120>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a3f      	ldr	r2, [pc, #252]	; (800ebf8 <xPortStartScheduler+0x128>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d10a      	bne.n	800eb16 <xPortStartScheduler+0x46>
	__asm volatile
 800eb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	60fb      	str	r3, [r7, #12]
}
 800eb12:	bf00      	nop
 800eb14:	e7fe      	b.n	800eb14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb16:	4b39      	ldr	r3, [pc, #228]	; (800ebfc <xPortStartScheduler+0x12c>)
 800eb18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	22ff      	movs	r2, #255	; 0xff
 800eb26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb30:	78fb      	ldrb	r3, [r7, #3]
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb38:	b2da      	uxtb	r2, r3
 800eb3a:	4b31      	ldr	r3, [pc, #196]	; (800ec00 <xPortStartScheduler+0x130>)
 800eb3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb3e:	4b31      	ldr	r3, [pc, #196]	; (800ec04 <xPortStartScheduler+0x134>)
 800eb40:	2207      	movs	r2, #7
 800eb42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb44:	e009      	b.n	800eb5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800eb46:	4b2f      	ldr	r3, [pc, #188]	; (800ec04 <xPortStartScheduler+0x134>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	3b01      	subs	r3, #1
 800eb4c:	4a2d      	ldr	r2, [pc, #180]	; (800ec04 <xPortStartScheduler+0x134>)
 800eb4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb50:	78fb      	ldrb	r3, [r7, #3]
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	005b      	lsls	r3, r3, #1
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb5a:	78fb      	ldrb	r3, [r7, #3]
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb62:	2b80      	cmp	r3, #128	; 0x80
 800eb64:	d0ef      	beq.n	800eb46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb66:	4b27      	ldr	r3, [pc, #156]	; (800ec04 <xPortStartScheduler+0x134>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f1c3 0307 	rsb	r3, r3, #7
 800eb6e:	2b04      	cmp	r3, #4
 800eb70:	d00a      	beq.n	800eb88 <xPortStartScheduler+0xb8>
	__asm volatile
 800eb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb76:	f383 8811 	msr	BASEPRI, r3
 800eb7a:	f3bf 8f6f 	isb	sy
 800eb7e:	f3bf 8f4f 	dsb	sy
 800eb82:	60bb      	str	r3, [r7, #8]
}
 800eb84:	bf00      	nop
 800eb86:	e7fe      	b.n	800eb86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb88:	4b1e      	ldr	r3, [pc, #120]	; (800ec04 <xPortStartScheduler+0x134>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	021b      	lsls	r3, r3, #8
 800eb8e:	4a1d      	ldr	r2, [pc, #116]	; (800ec04 <xPortStartScheduler+0x134>)
 800eb90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb92:	4b1c      	ldr	r3, [pc, #112]	; (800ec04 <xPortStartScheduler+0x134>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb9a:	4a1a      	ldr	r2, [pc, #104]	; (800ec04 <xPortStartScheduler+0x134>)
 800eb9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	b2da      	uxtb	r2, r3
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eba6:	4b18      	ldr	r3, [pc, #96]	; (800ec08 <xPortStartScheduler+0x138>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4a17      	ldr	r2, [pc, #92]	; (800ec08 <xPortStartScheduler+0x138>)
 800ebac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ebb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ebb2:	4b15      	ldr	r3, [pc, #84]	; (800ec08 <xPortStartScheduler+0x138>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4a14      	ldr	r2, [pc, #80]	; (800ec08 <xPortStartScheduler+0x138>)
 800ebb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ebbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ebbe:	f000 f8dd 	bl	800ed7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ebc2:	4b12      	ldr	r3, [pc, #72]	; (800ec0c <xPortStartScheduler+0x13c>)
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ebc8:	f000 f8fc 	bl	800edc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ebcc:	4b10      	ldr	r3, [pc, #64]	; (800ec10 <xPortStartScheduler+0x140>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4a0f      	ldr	r2, [pc, #60]	; (800ec10 <xPortStartScheduler+0x140>)
 800ebd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ebd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ebd8:	f7ff ff66 	bl	800eaa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ebdc:	f7ff f854 	bl	800dc88 <vTaskSwitchContext>
	prvTaskExitError();
 800ebe0:	f7ff ff20 	bl	800ea24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3718      	adds	r7, #24
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	e000ed00 	.word	0xe000ed00
 800ebf4:	410fc271 	.word	0x410fc271
 800ebf8:	410fc270 	.word	0x410fc270
 800ebfc:	e000e400 	.word	0xe000e400
 800ec00:	2000120c 	.word	0x2000120c
 800ec04:	20001210 	.word	0x20001210
 800ec08:	e000ed20 	.word	0xe000ed20
 800ec0c:	2000002c 	.word	0x2000002c
 800ec10:	e000ef34 	.word	0xe000ef34

0800ec14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
	__asm volatile
 800ec1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1e:	f383 8811 	msr	BASEPRI, r3
 800ec22:	f3bf 8f6f 	isb	sy
 800ec26:	f3bf 8f4f 	dsb	sy
 800ec2a:	607b      	str	r3, [r7, #4]
}
 800ec2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec2e:	4b0f      	ldr	r3, [pc, #60]	; (800ec6c <vPortEnterCritical+0x58>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	3301      	adds	r3, #1
 800ec34:	4a0d      	ldr	r2, [pc, #52]	; (800ec6c <vPortEnterCritical+0x58>)
 800ec36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec38:	4b0c      	ldr	r3, [pc, #48]	; (800ec6c <vPortEnterCritical+0x58>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d10f      	bne.n	800ec60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec40:	4b0b      	ldr	r3, [pc, #44]	; (800ec70 <vPortEnterCritical+0x5c>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	b2db      	uxtb	r3, r3
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00a      	beq.n	800ec60 <vPortEnterCritical+0x4c>
	__asm volatile
 800ec4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4e:	f383 8811 	msr	BASEPRI, r3
 800ec52:	f3bf 8f6f 	isb	sy
 800ec56:	f3bf 8f4f 	dsb	sy
 800ec5a:	603b      	str	r3, [r7, #0]
}
 800ec5c:	bf00      	nop
 800ec5e:	e7fe      	b.n	800ec5e <vPortEnterCritical+0x4a>
	}
}
 800ec60:	bf00      	nop
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr
 800ec6c:	2000002c 	.word	0x2000002c
 800ec70:	e000ed04 	.word	0xe000ed04

0800ec74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec7a:	4b12      	ldr	r3, [pc, #72]	; (800ecc4 <vPortExitCritical+0x50>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d10a      	bne.n	800ec98 <vPortExitCritical+0x24>
	__asm volatile
 800ec82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec86:	f383 8811 	msr	BASEPRI, r3
 800ec8a:	f3bf 8f6f 	isb	sy
 800ec8e:	f3bf 8f4f 	dsb	sy
 800ec92:	607b      	str	r3, [r7, #4]
}
 800ec94:	bf00      	nop
 800ec96:	e7fe      	b.n	800ec96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ec98:	4b0a      	ldr	r3, [pc, #40]	; (800ecc4 <vPortExitCritical+0x50>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	4a09      	ldr	r2, [pc, #36]	; (800ecc4 <vPortExitCritical+0x50>)
 800eca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eca2:	4b08      	ldr	r3, [pc, #32]	; (800ecc4 <vPortExitCritical+0x50>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d105      	bne.n	800ecb6 <vPortExitCritical+0x42>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	f383 8811 	msr	BASEPRI, r3
}
 800ecb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ecb6:	bf00      	nop
 800ecb8:	370c      	adds	r7, #12
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop
 800ecc4:	2000002c 	.word	0x2000002c
	...

0800ecd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ecd0:	f3ef 8009 	mrs	r0, PSP
 800ecd4:	f3bf 8f6f 	isb	sy
 800ecd8:	4b15      	ldr	r3, [pc, #84]	; (800ed30 <pxCurrentTCBConst>)
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	f01e 0f10 	tst.w	lr, #16
 800ece0:	bf08      	it	eq
 800ece2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ece6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecea:	6010      	str	r0, [r2, #0]
 800ecec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ecf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ecf4:	f380 8811 	msr	BASEPRI, r0
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	f3bf 8f6f 	isb	sy
 800ed00:	f7fe ffc2 	bl	800dc88 <vTaskSwitchContext>
 800ed04:	f04f 0000 	mov.w	r0, #0
 800ed08:	f380 8811 	msr	BASEPRI, r0
 800ed0c:	bc09      	pop	{r0, r3}
 800ed0e:	6819      	ldr	r1, [r3, #0]
 800ed10:	6808      	ldr	r0, [r1, #0]
 800ed12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed16:	f01e 0f10 	tst.w	lr, #16
 800ed1a:	bf08      	it	eq
 800ed1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed20:	f380 8809 	msr	PSP, r0
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	f3af 8000 	nop.w

0800ed30 <pxCurrentTCBConst>:
 800ed30:	20000be0 	.word	0x20000be0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed34:	bf00      	nop
 800ed36:	bf00      	nop

0800ed38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed42:	f383 8811 	msr	BASEPRI, r3
 800ed46:	f3bf 8f6f 	isb	sy
 800ed4a:	f3bf 8f4f 	dsb	sy
 800ed4e:	607b      	str	r3, [r7, #4]
}
 800ed50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed52:	f7fe fedf 	bl	800db14 <xTaskIncrementTick>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d003      	beq.n	800ed64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed5c:	4b06      	ldr	r3, [pc, #24]	; (800ed78 <xPortSysTickHandler+0x40>)
 800ed5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed62:	601a      	str	r2, [r3, #0]
 800ed64:	2300      	movs	r3, #0
 800ed66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	f383 8811 	msr	BASEPRI, r3
}
 800ed6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed70:	bf00      	nop
 800ed72:	3708      	adds	r7, #8
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	e000ed04 	.word	0xe000ed04

0800ed7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed80:	4b0b      	ldr	r3, [pc, #44]	; (800edb0 <vPortSetupTimerInterrupt+0x34>)
 800ed82:	2200      	movs	r2, #0
 800ed84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed86:	4b0b      	ldr	r3, [pc, #44]	; (800edb4 <vPortSetupTimerInterrupt+0x38>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed8c:	4b0a      	ldr	r3, [pc, #40]	; (800edb8 <vPortSetupTimerInterrupt+0x3c>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a0a      	ldr	r2, [pc, #40]	; (800edbc <vPortSetupTimerInterrupt+0x40>)
 800ed92:	fba2 2303 	umull	r2, r3, r2, r3
 800ed96:	099b      	lsrs	r3, r3, #6
 800ed98:	4a09      	ldr	r2, [pc, #36]	; (800edc0 <vPortSetupTimerInterrupt+0x44>)
 800ed9a:	3b01      	subs	r3, #1
 800ed9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed9e:	4b04      	ldr	r3, [pc, #16]	; (800edb0 <vPortSetupTimerInterrupt+0x34>)
 800eda0:	2207      	movs	r2, #7
 800eda2:	601a      	str	r2, [r3, #0]
}
 800eda4:	bf00      	nop
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr
 800edae:	bf00      	nop
 800edb0:	e000e010 	.word	0xe000e010
 800edb4:	e000e018 	.word	0xe000e018
 800edb8:	20000000 	.word	0x20000000
 800edbc:	10624dd3 	.word	0x10624dd3
 800edc0:	e000e014 	.word	0xe000e014

0800edc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800edc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800edd4 <vPortEnableVFP+0x10>
 800edc8:	6801      	ldr	r1, [r0, #0]
 800edca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800edce:	6001      	str	r1, [r0, #0]
 800edd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800edd2:	bf00      	nop
 800edd4:	e000ed88 	.word	0xe000ed88

0800edd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800edde:	f3ef 8305 	mrs	r3, IPSR
 800ede2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2b0f      	cmp	r3, #15
 800ede8:	d914      	bls.n	800ee14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800edea:	4a17      	ldr	r2, [pc, #92]	; (800ee48 <vPortValidateInterruptPriority+0x70>)
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	4413      	add	r3, r2
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800edf4:	4b15      	ldr	r3, [pc, #84]	; (800ee4c <vPortValidateInterruptPriority+0x74>)
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	7afa      	ldrb	r2, [r7, #11]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d20a      	bcs.n	800ee14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800edfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	607b      	str	r3, [r7, #4]
}
 800ee10:	bf00      	nop
 800ee12:	e7fe      	b.n	800ee12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee14:	4b0e      	ldr	r3, [pc, #56]	; (800ee50 <vPortValidateInterruptPriority+0x78>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee1c:	4b0d      	ldr	r3, [pc, #52]	; (800ee54 <vPortValidateInterruptPriority+0x7c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d90a      	bls.n	800ee3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	603b      	str	r3, [r7, #0]
}
 800ee36:	bf00      	nop
 800ee38:	e7fe      	b.n	800ee38 <vPortValidateInterruptPriority+0x60>
	}
 800ee3a:	bf00      	nop
 800ee3c:	3714      	adds	r7, #20
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop
 800ee48:	e000e3f0 	.word	0xe000e3f0
 800ee4c:	2000120c 	.word	0x2000120c
 800ee50:	e000ed0c 	.word	0xe000ed0c
 800ee54:	20001210 	.word	0x20001210

0800ee58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b08a      	sub	sp, #40	; 0x28
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee60:	2300      	movs	r3, #0
 800ee62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee64:	f7fe fd9a 	bl	800d99c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ee68:	4b5b      	ldr	r3, [pc, #364]	; (800efd8 <pvPortMalloc+0x180>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d101      	bne.n	800ee74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee70:	f000 f920 	bl	800f0b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee74:	4b59      	ldr	r3, [pc, #356]	; (800efdc <pvPortMalloc+0x184>)
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	4013      	ands	r3, r2
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f040 8093 	bne.w	800efa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d01d      	beq.n	800eec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ee88:	2208      	movs	r2, #8
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f003 0307 	and.w	r3, r3, #7
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d014      	beq.n	800eec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f023 0307 	bic.w	r3, r3, #7
 800eea0:	3308      	adds	r3, #8
 800eea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f003 0307 	and.w	r3, r3, #7
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00a      	beq.n	800eec4 <pvPortMalloc+0x6c>
	__asm volatile
 800eeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb2:	f383 8811 	msr	BASEPRI, r3
 800eeb6:	f3bf 8f6f 	isb	sy
 800eeba:	f3bf 8f4f 	dsb	sy
 800eebe:	617b      	str	r3, [r7, #20]
}
 800eec0:	bf00      	nop
 800eec2:	e7fe      	b.n	800eec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d06e      	beq.n	800efa8 <pvPortMalloc+0x150>
 800eeca:	4b45      	ldr	r3, [pc, #276]	; (800efe0 <pvPortMalloc+0x188>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d869      	bhi.n	800efa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eed4:	4b43      	ldr	r3, [pc, #268]	; (800efe4 <pvPortMalloc+0x18c>)
 800eed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eed8:	4b42      	ldr	r3, [pc, #264]	; (800efe4 <pvPortMalloc+0x18c>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eede:	e004      	b.n	800eeea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d903      	bls.n	800eefc <pvPortMalloc+0xa4>
 800eef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d1f1      	bne.n	800eee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eefc:	4b36      	ldr	r3, [pc, #216]	; (800efd8 <pvPortMalloc+0x180>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d050      	beq.n	800efa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef06:	6a3b      	ldr	r3, [r7, #32]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2208      	movs	r2, #8
 800ef0c:	4413      	add	r3, r2
 800ef0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	6a3b      	ldr	r3, [r7, #32]
 800ef16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1a:	685a      	ldr	r2, [r3, #4]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	1ad2      	subs	r2, r2, r3
 800ef20:	2308      	movs	r3, #8
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d91f      	bls.n	800ef68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	f003 0307 	and.w	r3, r3, #7
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00a      	beq.n	800ef50 <pvPortMalloc+0xf8>
	__asm volatile
 800ef3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef3e:	f383 8811 	msr	BASEPRI, r3
 800ef42:	f3bf 8f6f 	isb	sy
 800ef46:	f3bf 8f4f 	dsb	sy
 800ef4a:	613b      	str	r3, [r7, #16]
}
 800ef4c:	bf00      	nop
 800ef4e:	e7fe      	b.n	800ef4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef52:	685a      	ldr	r2, [r3, #4]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	1ad2      	subs	r2, r2, r3
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef62:	69b8      	ldr	r0, [r7, #24]
 800ef64:	f000 f908 	bl	800f178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef68:	4b1d      	ldr	r3, [pc, #116]	; (800efe0 <pvPortMalloc+0x188>)
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	4a1b      	ldr	r2, [pc, #108]	; (800efe0 <pvPortMalloc+0x188>)
 800ef74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef76:	4b1a      	ldr	r3, [pc, #104]	; (800efe0 <pvPortMalloc+0x188>)
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	4b1b      	ldr	r3, [pc, #108]	; (800efe8 <pvPortMalloc+0x190>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d203      	bcs.n	800ef8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef82:	4b17      	ldr	r3, [pc, #92]	; (800efe0 <pvPortMalloc+0x188>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	4a18      	ldr	r2, [pc, #96]	; (800efe8 <pvPortMalloc+0x190>)
 800ef88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8c:	685a      	ldr	r2, [r3, #4]
 800ef8e:	4b13      	ldr	r3, [pc, #76]	; (800efdc <pvPortMalloc+0x184>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	431a      	orrs	r2, r3
 800ef94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ef9e:	4b13      	ldr	r3, [pc, #76]	; (800efec <pvPortMalloc+0x194>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	3301      	adds	r3, #1
 800efa4:	4a11      	ldr	r2, [pc, #68]	; (800efec <pvPortMalloc+0x194>)
 800efa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800efa8:	f7fe fd06 	bl	800d9b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	f003 0307 	and.w	r3, r3, #7
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d00a      	beq.n	800efcc <pvPortMalloc+0x174>
	__asm volatile
 800efb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efba:	f383 8811 	msr	BASEPRI, r3
 800efbe:	f3bf 8f6f 	isb	sy
 800efc2:	f3bf 8f4f 	dsb	sy
 800efc6:	60fb      	str	r3, [r7, #12]
}
 800efc8:	bf00      	nop
 800efca:	e7fe      	b.n	800efca <pvPortMalloc+0x172>
	return pvReturn;
 800efcc:	69fb      	ldr	r3, [r7, #28]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3728      	adds	r7, #40	; 0x28
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	20004e1c 	.word	0x20004e1c
 800efdc:	20004e30 	.word	0x20004e30
 800efe0:	20004e20 	.word	0x20004e20
 800efe4:	20004e14 	.word	0x20004e14
 800efe8:	20004e24 	.word	0x20004e24
 800efec:	20004e28 	.word	0x20004e28

0800eff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b086      	sub	sp, #24
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d04d      	beq.n	800f09e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f002:	2308      	movs	r3, #8
 800f004:	425b      	negs	r3, r3
 800f006:	697a      	ldr	r2, [r7, #20]
 800f008:	4413      	add	r3, r2
 800f00a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	685a      	ldr	r2, [r3, #4]
 800f014:	4b24      	ldr	r3, [pc, #144]	; (800f0a8 <vPortFree+0xb8>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4013      	ands	r3, r2
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10a      	bne.n	800f034 <vPortFree+0x44>
	__asm volatile
 800f01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	60fb      	str	r3, [r7, #12]
}
 800f030:	bf00      	nop
 800f032:	e7fe      	b.n	800f032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00a      	beq.n	800f052 <vPortFree+0x62>
	__asm volatile
 800f03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f040:	f383 8811 	msr	BASEPRI, r3
 800f044:	f3bf 8f6f 	isb	sy
 800f048:	f3bf 8f4f 	dsb	sy
 800f04c:	60bb      	str	r3, [r7, #8]
}
 800f04e:	bf00      	nop
 800f050:	e7fe      	b.n	800f050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	685a      	ldr	r2, [r3, #4]
 800f056:	4b14      	ldr	r3, [pc, #80]	; (800f0a8 <vPortFree+0xb8>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4013      	ands	r3, r2
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d01e      	beq.n	800f09e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d11a      	bne.n	800f09e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	685a      	ldr	r2, [r3, #4]
 800f06c:	4b0e      	ldr	r3, [pc, #56]	; (800f0a8 <vPortFree+0xb8>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	43db      	mvns	r3, r3
 800f072:	401a      	ands	r2, r3
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f078:	f7fe fc90 	bl	800d99c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	685a      	ldr	r2, [r3, #4]
 800f080:	4b0a      	ldr	r3, [pc, #40]	; (800f0ac <vPortFree+0xbc>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4413      	add	r3, r2
 800f086:	4a09      	ldr	r2, [pc, #36]	; (800f0ac <vPortFree+0xbc>)
 800f088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f08a:	6938      	ldr	r0, [r7, #16]
 800f08c:	f000 f874 	bl	800f178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f090:	4b07      	ldr	r3, [pc, #28]	; (800f0b0 <vPortFree+0xc0>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	3301      	adds	r3, #1
 800f096:	4a06      	ldr	r2, [pc, #24]	; (800f0b0 <vPortFree+0xc0>)
 800f098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f09a:	f7fe fc8d 	bl	800d9b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f09e:	bf00      	nop
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20004e30 	.word	0x20004e30
 800f0ac:	20004e20 	.word	0x20004e20
 800f0b0:	20004e2c 	.word	0x20004e2c

0800f0b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b085      	sub	sp, #20
 800f0b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f0ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f0be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f0c0:	4b27      	ldr	r3, [pc, #156]	; (800f160 <prvHeapInit+0xac>)
 800f0c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f003 0307 	and.w	r3, r3, #7
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00c      	beq.n	800f0e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	3307      	adds	r3, #7
 800f0d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f023 0307 	bic.w	r3, r3, #7
 800f0da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	1ad3      	subs	r3, r2, r3
 800f0e2:	4a1f      	ldr	r2, [pc, #124]	; (800f160 <prvHeapInit+0xac>)
 800f0e4:	4413      	add	r3, r2
 800f0e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0ec:	4a1d      	ldr	r2, [pc, #116]	; (800f164 <prvHeapInit+0xb0>)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f0f2:	4b1c      	ldr	r3, [pc, #112]	; (800f164 <prvHeapInit+0xb0>)
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f100:	2208      	movs	r2, #8
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	1a9b      	subs	r3, r3, r2
 800f106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f023 0307 	bic.w	r3, r3, #7
 800f10e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	4a15      	ldr	r2, [pc, #84]	; (800f168 <prvHeapInit+0xb4>)
 800f114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f116:	4b14      	ldr	r3, [pc, #80]	; (800f168 <prvHeapInit+0xb4>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	2200      	movs	r2, #0
 800f11c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f11e:	4b12      	ldr	r3, [pc, #72]	; (800f168 <prvHeapInit+0xb4>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2200      	movs	r2, #0
 800f124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	68fa      	ldr	r2, [r7, #12]
 800f12e:	1ad2      	subs	r2, r2, r3
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f134:	4b0c      	ldr	r3, [pc, #48]	; (800f168 <prvHeapInit+0xb4>)
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	4a0a      	ldr	r2, [pc, #40]	; (800f16c <prvHeapInit+0xb8>)
 800f142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	685b      	ldr	r3, [r3, #4]
 800f148:	4a09      	ldr	r2, [pc, #36]	; (800f170 <prvHeapInit+0xbc>)
 800f14a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f14c:	4b09      	ldr	r3, [pc, #36]	; (800f174 <prvHeapInit+0xc0>)
 800f14e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f152:	601a      	str	r2, [r3, #0]
}
 800f154:	bf00      	nop
 800f156:	3714      	adds	r7, #20
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr
 800f160:	20001214 	.word	0x20001214
 800f164:	20004e14 	.word	0x20004e14
 800f168:	20004e1c 	.word	0x20004e1c
 800f16c:	20004e24 	.word	0x20004e24
 800f170:	20004e20 	.word	0x20004e20
 800f174:	20004e30 	.word	0x20004e30

0800f178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f180:	4b28      	ldr	r3, [pc, #160]	; (800f224 <prvInsertBlockIntoFreeList+0xac>)
 800f182:	60fb      	str	r3, [r7, #12]
 800f184:	e002      	b.n	800f18c <prvInsertBlockIntoFreeList+0x14>
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	60fb      	str	r3, [r7, #12]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	429a      	cmp	r2, r3
 800f194:	d8f7      	bhi.n	800f186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	68ba      	ldr	r2, [r7, #8]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d108      	bne.n	800f1ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	685a      	ldr	r2, [r3, #4]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	441a      	add	r2, r3
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	68ba      	ldr	r2, [r7, #8]
 800f1c4:	441a      	add	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d118      	bne.n	800f200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	4b15      	ldr	r3, [pc, #84]	; (800f228 <prvInsertBlockIntoFreeList+0xb0>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d00d      	beq.n	800f1f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	685a      	ldr	r2, [r3, #4]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	441a      	add	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	601a      	str	r2, [r3, #0]
 800f1f4:	e008      	b.n	800f208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f1f6:	4b0c      	ldr	r3, [pc, #48]	; (800f228 <prvInsertBlockIntoFreeList+0xb0>)
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	e003      	b.n	800f208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f208:	68fa      	ldr	r2, [r7, #12]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d002      	beq.n	800f216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f216:	bf00      	nop
 800f218:	3714      	adds	r7, #20
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop
 800f224:	20004e14 	.word	0x20004e14
 800f228:	20004e1c 	.word	0x20004e1c

0800f22c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f230:	2201      	movs	r2, #1
 800f232:	490e      	ldr	r1, [pc, #56]	; (800f26c <MX_USB_HOST_Init+0x40>)
 800f234:	480e      	ldr	r0, [pc, #56]	; (800f270 <MX_USB_HOST_Init+0x44>)
 800f236:	f7fb faf3 	bl	800a820 <USBH_Init>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d001      	beq.n	800f244 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f240:	f7f2 fde8 	bl	8001e14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f244:	490b      	ldr	r1, [pc, #44]	; (800f274 <MX_USB_HOST_Init+0x48>)
 800f246:	480a      	ldr	r0, [pc, #40]	; (800f270 <MX_USB_HOST_Init+0x44>)
 800f248:	f7fb fb9a 	bl	800a980 <USBH_RegisterClass>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f252:	f7f2 fddf 	bl	8001e14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f256:	4806      	ldr	r0, [pc, #24]	; (800f270 <MX_USB_HOST_Init+0x44>)
 800f258:	f7fb fc1e 	bl	800aa98 <USBH_Start>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d001      	beq.n	800f266 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f262:	f7f2 fdd7 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f266:	bf00      	nop
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	0800f279 	.word	0x0800f279
 800f270:	20005104 	.word	0x20005104
 800f274:	2000000c 	.word	0x2000000c

0800f278 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	460b      	mov	r3, r1
 800f282:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f284:	78fb      	ldrb	r3, [r7, #3]
 800f286:	3b01      	subs	r3, #1
 800f288:	2b04      	cmp	r3, #4
 800f28a:	d819      	bhi.n	800f2c0 <USBH_UserProcess+0x48>
 800f28c:	a201      	add	r2, pc, #4	; (adr r2, 800f294 <USBH_UserProcess+0x1c>)
 800f28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f292:	bf00      	nop
 800f294:	0800f2c1 	.word	0x0800f2c1
 800f298:	0800f2b1 	.word	0x0800f2b1
 800f29c:	0800f2c1 	.word	0x0800f2c1
 800f2a0:	0800f2b9 	.word	0x0800f2b9
 800f2a4:	0800f2a9 	.word	0x0800f2a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f2a8:	4b09      	ldr	r3, [pc, #36]	; (800f2d0 <USBH_UserProcess+0x58>)
 800f2aa:	2203      	movs	r2, #3
 800f2ac:	701a      	strb	r2, [r3, #0]
  break;
 800f2ae:	e008      	b.n	800f2c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f2b0:	4b07      	ldr	r3, [pc, #28]	; (800f2d0 <USBH_UserProcess+0x58>)
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	701a      	strb	r2, [r3, #0]
  break;
 800f2b6:	e004      	b.n	800f2c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f2b8:	4b05      	ldr	r3, [pc, #20]	; (800f2d0 <USBH_UserProcess+0x58>)
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	701a      	strb	r2, [r3, #0]
  break;
 800f2be:	e000      	b.n	800f2c2 <USBH_UserProcess+0x4a>

  default:
  break;
 800f2c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f2c2:	bf00      	nop
 800f2c4:	370c      	adds	r7, #12
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr
 800f2ce:	bf00      	nop
 800f2d0:	20004e34 	.word	0x20004e34

0800f2d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b08a      	sub	sp, #40	; 0x28
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2dc:	f107 0314 	add.w	r3, r7, #20
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	601a      	str	r2, [r3, #0]
 800f2e4:	605a      	str	r2, [r3, #4]
 800f2e6:	609a      	str	r2, [r3, #8]
 800f2e8:	60da      	str	r2, [r3, #12]
 800f2ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f2f4:	d147      	bne.n	800f386 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	613b      	str	r3, [r7, #16]
 800f2fa:	4b25      	ldr	r3, [pc, #148]	; (800f390 <HAL_HCD_MspInit+0xbc>)
 800f2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2fe:	4a24      	ldr	r2, [pc, #144]	; (800f390 <HAL_HCD_MspInit+0xbc>)
 800f300:	f043 0301 	orr.w	r3, r3, #1
 800f304:	6313      	str	r3, [r2, #48]	; 0x30
 800f306:	4b22      	ldr	r3, [pc, #136]	; (800f390 <HAL_HCD_MspInit+0xbc>)
 800f308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f30a:	f003 0301 	and.w	r3, r3, #1
 800f30e:	613b      	str	r3, [r7, #16]
 800f310:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f312:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f318:	2300      	movs	r3, #0
 800f31a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f31c:	2300      	movs	r3, #0
 800f31e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f320:	f107 0314 	add.w	r3, r7, #20
 800f324:	4619      	mov	r1, r3
 800f326:	481b      	ldr	r0, [pc, #108]	; (800f394 <HAL_HCD_MspInit+0xc0>)
 800f328:	f7f3 ff10 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f32c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f332:	2302      	movs	r3, #2
 800f334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f336:	2300      	movs	r3, #0
 800f338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f33a:	2300      	movs	r3, #0
 800f33c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f33e:	230a      	movs	r3, #10
 800f340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f342:	f107 0314 	add.w	r3, r7, #20
 800f346:	4619      	mov	r1, r3
 800f348:	4812      	ldr	r0, [pc, #72]	; (800f394 <HAL_HCD_MspInit+0xc0>)
 800f34a:	f7f3 feff 	bl	800314c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f34e:	4b10      	ldr	r3, [pc, #64]	; (800f390 <HAL_HCD_MspInit+0xbc>)
 800f350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f352:	4a0f      	ldr	r2, [pc, #60]	; (800f390 <HAL_HCD_MspInit+0xbc>)
 800f354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f358:	6353      	str	r3, [r2, #52]	; 0x34
 800f35a:	2300      	movs	r3, #0
 800f35c:	60fb      	str	r3, [r7, #12]
 800f35e:	4b0c      	ldr	r3, [pc, #48]	; (800f390 <HAL_HCD_MspInit+0xbc>)
 800f360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f362:	4a0b      	ldr	r2, [pc, #44]	; (800f390 <HAL_HCD_MspInit+0xbc>)
 800f364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f368:	6453      	str	r3, [r2, #68]	; 0x44
 800f36a:	4b09      	ldr	r3, [pc, #36]	; (800f390 <HAL_HCD_MspInit+0xbc>)
 800f36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f36e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f372:	60fb      	str	r3, [r7, #12]
 800f374:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f376:	2200      	movs	r2, #0
 800f378:	2105      	movs	r1, #5
 800f37a:	2043      	movs	r0, #67	; 0x43
 800f37c:	f7f3 fe2a 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f380:	2043      	movs	r0, #67	; 0x43
 800f382:	f7f3 fe43 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f386:	bf00      	nop
 800f388:	3728      	adds	r7, #40	; 0x28
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop
 800f390:	40023800 	.word	0x40023800
 800f394:	40020000 	.word	0x40020000

0800f398 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fc f823 	bl	800b3f2 <USBH_LL_IncTimer>
}
 800f3ac:	bf00      	nop
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fc f867 	bl	800b496 <USBH_LL_Connect>
}
 800f3c8:	bf00      	nop
 800f3ca:	3708      	adds	r7, #8
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fc f87c 	bl	800b4dc <USBH_LL_Disconnect>
}
 800f3e4:	bf00      	nop
 800f3e6:	3708      	adds	r7, #8
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	70fb      	strb	r3, [r7, #3]
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f402:	4618      	mov	r0, r3
 800f404:	f7fc f8b3 	bl	800b56e <USBH_LL_NotifyURBChange>
#endif
}
 800f408:	bf00      	nop
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fc f811 	bl	800b446 <USBH_LL_PortEnabled>
}
 800f424:	bf00      	nop
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fc f81d 	bl	800b47a <USBH_LL_PortDisabled>
}
 800f440:	bf00      	nop
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f456:	2b01      	cmp	r3, #1
 800f458:	d12a      	bne.n	800f4b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f45a:	4a18      	ldr	r2, [pc, #96]	; (800f4bc <USBH_LL_Init+0x74>)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	4a15      	ldr	r2, [pc, #84]	; (800f4bc <USBH_LL_Init+0x74>)
 800f466:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f46a:	4b14      	ldr	r3, [pc, #80]	; (800f4bc <USBH_LL_Init+0x74>)
 800f46c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f470:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f472:	4b12      	ldr	r3, [pc, #72]	; (800f4bc <USBH_LL_Init+0x74>)
 800f474:	2208      	movs	r2, #8
 800f476:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f478:	4b10      	ldr	r3, [pc, #64]	; (800f4bc <USBH_LL_Init+0x74>)
 800f47a:	2201      	movs	r2, #1
 800f47c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f47e:	4b0f      	ldr	r3, [pc, #60]	; (800f4bc <USBH_LL_Init+0x74>)
 800f480:	2200      	movs	r2, #0
 800f482:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f484:	4b0d      	ldr	r3, [pc, #52]	; (800f4bc <USBH_LL_Init+0x74>)
 800f486:	2202      	movs	r2, #2
 800f488:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f48a:	4b0c      	ldr	r3, [pc, #48]	; (800f4bc <USBH_LL_Init+0x74>)
 800f48c:	2200      	movs	r2, #0
 800f48e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f490:	480a      	ldr	r0, [pc, #40]	; (800f4bc <USBH_LL_Init+0x74>)
 800f492:	f7f4 f82a 	bl	80034ea <HAL_HCD_Init>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d001      	beq.n	800f4a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f49c:	f7f2 fcba 	bl	8001e14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f4a0:	4806      	ldr	r0, [pc, #24]	; (800f4bc <USBH_LL_Init+0x74>)
 800f4a2:	f7f4 fc07 	bl	8003cb4 <HAL_HCD_GetCurrentFrame>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f7fb ff92 	bl	800b3d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f4b0:	2300      	movs	r3, #0
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3708      	adds	r7, #8
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
 800f4ba:	bf00      	nop
 800f4bc:	200054e8 	.word	0x200054e8

0800f4c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7f4 fb76 	bl	8003bc8 <HAL_HCD_Start>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f4e0:	7bfb      	ldrb	r3, [r7, #15]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 f95c 	bl	800f7a0 <USBH_Get_USB_Status>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3710      	adds	r7, #16
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}

0800f4f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b084      	sub	sp, #16
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4fe:	2300      	movs	r3, #0
 800f500:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f502:	2300      	movs	r3, #0
 800f504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7f4 fb7e 	bl	8003c0e <HAL_HCD_Stop>
 800f512:	4603      	mov	r3, r0
 800f514:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f516:	7bfb      	ldrb	r3, [r7, #15]
 800f518:	4618      	mov	r0, r3
 800f51a:	f000 f941 	bl	800f7a0 <USBH_Get_USB_Status>
 800f51e:	4603      	mov	r3, r0
 800f520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f522:	7bbb      	ldrb	r3, [r7, #14]
}
 800f524:	4618      	mov	r0, r3
 800f526:	3710      	adds	r7, #16
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f534:	2301      	movs	r3, #1
 800f536:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f53e:	4618      	mov	r0, r3
 800f540:	f7f4 fbc6 	bl	8003cd0 <HAL_HCD_GetCurrentSpeed>
 800f544:	4603      	mov	r3, r0
 800f546:	2b02      	cmp	r3, #2
 800f548:	d00c      	beq.n	800f564 <USBH_LL_GetSpeed+0x38>
 800f54a:	2b02      	cmp	r3, #2
 800f54c:	d80d      	bhi.n	800f56a <USBH_LL_GetSpeed+0x3e>
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d002      	beq.n	800f558 <USBH_LL_GetSpeed+0x2c>
 800f552:	2b01      	cmp	r3, #1
 800f554:	d003      	beq.n	800f55e <USBH_LL_GetSpeed+0x32>
 800f556:	e008      	b.n	800f56a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f558:	2300      	movs	r3, #0
 800f55a:	73fb      	strb	r3, [r7, #15]
    break;
 800f55c:	e008      	b.n	800f570 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f55e:	2301      	movs	r3, #1
 800f560:	73fb      	strb	r3, [r7, #15]
    break;
 800f562:	e005      	b.n	800f570 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f564:	2302      	movs	r3, #2
 800f566:	73fb      	strb	r3, [r7, #15]
    break;
 800f568:	e002      	b.n	800f570 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f56a:	2301      	movs	r3, #1
 800f56c:	73fb      	strb	r3, [r7, #15]
    break;
 800f56e:	bf00      	nop
  }
  return  speed;
 800f570:	7bfb      	ldrb	r3, [r7, #15]
}
 800f572:	4618      	mov	r0, r3
 800f574:	3710      	adds	r7, #16
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f57a:	b580      	push	{r7, lr}
 800f57c:	b084      	sub	sp, #16
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f582:	2300      	movs	r3, #0
 800f584:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f586:	2300      	movs	r3, #0
 800f588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f590:	4618      	mov	r0, r3
 800f592:	f7f4 fb59 	bl	8003c48 <HAL_HCD_ResetPort>
 800f596:	4603      	mov	r3, r0
 800f598:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f59a:	7bfb      	ldrb	r3, [r7, #15]
 800f59c:	4618      	mov	r0, r3
 800f59e:	f000 f8ff 	bl	800f7a0 <USBH_Get_USB_Status>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3710      	adds	r7, #16
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f5c2:	78fa      	ldrb	r2, [r7, #3]
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7f4 fb60 	bl	8003c8c <HAL_HCD_HC_GetXferCount>
 800f5cc:	4603      	mov	r3, r0
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3708      	adds	r7, #8
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f5d6:	b590      	push	{r4, r7, lr}
 800f5d8:	b089      	sub	sp, #36	; 0x24
 800f5da:	af04      	add	r7, sp, #16
 800f5dc:	6078      	str	r0, [r7, #4]
 800f5de:	4608      	mov	r0, r1
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	70fb      	strb	r3, [r7, #3]
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	70bb      	strb	r3, [r7, #2]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f5fe:	787c      	ldrb	r4, [r7, #1]
 800f600:	78ba      	ldrb	r2, [r7, #2]
 800f602:	78f9      	ldrb	r1, [r7, #3]
 800f604:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f606:	9302      	str	r3, [sp, #8]
 800f608:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f60c:	9301      	str	r3, [sp, #4]
 800f60e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f612:	9300      	str	r3, [sp, #0]
 800f614:	4623      	mov	r3, r4
 800f616:	f7f3 ffca 	bl	80035ae <HAL_HCD_HC_Init>
 800f61a:	4603      	mov	r3, r0
 800f61c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f61e:	7bfb      	ldrb	r3, [r7, #15]
 800f620:	4618      	mov	r0, r3
 800f622:	f000 f8bd 	bl	800f7a0 <USBH_Get_USB_Status>
 800f626:	4603      	mov	r3, r0
 800f628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f62a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3714      	adds	r7, #20
 800f630:	46bd      	mov	sp, r7
 800f632:	bd90      	pop	{r4, r7, pc}

0800f634 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	460b      	mov	r3, r1
 800f63e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f640:	2300      	movs	r3, #0
 800f642:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f644:	2300      	movs	r3, #0
 800f646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f64e:	78fa      	ldrb	r2, [r7, #3]
 800f650:	4611      	mov	r1, r2
 800f652:	4618      	mov	r0, r3
 800f654:	f7f4 f83a 	bl	80036cc <HAL_HCD_HC_Halt>
 800f658:	4603      	mov	r3, r0
 800f65a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f65c:	7bfb      	ldrb	r3, [r7, #15]
 800f65e:	4618      	mov	r0, r3
 800f660:	f000 f89e 	bl	800f7a0 <USBH_Get_USB_Status>
 800f664:	4603      	mov	r3, r0
 800f666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f668:	7bbb      	ldrb	r3, [r7, #14]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}

0800f672 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f672:	b590      	push	{r4, r7, lr}
 800f674:	b089      	sub	sp, #36	; 0x24
 800f676:	af04      	add	r7, sp, #16
 800f678:	6078      	str	r0, [r7, #4]
 800f67a:	4608      	mov	r0, r1
 800f67c:	4611      	mov	r1, r2
 800f67e:	461a      	mov	r2, r3
 800f680:	4603      	mov	r3, r0
 800f682:	70fb      	strb	r3, [r7, #3]
 800f684:	460b      	mov	r3, r1
 800f686:	70bb      	strb	r3, [r7, #2]
 800f688:	4613      	mov	r3, r2
 800f68a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f68c:	2300      	movs	r3, #0
 800f68e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f690:	2300      	movs	r3, #0
 800f692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f69a:	787c      	ldrb	r4, [r7, #1]
 800f69c:	78ba      	ldrb	r2, [r7, #2]
 800f69e:	78f9      	ldrb	r1, [r7, #3]
 800f6a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6a4:	9303      	str	r3, [sp, #12]
 800f6a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f6a8:	9302      	str	r3, [sp, #8]
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	9301      	str	r3, [sp, #4]
 800f6ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	4623      	mov	r3, r4
 800f6b6:	f7f4 f82d 	bl	8003714 <HAL_HCD_HC_SubmitRequest>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f6be:	7bfb      	ldrb	r3, [r7, #15]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f000 f86d 	bl	800f7a0 <USBH_Get_USB_Status>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3714      	adds	r7, #20
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd90      	pop	{r4, r7, pc}

0800f6d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	460b      	mov	r3, r1
 800f6de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f6e6:	78fa      	ldrb	r2, [r7, #3]
 800f6e8:	4611      	mov	r1, r2
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7f4 faba 	bl	8003c64 <HAL_HCD_HC_GetURBState>
 800f6f0:	4603      	mov	r3, r0
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3708      	adds	r7, #8
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}

0800f6fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f6fa:	b580      	push	{r7, lr}
 800f6fc:	b082      	sub	sp, #8
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
 800f702:	460b      	mov	r3, r1
 800f704:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d103      	bne.n	800f718 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f710:	78fb      	ldrb	r3, [r7, #3]
 800f712:	4618      	mov	r0, r3
 800f714:	f000 f870 	bl	800f7f8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f718:	20c8      	movs	r0, #200	; 0xc8
 800f71a:	f7f3 fb7f 	bl	8002e1c <HAL_Delay>
  return USBH_OK;
 800f71e:	2300      	movs	r3, #0
}
 800f720:	4618      	mov	r0, r3
 800f722:	3708      	adds	r7, #8
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f728:	b480      	push	{r7}
 800f72a:	b085      	sub	sp, #20
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	460b      	mov	r3, r1
 800f732:	70fb      	strb	r3, [r7, #3]
 800f734:	4613      	mov	r3, r2
 800f736:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f73e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f740:	78fb      	ldrb	r3, [r7, #3]
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	212c      	movs	r1, #44	; 0x2c
 800f746:	fb01 f303 	mul.w	r3, r1, r3
 800f74a:	4413      	add	r3, r2
 800f74c:	333b      	adds	r3, #59	; 0x3b
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d009      	beq.n	800f768 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f754:	78fb      	ldrb	r3, [r7, #3]
 800f756:	68fa      	ldr	r2, [r7, #12]
 800f758:	212c      	movs	r1, #44	; 0x2c
 800f75a:	fb01 f303 	mul.w	r3, r1, r3
 800f75e:	4413      	add	r3, r2
 800f760:	3354      	adds	r3, #84	; 0x54
 800f762:	78ba      	ldrb	r2, [r7, #2]
 800f764:	701a      	strb	r2, [r3, #0]
 800f766:	e008      	b.n	800f77a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f768:	78fb      	ldrb	r3, [r7, #3]
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	212c      	movs	r1, #44	; 0x2c
 800f76e:	fb01 f303 	mul.w	r3, r1, r3
 800f772:	4413      	add	r3, r2
 800f774:	3355      	adds	r3, #85	; 0x55
 800f776:	78ba      	ldrb	r2, [r7, #2]
 800f778:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f77a:	2300      	movs	r3, #0
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f7f3 fb43 	bl	8002e1c <HAL_Delay>
}
 800f796:	bf00      	nop
 800f798:	3708      	adds	r7, #8
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
	...

0800f7a0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b085      	sub	sp, #20
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f7ae:	79fb      	ldrb	r3, [r7, #7]
 800f7b0:	2b03      	cmp	r3, #3
 800f7b2:	d817      	bhi.n	800f7e4 <USBH_Get_USB_Status+0x44>
 800f7b4:	a201      	add	r2, pc, #4	; (adr r2, 800f7bc <USBH_Get_USB_Status+0x1c>)
 800f7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ba:	bf00      	nop
 800f7bc:	0800f7cd 	.word	0x0800f7cd
 800f7c0:	0800f7d3 	.word	0x0800f7d3
 800f7c4:	0800f7d9 	.word	0x0800f7d9
 800f7c8:	0800f7df 	.word	0x0800f7df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f7d0:	e00b      	b.n	800f7ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f7d2:	2302      	movs	r3, #2
 800f7d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f7d6:	e008      	b.n	800f7ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	73fb      	strb	r3, [r7, #15]
    break;
 800f7dc:	e005      	b.n	800f7ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f7de:	2302      	movs	r3, #2
 800f7e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f7e2:	e002      	b.n	800f7ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f7e4:	2302      	movs	r3, #2
 800f7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f7e8:	bf00      	nop
  }
  return usb_status;
 800f7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3714      	adds	r7, #20
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	4603      	mov	r3, r0
 800f800:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f802:	79fb      	ldrb	r3, [r7, #7]
 800f804:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f806:	79fb      	ldrb	r3, [r7, #7]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d102      	bne.n	800f812 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f80c:	2301      	movs	r3, #1
 800f80e:	73fb      	strb	r3, [r7, #15]
 800f810:	e001      	b.n	800f816 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f812:	2300      	movs	r3, #0
 800f814:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f816:	7bfb      	ldrb	r3, [r7, #15]
 800f818:	461a      	mov	r2, r3
 800f81a:	2101      	movs	r1, #1
 800f81c:	4803      	ldr	r0, [pc, #12]	; (800f82c <MX_DriverVbusFS+0x34>)
 800f81e:	f7f3 fe31 	bl	8003484 <HAL_GPIO_WritePin>
}
 800f822:	bf00      	nop
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	40020800 	.word	0x40020800

0800f830 <__errno>:
 800f830:	4b01      	ldr	r3, [pc, #4]	; (800f838 <__errno+0x8>)
 800f832:	6818      	ldr	r0, [r3, #0]
 800f834:	4770      	bx	lr
 800f836:	bf00      	nop
 800f838:	20000030 	.word	0x20000030

0800f83c <__libc_init_array>:
 800f83c:	b570      	push	{r4, r5, r6, lr}
 800f83e:	4d0d      	ldr	r5, [pc, #52]	; (800f874 <__libc_init_array+0x38>)
 800f840:	4c0d      	ldr	r4, [pc, #52]	; (800f878 <__libc_init_array+0x3c>)
 800f842:	1b64      	subs	r4, r4, r5
 800f844:	10a4      	asrs	r4, r4, #2
 800f846:	2600      	movs	r6, #0
 800f848:	42a6      	cmp	r6, r4
 800f84a:	d109      	bne.n	800f860 <__libc_init_array+0x24>
 800f84c:	4d0b      	ldr	r5, [pc, #44]	; (800f87c <__libc_init_array+0x40>)
 800f84e:	4c0c      	ldr	r4, [pc, #48]	; (800f880 <__libc_init_array+0x44>)
 800f850:	f000 f986 	bl	800fb60 <_init>
 800f854:	1b64      	subs	r4, r4, r5
 800f856:	10a4      	asrs	r4, r4, #2
 800f858:	2600      	movs	r6, #0
 800f85a:	42a6      	cmp	r6, r4
 800f85c:	d105      	bne.n	800f86a <__libc_init_array+0x2e>
 800f85e:	bd70      	pop	{r4, r5, r6, pc}
 800f860:	f855 3b04 	ldr.w	r3, [r5], #4
 800f864:	4798      	blx	r3
 800f866:	3601      	adds	r6, #1
 800f868:	e7ee      	b.n	800f848 <__libc_init_array+0xc>
 800f86a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f86e:	4798      	blx	r3
 800f870:	3601      	adds	r6, #1
 800f872:	e7f2      	b.n	800f85a <__libc_init_array+0x1e>
 800f874:	08011444 	.word	0x08011444
 800f878:	08011444 	.word	0x08011444
 800f87c:	08011444 	.word	0x08011444
 800f880:	08011448 	.word	0x08011448

0800f884 <malloc>:
 800f884:	4b02      	ldr	r3, [pc, #8]	; (800f890 <malloc+0xc>)
 800f886:	4601      	mov	r1, r0
 800f888:	6818      	ldr	r0, [r3, #0]
 800f88a:	f000 b871 	b.w	800f970 <_malloc_r>
 800f88e:	bf00      	nop
 800f890:	20000030 	.word	0x20000030

0800f894 <free>:
 800f894:	4b02      	ldr	r3, [pc, #8]	; (800f8a0 <free+0xc>)
 800f896:	4601      	mov	r1, r0
 800f898:	6818      	ldr	r0, [r3, #0]
 800f89a:	f000 b819 	b.w	800f8d0 <_free_r>
 800f89e:	bf00      	nop
 800f8a0:	20000030 	.word	0x20000030

0800f8a4 <memcpy>:
 800f8a4:	440a      	add	r2, r1
 800f8a6:	4291      	cmp	r1, r2
 800f8a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f8ac:	d100      	bne.n	800f8b0 <memcpy+0xc>
 800f8ae:	4770      	bx	lr
 800f8b0:	b510      	push	{r4, lr}
 800f8b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8ba:	4291      	cmp	r1, r2
 800f8bc:	d1f9      	bne.n	800f8b2 <memcpy+0xe>
 800f8be:	bd10      	pop	{r4, pc}

0800f8c0 <memset>:
 800f8c0:	4402      	add	r2, r0
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d100      	bne.n	800f8ca <memset+0xa>
 800f8c8:	4770      	bx	lr
 800f8ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f8ce:	e7f9      	b.n	800f8c4 <memset+0x4>

0800f8d0 <_free_r>:
 800f8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8d2:	2900      	cmp	r1, #0
 800f8d4:	d048      	beq.n	800f968 <_free_r+0x98>
 800f8d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8da:	9001      	str	r0, [sp, #4]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	f1a1 0404 	sub.w	r4, r1, #4
 800f8e2:	bfb8      	it	lt
 800f8e4:	18e4      	addlt	r4, r4, r3
 800f8e6:	f000 f8ad 	bl	800fa44 <__malloc_lock>
 800f8ea:	4a20      	ldr	r2, [pc, #128]	; (800f96c <_free_r+0x9c>)
 800f8ec:	9801      	ldr	r0, [sp, #4]
 800f8ee:	6813      	ldr	r3, [r2, #0]
 800f8f0:	4615      	mov	r5, r2
 800f8f2:	b933      	cbnz	r3, 800f902 <_free_r+0x32>
 800f8f4:	6063      	str	r3, [r4, #4]
 800f8f6:	6014      	str	r4, [r2, #0]
 800f8f8:	b003      	add	sp, #12
 800f8fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8fe:	f000 b8a7 	b.w	800fa50 <__malloc_unlock>
 800f902:	42a3      	cmp	r3, r4
 800f904:	d90b      	bls.n	800f91e <_free_r+0x4e>
 800f906:	6821      	ldr	r1, [r4, #0]
 800f908:	1862      	adds	r2, r4, r1
 800f90a:	4293      	cmp	r3, r2
 800f90c:	bf04      	itt	eq
 800f90e:	681a      	ldreq	r2, [r3, #0]
 800f910:	685b      	ldreq	r3, [r3, #4]
 800f912:	6063      	str	r3, [r4, #4]
 800f914:	bf04      	itt	eq
 800f916:	1852      	addeq	r2, r2, r1
 800f918:	6022      	streq	r2, [r4, #0]
 800f91a:	602c      	str	r4, [r5, #0]
 800f91c:	e7ec      	b.n	800f8f8 <_free_r+0x28>
 800f91e:	461a      	mov	r2, r3
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	b10b      	cbz	r3, 800f928 <_free_r+0x58>
 800f924:	42a3      	cmp	r3, r4
 800f926:	d9fa      	bls.n	800f91e <_free_r+0x4e>
 800f928:	6811      	ldr	r1, [r2, #0]
 800f92a:	1855      	adds	r5, r2, r1
 800f92c:	42a5      	cmp	r5, r4
 800f92e:	d10b      	bne.n	800f948 <_free_r+0x78>
 800f930:	6824      	ldr	r4, [r4, #0]
 800f932:	4421      	add	r1, r4
 800f934:	1854      	adds	r4, r2, r1
 800f936:	42a3      	cmp	r3, r4
 800f938:	6011      	str	r1, [r2, #0]
 800f93a:	d1dd      	bne.n	800f8f8 <_free_r+0x28>
 800f93c:	681c      	ldr	r4, [r3, #0]
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	6053      	str	r3, [r2, #4]
 800f942:	4421      	add	r1, r4
 800f944:	6011      	str	r1, [r2, #0]
 800f946:	e7d7      	b.n	800f8f8 <_free_r+0x28>
 800f948:	d902      	bls.n	800f950 <_free_r+0x80>
 800f94a:	230c      	movs	r3, #12
 800f94c:	6003      	str	r3, [r0, #0]
 800f94e:	e7d3      	b.n	800f8f8 <_free_r+0x28>
 800f950:	6825      	ldr	r5, [r4, #0]
 800f952:	1961      	adds	r1, r4, r5
 800f954:	428b      	cmp	r3, r1
 800f956:	bf04      	itt	eq
 800f958:	6819      	ldreq	r1, [r3, #0]
 800f95a:	685b      	ldreq	r3, [r3, #4]
 800f95c:	6063      	str	r3, [r4, #4]
 800f95e:	bf04      	itt	eq
 800f960:	1949      	addeq	r1, r1, r5
 800f962:	6021      	streq	r1, [r4, #0]
 800f964:	6054      	str	r4, [r2, #4]
 800f966:	e7c7      	b.n	800f8f8 <_free_r+0x28>
 800f968:	b003      	add	sp, #12
 800f96a:	bd30      	pop	{r4, r5, pc}
 800f96c:	20004e38 	.word	0x20004e38

0800f970 <_malloc_r>:
 800f970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f972:	1ccd      	adds	r5, r1, #3
 800f974:	f025 0503 	bic.w	r5, r5, #3
 800f978:	3508      	adds	r5, #8
 800f97a:	2d0c      	cmp	r5, #12
 800f97c:	bf38      	it	cc
 800f97e:	250c      	movcc	r5, #12
 800f980:	2d00      	cmp	r5, #0
 800f982:	4606      	mov	r6, r0
 800f984:	db01      	blt.n	800f98a <_malloc_r+0x1a>
 800f986:	42a9      	cmp	r1, r5
 800f988:	d903      	bls.n	800f992 <_malloc_r+0x22>
 800f98a:	230c      	movs	r3, #12
 800f98c:	6033      	str	r3, [r6, #0]
 800f98e:	2000      	movs	r0, #0
 800f990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f992:	f000 f857 	bl	800fa44 <__malloc_lock>
 800f996:	4921      	ldr	r1, [pc, #132]	; (800fa1c <_malloc_r+0xac>)
 800f998:	680a      	ldr	r2, [r1, #0]
 800f99a:	4614      	mov	r4, r2
 800f99c:	b99c      	cbnz	r4, 800f9c6 <_malloc_r+0x56>
 800f99e:	4f20      	ldr	r7, [pc, #128]	; (800fa20 <_malloc_r+0xb0>)
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	b923      	cbnz	r3, 800f9ae <_malloc_r+0x3e>
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	f000 f83c 	bl	800fa24 <_sbrk_r>
 800f9ac:	6038      	str	r0, [r7, #0]
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	f000 f837 	bl	800fa24 <_sbrk_r>
 800f9b6:	1c43      	adds	r3, r0, #1
 800f9b8:	d123      	bne.n	800fa02 <_malloc_r+0x92>
 800f9ba:	230c      	movs	r3, #12
 800f9bc:	6033      	str	r3, [r6, #0]
 800f9be:	4630      	mov	r0, r6
 800f9c0:	f000 f846 	bl	800fa50 <__malloc_unlock>
 800f9c4:	e7e3      	b.n	800f98e <_malloc_r+0x1e>
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	1b5b      	subs	r3, r3, r5
 800f9ca:	d417      	bmi.n	800f9fc <_malloc_r+0x8c>
 800f9cc:	2b0b      	cmp	r3, #11
 800f9ce:	d903      	bls.n	800f9d8 <_malloc_r+0x68>
 800f9d0:	6023      	str	r3, [r4, #0]
 800f9d2:	441c      	add	r4, r3
 800f9d4:	6025      	str	r5, [r4, #0]
 800f9d6:	e004      	b.n	800f9e2 <_malloc_r+0x72>
 800f9d8:	6863      	ldr	r3, [r4, #4]
 800f9da:	42a2      	cmp	r2, r4
 800f9dc:	bf0c      	ite	eq
 800f9de:	600b      	streq	r3, [r1, #0]
 800f9e0:	6053      	strne	r3, [r2, #4]
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	f000 f834 	bl	800fa50 <__malloc_unlock>
 800f9e8:	f104 000b 	add.w	r0, r4, #11
 800f9ec:	1d23      	adds	r3, r4, #4
 800f9ee:	f020 0007 	bic.w	r0, r0, #7
 800f9f2:	1ac2      	subs	r2, r0, r3
 800f9f4:	d0cc      	beq.n	800f990 <_malloc_r+0x20>
 800f9f6:	1a1b      	subs	r3, r3, r0
 800f9f8:	50a3      	str	r3, [r4, r2]
 800f9fa:	e7c9      	b.n	800f990 <_malloc_r+0x20>
 800f9fc:	4622      	mov	r2, r4
 800f9fe:	6864      	ldr	r4, [r4, #4]
 800fa00:	e7cc      	b.n	800f99c <_malloc_r+0x2c>
 800fa02:	1cc4      	adds	r4, r0, #3
 800fa04:	f024 0403 	bic.w	r4, r4, #3
 800fa08:	42a0      	cmp	r0, r4
 800fa0a:	d0e3      	beq.n	800f9d4 <_malloc_r+0x64>
 800fa0c:	1a21      	subs	r1, r4, r0
 800fa0e:	4630      	mov	r0, r6
 800fa10:	f000 f808 	bl	800fa24 <_sbrk_r>
 800fa14:	3001      	adds	r0, #1
 800fa16:	d1dd      	bne.n	800f9d4 <_malloc_r+0x64>
 800fa18:	e7cf      	b.n	800f9ba <_malloc_r+0x4a>
 800fa1a:	bf00      	nop
 800fa1c:	20004e38 	.word	0x20004e38
 800fa20:	20004e3c 	.word	0x20004e3c

0800fa24 <_sbrk_r>:
 800fa24:	b538      	push	{r3, r4, r5, lr}
 800fa26:	4d06      	ldr	r5, [pc, #24]	; (800fa40 <_sbrk_r+0x1c>)
 800fa28:	2300      	movs	r3, #0
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	4608      	mov	r0, r1
 800fa2e:	602b      	str	r3, [r5, #0]
 800fa30:	f7f3 f940 	bl	8002cb4 <_sbrk>
 800fa34:	1c43      	adds	r3, r0, #1
 800fa36:	d102      	bne.n	800fa3e <_sbrk_r+0x1a>
 800fa38:	682b      	ldr	r3, [r5, #0]
 800fa3a:	b103      	cbz	r3, 800fa3e <_sbrk_r+0x1a>
 800fa3c:	6023      	str	r3, [r4, #0]
 800fa3e:	bd38      	pop	{r3, r4, r5, pc}
 800fa40:	200057ec 	.word	0x200057ec

0800fa44 <__malloc_lock>:
 800fa44:	4801      	ldr	r0, [pc, #4]	; (800fa4c <__malloc_lock+0x8>)
 800fa46:	f000 b809 	b.w	800fa5c <__retarget_lock_acquire_recursive>
 800fa4a:	bf00      	nop
 800fa4c:	200057f4 	.word	0x200057f4

0800fa50 <__malloc_unlock>:
 800fa50:	4801      	ldr	r0, [pc, #4]	; (800fa58 <__malloc_unlock+0x8>)
 800fa52:	f000 b804 	b.w	800fa5e <__retarget_lock_release_recursive>
 800fa56:	bf00      	nop
 800fa58:	200057f4 	.word	0x200057f4

0800fa5c <__retarget_lock_acquire_recursive>:
 800fa5c:	4770      	bx	lr

0800fa5e <__retarget_lock_release_recursive>:
 800fa5e:	4770      	bx	lr

0800fa60 <floor>:
 800fa60:	ec51 0b10 	vmov	r0, r1, d0
 800fa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fa6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fa70:	2e13      	cmp	r6, #19
 800fa72:	ee10 5a10 	vmov	r5, s0
 800fa76:	ee10 8a10 	vmov	r8, s0
 800fa7a:	460c      	mov	r4, r1
 800fa7c:	dc32      	bgt.n	800fae4 <floor+0x84>
 800fa7e:	2e00      	cmp	r6, #0
 800fa80:	da14      	bge.n	800faac <floor+0x4c>
 800fa82:	a333      	add	r3, pc, #204	; (adr r3, 800fb50 <floor+0xf0>)
 800fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa88:	f7f0 fbb0 	bl	80001ec <__adddf3>
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	2300      	movs	r3, #0
 800fa90:	f7f0 fff2 	bl	8000a78 <__aeabi_dcmpgt>
 800fa94:	b138      	cbz	r0, 800faa6 <floor+0x46>
 800fa96:	2c00      	cmp	r4, #0
 800fa98:	da57      	bge.n	800fb4a <floor+0xea>
 800fa9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fa9e:	431d      	orrs	r5, r3
 800faa0:	d001      	beq.n	800faa6 <floor+0x46>
 800faa2:	4c2d      	ldr	r4, [pc, #180]	; (800fb58 <floor+0xf8>)
 800faa4:	2500      	movs	r5, #0
 800faa6:	4621      	mov	r1, r4
 800faa8:	4628      	mov	r0, r5
 800faaa:	e025      	b.n	800faf8 <floor+0x98>
 800faac:	4f2b      	ldr	r7, [pc, #172]	; (800fb5c <floor+0xfc>)
 800faae:	4137      	asrs	r7, r6
 800fab0:	ea01 0307 	and.w	r3, r1, r7
 800fab4:	4303      	orrs	r3, r0
 800fab6:	d01f      	beq.n	800faf8 <floor+0x98>
 800fab8:	a325      	add	r3, pc, #148	; (adr r3, 800fb50 <floor+0xf0>)
 800faba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabe:	f7f0 fb95 	bl	80001ec <__adddf3>
 800fac2:	2200      	movs	r2, #0
 800fac4:	2300      	movs	r3, #0
 800fac6:	f7f0 ffd7 	bl	8000a78 <__aeabi_dcmpgt>
 800faca:	2800      	cmp	r0, #0
 800facc:	d0eb      	beq.n	800faa6 <floor+0x46>
 800face:	2c00      	cmp	r4, #0
 800fad0:	bfbe      	ittt	lt
 800fad2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fad6:	fa43 f606 	asrlt.w	r6, r3, r6
 800fada:	19a4      	addlt	r4, r4, r6
 800fadc:	ea24 0407 	bic.w	r4, r4, r7
 800fae0:	2500      	movs	r5, #0
 800fae2:	e7e0      	b.n	800faa6 <floor+0x46>
 800fae4:	2e33      	cmp	r6, #51	; 0x33
 800fae6:	dd0b      	ble.n	800fb00 <floor+0xa0>
 800fae8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800faec:	d104      	bne.n	800faf8 <floor+0x98>
 800faee:	ee10 2a10 	vmov	r2, s0
 800faf2:	460b      	mov	r3, r1
 800faf4:	f7f0 fb7a 	bl	80001ec <__adddf3>
 800faf8:	ec41 0b10 	vmov	d0, r0, r1
 800fafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800fb04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb08:	fa23 f707 	lsr.w	r7, r3, r7
 800fb0c:	4207      	tst	r7, r0
 800fb0e:	d0f3      	beq.n	800faf8 <floor+0x98>
 800fb10:	a30f      	add	r3, pc, #60	; (adr r3, 800fb50 <floor+0xf0>)
 800fb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb16:	f7f0 fb69 	bl	80001ec <__adddf3>
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	f7f0 ffab 	bl	8000a78 <__aeabi_dcmpgt>
 800fb22:	2800      	cmp	r0, #0
 800fb24:	d0bf      	beq.n	800faa6 <floor+0x46>
 800fb26:	2c00      	cmp	r4, #0
 800fb28:	da02      	bge.n	800fb30 <floor+0xd0>
 800fb2a:	2e14      	cmp	r6, #20
 800fb2c:	d103      	bne.n	800fb36 <floor+0xd6>
 800fb2e:	3401      	adds	r4, #1
 800fb30:	ea25 0507 	bic.w	r5, r5, r7
 800fb34:	e7b7      	b.n	800faa6 <floor+0x46>
 800fb36:	2301      	movs	r3, #1
 800fb38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fb3c:	fa03 f606 	lsl.w	r6, r3, r6
 800fb40:	4435      	add	r5, r6
 800fb42:	4545      	cmp	r5, r8
 800fb44:	bf38      	it	cc
 800fb46:	18e4      	addcc	r4, r4, r3
 800fb48:	e7f2      	b.n	800fb30 <floor+0xd0>
 800fb4a:	2500      	movs	r5, #0
 800fb4c:	462c      	mov	r4, r5
 800fb4e:	e7aa      	b.n	800faa6 <floor+0x46>
 800fb50:	8800759c 	.word	0x8800759c
 800fb54:	7e37e43c 	.word	0x7e37e43c
 800fb58:	bff00000 	.word	0xbff00000
 800fb5c:	000fffff 	.word	0x000fffff

0800fb60 <_init>:
 800fb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb62:	bf00      	nop
 800fb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb66:	bc08      	pop	{r3}
 800fb68:	469e      	mov	lr, r3
 800fb6a:	4770      	bx	lr

0800fb6c <_fini>:
 800fb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb6e:	bf00      	nop
 800fb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb72:	bc08      	pop	{r3}
 800fb74:	469e      	mov	lr, r3
 800fb76:	4770      	bx	lr
