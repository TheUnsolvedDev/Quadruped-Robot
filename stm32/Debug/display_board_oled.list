
display_board_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018c8  0800f528  0800f528  0001f528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010df0  08010df0  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08010df0  08010df0  00020df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010df8  08010df8  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010df8  08010df8  00020df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010dfc  08010dfc  00020dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08010e00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005734  20000094  08010e94  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200057c8  08010e94  000357c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000342b2  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006525  00000000  00000000  00064376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002338  00000000  00000000  0006a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002118  00000000  00000000  0006cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002806d  00000000  00000000  0006ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a9e1  00000000  00000000  00096d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e196b  00000000  00000000  000c173e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a30a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009964  00000000  00000000  001a30fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f510 	.word	0x0800f510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800f510 	.word	0x0800f510

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <string_compare>:

char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	75bb      	strb	r3, [r7, #22]
 8000e7a:	e012      	b.n	8000ea2 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000e7c:	7dbb      	ldrb	r3, [r7, #22]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	7dbb      	ldrb	r3, [r7, #22]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	440b      	add	r3, r1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d103      	bne.n	8000e98 <string_compare+0x34>
	   	  		  comVAR++;
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	3301      	adds	r3, #1
 8000e94:	75fb      	strb	r3, [r7, #23]
 8000e96:	e001      	b.n	8000e9c <string_compare+0x38>
	   	  	  else comVAR=0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000e9c:	7dbb      	ldrb	r3, [r7, #22]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	75bb      	strb	r3, [r7, #22]
 8000ea2:	7dbb      	ldrb	r3, [r7, #22]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8e7      	bhi.n	8000e7c <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d101      	bne.n	8000eba <string_compare+0x56>
		 	return 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <string_compare+0x58>
	 else 	return 0;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <Message_handler>:

void Message_handler()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 8000ecc:	2206      	movs	r2, #6
 8000ece:	4927      	ldr	r1, [pc, #156]	; (8000f6c <Message_handler+0xa4>)
 8000ed0:	4827      	ldr	r0, [pc, #156]	; (8000f70 <Message_handler+0xa8>)
 8000ed2:	f7ff ffc7 	bl	8000e64 <string_compare>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00d      	beq.n	8000ef8 <Message_handler+0x30>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee2:	4824      	ldr	r0, [pc, #144]	; (8000f74 <Message_handler+0xac>)
 8000ee4:	f002 f822 	bl	8002f2c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 8000ee8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eec:	220b      	movs	r2, #11
 8000eee:	4922      	ldr	r1, [pc, #136]	; (8000f78 <Message_handler+0xb0>)
 8000ef0:	4822      	ldr	r0, [pc, #136]	; (8000f7c <Message_handler+0xb4>)
 8000ef2:	f006 ffe0 	bl	8007eb6 <HAL_UART_Transmit>
 8000ef6:	e02c      	b.n	8000f52 <Message_handler+0x8a>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 8000ef8:	2207      	movs	r2, #7
 8000efa:	4921      	ldr	r1, [pc, #132]	; (8000f80 <Message_handler+0xb8>)
 8000efc:	481c      	ldr	r0, [pc, #112]	; (8000f70 <Message_handler+0xa8>)
 8000efe:	f7ff ffb1 	bl	8000e64 <string_compare>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00d      	beq.n	8000f24 <Message_handler+0x5c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0e:	4819      	ldr	r0, [pc, #100]	; (8000f74 <Message_handler+0xac>)
 8000f10:	f002 f80c 	bl	8002f2c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 8000f14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f18:	220c      	movs	r2, #12
 8000f1a:	491a      	ldr	r1, [pc, #104]	; (8000f84 <Message_handler+0xbc>)
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <Message_handler+0xb4>)
 8000f1e:	f006 ffca 	bl	8007eb6 <HAL_UART_Transmit>
 8000f22:	e016      	b.n	8000f52 <Message_handler+0x8a>
	}else
	{
		strcat(buffer, "\n");
 8000f24:	4812      	ldr	r0, [pc, #72]	; (8000f70 <Message_handler+0xa8>)
 8000f26:	f7ff f953 	bl	80001d0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <Message_handler+0xa8>)
 8000f30:	4413      	add	r3, r2
 8000f32:	4915      	ldr	r1, [pc, #84]	; (8000f88 <Message_handler+0xc0>)
 8000f34:	461a      	mov	r2, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <Message_handler+0xa8>)
 8000f3e:	f7ff f947 	bl	80001d0 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f4a:	4909      	ldr	r1, [pc, #36]	; (8000f70 <Message_handler+0xa8>)
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <Message_handler+0xb4>)
 8000f4e:	f006 ffb2 	bl	8007eb6 <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 8000f52:	2232      	movs	r2, #50	; 0x32
 8000f54:	2100      	movs	r1, #0
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <Message_handler+0xa8>)
 8000f58:	f00e f98a 	bl	800f270 <memset>
	buffer_index = 0;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <Message_handler+0xc4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <Message_handler+0xc8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	0800f528 	.word	0x0800f528
 8000f70:	20004ddc 	.word	0x20004ddc
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	0800f530 	.word	0x0800f530
 8000f7c:	20004f90 	.word	0x20004f90
 8000f80:	0800f53c 	.word	0x0800f53c
 8000f84:	0800f544 	.word	0x0800f544
 8000f88:	0800f554 	.word	0x0800f554
 8000f8c:	200000b1 	.word	0x200000b1
 8000f90:	200000b0 	.word	0x200000b0

08000f94 <start_normal>:
#define ANGLE_9_INIT 100
#define ANGLE_10_INIT -10
#define ANGLE_11_INIT 35

void start_normal()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

	PCA9685_SetServoAngle(0, ANGLE_0_INIT);
 8000f98:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001024 <start_normal+0x90>
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 fe4b 	bl	8001c38 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, ANGLE_1_INIT);
 8000fa2:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001028 <start_normal+0x94>
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fe46 	bl	8001c38 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(2, ANGLE_2_INIT);
 8000fac:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001024 <start_normal+0x90>
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f000 fe41 	bl	8001c38 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(3, ANGLE_3_INIT);
 8000fb6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800102c <start_normal+0x98>
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 fe3c 	bl	8001c38 <PCA9685_SetServoAngle>
	HAL_Delay(500);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc4:	f001 fc7e 	bl	80028c4 <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8000fc8:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001030 <start_normal+0x9c>
 8000fcc:	2004      	movs	r0, #4
 8000fce:	f000 fe33 	bl	8001c38 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 8000fd2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001034 <start_normal+0xa0>
 8000fd6:	2005      	movs	r0, #5
 8000fd8:	f000 fe2e 	bl	8001c38 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 8000fdc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001038 <start_normal+0xa4>
 8000fe0:	2006      	movs	r0, #6
 8000fe2:	f000 fe29 	bl	8001c38 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8000fe6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001028 <start_normal+0x94>
 8000fea:	2007      	movs	r0, #7
 8000fec:	f000 fe24 	bl	8001c38 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT);
 8000ff0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800103c <start_normal+0xa8>
 8000ff4:	2008      	movs	r0, #8
 8000ff6:	f000 fe1f 	bl	8001c38 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 8000ffa:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001040 <start_normal+0xac>
 8000ffe:	2009      	movs	r0, #9
 8001000:	f000 fe1a 	bl	8001c38 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(10, ANGLE_10_INIT);
 8001004:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8001008:	200a      	movs	r0, #10
 800100a:	f000 fe15 	bl	8001c38 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(11, ANGLE_11_INIT);
 800100e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001034 <start_normal+0xa0>
 8001012:	200b      	movs	r0, #11
 8001014:	f000 fe10 	bl	8001c38 <PCA9685_SetServoAngle>
	HAL_Delay(500);
 8001018:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101c:	f001 fc52 	bl	80028c4 <HAL_Delay>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	42f00000 	.word	0x42f00000
 8001028:	42dc0000 	.word	0x42dc0000
 800102c:	42340000 	.word	0x42340000
 8001030:	42700000 	.word	0x42700000
 8001034:	420c0000 	.word	0x420c0000
 8001038:	42d20000 	.word	0x42d20000
 800103c:	42960000 	.word	0x42960000
 8001040:	42c80000 	.word	0x42c80000

08001044 <rotate>:
	}
	vTaskDelete(NULL);
}

void rotate(void *parameters)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	int delay_time = 100;
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		PCA9685_SetServoAngle(4, ANGLE_4_INIT + 20);
 8001050:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001130 <rotate+0xec>
 8001054:	2004      	movs	r0, #4
 8001056:	f000 fdef 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fc31 	bl	80028c4 <HAL_Delay>
		PCA9685_SetServoAngle(8, ANGLE_8_INIT + 30);
 8001062:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8001134 <rotate+0xf0>
 8001066:	2008      	movs	r0, #8
 8001068:	f000 fde6 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fc28 	bl	80028c4 <HAL_Delay>
		PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8001074:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8001138 <rotate+0xf4>
 8001078:	2004      	movs	r0, #4
 800107a:	f000 fddd 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fc1f 	bl	80028c4 <HAL_Delay>

		PCA9685_SetServoAngle(5, ANGLE_5_INIT + 30);
 8001086:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800113c <rotate+0xf8>
 800108a:	2005      	movs	r0, #5
 800108c:	f000 fdd4 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fc16 	bl	80028c4 <HAL_Delay>
		PCA9685_SetServoAngle(9, ANGLE_9_INIT + 30);
 8001098:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8001140 <rotate+0xfc>
 800109c:	2009      	movs	r0, #9
 800109e:	f000 fdcb 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fc0d 	bl	80028c4 <HAL_Delay>
		PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 80010aa:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001144 <rotate+0x100>
 80010ae:	2005      	movs	r0, #5
 80010b0:	f000 fdc2 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fc04 	bl	80028c4 <HAL_Delay>

		PCA9685_SetServoAngle(6, ANGLE_6_INIT + 30);
 80010bc:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001148 <rotate+0x104>
 80010c0:	2006      	movs	r0, #6
 80010c2:	f000 fdb9 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fbfb 	bl	80028c4 <HAL_Delay>
		PCA9685_SetServoAngle(10, ANGLE_10_INIT + 30);
 80010ce:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80010d2:	200a      	movs	r0, #10
 80010d4:	f000 fdb0 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4618      	mov	r0, r3
 80010dc:	f001 fbf2 	bl	80028c4 <HAL_Delay>
		PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 80010e0:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001134 <rotate+0xf0>
 80010e4:	2006      	movs	r0, #6
 80010e6:	f000 fda7 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fbe9 	bl	80028c4 <HAL_Delay>

		PCA9685_SetServoAngle(7, ANGLE_7_INIT - 30);
 80010f2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001130 <rotate+0xec>
 80010f6:	2007      	movs	r0, #7
 80010f8:	f000 fd9e 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fbe0 	bl	80028c4 <HAL_Delay>
		PCA9685_SetServoAngle(11, ANGLE_11_INIT + 30);
 8001104:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800113c <rotate+0xf8>
 8001108:	200b      	movs	r0, #11
 800110a:	f000 fd95 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fbd7 	bl	80028c4 <HAL_Delay>
		PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8001116:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800114c <rotate+0x108>
 800111a:	2007      	movs	r0, #7
 800111c:	f000 fd8c 	bl	8001c38 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fbce 	bl	80028c4 <HAL_Delay>

		start_normal();
 8001128:	f7ff ff34 	bl	8000f94 <start_normal>
		PCA9685_SetServoAngle(4, ANGLE_4_INIT + 20);
 800112c:	e790      	b.n	8001050 <rotate+0xc>
 800112e:	bf00      	nop
 8001130:	42a00000 	.word	0x42a00000
 8001134:	42d20000 	.word	0x42d20000
 8001138:	42700000 	.word	0x42700000
 800113c:	42820000 	.word	0x42820000
 8001140:	43020000 	.word	0x43020000
 8001144:	420c0000 	.word	0x420c0000
 8001148:	43070000 	.word	0x43070000
 800114c:	42dc0000 	.word	0x42dc0000

08001150 <faces>:
	}
	vTaskDelete(NULL);
}

void faces(void *parameters)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af02      	add	r7, sp, #8
 8001156:	6078      	str	r0, [r7, #4]
	int times = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	2340      	movs	r3, #64	; 0x40
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	4a35      	ldr	r2, [pc, #212]	; (800123c <faces+0xec>)
 8001168:	2100      	movs	r1, #0
 800116a:	2000      	movs	r0, #0
 800116c:	f000 fdd6 	bl	8001d1c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001170:	f000 ff00 	bl	8001f74 <SSD1306_UpdateScreen>
		HAL_Delay(times + 1000);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fba2 	bl	80028c4 <HAL_Delay>
		SSD1306_Clear();
 8001180:	f000 ff9e 	bl	80020c0 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face2, 128, 64, 1);
 8001184:	2301      	movs	r3, #1
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	2340      	movs	r3, #64	; 0x40
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	4a2c      	ldr	r2, [pc, #176]	; (8001240 <faces+0xf0>)
 8001190:	2100      	movs	r1, #0
 8001192:	2000      	movs	r0, #0
 8001194:	f000 fdc2 	bl	8001d1c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001198:	f000 feec 	bl	8001f74 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fb90 	bl	80028c4 <HAL_Delay>
		SSD1306_Clear();
 80011a4:	f000 ff8c 	bl	80020c0 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face3, 128, 64, 1);
 80011a8:	2301      	movs	r3, #1
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	2340      	movs	r3, #64	; 0x40
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	4a24      	ldr	r2, [pc, #144]	; (8001244 <faces+0xf4>)
 80011b4:	2100      	movs	r1, #0
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 fdb0 	bl	8001d1c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80011bc:	f000 feda 	bl	8001f74 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fb7e 	bl	80028c4 <HAL_Delay>
		SSD1306_Clear();
 80011c8:	f000 ff7a 	bl	80020c0 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face4, 128, 64, 1);
 80011cc:	2301      	movs	r3, #1
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2340      	movs	r3, #64	; 0x40
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <faces+0xf8>)
 80011d8:	2100      	movs	r1, #0
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 fd9e 	bl	8001d1c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80011e0:	f000 fec8 	bl	8001f74 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fb6c 	bl	80028c4 <HAL_Delay>
		SSD1306_Clear();
 80011ec:	f000 ff68 	bl	80020c0 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face5, 128, 64, 1);
 80011f0:	2301      	movs	r3, #1
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	2340      	movs	r3, #64	; 0x40
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <faces+0xfc>)
 80011fc:	2100      	movs	r1, #0
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 fd8c 	bl	8001d1c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001204:	f000 feb6 	bl	8001f74 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fb5a 	bl	80028c4 <HAL_Delay>
		SSD1306_Clear();
 8001210:	f000 ff56 	bl	80020c0 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face6, 128, 64, 1);
 8001214:	2301      	movs	r3, #1
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	2340      	movs	r3, #64	; 0x40
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <faces+0x100>)
 8001220:	2100      	movs	r1, #0
 8001222:	2000      	movs	r0, #0
 8001224:	f000 fd7a 	bl	8001d1c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001228:	f000 fea4 	bl	8001f74 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fb48 	bl	80028c4 <HAL_Delay>
		SSD1306_Clear();
 8001234:	f000 ff44 	bl	80020c0 <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 8001238:	e790      	b.n	800115c <faces+0xc>
 800123a:	bf00      	nop
 800123c:	0800f5b4 	.word	0x0800f5b4
 8001240:	0800f9b4 	.word	0x0800f9b4
 8001244:	0800fdb4 	.word	0x0800fdb4
 8001248:	080101b4 	.word	0x080101b4
 800124c:	080105b4 	.word	0x080105b4
 8001250:	080109b4 	.word	0x080109b4

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800125a:	f001 faf1 	bl	8002840 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800125e:	f000 f847 	bl	80012f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001262:	f000 fa01 	bl	8001668 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001266:	f000 f8c5 	bl	80013f4 <MX_I2C1_Init>
	MX_I2S3_Init();
 800126a:	f000 f91f 	bl	80014ac <MX_I2S3_Init>
	MX_SPI1_Init();
 800126e:	f000 f94d 	bl	800150c <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8001272:	f000 f9cf 	bl	8001614 <MX_USART2_UART_Init>
	MX_I2C3_Init();
 8001276:	f000 f8eb 	bl	8001450 <MX_I2C3_Init>
	MX_TIM2_Init();
 800127a:	f000 f97d 	bl	8001578 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init();
 800127e:	f000 fdb5 	bl	8001dec <SSD1306_Init>
	PCA9685_Init(&hi2c3);
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <main+0x7c>)
 8001284:	f000 fd34 	bl	8001cf0 <PCA9685_Init>

	start_normal();
 8001288:	f7ff fe84 	bl	8000f94 <start_normal>
	xTaskHandle HT1, HT2;
	xTaskCreate(faces, "face_show", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT1);
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	2300      	movs	r3, #0
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2300      	movs	r3, #0
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	490e      	ldr	r1, [pc, #56]	; (80012d4 <main+0x80>)
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <main+0x84>)
 800129c:	f00b fe79 	bl	800cf92 <xTaskCreate>
	xTaskCreate(rotate, "rotate", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT2);
 80012a0:	463b      	mov	r3, r7
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	2300      	movs	r3, #0
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	490b      	ldr	r1, [pc, #44]	; (80012dc <main+0x88>)
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <main+0x8c>)
 80012b0:	f00b fe6f 	bl	800cf92 <xTaskCreate>
	//	vTaskStartScheduler();

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80012b4:	f00a fd5a 	bl	800bd6c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <main+0x90>)
 80012ba:	2100      	movs	r1, #0
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <main+0x94>)
 80012be:	f00a fd9f 	bl	800be00 <osThreadNew>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a09      	ldr	r2, [pc, #36]	; (80012ec <main+0x98>)
 80012c6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80012c8:	f00a fd74 	bl	800bdb4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
 80012cc:	e7fe      	b.n	80012cc <main+0x78>
 80012ce:	bf00      	nop
 80012d0:	20004e14 	.word	0x20004e14
 80012d4:	0800f578 	.word	0x0800f578
 80012d8:	08001151 	.word	0x08001151
 80012dc:	0800f584 	.word	0x0800f584
 80012e0:	08001045 	.word	0x08001045
 80012e4:	08010db4 	.word	0x08010db4
 80012e8:	08001885 	.word	0x08001885
 80012ec:	20004e10 	.word	0x20004e10

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b098      	sub	sp, #96	; 0x60
 80012f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fa:	2230      	movs	r2, #48	; 0x30
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f00d ffb6 	bl	800f270 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
  */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <SystemClock_Config+0xfc>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a30      	ldr	r2, [pc, #192]	; (80013ec <SystemClock_Config+0xfc>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <SystemClock_Config+0xfc>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <SystemClock_Config+0x100>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a2a      	ldr	r2, [pc, #168]	; (80013f0 <SystemClock_Config+0x100>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <SystemClock_Config+0x100>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800135a:	2301      	movs	r3, #1
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	2302      	movs	r3, #2
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001368:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800136c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800136e:	2308      	movs	r3, #8
 8001370:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001372:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001376:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001378:	2302      	movs	r3, #2
 800137a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800137c:	2307      	movs	r3, #7
 800137e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001384:	4618      	mov	r0, r3
 8001386:	f005 fa5d 	bl	8006844 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8001390:	f000 fa94 	bl	80018bc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001394:	230f      	movs	r3, #15
 8001396:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001398:	2302      	movs	r3, #2
 800139a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	2105      	movs	r1, #5
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 fcbe 	bl	8006d34 <HAL_RCC_ClockConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 80013be:	f000 fa7d 	bl	80018bc <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013c2:	2301      	movs	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013c6:	23c0      	movs	r3, #192	; 0xc0
 80013c8:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4618      	mov	r0, r3
 80013d4:	f005 fedc 	bl	8007190 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 80013de:	f000 fa6d 	bl	80018bc <Error_Handler>
	}
}
 80013e2:	bf00      	nop
 80013e4:	3760      	adds	r7, #96	; 0x60
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40007000 	.word	0x40007000

080013f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2C1_Init+0x50>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_I2C1_Init+0x54>)
 80013fc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_I2C1_Init+0x50>)
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_I2C1_Init+0x58>)
 8001402:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_I2C1_Init+0x50>)
 8001412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001416:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_I2C1_Init+0x50>)
 8001432:	f003 faf9 	bl	8004a28 <HAL_I2C_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800143c:	f000 fa3e 	bl	80018bc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20004e68 	.word	0x20004e68
 8001448:	40005400 	.word	0x40005400
 800144c:	00061a80 	.word	0x00061a80

08001450 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_I2C3_Init+0x50>)
 8001456:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <MX_I2C3_Init+0x54>)
 8001458:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 400000;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_I2C3_Init+0x50>)
 800145c:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <MX_I2C3_Init+0x58>)
 800145e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_I2C3_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_I2C3_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_I2C3_Init+0x50>)
 800146e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001472:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <MX_I2C3_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_I2C3_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <MX_I2C3_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_I2C3_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_I2C3_Init+0x50>)
 800148e:	f003 facb 	bl	8004a28 <HAL_I2C_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 8001498:	f000 fa10 	bl	80018bc <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20004e14 	.word	0x20004e14
 80014a4:	40005c00 	.word	0x40005c00
 80014a8:	00061a80 	.word	0x00061a80

080014ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <MX_I2S3_Init+0x54>)
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <MX_I2S3_Init+0x58>)
 80014b4:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_I2S3_Init+0x54>)
 80014b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014bc:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_I2S3_Init+0x54>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_I2S3_Init+0x54>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <MX_I2S3_Init+0x54>)
 80014cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d0:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_I2S3_Init+0x54>)
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <MX_I2S3_Init+0x5c>)
 80014d6:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_I2S3_Init+0x54>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_I2S3_Init+0x54>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_I2S3_Init+0x54>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_I2S3_Init+0x54>)
 80014ec:	f004 fd0a 	bl	8005f04 <HAL_I2S_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 80014f6:	f000 f9e1 	bl	80018bc <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20004fd4 	.word	0x20004fd4
 8001504:	40003c00 	.word	0x40003c00
 8001508:	00017700 	.word	0x00017700

0800150c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_SPI1_Init+0x64>)
 8001512:	4a18      	ldr	r2, [pc, #96]	; (8001574 <MX_SPI1_Init+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_SPI1_Init+0x64>)
 8001518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800151c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_SPI1_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_SPI1_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_SPI1_Init+0x64>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_SPI1_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_SPI1_Init+0x64>)
 8001538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_SPI1_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_SPI1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_SPI1_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_SPI1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_SPI1_Init+0x64>)
 8001558:	220a      	movs	r2, #10
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_SPI1_Init+0x64>)
 800155e:	f005 ff57 	bl	8007410 <HAL_SPI_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001568:	f000 f9a8 	bl	80018bc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20004ef0 	.word	0x20004ef0
 8001574:	40013000 	.word	0x40013000

08001578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	463b      	mov	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <MX_TIM2_Init+0x98>)
 8001596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 720;
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_TIM2_Init+0x98>)
 800159e:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80015a2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_TIM2_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1999;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_TIM2_Init+0x98>)
 80015ac:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80015b0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_TIM2_Init+0x98>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_TIM2_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015be:	4814      	ldr	r0, [pc, #80]	; (8001610 <MX_TIM2_Init+0x98>)
 80015c0:	f005 ffaf 	bl	8007522 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80015ca:	f000 f977 	bl	80018bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	4619      	mov	r1, r3
 80015da:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_TIM2_Init+0x98>)
 80015dc:	f006 f968 	bl	80078b0 <HAL_TIM_ConfigClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 80015e6:	f000 f969 	bl	80018bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_TIM2_Init+0x98>)
 80015f8:	f006 fb80 	bl	8007cfc <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8001602:	f000 f95b 	bl	80018bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20004f48 	.word	0x20004f48

08001614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_USART2_UART_Init+0x50>)
 800161c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001620:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001624:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800164c:	f006 fbe6 	bl	8007e1c <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001656:	f000 f931 	bl	80018bc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20004f90 	.word	0x20004f90
 8001664:	40004400 	.word	0x40004400

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	4b79      	ldr	r3, [pc, #484]	; (8001868 <MX_GPIO_Init+0x200>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a78      	ldr	r2, [pc, #480]	; (8001868 <MX_GPIO_Init+0x200>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b76      	ldr	r3, [pc, #472]	; (8001868 <MX_GPIO_Init+0x200>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	4b72      	ldr	r3, [pc, #456]	; (8001868 <MX_GPIO_Init+0x200>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a71      	ldr	r2, [pc, #452]	; (8001868 <MX_GPIO_Init+0x200>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b6f      	ldr	r3, [pc, #444]	; (8001868 <MX_GPIO_Init+0x200>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b6b      	ldr	r3, [pc, #428]	; (8001868 <MX_GPIO_Init+0x200>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a6a      	ldr	r2, [pc, #424]	; (8001868 <MX_GPIO_Init+0x200>)
 80016c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b68      	ldr	r3, [pc, #416]	; (8001868 <MX_GPIO_Init+0x200>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b64      	ldr	r3, [pc, #400]	; (8001868 <MX_GPIO_Init+0x200>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a63      	ldr	r2, [pc, #396]	; (8001868 <MX_GPIO_Init+0x200>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b61      	ldr	r3, [pc, #388]	; (8001868 <MX_GPIO_Init+0x200>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b5d      	ldr	r3, [pc, #372]	; (8001868 <MX_GPIO_Init+0x200>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a5c      	ldr	r2, [pc, #368]	; (8001868 <MX_GPIO_Init+0x200>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b5a      	ldr	r3, [pc, #360]	; (8001868 <MX_GPIO_Init+0x200>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b56      	ldr	r3, [pc, #344]	; (8001868 <MX_GPIO_Init+0x200>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a55      	ldr	r2, [pc, #340]	; (8001868 <MX_GPIO_Init+0x200>)
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b53      	ldr	r3, [pc, #332]	; (8001868 <MX_GPIO_Init+0x200>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	2108      	movs	r1, #8
 800172a:	4850      	ldr	r0, [pc, #320]	; (800186c <MX_GPIO_Init+0x204>)
 800172c:	f001 fbfe 	bl	8002f2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin | GPIO_PIN_8, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	f240 1101 	movw	r1, #257	; 0x101
 8001736:	484e      	ldr	r0, [pc, #312]	; (8001870 <MX_GPIO_Init+0x208>)
 8001738:	f001 fbf8 	bl	8002f2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, BLUETOOTH_RESET_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f64f 0110 	movw	r1, #63504	; 0xf810
 8001742:	484c      	ldr	r0, [pc, #304]	; (8001874 <MX_GPIO_Init+0x20c>)
 8001744:	f001 fbf2 	bl	8002f2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001748:	2308      	movs	r3, #8
 800174a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	4843      	ldr	r0, [pc, #268]	; (800186c <MX_GPIO_Init+0x204>)
 8001760:	f001 fa48 	bl	8002bf4 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC8 */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | GPIO_PIN_8;
 8001764:	f240 1301 	movw	r3, #257	; 0x101
 8001768:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	483c      	ldr	r0, [pc, #240]	; (8001870 <MX_GPIO_Init+0x208>)
 800177e:	f001 fa39 	bl	8002bf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001782:	2308      	movs	r3, #8
 8001784:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001792:	2305      	movs	r3, #5
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4834      	ldr	r0, [pc, #208]	; (8001870 <MX_GPIO_Init+0x208>)
 800179e:	f001 fa29 	bl	8002bf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017a6:	4b34      	ldr	r3, [pc, #208]	; (8001878 <MX_GPIO_Init+0x210>)
 80017a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	4831      	ldr	r0, [pc, #196]	; (800187c <MX_GPIO_Init+0x214>)
 80017b6:	f001 fa1d 	bl	8002bf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80017ba:	2304      	movs	r3, #4
 80017bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	482c      	ldr	r0, [pc, #176]	; (8001880 <MX_GPIO_Init+0x218>)
 80017ce:	f001 fa11 	bl	8002bf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80017d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017e4:	2305      	movs	r3, #5
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	4619      	mov	r1, r3
 80017ee:	4824      	ldr	r0, [pc, #144]	; (8001880 <MX_GPIO_Init+0x218>)
 80017f0:	f001 fa00 	bl	8002bf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUETOOTH_RESET_Pin */
	GPIO_InitStruct.Pin = BLUETOOTH_RESET_Pin;
 80017f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001802:	2302      	movs	r3, #2
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BLUETOOTH_RESET_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4819      	ldr	r0, [pc, #100]	; (8001874 <MX_GPIO_Init+0x20c>)
 800180e:	f001 f9f1 	bl	8002bf4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8001812:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001816:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4812      	ldr	r0, [pc, #72]	; (8001874 <MX_GPIO_Init+0x20c>)
 800182c:	f001 f9e2 	bl	8002bf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001830:	2320      	movs	r3, #32
 8001832:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	480c      	ldr	r0, [pc, #48]	; (8001874 <MX_GPIO_Init+0x20c>)
 8001844:	f001 f9d6 	bl	8002bf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001848:	2302      	movs	r3, #2
 800184a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <MX_GPIO_Init+0x210>)
 800184e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	4619      	mov	r1, r3
 800185a:	4804      	ldr	r0, [pc, #16]	; (800186c <MX_GPIO_Init+0x204>)
 800185c:	f001 f9ca 	bl	8002bf4 <HAL_GPIO_Init>
}
 8001860:	bf00      	nop
 8001862:	3730      	adds	r7, #48	; 0x30
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	40021000 	.word	0x40021000
 8001870:	40020800 	.word	0x40020800
 8001874:	40020c00 	.word	0x40020c00
 8001878:	10120000 	.word	0x10120000
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400

08001884 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 800188c:	f00d f9a6 	bl	800ebdc <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001890:	2001      	movs	r0, #1
 8001892:	f00a fb47 	bl	800bf24 <osDelay>
 8001896:	e7fb      	b.n	8001890 <StartDefaultTask+0xc>

08001898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 80018aa:	f000 ffeb 	bl	8002884 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40001000 	.word	0x40001000

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <PCA9685_SetBit>:
#include "main.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af04      	add	r7, sp, #16
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	460b      	mov	r3, r1
 80018d4:	71bb      	strb	r3, [r7, #6]
 80018d6:	4613      	mov	r3, r2
 80018d8:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 80018da:	797b      	ldrb	r3, [r7, #5]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <PCA9685_SetBit+0x1c>
 80018e0:	2301      	movs	r3, #1
 80018e2:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <PCA9685_SetBit+0xb0>)
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	230a      	movs	r3, #10
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	2301      	movs	r3, #1
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	f107 030f 	add.w	r3, r7, #15
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	f003 fbcf 	bl	80050a0 <HAL_I2C_Mem_Read>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e031      	b.n	8001970 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 800190c:	79bb      	ldrb	r3, [r7, #6]
 800190e:	2201      	movs	r2, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	b25b      	sxtb	r3, r3
 8001916:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800191a:	b25b      	sxtb	r3, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	b25a      	sxtb	r2, r3
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	b25b      	sxtb	r3, r3
 8001924:	4013      	ands	r3, r2
 8001926:	b25b      	sxtb	r3, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 800192c:	797b      	ldrb	r3, [r7, #5]
 800192e:	f003 0201 	and.w	r2, r3, #1
 8001932:	79bb      	ldrb	r3, [r7, #6]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	b25a      	sxtb	r2, r3
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	b25b      	sxtb	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b25b      	sxtb	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <PCA9685_SetBit+0xb0>)
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	b29a      	uxth	r2, r3
 800194e:	230a      	movs	r3, #10
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	2301      	movs	r3, #1
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	f107 030f 	add.w	r3, r7, #15
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2301      	movs	r3, #1
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	f003 faa4 	bl	8004eac <HAL_I2C_Mem_Write>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2000501c 	.word	0x2000501c

0800197c <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001982:	2306      	movs	r3, #6
 8001984:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <PCA9685_SoftwareReset+0x30>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	1dfa      	adds	r2, r7, #7
 800198c:	230a      	movs	r3, #10
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2301      	movs	r3, #1
 8001992:	2100      	movs	r1, #0
 8001994:	f003 f98c 	bl	8004cb0 <HAL_I2C_Master_Transmit>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000501c 	.word	0x2000501c

080019b0 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	461a      	mov	r2, r3
 80019be:	2104      	movs	r1, #4
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff ff81 	bl	80018c8 <PCA9685_SetBit>
 80019c6:	4603      	mov	r3, r0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	461a      	mov	r2, r3
 80019de:	2107      	movs	r1, #7
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff ff71 	bl	80018c8 <PCA9685_SetBit>
 80019e6:	4603      	mov	r3, r0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	461a      	mov	r2, r3
 80019fe:	2105      	movs	r1, #5
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff ff61 	bl	80018c8 <PCA9685_SetBit>
 8001a06:	4603      	mov	r3, r0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d902      	bls.n	8001a2a <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001a24:	2303      	movs	r3, #3
 8001a26:	72fb      	strb	r3, [r7, #11]
 8001a28:	e046      	b.n	8001ab8 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	2b18      	cmp	r3, #24
 8001a2e:	d802      	bhi.n	8001a36 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001a30:	23ff      	movs	r3, #255	; 0xff
 8001a32:	72fb      	strb	r3, [r7, #11]
 8001a34:	e040      	b.n	8001ab8 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a40:	ee17 0a90 	vmov	r0, s15
 8001a44:	f7fe fd30 	bl	80004a8 <__aeabi_f2d>
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <PCA9685_SetPwmFrequency+0xe8>)
 8001a4e:	f7fe fd83 	bl	8000558 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	a126      	add	r1, pc, #152	; (adr r1, 8001af0 <PCA9685_SetPwmFrequency+0xe0>)
 8001a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a5c:	f7fe fea6 	bl	80007ac <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <PCA9685_SetPwmFrequency+0xec>)
 8001a6e:	f7fe fbbb 	bl	80001e8 <__aeabi_dsub>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f827 	bl	8000acc <__aeabi_d2f>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7fe fd10 	bl	80004a8 <__aeabi_f2d>
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <PCA9685_SetPwmFrequency+0xf0>)
 8001a8e:	f7fe fbad 	bl	80001ec <__adddf3>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	ec43 2b17 	vmov	d7, r2, r3
 8001a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a9e:	eef0 0a67 	vmov.f32	s1, s15
 8001aa2:	f00d fcb5 	bl	800f410 <floor>
 8001aa6:	ec53 2b10 	vmov	r2, r3, d0
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7fe ffed 	bl	8000a8c <__aeabi_d2uiz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f7ff ff79 	bl	80019b0 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <PCA9685_SetPwmFrequency+0xf4>)
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	230a      	movs	r3, #10
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	f107 030b 	add.w	r3, r7, #11
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	22fe      	movs	r2, #254	; 0xfe
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	f003 f9e9 	bl	8004eac <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7ff ff68 	bl	80019b0 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff ff75 	bl	80019d0 <PCA9685_RestartMode>
	return PCA9685_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	00000000 	.word	0x00000000
 8001af4:	4177d784 	.word	0x4177d784
 8001af8:	40b00000 	.word	0x40b00000
 8001afc:	3ff00000 	.word	0x3ff00000
 8001b00:	3fe00000 	.word	0x3fe00000
 8001b04:	2000501c 	.word	0x2000501c

08001b08 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af04      	add	r7, sp, #16
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	460b      	mov	r3, r1
 8001b14:	80bb      	strh	r3, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3306      	adds	r3, #6
 8001b22:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8001b2a:	88bb      	ldrh	r3, [r7, #4]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <PCA9685_SetPwm+0x70>)
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	2304      	movs	r3, #4
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	f003 f9a5 	bl	8004eac <HAL_I2C_Mem_Write>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000501c 	.word	0x2000501c

08001b7c <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
 8001b86:	460b      	mov	r3, r1
 8001b88:	80bb      	strh	r3, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8001b8e:	88bb      	ldrh	r3, [r7, #4]
 8001b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b94:	d302      	bcc.n	8001b9c <PCA9685_SetPin+0x20>
 8001b96:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b9a:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8001b9c:	79bb      	ldrb	r3, [r7, #6]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d025      	beq.n	8001bee <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001ba2:	88bb      	ldrh	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d108      	bne.n	8001bba <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ffa9 	bl	8001b08 <PCA9685_SetPwm>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	e03a      	b.n	8001c30 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001bba:	88bb      	ldrh	r3, [r7, #4]
 8001bbc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d108      	bne.n	8001bd6 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff9b 	bl	8001b08 <PCA9685_SetPwm>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	e02c      	b.n	8001c30 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001bd6:	88bb      	ldrh	r3, [r7, #4]
 8001bd8:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001bdc:	330f      	adds	r3, #15
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff8f 	bl	8001b08 <PCA9685_SetPwm>
 8001bea:	4603      	mov	r3, r0
 8001bec:	e020      	b.n	8001c30 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001bee:	88bb      	ldrh	r3, [r7, #4]
 8001bf0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d108      	bne.n	8001c0a <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff81 	bl	8001b08 <PCA9685_SetPwm>
 8001c06:	4603      	mov	r3, r0
 8001c08:	e012      	b.n	8001c30 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001c0a:	88bb      	ldrh	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d108      	bne.n	8001c22 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff75 	bl	8001b08 <PCA9685_SetPwm>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	e006      	b.n	8001c30 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001c22:	88ba      	ldrh	r2, [r7, #4]
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff6d 	bl	8001b08 <PCA9685_SetPwm>
 8001c2e:	4603      	mov	r3, r0
    }
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	ed87 0a00 	vstr	s0, [r7]
 8001c44:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001c46:	edd7 7a00 	vldr	s15, [r7]
 8001c4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	d502      	bpl.n	8001c5a <PCA9685_SetServoAngle+0x22>
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001c5a:	edd7 7a00 	vldr	s15, [r7]
 8001c5e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001ce0 <PCA9685_SetServoAngle+0xa8>
 8001c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	dd01      	ble.n	8001c70 <PCA9685_SetServoAngle+0x38>
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <PCA9685_SetServoAngle+0xac>)
 8001c6e:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001c70:	6838      	ldr	r0, [r7, #0]
 8001c72:	f7fe fc19 	bl	80004a8 <__aeabi_f2d>
 8001c76:	a318      	add	r3, pc, #96	; (adr r3, 8001cd8 <PCA9685_SetServoAngle+0xa0>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe fc6c 	bl	8000558 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <PCA9685_SetServoAngle+0xb0>)
 8001c8e:	f7fe fd8d 	bl	80007ac <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <PCA9685_SetServoAngle+0xb4>)
 8001ca0:	f7fe faa4 	bl	80001ec <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ff0e 	bl	8000acc <__aeabi_d2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cbc:	ee17 3a90 	vmov	r3, s15
 8001cc0:	b299      	uxth	r1, r3
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff58 	bl	8001b7c <PCA9685_SetPin>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	00000000 	.word	0x00000000
 8001cdc:	407c2000 	.word	0x407c2000
 8001ce0:	43340000 	.word	0x43340000
 8001ce4:	43340000 	.word	0x43340000
 8001ce8:	40668000 	.word	0x40668000
 8001cec:	405f4000 	.word	0x405f4000

08001cf0 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <PCA9685_Init+0x28>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8001cfe:	f7ff fe3d 	bl	800197c <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8001d02:	2030      	movs	r0, #48	; 0x30
 8001d04:	f7ff fe84 	bl	8001a10 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7ff fe71 	bl	80019f0 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000501c 	.word	0x2000501c

08001d1c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60ba      	str	r2, [r7, #8]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4603      	mov	r3, r0
 8001d28:	81fb      	strh	r3, [r7, #14]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	81bb      	strh	r3, [r7, #12]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d36:	3307      	adds	r3, #7
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	da00      	bge.n	8001d3e <SSD1306_DrawBitmap+0x22>
 8001d3c:	3307      	adds	r3, #7
 8001d3e:	10db      	asrs	r3, r3, #3
 8001d40:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	82bb      	strh	r3, [r7, #20]
 8001d4a:	e044      	b.n	8001dd6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	827b      	strh	r3, [r7, #18]
 8001d50:	e02f      	b.n	8001db2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001d52:	8a7b      	ldrh	r3, [r7, #18]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
 8001d62:	e012      	b.n	8001d8a <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001d64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d68:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001d6c:	fb02 f203 	mul.w	r2, r2, r3
 8001d70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	da00      	bge.n	8001d7a <SSD1306_DrawBitmap+0x5e>
 8001d78:	3307      	adds	r3, #7
 8001d7a:	10db      	asrs	r3, r3, #3
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	da09      	bge.n	8001da6 <SSD1306_DrawBitmap+0x8a>
 8001d92:	89fa      	ldrh	r2, [r7, #14]
 8001d94:	8a7b      	ldrh	r3, [r7, #18]
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	89b9      	ldrh	r1, [r7, #12]
 8001d9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f92d 	bl	8002000 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001da6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	827b      	strh	r3, [r7, #18]
 8001db2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	dbc9      	blt.n	8001d52 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001dbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	82bb      	strh	r3, [r7, #20]
 8001dca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	81bb      	strh	r3, [r7, #12]
 8001dd6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001dda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	dbb4      	blt.n	8001d4c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001df2:	f000 f96f 	bl	80020d4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001df6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2178      	movs	r1, #120	; 0x78
 8001dfe:	485b      	ldr	r0, [pc, #364]	; (8001f6c <SSD1306_Init+0x180>)
 8001e00:	f003 fb74 	bl	80054ec <HAL_I2C_IsDeviceReady>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e0a9      	b.n	8001f62 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001e0e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001e12:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e14:	e002      	b.n	8001e1c <SSD1306_Init+0x30>
		p--;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f9      	bne.n	8001e16 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001e22:	22ae      	movs	r2, #174	; 0xae
 8001e24:	2100      	movs	r1, #0
 8001e26:	2078      	movs	r0, #120	; 0x78
 8001e28:	f000 f9b2 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2078      	movs	r0, #120	; 0x78
 8001e32:	f000 f9ad 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001e36:	2210      	movs	r2, #16
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2078      	movs	r0, #120	; 0x78
 8001e3c:	f000 f9a8 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e40:	22b0      	movs	r2, #176	; 0xb0
 8001e42:	2100      	movs	r1, #0
 8001e44:	2078      	movs	r0, #120	; 0x78
 8001e46:	f000 f9a3 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001e4a:	22c8      	movs	r2, #200	; 0xc8
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2078      	movs	r0, #120	; 0x78
 8001e50:	f000 f99e 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	2078      	movs	r0, #120	; 0x78
 8001e5a:	f000 f999 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001e5e:	2210      	movs	r2, #16
 8001e60:	2100      	movs	r1, #0
 8001e62:	2078      	movs	r0, #120	; 0x78
 8001e64:	f000 f994 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2078      	movs	r0, #120	; 0x78
 8001e6e:	f000 f98f 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001e72:	2281      	movs	r2, #129	; 0x81
 8001e74:	2100      	movs	r1, #0
 8001e76:	2078      	movs	r0, #120	; 0x78
 8001e78:	f000 f98a 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001e7c:	22ff      	movs	r2, #255	; 0xff
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2078      	movs	r0, #120	; 0x78
 8001e82:	f000 f985 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001e86:	22a1      	movs	r2, #161	; 0xa1
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2078      	movs	r0, #120	; 0x78
 8001e8c:	f000 f980 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001e90:	22a6      	movs	r2, #166	; 0xa6
 8001e92:	2100      	movs	r1, #0
 8001e94:	2078      	movs	r0, #120	; 0x78
 8001e96:	f000 f97b 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001e9a:	22a8      	movs	r2, #168	; 0xa8
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2078      	movs	r0, #120	; 0x78
 8001ea0:	f000 f976 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001ea4:	223f      	movs	r2, #63	; 0x3f
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2078      	movs	r0, #120	; 0x78
 8001eaa:	f000 f971 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001eae:	22a4      	movs	r2, #164	; 0xa4
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2078      	movs	r0, #120	; 0x78
 8001eb4:	f000 f96c 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001eb8:	22d3      	movs	r2, #211	; 0xd3
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2078      	movs	r0, #120	; 0x78
 8001ebe:	f000 f967 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2078      	movs	r0, #120	; 0x78
 8001ec8:	f000 f962 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ecc:	22d5      	movs	r2, #213	; 0xd5
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2078      	movs	r0, #120	; 0x78
 8001ed2:	f000 f95d 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001ed6:	22f0      	movs	r2, #240	; 0xf0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2078      	movs	r0, #120	; 0x78
 8001edc:	f000 f958 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001ee0:	22d9      	movs	r2, #217	; 0xd9
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2078      	movs	r0, #120	; 0x78
 8001ee6:	f000 f953 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001eea:	2222      	movs	r2, #34	; 0x22
 8001eec:	2100      	movs	r1, #0
 8001eee:	2078      	movs	r0, #120	; 0x78
 8001ef0:	f000 f94e 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001ef4:	22da      	movs	r2, #218	; 0xda
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2078      	movs	r0, #120	; 0x78
 8001efa:	f000 f949 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001efe:	2212      	movs	r2, #18
 8001f00:	2100      	movs	r1, #0
 8001f02:	2078      	movs	r0, #120	; 0x78
 8001f04:	f000 f944 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001f08:	22db      	movs	r2, #219	; 0xdb
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	2078      	movs	r0, #120	; 0x78
 8001f0e:	f000 f93f 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001f12:	2220      	movs	r2, #32
 8001f14:	2100      	movs	r1, #0
 8001f16:	2078      	movs	r0, #120	; 0x78
 8001f18:	f000 f93a 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001f1c:	228d      	movs	r2, #141	; 0x8d
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2078      	movs	r0, #120	; 0x78
 8001f22:	f000 f935 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001f26:	2214      	movs	r2, #20
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2078      	movs	r0, #120	; 0x78
 8001f2c:	f000 f930 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001f30:	22af      	movs	r2, #175	; 0xaf
 8001f32:	2100      	movs	r1, #0
 8001f34:	2078      	movs	r0, #120	; 0x78
 8001f36:	f000 f92b 	bl	8002190 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001f3a:	222e      	movs	r2, #46	; 0x2e
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2078      	movs	r0, #120	; 0x78
 8001f40:	f000 f926 	bl	8002190 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f000 f843 	bl	8001fd0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001f4a:	f000 f813 	bl	8001f74 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <SSD1306_Init+0x184>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <SSD1306_Init+0x184>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <SSD1306_Init+0x184>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001f60:	2301      	movs	r3, #1
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20004e68 	.word	0x20004e68
 8001f70:	200004b4 	.word	0x200004b4

08001f74 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	e01d      	b.n	8001fbc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	3b50      	subs	r3, #80	; 0x50
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2078      	movs	r0, #120	; 0x78
 8001f8c:	f000 f900 	bl	8002190 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	2078      	movs	r0, #120	; 0x78
 8001f96:	f000 f8fb 	bl	8002190 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2078      	movs	r0, #120	; 0x78
 8001fa0:	f000 f8f6 	bl	8002190 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	01db      	lsls	r3, r3, #7
 8001fa8:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <SSD1306_UpdateScreen+0x58>)
 8001faa:	441a      	add	r2, r3
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	2140      	movs	r1, #64	; 0x40
 8001fb0:	2078      	movs	r0, #120	; 0x78
 8001fb2:	f000 f8a5 	bl	8002100 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b07      	cmp	r3, #7
 8001fc0:	d9de      	bls.n	8001f80 <SSD1306_UpdateScreen+0xc>
	}
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200000b4 	.word	0x200000b4

08001fd0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <SSD1306_Fill+0x14>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <SSD1306_Fill+0x16>
 8001fe4:	23ff      	movs	r3, #255	; 0xff
 8001fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fea:	4619      	mov	r1, r3
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <SSD1306_Fill+0x2c>)
 8001fee:	f00d f93f 	bl	800f270 <memset>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200000b4 	.word	0x200000b4

08002000 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
 800200a:	460b      	mov	r3, r1
 800200c:	80bb      	strh	r3, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	70fb      	strb	r3, [r7, #3]
	if (
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	2b7f      	cmp	r3, #127	; 0x7f
 8002016:	d848      	bhi.n	80020aa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002018:	88bb      	ldrh	r3, [r7, #4]
 800201a:	2b3f      	cmp	r3, #63	; 0x3f
 800201c:	d845      	bhi.n	80020aa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800201e:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <SSD1306_DrawPixel+0xb8>)
 8002020:	791b      	ldrb	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf0c      	ite	eq
 800202c:	2301      	moveq	r3, #1
 800202e:	2300      	movne	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d11a      	bne.n	8002070 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800203a:	88fa      	ldrh	r2, [r7, #6]
 800203c:	88bb      	ldrh	r3, [r7, #4]
 800203e:	08db      	lsrs	r3, r3, #3
 8002040:	b298      	uxth	r0, r3
 8002042:	4603      	mov	r3, r0
 8002044:	01db      	lsls	r3, r3, #7
 8002046:	4413      	add	r3, r2
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <SSD1306_DrawPixel+0xbc>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	b25a      	sxtb	r2, r3
 800204e:	88bb      	ldrh	r3, [r7, #4]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	b25b      	sxtb	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	b259      	sxtb	r1, r3
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	4603      	mov	r3, r0
 8002064:	01db      	lsls	r3, r3, #7
 8002066:	4413      	add	r3, r2
 8002068:	b2c9      	uxtb	r1, r1
 800206a:	4a14      	ldr	r2, [pc, #80]	; (80020bc <SSD1306_DrawPixel+0xbc>)
 800206c:	54d1      	strb	r1, [r2, r3]
 800206e:	e01d      	b.n	80020ac <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002070:	88fa      	ldrh	r2, [r7, #6]
 8002072:	88bb      	ldrh	r3, [r7, #4]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	b298      	uxth	r0, r3
 8002078:	4603      	mov	r3, r0
 800207a:	01db      	lsls	r3, r3, #7
 800207c:	4413      	add	r3, r2
 800207e:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <SSD1306_DrawPixel+0xbc>)
 8002080:	5cd3      	ldrb	r3, [r2, r3]
 8002082:	b25a      	sxtb	r2, r3
 8002084:	88bb      	ldrh	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	b25b      	sxtb	r3, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	b25b      	sxtb	r3, r3
 8002096:	4013      	ands	r3, r2
 8002098:	b259      	sxtb	r1, r3
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	4603      	mov	r3, r0
 800209e:	01db      	lsls	r3, r3, #7
 80020a0:	4413      	add	r3, r2
 80020a2:	b2c9      	uxtb	r1, r1
 80020a4:	4a05      	ldr	r2, [pc, #20]	; (80020bc <SSD1306_DrawPixel+0xbc>)
 80020a6:	54d1      	strb	r1, [r2, r3]
 80020a8:	e000      	b.n	80020ac <SSD1306_DrawPixel+0xac>
		return;
 80020aa:	bf00      	nop
	}
}
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	200004b4 	.word	0x200004b4
 80020bc:	200000b4 	.word	0x200000b4

080020c0 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff ff83 	bl	8001fd0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80020ca:	f7ff ff53 	bl	8001f74 <SSD1306_UpdateScreen>
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <ssd1306_I2C_Init+0x28>)
 80020dc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020de:	e002      	b.n	80020e6 <ssd1306_I2C_Init+0x12>
		p--;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f9      	bne.n	80020e0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	0003d090 	.word	0x0003d090

08002100 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b0c7      	sub	sp, #284	; 0x11c
 8002104:	af02      	add	r7, sp, #8
 8002106:	4604      	mov	r4, r0
 8002108:	4608      	mov	r0, r1
 800210a:	4639      	mov	r1, r7
 800210c:	600a      	str	r2, [r1, #0]
 800210e:	4619      	mov	r1, r3
 8002110:	1dfb      	adds	r3, r7, #7
 8002112:	4622      	mov	r2, r4
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	1dbb      	adds	r3, r7, #6
 8002118:	4602      	mov	r2, r0
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	460a      	mov	r2, r1
 8002120:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	1dba      	adds	r2, r7, #6
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800212c:	2300      	movs	r3, #0
 800212e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002132:	e010      	b.n	8002156 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002134:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002138:	463a      	mov	r2, r7
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	441a      	add	r2, r3
 800213e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002142:	3301      	adds	r3, #1
 8002144:	7811      	ldrb	r1, [r2, #0]
 8002146:	f107 020c 	add.w	r2, r7, #12
 800214a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800214c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002150:	3301      	adds	r3, #1
 8002152:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002156:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800215a:	b29b      	uxth	r3, r3
 800215c:	1d3a      	adds	r2, r7, #4
 800215e:	8812      	ldrh	r2, [r2, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d8e7      	bhi.n	8002134 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002164:	1dfb      	adds	r3, r7, #7
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b299      	uxth	r1, r3
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	b29b      	uxth	r3, r3
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	200a      	movs	r0, #10
 8002178:	9000      	str	r0, [sp, #0]
 800217a:	4804      	ldr	r0, [pc, #16]	; (800218c <ssd1306_I2C_WriteMulti+0x8c>)
 800217c:	f002 fd98 	bl	8004cb0 <HAL_I2C_Master_Transmit>
}
 8002180:	bf00      	nop
 8002182:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002186:	46bd      	mov	sp, r7
 8002188:	bd90      	pop	{r4, r7, pc}
 800218a:	bf00      	nop
 800218c:	20004e68 	.word	0x20004e68

08002190 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af02      	add	r7, sp, #8
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	460b      	mov	r3, r1
 800219c:	71bb      	strb	r3, [r7, #6]
 800219e:	4613      	mov	r3, r2
 80021a0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80021a2:	79bb      	ldrb	r3, [r7, #6]
 80021a4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80021a6:	797b      	ldrb	r3, [r7, #5]
 80021a8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	b299      	uxth	r1, r3
 80021ae:	f107 020c 	add.w	r2, r7, #12
 80021b2:	230a      	movs	r3, #10
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2302      	movs	r3, #2
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <ssd1306_I2C_Write+0x38>)
 80021ba:	f002 fd79 	bl	8004cb0 <HAL_I2C_Master_Transmit>
}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20004e68 	.word	0x20004e68

080021cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_MspInit+0x64>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a15      	ldr	r2, [pc, #84]	; (8002230 <HAL_MspInit+0x64>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_MspInit+0x64>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_MspInit+0x64>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <HAL_MspInit+0x64>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <HAL_MspInit+0x64>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	210f      	movs	r1, #15
 800220e:	f06f 0001 	mvn.w	r0, #1
 8002212:	f000 fc33 	bl	8002a7c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2105      	movs	r1, #5
 800221a:	2005      	movs	r0, #5
 800221c:	f000 fc2e 	bl	8002a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002220:	2005      	movs	r0, #5
 8002222:	f000 fc47 	bl	8002ab4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800

08002234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	; 0x30
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a42      	ldr	r2, [pc, #264]	; (800235c <HAL_I2C_MspInit+0x128>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d12c      	bne.n	80022b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a40      	ldr	r2, [pc, #256]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002272:	23c0      	movs	r3, #192	; 0xc0
 8002274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002276:	2312      	movs	r3, #18
 8002278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227a:	2301      	movs	r3, #1
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002282:	2304      	movs	r3, #4
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	4619      	mov	r1, r3
 800228c:	4835      	ldr	r0, [pc, #212]	; (8002364 <HAL_I2C_MspInit+0x130>)
 800228e:	f000 fcb1 	bl	8002bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a31      	ldr	r2, [pc, #196]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 800229c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80022ae:	e050      	b.n	8002352 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2c      	ldr	r2, [pc, #176]	; (8002368 <HAL_I2C_MspInit+0x134>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d14b      	bne.n	8002352 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a27      	ldr	r2, [pc, #156]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a20      	ldr	r2, [pc, #128]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f8:	2312      	movs	r3, #18
 80022fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002304:	2304      	movs	r3, #4
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	4619      	mov	r1, r3
 800230e:	4817      	ldr	r0, [pc, #92]	; (800236c <HAL_I2C_MspInit+0x138>)
 8002310:	f000 fc70 	bl	8002bf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231a:	2312      	movs	r3, #18
 800231c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231e:	2301      	movs	r3, #1
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002326:	2304      	movs	r3, #4
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	480f      	ldr	r0, [pc, #60]	; (8002370 <HAL_I2C_MspInit+0x13c>)
 8002332:	f000 fc5f 	bl	8002bf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 8002340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_I2C_MspInit+0x12c>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
}
 8002352:	bf00      	nop
 8002354:	3730      	adds	r7, #48	; 0x30
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40005400 	.word	0x40005400
 8002360:	40023800 	.word	0x40023800
 8002364:	40020400 	.word	0x40020400
 8002368:	40005c00 	.word	0x40005c00
 800236c:	40020800 	.word	0x40020800
 8002370:	40020000 	.word	0x40020000

08002374 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a28      	ldr	r2, [pc, #160]	; (8002434 <HAL_I2S_MspInit+0xc0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d14a      	bne.n	800242c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_I2S_MspInit+0xc4>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a26      	ldr	r2, [pc, #152]	; (8002438 <HAL_I2S_MspInit+0xc4>)
 80023a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_I2S_MspInit+0xc4>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_I2S_MspInit+0xc4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a1f      	ldr	r2, [pc, #124]	; (8002438 <HAL_I2S_MspInit+0xc4>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_I2S_MspInit+0xc4>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_I2S_MspInit+0xc4>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_I2S_MspInit+0xc4>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_I2S_MspInit+0xc4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80023ea:	2310      	movs	r3, #16
 80023ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023fa:	2306      	movs	r3, #6
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	480d      	ldr	r0, [pc, #52]	; (800243c <HAL_I2S_MspInit+0xc8>)
 8002406:	f000 fbf5 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800240a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800241c:	2306      	movs	r3, #6
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	4806      	ldr	r0, [pc, #24]	; (8002440 <HAL_I2S_MspInit+0xcc>)
 8002428:	f000 fbe4 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800242c:	bf00      	nop
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40003c00 	.word	0x40003c00
 8002438:	40023800 	.word	0x40023800
 800243c:	40020000 	.word	0x40020000
 8002440:	40020800 	.word	0x40020800

08002444 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <HAL_SPI_MspInit+0x84>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d12b      	bne.n	80024be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_SPI_MspInit+0x88>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <HAL_SPI_MspInit+0x88>)
 8002470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002474:	6453      	str	r3, [r2, #68]	; 0x44
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_SPI_MspInit+0x88>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <HAL_SPI_MspInit+0x88>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a10      	ldr	r2, [pc, #64]	; (80024cc <HAL_SPI_MspInit+0x88>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_SPI_MspInit+0x88>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800249e:	23e0      	movs	r3, #224	; 0xe0
 80024a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ae:	2305      	movs	r3, #5
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <HAL_SPI_MspInit+0x8c>)
 80024ba:	f000 fb9b 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024be:	bf00      	nop
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40013000 	.word	0x40013000
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40020000 	.word	0x40020000

080024d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d115      	bne.n	8002512 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_TIM_Base_MspInit+0x48>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a0b      	ldr	r2, [pc, #44]	; (800251c <HAL_TIM_Base_MspInit+0x48>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6413      	str	r3, [r2, #64]	; 0x40
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_TIM_Base_MspInit+0x48>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2105      	movs	r1, #5
 8002506:	201c      	movs	r0, #28
 8002508:	f000 fab8 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800250c:	201c      	movs	r0, #28
 800250e:	f000 fad1 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <HAL_UART_MspInit+0x94>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d133      	bne.n	80025aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_UART_MspInit+0x98>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_UART_MspInit+0x98>)
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_UART_MspInit+0x98>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_UART_MspInit+0x98>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_UART_MspInit+0x98>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_UART_MspInit+0x98>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800257a:	230c      	movs	r3, #12
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800258a:	2307      	movs	r3, #7
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	4809      	ldr	r0, [pc, #36]	; (80025bc <HAL_UART_MspInit+0x9c>)
 8002596:	f000 fb2d 	bl	8002bf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2105      	movs	r1, #5
 800259e:	2026      	movs	r0, #38	; 0x26
 80025a0:	f000 fa6c 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025a4:	2026      	movs	r0, #38	; 0x26
 80025a6:	f000 fa85 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40004400 	.word	0x40004400
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000

080025c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	2036      	movs	r0, #54	; 0x36
 80025d6:	f000 fa51 	bl	8002a7c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025da:	2036      	movs	r0, #54	; 0x36
 80025dc:	f000 fa6a 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_InitTick+0xa4>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <HAL_InitTick+0xa4>)
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	6413      	str	r3, [r2, #64]	; 0x40
 80025f0:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <HAL_InitTick+0xa4>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025fc:	f107 0210 	add.w	r2, r7, #16
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f004 fd90 	bl	800712c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800260c:	f004 fd66 	bl	80070dc <HAL_RCC_GetPCLK1Freq>
 8002610:	4603      	mov	r3, r0
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	4a13      	ldr	r2, [pc, #76]	; (8002668 <HAL_InitTick+0xa8>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0c9b      	lsrs	r3, r3, #18
 8002620:	3b01      	subs	r3, #1
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_InitTick+0xac>)
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <HAL_InitTick+0xb0>)
 8002628:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_InitTick+0xac>)
 800262c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002630:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002632:	4a0e      	ldr	r2, [pc, #56]	; (800266c <HAL_InitTick+0xac>)
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_InitTick+0xac>)
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_InitTick+0xac>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002644:	4809      	ldr	r0, [pc, #36]	; (800266c <HAL_InitTick+0xac>)
 8002646:	f004 ff6c 	bl	8007522 <HAL_TIM_Base_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002650:	4806      	ldr	r0, [pc, #24]	; (800266c <HAL_InitTick+0xac>)
 8002652:	f004 ffb5 	bl	80075c0 <HAL_TIM_Base_Start_IT>
 8002656:	4603      	mov	r3, r0
 8002658:	e000      	b.n	800265c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	3730      	adds	r7, #48	; 0x30
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	431bde83 	.word	0x431bde83
 800266c:	20005020 	.word	0x20005020
 8002670:	40001000 	.word	0x40001000

08002674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002678:	e7fe      	b.n	8002678 <NMI_Handler+0x4>

0800267a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800267e:	e7fe      	b.n	800267e <HardFault_Handler+0x4>

08002680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002684:	e7fe      	b.n	8002684 <MemManage_Handler+0x4>

08002686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800268a:	e7fe      	b.n	800268a <BusFault_Handler+0x4>

0800268c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <UsageFault_Handler+0x4>

08002692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <TIM2_IRQHandler+0x30>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <TIM2_IRQHandler+0x18>
			timer_count++;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <TIM2_IRQHandler+0x34>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <TIM2_IRQHandler+0x34>)
 80026c6:	701a      	strb	r2, [r3, #0]

	if(timer_count>5)
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <TIM2_IRQHandler+0x34>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d901      	bls.n	80026d4 <TIM2_IRQHandler+0x24>
		Message_handler();
 80026d0:	f7fe fbfa 	bl	8000ec8 <Message_handler>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026d4:	4804      	ldr	r0, [pc, #16]	; (80026e8 <TIM2_IRQHandler+0x38>)
 80026d6:	f004 ffe3 	bl	80076a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20004ddc 	.word	0x20004ddc
 80026e4:	200000b0 	.word	0x200000b0
 80026e8:	20004f48 	.word	0x20004f48

080026ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <USART2_IRQHandler+0x3c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	b2d1      	uxtb	r1, r2
 80026f8:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <USART2_IRQHandler+0x3c>)
 80026fa:	7011      	strb	r1, [r2, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <USART2_IRQHandler+0x40>)
 8002700:	18d1      	adds	r1, r2, r3
 8002702:	230a      	movs	r3, #10
 8002704:	2201      	movs	r2, #1
 8002706:	480a      	ldr	r0, [pc, #40]	; (8002730 <USART2_IRQHandler+0x44>)
 8002708:	f005 fc67 	bl	8007fda <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <USART2_IRQHandler+0x3c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	3b01      	subs	r3, #1
 8002712:	4a06      	ldr	r2, [pc, #24]	; (800272c <USART2_IRQHandler+0x40>)
 8002714:	5cd3      	ldrb	r3, [r2, r3]
 8002716:	2b0a      	cmp	r3, #10
 8002718:	d101      	bne.n	800271e <USART2_IRQHandler+0x32>
		Message_handler();
 800271a:	f7fe fbd5 	bl	8000ec8 <Message_handler>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800271e:	4804      	ldr	r0, [pc, #16]	; (8002730 <USART2_IRQHandler+0x44>)
 8002720:	f005 fcfe 	bl	8008120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	200000b1 	.word	0x200000b1
 800272c:	20004ddc 	.word	0x20004ddc
 8002730:	20004f90 	.word	0x20004f90

08002734 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */


  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <TIM6_DAC_IRQHandler+0x10>)
 800273a:	f004 ffb1 	bl	80076a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20005020 	.word	0x20005020

08002748 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <OTG_FS_IRQHandler+0x10>)
 800274e:	f000 fe71 	bl	8003434 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200054b4 	.word	0x200054b4

0800275c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <_sbrk+0x5c>)
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <_sbrk+0x60>)
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <_sbrk+0x64>)
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <_sbrk+0x68>)
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d207      	bcs.n	800279c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800278c:	f00c fd28 	bl	800f1e0 <__errno>
 8002790:	4603      	mov	r3, r0
 8002792:	220c      	movs	r2, #12
 8002794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800279a:	e009      	b.n	80027b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <_sbrk+0x64>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <_sbrk+0x64>)
 80027ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ae:	68fb      	ldr	r3, [r7, #12]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20020000 	.word	0x20020000
 80027bc:	00000400 	.word	0x00000400
 80027c0:	200004bc 	.word	0x200004bc
 80027c4:	200057c8 	.word	0x200057c8

080027c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <SystemInit+0x20>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <SystemInit+0x20>)
 80027d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027f0:	480d      	ldr	r0, [pc, #52]	; (8002828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027f2:	490e      	ldr	r1, [pc, #56]	; (800282c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027f4:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f8:	e002      	b.n	8002800 <LoopCopyDataInit>

080027fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fe:	3304      	adds	r3, #4

08002800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002804:	d3f9      	bcc.n	80027fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002808:	4c0b      	ldr	r4, [pc, #44]	; (8002838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800280c:	e001      	b.n	8002812 <LoopFillZerobss>

0800280e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002810:	3204      	adds	r2, #4

08002812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002814:	d3fb      	bcc.n	800280e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002816:	f7ff ffd7 	bl	80027c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281a:	f00c fce7 	bl	800f1ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281e:	f7fe fd19 	bl	8001254 <main>
  bx  lr    
 8002822:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800282c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002830:	08010e00 	.word	0x08010e00
  ldr r2, =_sbss
 8002834:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002838:	200057c8 	.word	0x200057c8

0800283c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC_IRQHandler>
	...

08002840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_Init+0x40>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_Init+0x40>)
 800284a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_Init+0x40>)
 8002856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800285a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_Init+0x40>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002868:	2003      	movs	r0, #3
 800286a:	f000 f8fc 	bl	8002a66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286e:	2000      	movs	r0, #0
 8002870:	f7ff fea6 	bl	80025c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002874:	f7ff fcaa 	bl	80021cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00

08002884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_IncTick+0x20>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_IncTick+0x24>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_IncTick+0x24>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000008 	.word	0x20000008
 80028a8:	20005068 	.word	0x20005068

080028ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_GetTick+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20005068 	.word	0x20005068

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff ffee 	bl	80028ac <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028dc:	d005      	beq.n	80028ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_Delay+0x44>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ea:	bf00      	nop
 80028ec:	f7ff ffde 	bl	80028ac <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d8f7      	bhi.n	80028ec <HAL_Delay+0x28>
  {
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000008 	.word	0x20000008

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	; (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4907      	ldr	r1, [pc, #28]	; (80029a8 <__NVIC_EnableIRQ+0x38>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	; (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ff4c 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8e:	f7ff ff61 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002a92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	6978      	ldr	r0, [r7, #20]
 8002a9a:	f7ff ffb1 	bl	8002a00 <NVIC_EncodePriority>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff ff80 	bl	80029ac <__NVIC_SetPriority>
}
 8002aac:	bf00      	nop
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ff54 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ade:	f7ff fee5 	bl	80028ac <HAL_GetTick>
 8002ae2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d008      	beq.n	8002b02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2280      	movs	r2, #128	; 0x80
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e052      	b.n	8002ba8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0216 	bic.w	r2, r2, #22
 8002b10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_DMA_Abort+0x62>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0208 	bic.w	r2, r2, #8
 8002b40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b52:	e013      	b.n	8002b7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b54:	f7ff feaa 	bl	80028ac <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	d90c      	bls.n	8002b7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2220      	movs	r2, #32
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2203      	movs	r2, #3
 8002b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e015      	b.n	8002ba8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e4      	bne.n	8002b54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	223f      	movs	r2, #63	; 0x3f
 8002b90:	409a      	lsls	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d004      	beq.n	8002bce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e00c      	b.n	8002be8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2205      	movs	r2, #5
 8002bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	e16b      	b.n	8002ee8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c10:	2201      	movs	r2, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	f040 815a 	bne.w	8002ee2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d005      	beq.n	8002c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d130      	bne.n	8002ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	2203      	movs	r2, #3
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 0201 	and.w	r2, r3, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d017      	beq.n	8002ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d123      	bne.n	8002d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	08da      	lsrs	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3208      	adds	r2, #8
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80b4 	beq.w	8002ee2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	4b60      	ldr	r3, [pc, #384]	; (8002f00 <HAL_GPIO_Init+0x30c>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	4a5f      	ldr	r2, [pc, #380]	; (8002f00 <HAL_GPIO_Init+0x30c>)
 8002d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d88:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8a:	4b5d      	ldr	r3, [pc, #372]	; (8002f00 <HAL_GPIO_Init+0x30c>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d96:	4a5b      	ldr	r2, [pc, #364]	; (8002f04 <HAL_GPIO_Init+0x310>)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_GPIO_Init+0x314>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d02b      	beq.n	8002e1a <HAL_GPIO_Init+0x226>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a51      	ldr	r2, [pc, #324]	; (8002f0c <HAL_GPIO_Init+0x318>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d025      	beq.n	8002e16 <HAL_GPIO_Init+0x222>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a50      	ldr	r2, [pc, #320]	; (8002f10 <HAL_GPIO_Init+0x31c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01f      	beq.n	8002e12 <HAL_GPIO_Init+0x21e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4f      	ldr	r2, [pc, #316]	; (8002f14 <HAL_GPIO_Init+0x320>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d019      	beq.n	8002e0e <HAL_GPIO_Init+0x21a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4e      	ldr	r2, [pc, #312]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_GPIO_Init+0x216>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4d      	ldr	r2, [pc, #308]	; (8002f1c <HAL_GPIO_Init+0x328>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00d      	beq.n	8002e06 <HAL_GPIO_Init+0x212>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4c      	ldr	r2, [pc, #304]	; (8002f20 <HAL_GPIO_Init+0x32c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <HAL_GPIO_Init+0x20e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a4b      	ldr	r2, [pc, #300]	; (8002f24 <HAL_GPIO_Init+0x330>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_GPIO_Init+0x20a>
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	e00e      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	e00c      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e02:	2306      	movs	r3, #6
 8002e04:	e00a      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e06:	2305      	movs	r3, #5
 8002e08:	e008      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	e006      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e004      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e002      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_GPIO_Init+0x228>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	f002 0203 	and.w	r2, r2, #3
 8002e22:	0092      	lsls	r2, r2, #2
 8002e24:	4093      	lsls	r3, r2
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e2c:	4935      	ldr	r1, [pc, #212]	; (8002f04 <HAL_GPIO_Init+0x310>)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	3302      	adds	r3, #2
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e5e:	4a32      	ldr	r2, [pc, #200]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e64:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e88:	4a27      	ldr	r2, [pc, #156]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002edc:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <HAL_GPIO_Init+0x334>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b0f      	cmp	r3, #15
 8002eec:	f67f ae90 	bls.w	8002c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40013800 	.word	0x40013800
 8002f08:	40020000 	.word	0x40020000
 8002f0c:	40020400 	.word	0x40020400
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40020c00 	.word	0x40020c00
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40021400 	.word	0x40021400
 8002f20:	40021800 	.word	0x40021800
 8002f24:	40021c00 	.word	0x40021c00
 8002f28:	40013c00 	.word	0x40013c00

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f48:	e003      	b.n	8002f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	041a      	lsls	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	619a      	str	r2, [r3, #24]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f60:	b08f      	sub	sp, #60	; 0x3c
 8002f62:	af0a      	add	r7, sp, #40	; 0x28
 8002f64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e054      	b.n	800301a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f00b fe7a 	bl	800ec84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2203      	movs	r2, #3
 8002f94:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f005 fe50 	bl	8008c54 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	687e      	ldr	r6, [r7, #4]
 8002fbc:	466d      	mov	r5, sp
 8002fbe:	f106 0410 	add.w	r4, r6, #16
 8002fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fce:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fd2:	1d33      	adds	r3, r6, #4
 8002fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f005 fdca 	bl	8008b70 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f005 fe47 	bl	8008c76 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	687e      	ldr	r6, [r7, #4]
 8002ff0:	466d      	mov	r5, sp
 8002ff2:	f106 0410 	add.w	r4, r6, #16
 8002ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003002:	e885 0003 	stmia.w	r5, {r0, r1}
 8003006:	1d33      	adds	r3, r6, #4
 8003008:	cb0e      	ldmia	r3, {r1, r2, r3}
 800300a:	6838      	ldr	r0, [r7, #0]
 800300c:	f005 ff5a 	bl	8008ec4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003022 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003022:	b590      	push	{r4, r7, lr}
 8003024:	b089      	sub	sp, #36	; 0x24
 8003026:	af04      	add	r7, sp, #16
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	4608      	mov	r0, r1
 800302c:	4611      	mov	r1, r2
 800302e:	461a      	mov	r2, r3
 8003030:	4603      	mov	r3, r0
 8003032:	70fb      	strb	r3, [r7, #3]
 8003034:	460b      	mov	r3, r1
 8003036:	70bb      	strb	r3, [r7, #2]
 8003038:	4613      	mov	r3, r2
 800303a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_HCD_HC_Init+0x28>
 8003046:	2302      	movs	r3, #2
 8003048:	e076      	b.n	8003138 <HAL_HCD_HC_Init+0x116>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	333d      	adds	r3, #61	; 0x3d
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3338      	adds	r3, #56	; 0x38
 8003072:	787a      	ldrb	r2, [r7, #1]
 8003074:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3340      	adds	r3, #64	; 0x40
 8003084:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003086:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3339      	adds	r3, #57	; 0x39
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	333f      	adds	r3, #63	; 0x3f
 80030a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80030ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	78ba      	ldrb	r2, [r7, #2]
 80030b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030b6:	b2d0      	uxtb	r0, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	333a      	adds	r3, #58	; 0x3a
 80030c4:	4602      	mov	r2, r0
 80030c6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80030c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da09      	bge.n	80030e4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	333b      	adds	r3, #59	; 0x3b
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e008      	b.n	80030f6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	333b      	adds	r3, #59	; 0x3b
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	212c      	movs	r1, #44	; 0x2c
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	4413      	add	r3, r2
 8003102:	333c      	adds	r3, #60	; 0x3c
 8003104:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003108:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	787c      	ldrb	r4, [r7, #1]
 8003110:	78ba      	ldrb	r2, [r7, #2]
 8003112:	78f9      	ldrb	r1, [r7, #3]
 8003114:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003116:	9302      	str	r3, [sp, #8]
 8003118:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	4623      	mov	r3, r4
 8003126:	f006 f84f 	bl	80091c8 <USB_HC_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bd90      	pop	{r4, r7, pc}

08003140 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_HCD_HC_Halt+0x1e>
 800315a:	2302      	movs	r3, #2
 800315c:	e00f      	b.n	800317e <HAL_HCD_HC_Halt+0x3e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f006 fa8b 	bl	800968a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	4608      	mov	r0, r1
 8003192:	4611      	mov	r1, r2
 8003194:	461a      	mov	r2, r3
 8003196:	4603      	mov	r3, r0
 8003198:	70fb      	strb	r3, [r7, #3]
 800319a:	460b      	mov	r3, r1
 800319c:	70bb      	strb	r3, [r7, #2]
 800319e:	4613      	mov	r3, r2
 80031a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	212c      	movs	r1, #44	; 0x2c
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	333b      	adds	r3, #59	; 0x3b
 80031b0:	78ba      	ldrb	r2, [r7, #2]
 80031b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	333f      	adds	r3, #63	; 0x3f
 80031c2:	787a      	ldrb	r2, [r7, #1]
 80031c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80031c6:	7c3b      	ldrb	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d112      	bne.n	80031f2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3342      	adds	r3, #66	; 0x42
 80031da:	2203      	movs	r2, #3
 80031dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	333d      	adds	r3, #61	; 0x3d
 80031ec:	7f3a      	ldrb	r2, [r7, #28]
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	e008      	b.n	8003204 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3342      	adds	r3, #66	; 0x42
 8003200:	2202      	movs	r2, #2
 8003202:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003204:	787b      	ldrb	r3, [r7, #1]
 8003206:	2b03      	cmp	r3, #3
 8003208:	f200 80c6 	bhi.w	8003398 <HAL_HCD_HC_SubmitRequest+0x210>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003225 	.word	0x08003225
 8003218:	08003385 	.word	0x08003385
 800321c:	08003289 	.word	0x08003289
 8003220:	08003307 	.word	0x08003307
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003224:	7c3b      	ldrb	r3, [r7, #16]
 8003226:	2b01      	cmp	r3, #1
 8003228:	f040 80b8 	bne.w	800339c <HAL_HCD_HC_SubmitRequest+0x214>
 800322c:	78bb      	ldrb	r3, [r7, #2]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 80b4 	bne.w	800339c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003234:	8b3b      	ldrh	r3, [r7, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d108      	bne.n	800324c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3355      	adds	r3, #85	; 0x55
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3355      	adds	r3, #85	; 0x55
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3342      	adds	r3, #66	; 0x42
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003272:	e093      	b.n	800339c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3342      	adds	r3, #66	; 0x42
 8003282:	2202      	movs	r2, #2
 8003284:	701a      	strb	r2, [r3, #0]
      break;
 8003286:	e089      	b.n	800339c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003288:	78bb      	ldrb	r3, [r7, #2]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11d      	bne.n	80032ca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3355      	adds	r3, #85	; 0x55
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	3342      	adds	r3, #66	; 0x42
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80032b4:	e073      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	3342      	adds	r3, #66	; 0x42
 80032c4:	2202      	movs	r2, #2
 80032c6:	701a      	strb	r2, [r3, #0]
      break;
 80032c8:	e069      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	3354      	adds	r3, #84	; 0x54
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	3342      	adds	r3, #66	; 0x42
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
      break;
 80032f0:	e055      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	3342      	adds	r3, #66	; 0x42
 8003300:	2202      	movs	r2, #2
 8003302:	701a      	strb	r2, [r3, #0]
      break;
 8003304:	e04b      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003306:	78bb      	ldrb	r3, [r7, #2]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d11d      	bne.n	8003348 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	3355      	adds	r3, #85	; 0x55
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3342      	adds	r3, #66	; 0x42
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003332:	e034      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3342      	adds	r3, #66	; 0x42
 8003342:	2202      	movs	r2, #2
 8003344:	701a      	strb	r2, [r3, #0]
      break;
 8003346:	e02a      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	3354      	adds	r3, #84	; 0x54
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3342      	adds	r3, #66	; 0x42
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
      break;
 800336e:	e016      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3342      	adds	r3, #66	; 0x42
 800337e:	2202      	movs	r2, #2
 8003380:	701a      	strb	r2, [r3, #0]
      break;
 8003382:	e00c      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3342      	adds	r3, #66	; 0x42
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
      break;
 8003396:	e002      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003398:	bf00      	nop
 800339a:	e000      	b.n	800339e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800339c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	3344      	adds	r3, #68	; 0x44
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	8b3a      	ldrh	r2, [r7, #24]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	202c      	movs	r0, #44	; 0x2c
 80033b8:	fb00 f303 	mul.w	r3, r0, r3
 80033bc:	440b      	add	r3, r1
 80033be:	334c      	adds	r3, #76	; 0x4c
 80033c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3360      	adds	r3, #96	; 0x60
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3350      	adds	r3, #80	; 0x50
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3339      	adds	r3, #57	; 0x39
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3361      	adds	r3, #97	; 0x61
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	222c      	movs	r2, #44	; 0x2c
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	3338      	adds	r3, #56	; 0x38
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	18d1      	adds	r1, r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	f005 ffde 	bl	80093e4 <USB_HC_StartXfer>
 8003428:	4603      	mov	r3, r0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop

08003434 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f005 fcf7 	bl	8008e3e <USB_GetMode>
 8003450:	4603      	mov	r3, r0
 8003452:	2b01      	cmp	r3, #1
 8003454:	f040 80ef 	bne.w	8003636 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f005 fcdb 	bl	8008e18 <USB_ReadInterrupts>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80e5 	beq.w	8003634 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f005 fcd2 	bl	8008e18 <USB_ReadInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800347e:	d104      	bne.n	800348a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003488:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f005 fcc2 	bl	8008e18 <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349e:	d104      	bne.n	80034aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f005 fcb2 	bl	8008e18 <USB_ReadInterrupts>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034be:	d104      	bne.n	80034ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f005 fca2 	bl	8008e18 <USB_ReadInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d103      	bne.n	80034e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2202      	movs	r2, #2
 80034e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f005 fc94 	bl	8008e18 <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034fa:	d115      	bne.n	8003528 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003504:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d108      	bne.n	8003528 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f00b fc32 	bl	800ed80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	4618      	mov	r0, r3
 8003524:	f005 fd8a 	bl	800903c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f005 fc73 	bl	8008e18 <USB_ReadInterrupts>
 8003532:	4603      	mov	r3, r0
 8003534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800353c:	d102      	bne.n	8003544 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f001 f9ff 	bl	8004942 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f005 fc65 	bl	8008e18 <USB_ReadInterrupts>
 800354e:	4603      	mov	r3, r0
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b08      	cmp	r3, #8
 8003556:	d106      	bne.n	8003566 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f00b fbf5 	bl	800ed48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2208      	movs	r2, #8
 8003564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f005 fc54 	bl	8008e18 <USB_ReadInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b10      	cmp	r3, #16
 8003578:	d101      	bne.n	800357e <HAL_HCD_IRQHandler+0x14a>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_HCD_IRQHandler+0x14c>
 800357e:	2300      	movs	r3, #0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d012      	beq.n	80035aa <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0210 	bic.w	r2, r2, #16
 8003592:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f001 f902 	bl	800479e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0210 	orr.w	r2, r2, #16
 80035a8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f005 fc32 	bl	8008e18 <USB_ReadInterrupts>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035be:	d13a      	bne.n	8003636 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f006 f84f 	bl	8009668 <USB_HC_ReadInterrupt>
 80035ca:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	e025      	b.n	800361e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	fa22 f303 	lsr.w	r3, r2, r3
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d018      	beq.n	8003618 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fc:	d106      	bne.n	800360c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f8ab 	bl	8003760 <HCD_HC_IN_IRQHandler>
 800360a:	e005      	b.n	8003618 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	4619      	mov	r1, r3
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fcc6 	bl	8003fa4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3301      	adds	r3, #1
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	429a      	cmp	r2, r3
 8003626:	d3d4      	bcc.n	80035d2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003630:	615a      	str	r2, [r3, #20]
 8003632:	e000      	b.n	8003636 <HAL_HCD_IRQHandler+0x202>
      return;
 8003634:	bf00      	nop
    }
  }
}
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_HCD_Start+0x16>
 800364e:	2302      	movs	r3, #2
 8003650:	e013      	b.n	800367a <HAL_HCD_Start+0x3e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f005 fae7 	bl	8008c32 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2101      	movs	r1, #1
 800366a:	4618      	mov	r0, r3
 800366c:	f005 fd4a 	bl	8009104 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_HCD_Stop+0x16>
 8003694:	2302      	movs	r3, #2
 8003696:	e00d      	b.n	80036b4 <HAL_HCD_Stop+0x32>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f006 f949 	bl	800993c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f005 fcf1 	bl	80090b0 <USB_ResetPort>
 80036ce:	4603      	mov	r3, r0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	3360      	adds	r3, #96	; 0x60
 80036f2:	781b      	ldrb	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3350      	adds	r3, #80	; 0x50
 800371a:	681b      	ldr	r3, [r3, #0]
}
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f005 fd35 	bl	80091a4 <USB_GetCurrentFrame>
 800373a:	4603      	mov	r3, r0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f005 fd10 	bl	8009176 <USB_GetHostSpeed>
 8003756:	4603      	mov	r3, r0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4413      	add	r3, r2
 8003782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b04      	cmp	r3, #4
 800378e:	d119      	bne.n	80037c4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	461a      	mov	r2, r3
 800379e:	2304      	movs	r3, #4
 80037a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	0151      	lsls	r1, r2, #5
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	440a      	add	r2, r1
 80037b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	60d3      	str	r3, [r2, #12]
 80037c2:	e101      	b.n	80039c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037da:	d12b      	bne.n	8003834 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	461a      	mov	r2, r3
 80037ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	212c      	movs	r1, #44	; 0x2c
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3361      	adds	r3, #97	; 0x61
 80037fe:	2207      	movs	r2, #7
 8003800:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	0151      	lsls	r1, r2, #5
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	440a      	add	r2, r1
 8003818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800381c:	f043 0302 	orr.w	r3, r3, #2
 8003820:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f005 ff2c 	bl	800968a <USB_HC_Halt>
 8003832:	e0c9      	b.n	80039c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b20      	cmp	r3, #32
 8003848:	d109      	bne.n	800385e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003856:	461a      	mov	r2, r3
 8003858:	2320      	movs	r3, #32
 800385a:	6093      	str	r3, [r2, #8]
 800385c:	e0b4      	b.n	80039c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b08      	cmp	r3, #8
 8003872:	d133      	bne.n	80038dc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	0151      	lsls	r1, r2, #5
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	440a      	add	r2, r1
 800388a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800388e:	f043 0302 	orr.w	r3, r3, #2
 8003892:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	4413      	add	r3, r2
 80038a0:	3361      	adds	r3, #97	; 0x61
 80038a2:	2205      	movs	r2, #5
 80038a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	461a      	mov	r2, r3
 80038b4:	2310      	movs	r3, #16
 80038b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	461a      	mov	r2, r3
 80038c6:	2308      	movs	r3, #8
 80038c8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f005 fed8 	bl	800968a <USB_HC_Halt>
 80038da:	e075      	b.n	80039c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d134      	bne.n	800395e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	0151      	lsls	r1, r2, #5
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	440a      	add	r2, r1
 800390a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800390e:	f043 0302 	orr.w	r3, r3, #2
 8003912:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	3361      	adds	r3, #97	; 0x61
 8003922:	2208      	movs	r2, #8
 8003924:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4413      	add	r3, r2
 800392e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003932:	461a      	mov	r2, r3
 8003934:	2310      	movs	r3, #16
 8003936:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	461a      	mov	r2, r3
 8003946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f005 fe97 	bl	800968a <USB_HC_Halt>
 800395c:	e034      	b.n	80039c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4413      	add	r3, r2
 8003966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d129      	bne.n	80039c8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	440a      	add	r2, r1
 800398a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	3361      	adds	r3, #97	; 0x61
 80039a2:	2206      	movs	r2, #6
 80039a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f005 fe6a 	bl	800968a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c2:	461a      	mov	r2, r3
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039de:	d122      	bne.n	8003a26 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	0151      	lsls	r1, r2, #5
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	440a      	add	r2, r1
 80039f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039fa:	f043 0302 	orr.w	r3, r3, #2
 80039fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f005 fe3d 	bl	800968a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a22:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003a24:	e2ba      	b.n	8003f9c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	f040 811b 	bne.w	8003c74 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d019      	beq.n	8003a7a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	3348      	adds	r3, #72	; 0x48
 8003a54:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	0159      	lsls	r1, r3, #5
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	440b      	add	r3, r1
 8003a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003a68:	1ad2      	subs	r2, r2, r3
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	202c      	movs	r0, #44	; 0x2c
 8003a70:	fb00 f303 	mul.w	r3, r0, r3
 8003a74:	440b      	add	r3, r1
 8003a76:	3350      	adds	r3, #80	; 0x50
 8003a78:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3361      	adds	r3, #97	; 0x61
 8003a88:	2201      	movs	r2, #1
 8003a8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	212c      	movs	r1, #44	; 0x2c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	335c      	adds	r3, #92	; 0x5c
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2301      	movs	r3, #1
 8003aae:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	212c      	movs	r1, #44	; 0x2c
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	333f      	adds	r3, #63	; 0x3f
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d009      	beq.n	8003ad8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	333f      	adds	r3, #63	; 0x3f
 8003ad2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d121      	bne.n	8003b1c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f005 fdc1 	bl	800968a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	2310      	movs	r3, #16
 8003b18:	6093      	str	r3, [r2, #8]
 8003b1a:	e066      	b.n	8003bea <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	333f      	adds	r3, #63	; 0x3f
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d127      	bne.n	8003b80 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	0151      	lsls	r1, r2, #5
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	440a      	add	r2, r1
 8003b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b4e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3360      	adds	r3, #96	; 0x60
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	b2d9      	uxtb	r1, r3
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	202c      	movs	r0, #44	; 0x2c
 8003b6c:	fb00 f303 	mul.w	r3, r0, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	3360      	adds	r3, #96	; 0x60
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f00b f90f 	bl	800ed9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b7e:	e034      	b.n	8003bea <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	212c      	movs	r1, #44	; 0x2c
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	333f      	adds	r3, #63	; 0x3f
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d12a      	bne.n	8003bea <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	212c      	movs	r1, #44	; 0x2c
 8003b9a:	fb01 f303 	mul.w	r3, r1, r3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3360      	adds	r3, #96	; 0x60
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	212c      	movs	r1, #44	; 0x2c
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3354      	adds	r3, #84	; 0x54
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	f083 0301 	eor.w	r3, r3, #1
 8003bba:	b2d8      	uxtb	r0, r3
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	212c      	movs	r1, #44	; 0x2c
 8003bc2:	fb01 f303 	mul.w	r3, r1, r3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3354      	adds	r3, #84	; 0x54
 8003bca:	4602      	mov	r2, r0
 8003bcc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	b2d9      	uxtb	r1, r3
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	202c      	movs	r0, #44	; 0x2c
 8003bd8:	fb00 f303 	mul.w	r3, r0, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	3360      	adds	r3, #96	; 0x60
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f00b f8d9 	bl	800ed9c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d12b      	bne.n	8003c4a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	212c      	movs	r1, #44	; 0x2c
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3348      	adds	r3, #72	; 0x48
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	202c      	movs	r0, #44	; 0x2c
 8003c08:	fb00 f202 	mul.w	r2, r0, r2
 8003c0c:	440a      	add	r2, r1
 8003c0e:	3240      	adds	r2, #64	; 0x40
 8003c10:	8812      	ldrh	r2, [r2, #0]
 8003c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 81be 	beq.w	8003f9c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3354      	adds	r3, #84	; 0x54
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	f083 0301 	eor.w	r3, r3, #1
 8003c34:	b2d8      	uxtb	r0, r3
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	212c      	movs	r1, #44	; 0x2c
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	3354      	adds	r3, #84	; 0x54
 8003c44:	4602      	mov	r2, r0
 8003c46:	701a      	strb	r2, [r3, #0]
}
 8003c48:	e1a8      	b.n	8003f9c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	212c      	movs	r1, #44	; 0x2c
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	4413      	add	r3, r2
 8003c56:	3354      	adds	r3, #84	; 0x54
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	f083 0301 	eor.w	r3, r3, #1
 8003c5e:	b2d8      	uxtb	r0, r3
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3354      	adds	r3, #84	; 0x54
 8003c6e:	4602      	mov	r2, r0
 8003c70:	701a      	strb	r2, [r3, #0]
}
 8003c72:	e193      	b.n	8003f9c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	f040 8106 	bne.w	8003e98 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	0151      	lsls	r1, r2, #5
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ca6:	f023 0302 	bic.w	r3, r3, #2
 8003caa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	212c      	movs	r1, #44	; 0x2c
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3361      	adds	r3, #97	; 0x61
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d109      	bne.n	8003cd4 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	212c      	movs	r1, #44	; 0x2c
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	3360      	adds	r3, #96	; 0x60
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	e0c9      	b.n	8003e68 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	212c      	movs	r1, #44	; 0x2c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	3361      	adds	r3, #97	; 0x61
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d109      	bne.n	8003cfc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	212c      	movs	r1, #44	; 0x2c
 8003cee:	fb01 f303 	mul.w	r3, r1, r3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3360      	adds	r3, #96	; 0x60
 8003cf6:	2205      	movs	r2, #5
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e0b5      	b.n	8003e68 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3361      	adds	r3, #97	; 0x61
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b06      	cmp	r3, #6
 8003d0e:	d009      	beq.n	8003d24 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3361      	adds	r3, #97	; 0x61
 8003d1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d150      	bne.n	8003dc6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	212c      	movs	r1, #44	; 0x2c
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	4413      	add	r3, r2
 8003d30:	335c      	adds	r3, #92	; 0x5c
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	202c      	movs	r0, #44	; 0x2c
 8003d3c:	fb00 f303 	mul.w	r3, r0, r3
 8003d40:	440b      	add	r3, r1
 8003d42:	335c      	adds	r3, #92	; 0x5c
 8003d44:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	212c      	movs	r1, #44	; 0x2c
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	4413      	add	r3, r2
 8003d52:	335c      	adds	r3, #92	; 0x5c
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d912      	bls.n	8003d80 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	212c      	movs	r1, #44	; 0x2c
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	335c      	adds	r3, #92	; 0x5c
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	3360      	adds	r3, #96	; 0x60
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d7e:	e073      	b.n	8003e68 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	212c      	movs	r1, #44	; 0x2c
 8003d86:	fb01 f303 	mul.w	r3, r1, r3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3360      	adds	r3, #96	; 0x60
 8003d8e:	2202      	movs	r2, #2
 8003d90:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003da8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003db0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003dc4:	e050      	b.n	8003e68 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3361      	adds	r3, #97	; 0x61
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d122      	bne.n	8003e20 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	3360      	adds	r3, #96	; 0x60
 8003de8:	2202      	movs	r2, #2
 8003dea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e02:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e0a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e023      	b.n	8003e68 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	212c      	movs	r1, #44	; 0x2c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3361      	adds	r3, #97	; 0x61
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b07      	cmp	r3, #7
 8003e32:	d119      	bne.n	8003e68 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	212c      	movs	r1, #44	; 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	335c      	adds	r3, #92	; 0x5c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	202c      	movs	r0, #44	; 0x2c
 8003e4c:	fb00 f303 	mul.w	r3, r0, r3
 8003e50:	440b      	add	r3, r1
 8003e52:	335c      	adds	r3, #92	; 0x5c
 8003e54:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	212c      	movs	r1, #44	; 0x2c
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	3360      	adds	r3, #96	; 0x60
 8003e64:	2204      	movs	r2, #4
 8003e66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e74:	461a      	mov	r2, r3
 8003e76:	2302      	movs	r3, #2
 8003e78:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	b2d9      	uxtb	r1, r3
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	202c      	movs	r0, #44	; 0x2c
 8003e84:	fb00 f303 	mul.w	r3, r0, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	3360      	adds	r3, #96	; 0x60
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f00a ff83 	bl	800ed9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e96:	e081      	b.n	8003f9c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d176      	bne.n	8003f9c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	333f      	adds	r3, #63	; 0x3f
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d121      	bne.n	8003f06 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	335c      	adds	r3, #92	; 0x5c
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	0151      	lsls	r1, r2, #5
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	440a      	add	r2, r1
 8003eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eee:	f043 0302 	orr.w	r3, r3, #2
 8003ef2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f005 fbc3 	bl	800968a <USB_HC_Halt>
 8003f04:	e041      	b.n	8003f8a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	212c      	movs	r1, #44	; 0x2c
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	333f      	adds	r3, #63	; 0x3f
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	333f      	adds	r3, #63	; 0x3f
 8003f28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d12d      	bne.n	8003f8a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	212c      	movs	r1, #44	; 0x2c
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	335c      	adds	r3, #92	; 0x5c
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d120      	bne.n	8003f8a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	3361      	adds	r3, #97	; 0x61
 8003f56:	2203      	movs	r2, #3
 8003f58:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f005 fb80 	bl	800968a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f96:	461a      	mov	r2, r3
 8003f98:	2310      	movs	r3, #16
 8003f9a:	6093      	str	r3, [r2, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d119      	bne.n	8004008 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2304      	movs	r3, #4
 8003fe4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004006:	e3c6      	b.n	8004796 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	4413      	add	r3, r2
 8004010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b20      	cmp	r3, #32
 800401c:	d13e      	bne.n	800409c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	4413      	add	r3, r2
 8004026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402a:	461a      	mov	r2, r3
 800402c:	2320      	movs	r3, #32
 800402e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	212c      	movs	r1, #44	; 0x2c
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	4413      	add	r3, r2
 800403c:	333d      	adds	r3, #61	; 0x3d
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	f040 83a8 	bne.w	8004796 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	333d      	adds	r3, #61	; 0x3d
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	212c      	movs	r1, #44	; 0x2c
 800405e:	fb01 f303 	mul.w	r3, r1, r3
 8004062:	4413      	add	r3, r2
 8004064:	3360      	adds	r3, #96	; 0x60
 8004066:	2202      	movs	r2, #2
 8004068:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	440a      	add	r2, r1
 8004080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f005 faf8 	bl	800968a <USB_HC_Halt>
}
 800409a:	e37c      	b.n	8004796 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b2:	d122      	bne.n	80040fa <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040ce:	f043 0302 	orr.w	r3, r3, #2
 80040d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f005 fad3 	bl	800968a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f0:	461a      	mov	r2, r3
 80040f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040f6:	6093      	str	r3, [r2, #8]
}
 80040f8:	e34d      	b.n	8004796 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b01      	cmp	r3, #1
 800410e:	d150      	bne.n	80041b2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	212c      	movs	r1, #44	; 0x2c
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	335c      	adds	r3, #92	; 0x5c
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004134:	2b40      	cmp	r3, #64	; 0x40
 8004136:	d111      	bne.n	800415c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	212c      	movs	r1, #44	; 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	333d      	adds	r3, #61	; 0x3d
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	4413      	add	r3, r2
 8004152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004156:	461a      	mov	r2, r3
 8004158:	2340      	movs	r3, #64	; 0x40
 800415a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	0151      	lsls	r1, r2, #5
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	440a      	add	r2, r1
 8004172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004176:	f043 0302 	orr.w	r3, r3, #2
 800417a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f005 fa7f 	bl	800968a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4413      	add	r3, r2
 8004194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004198:	461a      	mov	r2, r3
 800419a:	2301      	movs	r3, #1
 800419c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3361      	adds	r3, #97	; 0x61
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]
}
 80041b0:	e2f1      	b.n	8004796 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d13c      	bne.n	8004242 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	212c      	movs	r1, #44	; 0x2c
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	3361      	adds	r3, #97	; 0x61
 80041d6:	2204      	movs	r2, #4
 80041d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	212c      	movs	r1, #44	; 0x2c
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	333d      	adds	r3, #61	; 0x3d
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	335c      	adds	r3, #92	; 0x5c
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4413      	add	r3, r2
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	440a      	add	r2, r1
 8004214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f005 fa2e 	bl	800968a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	4413      	add	r3, r2
 8004236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423a:	461a      	mov	r2, r3
 800423c:	2340      	movs	r3, #64	; 0x40
 800423e:	6093      	str	r3, [r2, #8]
}
 8004240:	e2a9      	b.n	8004796 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	4413      	add	r3, r2
 800424a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b08      	cmp	r3, #8
 8004256:	d12a      	bne.n	80042ae <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4413      	add	r3, r2
 8004260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004264:	461a      	mov	r2, r3
 8004266:	2308      	movs	r3, #8
 8004268:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4413      	add	r3, r2
 8004272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	0151      	lsls	r1, r2, #5
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	440a      	add	r2, r1
 8004280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004284:	f043 0302 	orr.w	r3, r3, #2
 8004288:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	4611      	mov	r1, r2
 8004294:	4618      	mov	r0, r3
 8004296:	f005 f9f8 	bl	800968a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	3361      	adds	r3, #97	; 0x61
 80042a8:	2205      	movs	r2, #5
 80042aa:	701a      	strb	r2, [r3, #0]
}
 80042ac:	e273      	b.n	8004796 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d150      	bne.n	8004366 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	212c      	movs	r1, #44	; 0x2c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	335c      	adds	r3, #92	; 0x5c
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	3361      	adds	r3, #97	; 0x61
 80042e4:	2203      	movs	r2, #3
 80042e6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	212c      	movs	r1, #44	; 0x2c
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	333d      	adds	r3, #61	; 0x3d
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d112      	bne.n	8004322 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	212c      	movs	r1, #44	; 0x2c
 8004302:	fb01 f303 	mul.w	r3, r1, r3
 8004306:	4413      	add	r3, r2
 8004308:	333c      	adds	r3, #60	; 0x3c
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	212c      	movs	r1, #44	; 0x2c
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	4413      	add	r3, r2
 800431c:	333d      	adds	r3, #61	; 0x3d
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4413      	add	r3, r2
 800432a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	440a      	add	r2, r1
 8004338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f005 f99c 	bl	800968a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	4413      	add	r3, r2
 800435a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435e:	461a      	mov	r2, r3
 8004360:	2310      	movs	r3, #16
 8004362:	6093      	str	r3, [r2, #8]
}
 8004364:	e217      	b.n	8004796 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4413      	add	r3, r2
 800436e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b80      	cmp	r3, #128	; 0x80
 800437a:	d174      	bne.n	8004466 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d121      	bne.n	80043c8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	212c      	movs	r1, #44	; 0x2c
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	4413      	add	r3, r2
 8004390:	3361      	adds	r3, #97	; 0x61
 8004392:	2206      	movs	r2, #6
 8004394:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	4413      	add	r3, r2
 800439e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043b0:	f043 0302 	orr.w	r3, r3, #2
 80043b4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f005 f962 	bl	800968a <USB_HC_Halt>
 80043c6:	e044      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	212c      	movs	r1, #44	; 0x2c
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	4413      	add	r3, r2
 80043d4:	335c      	adds	r3, #92	; 0x5c
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	202c      	movs	r0, #44	; 0x2c
 80043e0:	fb00 f303 	mul.w	r3, r0, r3
 80043e4:	440b      	add	r3, r1
 80043e6:	335c      	adds	r3, #92	; 0x5c
 80043e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	212c      	movs	r1, #44	; 0x2c
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	335c      	adds	r3, #92	; 0x5c
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d920      	bls.n	8004440 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	212c      	movs	r1, #44	; 0x2c
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	4413      	add	r3, r2
 800440a:	335c      	adds	r3, #92	; 0x5c
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	212c      	movs	r1, #44	; 0x2c
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	4413      	add	r3, r2
 800441c:	3360      	adds	r3, #96	; 0x60
 800441e:	2204      	movs	r2, #4
 8004420:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	b2d9      	uxtb	r1, r3
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	202c      	movs	r0, #44	; 0x2c
 800442c:	fb00 f303 	mul.w	r3, r0, r3
 8004430:	4413      	add	r3, r2
 8004432:	3360      	adds	r3, #96	; 0x60
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f00a fcaf 	bl	800ed9c <HAL_HCD_HC_NotifyURBChange_Callback>
 800443e:	e008      	b.n	8004452 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	212c      	movs	r1, #44	; 0x2c
 8004446:	fb01 f303 	mul.w	r3, r1, r3
 800444a:	4413      	add	r3, r2
 800444c:	3360      	adds	r3, #96	; 0x60
 800444e:	2202      	movs	r2, #2
 8004450:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	4413      	add	r3, r2
 800445a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445e:	461a      	mov	r2, r3
 8004460:	2380      	movs	r3, #128	; 0x80
 8004462:	6093      	str	r3, [r2, #8]
}
 8004464:	e197      	b.n	8004796 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	4413      	add	r3, r2
 800446e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447c:	d134      	bne.n	80044e8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	0151      	lsls	r1, r2, #5
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	440a      	add	r2, r1
 8004494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004498:	f043 0302 	orr.w	r3, r3, #2
 800449c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f005 f8ee 	bl	800968a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ba:	461a      	mov	r2, r3
 80044bc:	2310      	movs	r3, #16
 80044be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044cc:	461a      	mov	r2, r3
 80044ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	3361      	adds	r3, #97	; 0x61
 80044e2:	2208      	movs	r2, #8
 80044e4:	701a      	strb	r2, [r3, #0]
}
 80044e6:	e156      	b.n	8004796 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	f040 814b 	bne.w	8004796 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	4413      	add	r3, r2
 8004508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	440a      	add	r2, r1
 8004516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800451a:	f023 0302 	bic.w	r3, r3, #2
 800451e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	212c      	movs	r1, #44	; 0x2c
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	4413      	add	r3, r2
 800452c:	3361      	adds	r3, #97	; 0x61
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d179      	bne.n	8004628 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	212c      	movs	r1, #44	; 0x2c
 800453a:	fb01 f303 	mul.w	r3, r1, r3
 800453e:	4413      	add	r3, r2
 8004540:	3360      	adds	r3, #96	; 0x60
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	212c      	movs	r1, #44	; 0x2c
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	333f      	adds	r3, #63	; 0x3f
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d00a      	beq.n	8004570 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	212c      	movs	r1, #44	; 0x2c
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	4413      	add	r3, r2
 8004566:	333f      	adds	r3, #63	; 0x3f
 8004568:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800456a:	2b03      	cmp	r3, #3
 800456c:	f040 80fc 	bne.w	8004768 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d142      	bne.n	80045fe <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	334c      	adds	r3, #76	; 0x4c
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80ed 	beq.w	8004768 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	212c      	movs	r1, #44	; 0x2c
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	4413      	add	r3, r2
 800459a:	334c      	adds	r3, #76	; 0x4c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	202c      	movs	r0, #44	; 0x2c
 80045a4:	fb00 f202 	mul.w	r2, r0, r2
 80045a8:	440a      	add	r2, r1
 80045aa:	3240      	adds	r2, #64	; 0x40
 80045ac:	8812      	ldrh	r2, [r2, #0]
 80045ae:	4413      	add	r3, r2
 80045b0:	3b01      	subs	r3, #1
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	202c      	movs	r0, #44	; 0x2c
 80045b8:	fb00 f202 	mul.w	r2, r0, r2
 80045bc:	440a      	add	r2, r1
 80045be:	3240      	adds	r2, #64	; 0x40
 80045c0:	8812      	ldrh	r2, [r2, #0]
 80045c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80ca 	beq.w	8004768 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	212c      	movs	r1, #44	; 0x2c
 80045da:	fb01 f303 	mul.w	r3, r1, r3
 80045de:	4413      	add	r3, r2
 80045e0:	3355      	adds	r3, #85	; 0x55
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	f083 0301 	eor.w	r3, r3, #1
 80045e8:	b2d8      	uxtb	r0, r3
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	212c      	movs	r1, #44	; 0x2c
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	3355      	adds	r3, #85	; 0x55
 80045f8:	4602      	mov	r2, r0
 80045fa:	701a      	strb	r2, [r3, #0]
 80045fc:	e0b4      	b.n	8004768 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	212c      	movs	r1, #44	; 0x2c
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	4413      	add	r3, r2
 800460a:	3355      	adds	r3, #85	; 0x55
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	f083 0301 	eor.w	r3, r3, #1
 8004612:	b2d8      	uxtb	r0, r3
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	3355      	adds	r3, #85	; 0x55
 8004622:	4602      	mov	r2, r0
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	e09f      	b.n	8004768 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	212c      	movs	r1, #44	; 0x2c
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	3361      	adds	r3, #97	; 0x61
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d109      	bne.n	8004650 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	212c      	movs	r1, #44	; 0x2c
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	4413      	add	r3, r2
 8004648:	3360      	adds	r3, #96	; 0x60
 800464a:	2202      	movs	r2, #2
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e08b      	b.n	8004768 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	212c      	movs	r1, #44	; 0x2c
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	4413      	add	r3, r2
 800465c:	3361      	adds	r3, #97	; 0x61
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b04      	cmp	r3, #4
 8004662:	d109      	bne.n	8004678 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	3360      	adds	r3, #96	; 0x60
 8004672:	2202      	movs	r2, #2
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	e077      	b.n	8004768 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	4413      	add	r3, r2
 8004684:	3361      	adds	r3, #97	; 0x61
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b05      	cmp	r3, #5
 800468a:	d109      	bne.n	80046a0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	212c      	movs	r1, #44	; 0x2c
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	3360      	adds	r3, #96	; 0x60
 800469a:	2205      	movs	r2, #5
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e063      	b.n	8004768 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	3361      	adds	r3, #97	; 0x61
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b06      	cmp	r3, #6
 80046b2:	d009      	beq.n	80046c8 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	212c      	movs	r1, #44	; 0x2c
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	4413      	add	r3, r2
 80046c0:	3361      	adds	r3, #97	; 0x61
 80046c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d14f      	bne.n	8004768 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	335c      	adds	r3, #92	; 0x5c
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	202c      	movs	r0, #44	; 0x2c
 80046e0:	fb00 f303 	mul.w	r3, r0, r3
 80046e4:	440b      	add	r3, r1
 80046e6:	335c      	adds	r3, #92	; 0x5c
 80046e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	212c      	movs	r1, #44	; 0x2c
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	4413      	add	r3, r2
 80046f6:	335c      	adds	r3, #92	; 0x5c
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d912      	bls.n	8004724 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	335c      	adds	r3, #92	; 0x5c
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	212c      	movs	r1, #44	; 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3360      	adds	r3, #96	; 0x60
 800471e:	2204      	movs	r2, #4
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e021      	b.n	8004768 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	212c      	movs	r1, #44	; 0x2c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	3360      	adds	r3, #96	; 0x60
 8004732:	2202      	movs	r2, #2
 8004734:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800474c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004754:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004762:	461a      	mov	r2, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	4413      	add	r3, r2
 8004770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004774:	461a      	mov	r2, r3
 8004776:	2302      	movs	r3, #2
 8004778:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	b2d9      	uxtb	r1, r3
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	202c      	movs	r0, #44	; 0x2c
 8004784:	fb00 f303 	mul.w	r3, r0, r3
 8004788:	4413      	add	r3, r2
 800478a:	3360      	adds	r3, #96	; 0x60
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f00a fb03 	bl	800ed9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004796:	bf00      	nop
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b08a      	sub	sp, #40	; 0x28
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	0c5b      	lsrs	r3, r3, #17
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047d2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d004      	beq.n	80047e4 <HCD_RXQLVL_IRQHandler+0x46>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b05      	cmp	r3, #5
 80047de:	f000 80a9 	beq.w	8004934 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80047e2:	e0aa      	b.n	800493a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 80a6 	beq.w	8004938 <HCD_RXQLVL_IRQHandler+0x19a>
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	212c      	movs	r1, #44	; 0x2c
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	3344      	adds	r3, #68	; 0x44
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 809b 	beq.w	8004938 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	212c      	movs	r1, #44	; 0x2c
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	4413      	add	r3, r2
 800480e:	3350      	adds	r3, #80	; 0x50
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	441a      	add	r2, r3
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	202c      	movs	r0, #44	; 0x2c
 800481c:	fb00 f303 	mul.w	r3, r0, r3
 8004820:	440b      	add	r3, r1
 8004822:	334c      	adds	r3, #76	; 0x4c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d87a      	bhi.n	8004920 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	212c      	movs	r1, #44	; 0x2c
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	4413      	add	r3, r2
 800483a:	3344      	adds	r3, #68	; 0x44
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	b292      	uxth	r2, r2
 8004842:	4619      	mov	r1, r3
 8004844:	f004 fabf 	bl	8008dc6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	212c      	movs	r1, #44	; 0x2c
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	3344      	adds	r3, #68	; 0x44
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	441a      	add	r2, r3
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	202c      	movs	r0, #44	; 0x2c
 8004862:	fb00 f303 	mul.w	r3, r0, r3
 8004866:	440b      	add	r3, r1
 8004868:	3344      	adds	r3, #68	; 0x44
 800486a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	212c      	movs	r1, #44	; 0x2c
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	4413      	add	r3, r2
 8004878:	3350      	adds	r3, #80	; 0x50
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	441a      	add	r2, r3
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	202c      	movs	r0, #44	; 0x2c
 8004886:	fb00 f303 	mul.w	r3, r0, r3
 800488a:	440b      	add	r3, r1
 800488c:	3350      	adds	r3, #80	; 0x50
 800488e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	0cdb      	lsrs	r3, r3, #19
 80048a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048a4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	212c      	movs	r1, #44	; 0x2c
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	4413      	add	r3, r2
 80048b2:	3340      	adds	r3, #64	; 0x40
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d13c      	bne.n	8004938 <HCD_RXQLVL_IRQHandler+0x19a>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d039      	beq.n	8004938 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048da:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048e2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	461a      	mov	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	212c      	movs	r1, #44	; 0x2c
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	3354      	adds	r3, #84	; 0x54
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	f083 0301 	eor.w	r3, r3, #1
 800490a:	b2d8      	uxtb	r0, r3
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	212c      	movs	r1, #44	; 0x2c
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	4413      	add	r3, r2
 8004918:	3354      	adds	r3, #84	; 0x54
 800491a:	4602      	mov	r2, r0
 800491c:	701a      	strb	r2, [r3, #0]
      break;
 800491e:	e00b      	b.n	8004938 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	212c      	movs	r1, #44	; 0x2c
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	4413      	add	r3, r2
 800492c:	3360      	adds	r3, #96	; 0x60
 800492e:	2204      	movs	r2, #4
 8004930:	701a      	strb	r2, [r3, #0]
      break;
 8004932:	e001      	b.n	8004938 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004934:	bf00      	nop
 8004936:	e000      	b.n	800493a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004938:	bf00      	nop
  }
}
 800493a:	bf00      	nop
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b086      	sub	sp, #24
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800496e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b02      	cmp	r3, #2
 8004978:	d10b      	bne.n	8004992 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b01      	cmp	r3, #1
 8004982:	d102      	bne.n	800498a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f00a f9ed 	bl	800ed64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f043 0302 	orr.w	r3, r3, #2
 8004990:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b08      	cmp	r3, #8
 800499a:	d132      	bne.n	8004a02 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f043 0308 	orr.w	r3, r3, #8
 80049a2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d126      	bne.n	80049fc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d113      	bne.n	80049de <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80049bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049c0:	d106      	bne.n	80049d0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f004 fb37 	bl	800903c <USB_InitFSLSPClkSel>
 80049ce:	e011      	b.n	80049f4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2101      	movs	r1, #1
 80049d6:	4618      	mov	r0, r3
 80049d8:	f004 fb30 	bl	800903c <USB_InitFSLSPClkSel>
 80049dc:	e00a      	b.n	80049f4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d106      	bne.n	80049f4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ec:	461a      	mov	r2, r3
 80049ee:	f64e 2360 	movw	r3, #60000	; 0xea60
 80049f2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f00a f9e3 	bl	800edc0 <HAL_HCD_PortEnabled_Callback>
 80049fa:	e002      	b.n	8004a02 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f00a f9ed 	bl	800eddc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d103      	bne.n	8004a14 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f043 0320 	orr.w	r3, r3, #32
 8004a12:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6013      	str	r3, [r2, #0]
}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e12b      	b.n	8004c92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fd fbf0 	bl	8002234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2224      	movs	r2, #36	; 0x24
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f002 fb26 	bl	80070dc <HAL_RCC_GetPCLK1Freq>
 8004a90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4a81      	ldr	r2, [pc, #516]	; (8004c9c <HAL_I2C_Init+0x274>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d807      	bhi.n	8004aac <HAL_I2C_Init+0x84>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a80      	ldr	r2, [pc, #512]	; (8004ca0 <HAL_I2C_Init+0x278>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bf94      	ite	ls
 8004aa4:	2301      	movls	r3, #1
 8004aa6:	2300      	movhi	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	e006      	b.n	8004aba <HAL_I2C_Init+0x92>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4a7d      	ldr	r2, [pc, #500]	; (8004ca4 <HAL_I2C_Init+0x27c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	bf94      	ite	ls
 8004ab4:	2301      	movls	r3, #1
 8004ab6:	2300      	movhi	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e0e7      	b.n	8004c92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4a78      	ldr	r2, [pc, #480]	; (8004ca8 <HAL_I2C_Init+0x280>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	0c9b      	lsrs	r3, r3, #18
 8004acc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a6a      	ldr	r2, [pc, #424]	; (8004c9c <HAL_I2C_Init+0x274>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d802      	bhi.n	8004afc <HAL_I2C_Init+0xd4>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	3301      	adds	r3, #1
 8004afa:	e009      	b.n	8004b10 <HAL_I2C_Init+0xe8>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	4a69      	ldr	r2, [pc, #420]	; (8004cac <HAL_I2C_Init+0x284>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	099b      	lsrs	r3, r3, #6
 8004b0e:	3301      	adds	r3, #1
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	495c      	ldr	r1, [pc, #368]	; (8004c9c <HAL_I2C_Init+0x274>)
 8004b2c:	428b      	cmp	r3, r1
 8004b2e:	d819      	bhi.n	8004b64 <HAL_I2C_Init+0x13c>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1e59      	subs	r1, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b3e:	1c59      	adds	r1, r3, #1
 8004b40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b44:	400b      	ands	r3, r1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_I2C_Init+0x138>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1e59      	subs	r1, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5e:	e051      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004b60:	2304      	movs	r3, #4
 8004b62:	e04f      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d111      	bne.n	8004b90 <HAL_I2C_Init+0x168>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1e58      	subs	r0, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	440b      	add	r3, r1
 8004b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e012      	b.n	8004bb6 <HAL_I2C_Init+0x18e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1e58      	subs	r0, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6859      	ldr	r1, [r3, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	0099      	lsls	r1, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_I2C_Init+0x196>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e022      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10e      	bne.n	8004be4 <HAL_I2C_Init+0x1bc>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1e58      	subs	r0, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6859      	ldr	r1, [r3, #4]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	440b      	add	r3, r1
 8004bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be2:	e00f      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1e58      	subs	r0, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6859      	ldr	r1, [r3, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	0099      	lsls	r1, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	6809      	ldr	r1, [r1, #0]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6911      	ldr	r1, [r2, #16]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68d2      	ldr	r2, [r2, #12]
 8004c3e:	4311      	orrs	r1, r2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	000186a0 	.word	0x000186a0
 8004ca0:	001e847f 	.word	0x001e847f
 8004ca4:	003d08ff 	.word	0x003d08ff
 8004ca8:	431bde83 	.word	0x431bde83
 8004cac:	10624dd3 	.word	0x10624dd3

08004cb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	817b      	strh	r3, [r7, #10]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cc4:	f7fd fdf2 	bl	80028ac <HAL_GetTick>
 8004cc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	f040 80e0 	bne.w	8004e98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	2319      	movs	r3, #25
 8004cde:	2201      	movs	r2, #1
 8004ce0:	4970      	ldr	r1, [pc, #448]	; (8004ea4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 ff30 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e0d3      	b.n	8004e9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_I2C_Master_Transmit+0x50>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e0cc      	b.n	8004e9a <HAL_I2C_Master_Transmit+0x1ea>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d007      	beq.n	8004d26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2221      	movs	r2, #33	; 0x21
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2210      	movs	r2, #16
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	893a      	ldrh	r2, [r7, #8]
 8004d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4a50      	ldr	r2, [pc, #320]	; (8004ea8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d68:	8979      	ldrh	r1, [r7, #10]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fcea 	bl	8005748 <I2C_MasterRequestWrite>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e08d      	b.n	8004e9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d94:	e066      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	6a39      	ldr	r1, [r7, #32]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 ffaa 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d107      	bne.n	8004dbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e06b      	b.n	8004e9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	781a      	ldrb	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d11b      	bne.n	8004e38 <HAL_I2C_Master_Transmit+0x188>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d017      	beq.n	8004e38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	781a      	ldrb	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	6a39      	ldr	r1, [r7, #32]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 ff9a 	bl	8005d76 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00d      	beq.n	8004e64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d107      	bne.n	8004e60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e01a      	b.n	8004e9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d194      	bne.n	8004d96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e000      	b.n	8004e9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
  }
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	00100002 	.word	0x00100002
 8004ea8:	ffff0000 	.word	0xffff0000

08004eac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	817b      	strh	r3, [r7, #10]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	813b      	strh	r3, [r7, #8]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ec6:	f7fd fcf1 	bl	80028ac <HAL_GetTick>
 8004eca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	f040 80d9 	bne.w	800508c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	2319      	movs	r3, #25
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	496d      	ldr	r1, [pc, #436]	; (8005098 <HAL_I2C_Mem_Write+0x1ec>)
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fe2f 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e0cc      	b.n	800508e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_I2C_Mem_Write+0x56>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e0c5      	b.n	800508e <HAL_I2C_Mem_Write+0x1e2>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d007      	beq.n	8004f28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2221      	movs	r2, #33	; 0x21
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2240      	movs	r2, #64	; 0x40
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a3a      	ldr	r2, [r7, #32]
 8004f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a4d      	ldr	r2, [pc, #308]	; (800509c <HAL_I2C_Mem_Write+0x1f0>)
 8004f68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f6a:	88f8      	ldrh	r0, [r7, #6]
 8004f6c:	893a      	ldrh	r2, [r7, #8]
 8004f6e:	8979      	ldrh	r1, [r7, #10]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	9301      	str	r3, [sp, #4]
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	4603      	mov	r3, r0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fc66 	bl	800584c <I2C_RequestMemoryWrite>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d052      	beq.n	800502c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e081      	b.n	800508e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 feb0 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d107      	bne.n	8004fb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e06b      	b.n	800508e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	781a      	ldrb	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d11b      	bne.n	800502c <HAL_I2C_Mem_Write+0x180>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d017      	beq.n	800502c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1aa      	bne.n	8004f8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fe9c 	bl	8005d76 <I2C_WaitOnBTFFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00d      	beq.n	8005060 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	2b04      	cmp	r3, #4
 800504a:	d107      	bne.n	800505c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e016      	b.n	800508e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800508c:	2302      	movs	r3, #2
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	00100002 	.word	0x00100002
 800509c:	ffff0000 	.word	0xffff0000

080050a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08c      	sub	sp, #48	; 0x30
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	4608      	mov	r0, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	461a      	mov	r2, r3
 80050ae:	4603      	mov	r3, r0
 80050b0:	817b      	strh	r3, [r7, #10]
 80050b2:	460b      	mov	r3, r1
 80050b4:	813b      	strh	r3, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050ba:	f7fd fbf7 	bl	80028ac <HAL_GetTick>
 80050be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	f040 8208 	bne.w	80054de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	2319      	movs	r3, #25
 80050d4:	2201      	movs	r2, #1
 80050d6:	497b      	ldr	r1, [pc, #492]	; (80052c4 <HAL_I2C_Mem_Read+0x224>)
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 fd35 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80050e4:	2302      	movs	r3, #2
 80050e6:	e1fb      	b.n	80054e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_I2C_Mem_Read+0x56>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e1f4      	b.n	80054e0 <HAL_I2C_Mem_Read+0x440>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	d007      	beq.n	800511c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800512a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2222      	movs	r2, #34	; 0x22
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2240      	movs	r2, #64	; 0x40
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800514c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a5b      	ldr	r2, [pc, #364]	; (80052c8 <HAL_I2C_Mem_Read+0x228>)
 800515c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800515e:	88f8      	ldrh	r0, [r7, #6]
 8005160:	893a      	ldrh	r2, [r7, #8]
 8005162:	8979      	ldrh	r1, [r7, #10]
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	4603      	mov	r3, r0
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fc02 	bl	8005978 <I2C_RequestMemoryRead>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e1b0      	b.n	80054e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005182:	2b00      	cmp	r3, #0
 8005184:	d113      	bne.n	80051ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005186:	2300      	movs	r3, #0
 8005188:	623b      	str	r3, [r7, #32]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	623b      	str	r3, [r7, #32]
 800519a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	e184      	b.n	80054b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d11b      	bne.n	80051ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c6:	2300      	movs	r3, #0
 80051c8:	61fb      	str	r3, [r7, #28]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	e164      	b.n	80054b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d11b      	bne.n	800522e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005204:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005214:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005216:	2300      	movs	r3, #0
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	e144      	b.n	80054b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005244:	e138      	b.n	80054b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	2b03      	cmp	r3, #3
 800524c:	f200 80f1 	bhi.w	8005432 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	2b01      	cmp	r3, #1
 8005256:	d123      	bne.n	80052a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fdcb 	bl	8005df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e139      	b.n	80054e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691a      	ldr	r2, [r3, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005288:	3b01      	subs	r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800529e:	e10b      	b.n	80054b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d14e      	bne.n	8005346 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	2200      	movs	r2, #0
 80052b0:	4906      	ldr	r1, [pc, #24]	; (80052cc <HAL_I2C_Mem_Read+0x22c>)
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fc48 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d008      	beq.n	80052d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e10e      	b.n	80054e0 <HAL_I2C_Mem_Read+0x440>
 80052c2:	bf00      	nop
 80052c4:	00100002 	.word	0x00100002
 80052c8:	ffff0000 	.word	0xffff0000
 80052cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005344:	e0b8      	b.n	80054b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	2200      	movs	r2, #0
 800534e:	4966      	ldr	r1, [pc, #408]	; (80054e8 <HAL_I2C_Mem_Read+0x448>)
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fbf9 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0bf      	b.n	80054e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800536e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	2200      	movs	r2, #0
 80053aa:	494f      	ldr	r1, [pc, #316]	; (80054e8 <HAL_I2C_Mem_Read+0x448>)
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fbcb 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e091      	b.n	80054e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005430:	e042      	b.n	80054b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005434:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 fcde 	bl	8005df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e04c      	b.n	80054e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b04      	cmp	r3, #4
 8005484:	d118      	bne.n	80054b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f47f aec2 	bne.w	8005246 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	e000      	b.n	80054e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80054de:	2302      	movs	r3, #2
  }
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3728      	adds	r7, #40	; 0x28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	00010004 	.word	0x00010004

080054ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	; 0x28
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	460b      	mov	r3, r1
 80054fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80054fc:	f7fd f9d6 	bl	80028ac <HAL_GetTick>
 8005500:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005502:	2301      	movs	r3, #1
 8005504:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b20      	cmp	r3, #32
 8005510:	f040 8111 	bne.w	8005736 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	2319      	movs	r3, #25
 800551a:	2201      	movs	r2, #1
 800551c:	4988      	ldr	r1, [pc, #544]	; (8005740 <HAL_I2C_IsDeviceReady+0x254>)
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fb12 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800552a:	2302      	movs	r3, #2
 800552c:	e104      	b.n	8005738 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_I2C_IsDeviceReady+0x50>
 8005538:	2302      	movs	r3, #2
 800553a:	e0fd      	b.n	8005738 <HAL_I2C_IsDeviceReady+0x24c>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b01      	cmp	r3, #1
 8005550:	d007      	beq.n	8005562 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005570:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2224      	movs	r2, #36	; 0x24
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a70      	ldr	r2, [pc, #448]	; (8005744 <HAL_I2C_IsDeviceReady+0x258>)
 8005584:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005594:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2200      	movs	r2, #0
 800559e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fad0 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00d      	beq.n	80055ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055bc:	d103      	bne.n	80055c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e0b6      	b.n	8005738 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ca:	897b      	ldrh	r3, [r7, #10]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80055da:	f7fd f967 	bl	80028ac <HAL_GetTick>
 80055de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	bf0c      	ite	eq
 80055ee:	2301      	moveq	r3, #1
 80055f0:	2300      	movne	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800560e:	e025      	b.n	800565c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005610:	f7fd f94c 	bl	80028ac <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d302      	bcc.n	8005626 <HAL_I2C_IsDeviceReady+0x13a>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d103      	bne.n	800562e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	22a0      	movs	r2, #160	; 0xa0
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b02      	cmp	r3, #2
 800563a:	bf0c      	ite	eq
 800563c:	2301      	moveq	r3, #1
 800563e:	2300      	movne	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005652:	bf0c      	ite	eq
 8005654:	2301      	moveq	r3, #1
 8005656:	2300      	movne	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2ba0      	cmp	r3, #160	; 0xa0
 8005666:	d005      	beq.n	8005674 <HAL_I2C_IsDeviceReady+0x188>
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d102      	bne.n	8005674 <HAL_I2C_IsDeviceReady+0x188>
 800566e:	7dbb      	ldrb	r3, [r7, #22]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0cd      	beq.n	8005610 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b02      	cmp	r3, #2
 8005688:	d129      	bne.n	80056de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005698:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	2319      	movs	r3, #25
 80056b6:	2201      	movs	r2, #1
 80056b8:	4921      	ldr	r1, [pc, #132]	; (8005740 <HAL_I2C_IsDeviceReady+0x254>)
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fa44 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e036      	b.n	8005738 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	e02c      	b.n	8005738 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	2319      	movs	r3, #25
 80056fe:	2201      	movs	r2, #1
 8005700:	490f      	ldr	r1, [pc, #60]	; (8005740 <HAL_I2C_IsDeviceReady+0x254>)
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fa20 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e012      	b.n	8005738 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	3301      	adds	r3, #1
 8005716:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	429a      	cmp	r2, r3
 800571e:	f4ff af32 	bcc.w	8005586 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005736:	2302      	movs	r3, #2
  }
}
 8005738:	4618      	mov	r0, r3
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	00100002 	.word	0x00100002
 8005744:	ffff0000 	.word	0xffff0000

08005748 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	460b      	mov	r3, r1
 8005756:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d006      	beq.n	8005772 <I2C_MasterRequestWrite+0x2a>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d003      	beq.n	8005772 <I2C_MasterRequestWrite+0x2a>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005770:	d108      	bne.n	8005784 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e00b      	b.n	800579c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	2b12      	cmp	r3, #18
 800578a:	d107      	bne.n	800579c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800579a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f9cd 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00d      	beq.n	80057d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c2:	d103      	bne.n	80057cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e035      	b.n	800583c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d8:	d108      	bne.n	80057ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057da:	897b      	ldrh	r3, [r7, #10]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057e8:	611a      	str	r2, [r3, #16]
 80057ea:	e01b      	b.n	8005824 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057ec:	897b      	ldrh	r3, [r7, #10]
 80057ee:	11db      	asrs	r3, r3, #7
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	f003 0306 	and.w	r3, r3, #6
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f063 030f 	orn	r3, r3, #15
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	490e      	ldr	r1, [pc, #56]	; (8005844 <I2C_MasterRequestWrite+0xfc>)
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f9f3 	bl	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e010      	b.n	800583c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800581a:	897b      	ldrh	r3, [r7, #10]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	4907      	ldr	r1, [pc, #28]	; (8005848 <I2C_MasterRequestWrite+0x100>)
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f9e3 	bl	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	00010008 	.word	0x00010008
 8005848:	00010002 	.word	0x00010002

0800584c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	4608      	mov	r0, r1
 8005856:	4611      	mov	r1, r2
 8005858:	461a      	mov	r2, r3
 800585a:	4603      	mov	r3, r0
 800585c:	817b      	strh	r3, [r7, #10]
 800585e:	460b      	mov	r3, r1
 8005860:	813b      	strh	r3, [r7, #8]
 8005862:	4613      	mov	r3, r2
 8005864:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005874:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	2200      	movs	r2, #0
 800587e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f960 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589c:	d103      	bne.n	80058a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e05f      	b.n	800596a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	492d      	ldr	r1, [pc, #180]	; (8005974 <I2C_RequestMemoryWrite+0x128>)
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 f998 	bl	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e04c      	b.n	800596a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e8:	6a39      	ldr	r1, [r7, #32]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fa02 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d107      	bne.n	800590e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e02b      	b.n	800596a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d105      	bne.n	8005924 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005918:	893b      	ldrh	r3, [r7, #8]
 800591a:	b2da      	uxtb	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	611a      	str	r2, [r3, #16]
 8005922:	e021      	b.n	8005968 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005924:	893b      	ldrh	r3, [r7, #8]
 8005926:	0a1b      	lsrs	r3, r3, #8
 8005928:	b29b      	uxth	r3, r3
 800592a:	b2da      	uxtb	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005934:	6a39      	ldr	r1, [r7, #32]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f9dc 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00d      	beq.n	800595e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b04      	cmp	r3, #4
 8005948:	d107      	bne.n	800595a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005958:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e005      	b.n	800596a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800595e:	893b      	ldrh	r3, [r7, #8]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	00010002 	.word	0x00010002

08005978 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	4608      	mov	r0, r1
 8005982:	4611      	mov	r1, r2
 8005984:	461a      	mov	r2, r3
 8005986:	4603      	mov	r3, r0
 8005988:	817b      	strh	r3, [r7, #10]
 800598a:	460b      	mov	r3, r1
 800598c:	813b      	strh	r3, [r7, #8]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f8c2 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d8:	d103      	bne.n	80059e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e0aa      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059e6:	897b      	ldrh	r3, [r7, #10]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	6a3a      	ldr	r2, [r7, #32]
 80059fa:	4952      	ldr	r1, [pc, #328]	; (8005b44 <I2C_RequestMemoryRead+0x1cc>)
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f8fa 	bl	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e097      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a24:	6a39      	ldr	r1, [r7, #32]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f964 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d107      	bne.n	8005a4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e076      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d105      	bne.n	8005a60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a54:	893b      	ldrh	r3, [r7, #8]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	e021      	b.n	8005aa4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a60:	893b      	ldrh	r3, [r7, #8]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a70:	6a39      	ldr	r1, [r7, #32]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f93e 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d107      	bne.n	8005a96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e050      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a9a:	893b      	ldrh	r3, [r7, #8]
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa6:	6a39      	ldr	r1, [r7, #32]
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f923 	bl	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d107      	bne.n	8005acc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e035      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ade:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f82b 	bl	8005b48 <I2C_WaitOnFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00d      	beq.n	8005b14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b06:	d103      	bne.n	8005b10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e013      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b14:	897b      	ldrh	r3, [r7, #10]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	4906      	ldr	r1, [pc, #24]	; (8005b44 <I2C_RequestMemoryRead+0x1cc>)
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f863 	bl	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	00010002 	.word	0x00010002

08005b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	4613      	mov	r3, r2
 8005b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b58:	e025      	b.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b60:	d021      	beq.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b62:	f7fc fea3 	bl	80028ac <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d302      	bcc.n	8005b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d116      	bne.n	8005ba6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f043 0220 	orr.w	r2, r3, #32
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e023      	b.n	8005bee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	0c1b      	lsrs	r3, r3, #16
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d10d      	bne.n	8005bcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	43da      	mvns	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bf0c      	ite	eq
 8005bc2:	2301      	moveq	r3, #1
 8005bc4:	2300      	movne	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	e00c      	b.n	8005be6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	43da      	mvns	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	bf0c      	ite	eq
 8005bde:	2301      	moveq	r3, #1
 8005be0:	2300      	movne	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d0b6      	beq.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c04:	e051      	b.n	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c14:	d123      	bne.n	8005c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f043 0204 	orr.w	r2, r3, #4
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e046      	b.n	8005cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c64:	d021      	beq.n	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c66:	f7fc fe21 	bl	80028ac <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d302      	bcc.n	8005c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d116      	bne.n	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f043 0220 	orr.w	r2, r3, #32
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e020      	b.n	8005cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	0c1b      	lsrs	r3, r3, #16
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d10c      	bne.n	8005cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	43da      	mvns	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bf14      	ite	ne
 8005cc6:	2301      	movne	r3, #1
 8005cc8:	2300      	moveq	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	e00b      	b.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	43da      	mvns	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bf14      	ite	ne
 8005ce0:	2301      	movne	r3, #1
 8005ce2:	2300      	moveq	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d18d      	bne.n	8005c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d00:	e02d      	b.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f8ce 	bl	8005ea4 <I2C_IsAcknowledgeFailed>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e02d      	b.n	8005d6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d18:	d021      	beq.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fc fdc7 	bl	80028ac <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d116      	bne.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f043 0220 	orr.w	r2, r3, #32
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e007      	b.n	8005d6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d68:	2b80      	cmp	r3, #128	; 0x80
 8005d6a:	d1ca      	bne.n	8005d02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d82:	e02d      	b.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f88d 	bl	8005ea4 <I2C_IsAcknowledgeFailed>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e02d      	b.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d9a:	d021      	beq.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9c:	f7fc fd86 	bl	80028ac <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d302      	bcc.n	8005db2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d116      	bne.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e007      	b.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d1ca      	bne.n	8005d84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e04:	e042      	b.n	8005e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d119      	bne.n	8005e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0210 	mvn.w	r2, #16
 8005e1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e029      	b.n	8005e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e48:	f7fc fd30 	bl	80028ac <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d302      	bcc.n	8005e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d116      	bne.n	8005e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	f043 0220 	orr.w	r2, r3, #32
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e007      	b.n	8005e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d1b5      	bne.n	8005e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eba:	d11b      	bne.n	8005ef4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ec4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	f043 0204 	orr.w	r2, r3, #4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e128      	b.n	8006168 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a90      	ldr	r2, [pc, #576]	; (8006170 <HAL_I2S_Init+0x26c>)
 8005f2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7fc fa1f 	bl	8002374 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005f4c:	f023 030f 	bic.w	r3, r3, #15
 8005f50:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2202      	movs	r2, #2
 8005f58:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d060      	beq.n	8006024 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d102      	bne.n	8005f70 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005f6a:	2310      	movs	r3, #16
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	e001      	b.n	8005f74 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005f70:	2320      	movs	r3, #32
 8005f72:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d802      	bhi.n	8005f82 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005f82:	2001      	movs	r0, #1
 8005f84:	f001 f9e6 	bl	8007354 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f88:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f92:	d125      	bne.n	8005fe0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d010      	beq.n	8005fbe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	461a      	mov	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb8:	3305      	adds	r3, #5
 8005fba:	613b      	str	r3, [r7, #16]
 8005fbc:	e01f      	b.n	8005ffe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fda:	3305      	adds	r3, #5
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	e00e      	b.n	8005ffe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffa:	3305      	adds	r3, #5
 8005ffc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4a5c      	ldr	r2, [pc, #368]	; (8006174 <HAL_I2S_Init+0x270>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	08db      	lsrs	r3, r3, #3
 8006008:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	085b      	lsrs	r3, r3, #1
 800601a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	e003      	b.n	800602c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006024:	2302      	movs	r3, #2
 8006026:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d902      	bls.n	8006038 <HAL_I2S_Init+0x134>
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	2bff      	cmp	r3, #255	; 0xff
 8006036:	d907      	bls.n	8006048 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603c:	f043 0210 	orr.w	r2, r3, #16
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e08f      	b.n	8006168 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	ea42 0103 	orr.w	r1, r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	430a      	orrs	r2, r1
 800605a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006066:	f023 030f 	bic.w	r3, r3, #15
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6851      	ldr	r1, [r2, #4]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6892      	ldr	r2, [r2, #8]
 8006072:	4311      	orrs	r1, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	68d2      	ldr	r2, [r2, #12]
 8006078:	4311      	orrs	r1, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6992      	ldr	r2, [r2, #24]
 800607e:	430a      	orrs	r2, r1
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800608a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d161      	bne.n	8006158 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a38      	ldr	r2, [pc, #224]	; (8006178 <HAL_I2S_Init+0x274>)
 8006098:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a37      	ldr	r2, [pc, #220]	; (800617c <HAL_I2S_Init+0x278>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <HAL_I2S_Init+0x1a4>
 80060a4:	4b36      	ldr	r3, [pc, #216]	; (8006180 <HAL_I2S_Init+0x27c>)
 80060a6:	e001      	b.n	80060ac <HAL_I2S_Init+0x1a8>
 80060a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6812      	ldr	r2, [r2, #0]
 80060b2:	4932      	ldr	r1, [pc, #200]	; (800617c <HAL_I2S_Init+0x278>)
 80060b4:	428a      	cmp	r2, r1
 80060b6:	d101      	bne.n	80060bc <HAL_I2S_Init+0x1b8>
 80060b8:	4a31      	ldr	r2, [pc, #196]	; (8006180 <HAL_I2S_Init+0x27c>)
 80060ba:	e001      	b.n	80060c0 <HAL_I2S_Init+0x1bc>
 80060bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80060c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80060c4:	f023 030f 	bic.w	r3, r3, #15
 80060c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2b      	ldr	r2, [pc, #172]	; (800617c <HAL_I2S_Init+0x278>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d101      	bne.n	80060d8 <HAL_I2S_Init+0x1d4>
 80060d4:	4b2a      	ldr	r3, [pc, #168]	; (8006180 <HAL_I2S_Init+0x27c>)
 80060d6:	e001      	b.n	80060dc <HAL_I2S_Init+0x1d8>
 80060d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060dc:	2202      	movs	r2, #2
 80060de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a25      	ldr	r2, [pc, #148]	; (800617c <HAL_I2S_Init+0x278>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d101      	bne.n	80060ee <HAL_I2S_Init+0x1ea>
 80060ea:	4b25      	ldr	r3, [pc, #148]	; (8006180 <HAL_I2S_Init+0x27c>)
 80060ec:	e001      	b.n	80060f2 <HAL_I2S_Init+0x1ee>
 80060ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fe:	d003      	beq.n	8006108 <HAL_I2S_Init+0x204>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d103      	bne.n	8006110 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	e001      	b.n	8006114 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800611e:	4313      	orrs	r3, r2
 8006120:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006128:	4313      	orrs	r3, r2
 800612a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006132:	4313      	orrs	r3, r2
 8006134:	b29a      	uxth	r2, r3
 8006136:	897b      	ldrh	r3, [r7, #10]
 8006138:	4313      	orrs	r3, r2
 800613a:	b29b      	uxth	r3, r3
 800613c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006140:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a0d      	ldr	r2, [pc, #52]	; (800617c <HAL_I2S_Init+0x278>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d101      	bne.n	8006150 <HAL_I2S_Init+0x24c>
 800614c:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <HAL_I2S_Init+0x27c>)
 800614e:	e001      	b.n	8006154 <HAL_I2S_Init+0x250>
 8006150:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006154:	897a      	ldrh	r2, [r7, #10]
 8006156:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	0800627b 	.word	0x0800627b
 8006174:	cccccccd 	.word	0xcccccccd
 8006178:	08006391 	.word	0x08006391
 800617c:	40003800 	.word	0x40003800
 8006180:	40003400 	.word	0x40003400

08006184 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	881a      	ldrh	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	1c9a      	adds	r2, r3, #2
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10e      	bne.n	8006214 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006204:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff ffb8 	bl	8006184 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	b292      	uxth	r2, r2
 8006230:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	1c9a      	adds	r2, r3, #2
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29a      	uxth	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800624e:	b29b      	uxth	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10e      	bne.n	8006272 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006262:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ff93 	bl	8006198 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b086      	sub	sp, #24
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b04      	cmp	r3, #4
 8006294:	d13a      	bne.n	800630c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b01      	cmp	r3, #1
 800629e:	d109      	bne.n	80062b4 <I2S_IRQHandler+0x3a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	d102      	bne.n	80062b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff ffb4 	bl	800621c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	d126      	bne.n	800630c <I2S_IRQHandler+0x92>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d11f      	bne.n	800630c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062dc:	2300      	movs	r3, #0
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fe:	f043 0202 	orr.w	r2, r3, #2
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff ff50 	bl	80061ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b03      	cmp	r3, #3
 8006316:	d136      	bne.n	8006386 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b02      	cmp	r3, #2
 8006320:	d109      	bne.n	8006336 <I2S_IRQHandler+0xbc>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632c:	2b80      	cmp	r3, #128	; 0x80
 800632e:	d102      	bne.n	8006336 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ff45 	bl	80061c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b08      	cmp	r3, #8
 800633e:	d122      	bne.n	8006386 <I2S_IRQHandler+0x10c>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b20      	cmp	r3, #32
 800634c:	d11b      	bne.n	8006386 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800635c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006378:	f043 0204 	orr.w	r2, r3, #4
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff ff13 	bl	80061ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006386:	bf00      	nop
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4aa2      	ldr	r2, [pc, #648]	; (8006630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d101      	bne.n	80063ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80063aa:	4ba2      	ldr	r3, [pc, #648]	; (8006634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063ac:	e001      	b.n	80063b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80063ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a9b      	ldr	r2, [pc, #620]	; (8006630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d101      	bne.n	80063cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80063c8:	4b9a      	ldr	r3, [pc, #616]	; (8006634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80063ca:	e001      	b.n	80063d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80063cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063dc:	d004      	beq.n	80063e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f040 8099 	bne.w	800651a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d107      	bne.n	8006402 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f925 	bl	800664c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b01      	cmp	r3, #1
 800640a:	d107      	bne.n	800641c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f9c8 	bl	80067ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d13a      	bne.n	800649c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d035      	beq.n	800649c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a7e      	ldr	r2, [pc, #504]	; (8006630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d101      	bne.n	800643e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800643a:	4b7e      	ldr	r3, [pc, #504]	; (8006634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800643c:	e001      	b.n	8006442 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800643e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4979      	ldr	r1, [pc, #484]	; (8006630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800644a:	428b      	cmp	r3, r1
 800644c:	d101      	bne.n	8006452 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800644e:	4b79      	ldr	r3, [pc, #484]	; (8006634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006450:	e001      	b.n	8006456 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006452:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006456:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800645a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800646a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648e:	f043 0202 	orr.w	r2, r3, #2
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff fe88 	bl	80061ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	f040 80be 	bne.w	8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80b8 	beq.w	8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a59      	ldr	r2, [pc, #356]	; (8006630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d101      	bne.n	80064d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80064ce:	4b59      	ldr	r3, [pc, #356]	; (8006634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064d0:	e001      	b.n	80064d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80064d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4954      	ldr	r1, [pc, #336]	; (8006630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80064de:	428b      	cmp	r3, r1
 80064e0:	d101      	bne.n	80064e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80064e2:	4b54      	ldr	r3, [pc, #336]	; (8006634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80064e4:	e001      	b.n	80064ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80064e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064f0:	2300      	movs	r3, #0
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60bb      	str	r3, [r7, #8]
 80064fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650a:	f043 0204 	orr.w	r2, r3, #4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff fe4a 	bl	80061ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006518:	e084      	b.n	8006624 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b02      	cmp	r3, #2
 8006522:	d107      	bne.n	8006534 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f8be 	bl	80066b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b01      	cmp	r3, #1
 800653c:	d107      	bne.n	800654e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f8fd 	bl	8006748 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d12f      	bne.n	80065b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d02a      	beq.n	80065b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006570:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a2e      	ldr	r2, [pc, #184]	; (8006630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d101      	bne.n	8006580 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800657c:	4b2d      	ldr	r3, [pc, #180]	; (8006634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800657e:	e001      	b.n	8006584 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006580:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4929      	ldr	r1, [pc, #164]	; (8006630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800658c:	428b      	cmp	r3, r1
 800658e:	d101      	bne.n	8006594 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006590:	4b28      	ldr	r3, [pc, #160]	; (8006634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006592:	e001      	b.n	8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006598:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800659c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065aa:	f043 0202 	orr.w	r2, r3, #2
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fdfa 	bl	80061ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d131      	bne.n	8006626 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d02c      	beq.n	8006626 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a17      	ldr	r2, [pc, #92]	; (8006630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80065d6:	4b17      	ldr	r3, [pc, #92]	; (8006634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065d8:	e001      	b.n	80065de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80065da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4912      	ldr	r1, [pc, #72]	; (8006630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065e6:	428b      	cmp	r3, r1
 80065e8:	d101      	bne.n	80065ee <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80065ea:	4b12      	ldr	r3, [pc, #72]	; (8006634 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065ec:	e001      	b.n	80065f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80065ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006606:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006614:	f043 0204 	orr.w	r2, r3, #4
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff fdc5 	bl	80061ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006622:	e000      	b.n	8006626 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006624:	bf00      	nop
}
 8006626:	bf00      	nop
 8006628:	3720      	adds	r7, #32
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	40003800 	.word	0x40003800
 8006634:	40003400 	.word	0x40003400

08006638 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	1c99      	adds	r1, r3, #2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6251      	str	r1, [r2, #36]	; 0x24
 800665e:	881a      	ldrh	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d113      	bne.n	80066a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800668c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff ffc9 	bl	8006638 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	1c99      	adds	r1, r3, #2
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6251      	str	r1, [r2, #36]	; 0x24
 80066c2:	8819      	ldrh	r1, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <I2SEx_TxISR_I2SExt+0x90>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d101      	bne.n	80066d2 <I2SEx_TxISR_I2SExt+0x22>
 80066ce:	4b1d      	ldr	r3, [pc, #116]	; (8006744 <I2SEx_TxISR_I2SExt+0x94>)
 80066d0:	e001      	b.n	80066d6 <I2SEx_TxISR_I2SExt+0x26>
 80066d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066d6:	460a      	mov	r2, r1
 80066d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d121      	bne.n	8006736 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a12      	ldr	r2, [pc, #72]	; (8006740 <I2SEx_TxISR_I2SExt+0x90>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d101      	bne.n	8006700 <I2SEx_TxISR_I2SExt+0x50>
 80066fc:	4b11      	ldr	r3, [pc, #68]	; (8006744 <I2SEx_TxISR_I2SExt+0x94>)
 80066fe:	e001      	b.n	8006704 <I2SEx_TxISR_I2SExt+0x54>
 8006700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	490d      	ldr	r1, [pc, #52]	; (8006740 <I2SEx_TxISR_I2SExt+0x90>)
 800670c:	428b      	cmp	r3, r1
 800670e:	d101      	bne.n	8006714 <I2SEx_TxISR_I2SExt+0x64>
 8006710:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <I2SEx_TxISR_I2SExt+0x94>)
 8006712:	e001      	b.n	8006718 <I2SEx_TxISR_I2SExt+0x68>
 8006714:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006718:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800671c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff ff81 	bl	8006638 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40003800 	.word	0x40003800
 8006744:	40003400 	.word	0x40003400

08006748 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68d8      	ldr	r0, [r3, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	1c99      	adds	r1, r3, #2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006760:	b282      	uxth	r2, r0
 8006762:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006776:	b29b      	uxth	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d113      	bne.n	80067a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800678a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff ff4a 	bl	8006638 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a20      	ldr	r2, [pc, #128]	; (800683c <I2SEx_RxISR_I2SExt+0x90>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d101      	bne.n	80067c2 <I2SEx_RxISR_I2SExt+0x16>
 80067be:	4b20      	ldr	r3, [pc, #128]	; (8006840 <I2SEx_RxISR_I2SExt+0x94>)
 80067c0:	e001      	b.n	80067c6 <I2SEx_RxISR_I2SExt+0x1a>
 80067c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067c6:	68d8      	ldr	r0, [r3, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	1c99      	adds	r1, r3, #2
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80067d2:	b282      	uxth	r2, r0
 80067d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d121      	bne.n	8006832 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a12      	ldr	r2, [pc, #72]	; (800683c <I2SEx_RxISR_I2SExt+0x90>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d101      	bne.n	80067fc <I2SEx_RxISR_I2SExt+0x50>
 80067f8:	4b11      	ldr	r3, [pc, #68]	; (8006840 <I2SEx_RxISR_I2SExt+0x94>)
 80067fa:	e001      	b.n	8006800 <I2SEx_RxISR_I2SExt+0x54>
 80067fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	490d      	ldr	r1, [pc, #52]	; (800683c <I2SEx_RxISR_I2SExt+0x90>)
 8006808:	428b      	cmp	r3, r1
 800680a:	d101      	bne.n	8006810 <I2SEx_RxISR_I2SExt+0x64>
 800680c:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <I2SEx_RxISR_I2SExt+0x94>)
 800680e:	e001      	b.n	8006814 <I2SEx_RxISR_I2SExt+0x68>
 8006810:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006814:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006818:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d106      	bne.n	8006832 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff ff03 	bl	8006638 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	40003800 	.word	0x40003800
 8006840:	40003400 	.word	0x40003400

08006844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e264      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d075      	beq.n	800694e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006862:	4ba3      	ldr	r3, [pc, #652]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 030c 	and.w	r3, r3, #12
 800686a:	2b04      	cmp	r3, #4
 800686c:	d00c      	beq.n	8006888 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800686e:	4ba0      	ldr	r3, [pc, #640]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006876:	2b08      	cmp	r3, #8
 8006878:	d112      	bne.n	80068a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800687a:	4b9d      	ldr	r3, [pc, #628]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006886:	d10b      	bne.n	80068a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006888:	4b99      	ldr	r3, [pc, #612]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d05b      	beq.n	800694c <HAL_RCC_OscConfig+0x108>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d157      	bne.n	800694c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e23f      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a8:	d106      	bne.n	80068b8 <HAL_RCC_OscConfig+0x74>
 80068aa:	4b91      	ldr	r3, [pc, #580]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a90      	ldr	r2, [pc, #576]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80068b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	e01d      	b.n	80068f4 <HAL_RCC_OscConfig+0xb0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068c0:	d10c      	bne.n	80068dc <HAL_RCC_OscConfig+0x98>
 80068c2:	4b8b      	ldr	r3, [pc, #556]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a8a      	ldr	r2, [pc, #552]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80068c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	4b88      	ldr	r3, [pc, #544]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a87      	ldr	r2, [pc, #540]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80068d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	e00b      	b.n	80068f4 <HAL_RCC_OscConfig+0xb0>
 80068dc:	4b84      	ldr	r3, [pc, #528]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a83      	ldr	r2, [pc, #524]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80068e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	4b81      	ldr	r3, [pc, #516]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a80      	ldr	r2, [pc, #512]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80068ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d013      	beq.n	8006924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fc:	f7fb ffd6 	bl	80028ac <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006904:	f7fb ffd2 	bl	80028ac <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b64      	cmp	r3, #100	; 0x64
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e204      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006916:	4b76      	ldr	r3, [pc, #472]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0f0      	beq.n	8006904 <HAL_RCC_OscConfig+0xc0>
 8006922:	e014      	b.n	800694e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006924:	f7fb ffc2 	bl	80028ac <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800692c:	f7fb ffbe 	bl	80028ac <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b64      	cmp	r3, #100	; 0x64
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e1f0      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800693e:	4b6c      	ldr	r3, [pc, #432]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f0      	bne.n	800692c <HAL_RCC_OscConfig+0xe8>
 800694a:	e000      	b.n	800694e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800694c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d063      	beq.n	8006a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800695a:	4b65      	ldr	r3, [pc, #404]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 030c 	and.w	r3, r3, #12
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00b      	beq.n	800697e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006966:	4b62      	ldr	r3, [pc, #392]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800696e:	2b08      	cmp	r3, #8
 8006970:	d11c      	bne.n	80069ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006972:	4b5f      	ldr	r3, [pc, #380]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d116      	bne.n	80069ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800697e:	4b5c      	ldr	r3, [pc, #368]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <HAL_RCC_OscConfig+0x152>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d001      	beq.n	8006996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e1c4      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006996:	4b56      	ldr	r3, [pc, #344]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	4952      	ldr	r1, [pc, #328]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069aa:	e03a      	b.n	8006a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d020      	beq.n	80069f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069b4:	4b4f      	ldr	r3, [pc, #316]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 80069b6:	2201      	movs	r2, #1
 80069b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ba:	f7fb ff77 	bl	80028ac <HAL_GetTick>
 80069be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069c2:	f7fb ff73 	bl	80028ac <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e1a5      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069d4:	4b46      	ldr	r3, [pc, #280]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0f0      	beq.n	80069c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e0:	4b43      	ldr	r3, [pc, #268]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	4940      	ldr	r1, [pc, #256]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	600b      	str	r3, [r1, #0]
 80069f4:	e015      	b.n	8006a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069f6:	4b3f      	ldr	r3, [pc, #252]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fc:	f7fb ff56 	bl	80028ac <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a04:	f7fb ff52 	bl	80028ac <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e184      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a16:	4b36      	ldr	r3, [pc, #216]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1f0      	bne.n	8006a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d030      	beq.n	8006a90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d016      	beq.n	8006a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a36:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <HAL_RCC_OscConfig+0x2b4>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3c:	f7fb ff36 	bl	80028ac <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a44:	f7fb ff32 	bl	80028ac <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e164      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a56:	4b26      	ldr	r3, [pc, #152]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0f0      	beq.n	8006a44 <HAL_RCC_OscConfig+0x200>
 8006a62:	e015      	b.n	8006a90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a64:	4b24      	ldr	r3, [pc, #144]	; (8006af8 <HAL_RCC_OscConfig+0x2b4>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a6a:	f7fb ff1f 	bl	80028ac <HAL_GetTick>
 8006a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a70:	e008      	b.n	8006a84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a72:	f7fb ff1b 	bl	80028ac <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e14d      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a84:	4b1a      	ldr	r3, [pc, #104]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1f0      	bne.n	8006a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 80a0 	beq.w	8006bde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aa2:	4b13      	ldr	r3, [pc, #76]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10f      	bne.n	8006ace <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006abc:	6413      	str	r3, [r2, #64]	; 0x40
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <HAL_RCC_OscConfig+0x2ac>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aca:	2301      	movs	r3, #1
 8006acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ace:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <HAL_RCC_OscConfig+0x2b8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d121      	bne.n	8006b1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ada:	4b08      	ldr	r3, [pc, #32]	; (8006afc <HAL_RCC_OscConfig+0x2b8>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a07      	ldr	r2, [pc, #28]	; (8006afc <HAL_RCC_OscConfig+0x2b8>)
 8006ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ae6:	f7fb fee1 	bl	80028ac <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aec:	e011      	b.n	8006b12 <HAL_RCC_OscConfig+0x2ce>
 8006aee:	bf00      	nop
 8006af0:	40023800 	.word	0x40023800
 8006af4:	42470000 	.word	0x42470000
 8006af8:	42470e80 	.word	0x42470e80
 8006afc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b00:	f7fb fed4 	bl	80028ac <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e106      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b12:	4b85      	ldr	r3, [pc, #532]	; (8006d28 <HAL_RCC_OscConfig+0x4e4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0f0      	beq.n	8006b00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d106      	bne.n	8006b34 <HAL_RCC_OscConfig+0x2f0>
 8006b26:	4b81      	ldr	r3, [pc, #516]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2a:	4a80      	ldr	r2, [pc, #512]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006b2c:	f043 0301 	orr.w	r3, r3, #1
 8006b30:	6713      	str	r3, [r2, #112]	; 0x70
 8006b32:	e01c      	b.n	8006b6e <HAL_RCC_OscConfig+0x32a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	2b05      	cmp	r3, #5
 8006b3a:	d10c      	bne.n	8006b56 <HAL_RCC_OscConfig+0x312>
 8006b3c:	4b7b      	ldr	r3, [pc, #492]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b40:	4a7a      	ldr	r2, [pc, #488]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006b42:	f043 0304 	orr.w	r3, r3, #4
 8006b46:	6713      	str	r3, [r2, #112]	; 0x70
 8006b48:	4b78      	ldr	r3, [pc, #480]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4c:	4a77      	ldr	r2, [pc, #476]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006b4e:	f043 0301 	orr.w	r3, r3, #1
 8006b52:	6713      	str	r3, [r2, #112]	; 0x70
 8006b54:	e00b      	b.n	8006b6e <HAL_RCC_OscConfig+0x32a>
 8006b56:	4b75      	ldr	r3, [pc, #468]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	4a74      	ldr	r2, [pc, #464]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006b5c:	f023 0301 	bic.w	r3, r3, #1
 8006b60:	6713      	str	r3, [r2, #112]	; 0x70
 8006b62:	4b72      	ldr	r3, [pc, #456]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b66:	4a71      	ldr	r2, [pc, #452]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006b68:	f023 0304 	bic.w	r3, r3, #4
 8006b6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d015      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b76:	f7fb fe99 	bl	80028ac <HAL_GetTick>
 8006b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b7c:	e00a      	b.n	8006b94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b7e:	f7fb fe95 	bl	80028ac <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e0c5      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b94:	4b65      	ldr	r3, [pc, #404]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d0ee      	beq.n	8006b7e <HAL_RCC_OscConfig+0x33a>
 8006ba0:	e014      	b.n	8006bcc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ba2:	f7fb fe83 	bl	80028ac <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ba8:	e00a      	b.n	8006bc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006baa:	f7fb fe7f 	bl	80028ac <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e0af      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bc0:	4b5a      	ldr	r3, [pc, #360]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1ee      	bne.n	8006baa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d105      	bne.n	8006bde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bd2:	4b56      	ldr	r3, [pc, #344]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	4a55      	ldr	r2, [pc, #340]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 809b 	beq.w	8006d1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006be8:	4b50      	ldr	r3, [pc, #320]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 030c 	and.w	r3, r3, #12
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d05c      	beq.n	8006cae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d141      	bne.n	8006c80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bfc:	4b4c      	ldr	r3, [pc, #304]	; (8006d30 <HAL_RCC_OscConfig+0x4ec>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c02:	f7fb fe53 	bl	80028ac <HAL_GetTick>
 8006c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c08:	e008      	b.n	8006c1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c0a:	f7fb fe4f 	bl	80028ac <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d901      	bls.n	8006c1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e081      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c1c:	4b43      	ldr	r3, [pc, #268]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1f0      	bne.n	8006c0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	019b      	lsls	r3, r3, #6
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	3b01      	subs	r3, #1
 8006c42:	041b      	lsls	r3, r3, #16
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	061b      	lsls	r3, r3, #24
 8006c4c:	4937      	ldr	r1, [pc, #220]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c52:	4b37      	ldr	r3, [pc, #220]	; (8006d30 <HAL_RCC_OscConfig+0x4ec>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c58:	f7fb fe28 	bl	80028ac <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c60:	f7fb fe24 	bl	80028ac <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e056      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c72:	4b2e      	ldr	r3, [pc, #184]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f0      	beq.n	8006c60 <HAL_RCC_OscConfig+0x41c>
 8006c7e:	e04e      	b.n	8006d1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c80:	4b2b      	ldr	r3, [pc, #172]	; (8006d30 <HAL_RCC_OscConfig+0x4ec>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c86:	f7fb fe11 	bl	80028ac <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c8e:	f7fb fe0d 	bl	80028ac <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e03f      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ca0:	4b22      	ldr	r3, [pc, #136]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f0      	bne.n	8006c8e <HAL_RCC_OscConfig+0x44a>
 8006cac:	e037      	b.n	8006d1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e032      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cba:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <HAL_RCC_OscConfig+0x4e8>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d028      	beq.n	8006d1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d121      	bne.n	8006d1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d11a      	bne.n	8006d1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cea:	4013      	ands	r3, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cf0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d111      	bne.n	8006d1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	3b01      	subs	r3, #1
 8006d04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d107      	bne.n	8006d1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d001      	beq.n	8006d1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	40007000 	.word	0x40007000
 8006d2c:	40023800 	.word	0x40023800
 8006d30:	42470060 	.word	0x42470060

08006d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0cc      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d48:	4b68      	ldr	r3, [pc, #416]	; (8006eec <HAL_RCC_ClockConfig+0x1b8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d90c      	bls.n	8006d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d56:	4b65      	ldr	r3, [pc, #404]	; (8006eec <HAL_RCC_ClockConfig+0x1b8>)
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d5e:	4b63      	ldr	r3, [pc, #396]	; (8006eec <HAL_RCC_ClockConfig+0x1b8>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d001      	beq.n	8006d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0b8      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d020      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d88:	4b59      	ldr	r3, [pc, #356]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	4a58      	ldr	r2, [pc, #352]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006da0:	4b53      	ldr	r3, [pc, #332]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	4a52      	ldr	r2, [pc, #328]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dac:	4b50      	ldr	r3, [pc, #320]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	494d      	ldr	r1, [pc, #308]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d044      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d107      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dd2:	4b47      	ldr	r3, [pc, #284]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d119      	bne.n	8006e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e07f      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d003      	beq.n	8006df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d107      	bne.n	8006e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006df2:	4b3f      	ldr	r3, [pc, #252]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e06f      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e02:	4b3b      	ldr	r3, [pc, #236]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e067      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e12:	4b37      	ldr	r3, [pc, #220]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f023 0203 	bic.w	r2, r3, #3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	4934      	ldr	r1, [pc, #208]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e24:	f7fb fd42 	bl	80028ac <HAL_GetTick>
 8006e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e2a:	e00a      	b.n	8006e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e2c:	f7fb fd3e 	bl	80028ac <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e04f      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e42:	4b2b      	ldr	r3, [pc, #172]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 020c 	and.w	r2, r3, #12
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d1eb      	bne.n	8006e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e54:	4b25      	ldr	r3, [pc, #148]	; (8006eec <HAL_RCC_ClockConfig+0x1b8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d20c      	bcs.n	8006e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e62:	4b22      	ldr	r3, [pc, #136]	; (8006eec <HAL_RCC_ClockConfig+0x1b8>)
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e6a:	4b20      	ldr	r3, [pc, #128]	; (8006eec <HAL_RCC_ClockConfig+0x1b8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d001      	beq.n	8006e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e032      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d008      	beq.n	8006e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e88:	4b19      	ldr	r3, [pc, #100]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	4916      	ldr	r1, [pc, #88]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ea6:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	490e      	ldr	r1, [pc, #56]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006eba:	f000 f821 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	091b      	lsrs	r3, r3, #4
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	490a      	ldr	r1, [pc, #40]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8006ecc:	5ccb      	ldrb	r3, [r1, r3]
 8006ece:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed2:	4a09      	ldr	r2, [pc, #36]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ed6:	4b09      	ldr	r3, [pc, #36]	; (8006efc <HAL_RCC_ClockConfig+0x1c8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fb fb70 	bl	80025c0 <HAL_InitTick>

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	40023c00 	.word	0x40023c00
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	08010dd8 	.word	0x08010dd8
 8006ef8:	20000000 	.word	0x20000000
 8006efc:	20000004 	.word	0x20000004

08006f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	607b      	str	r3, [r7, #4]
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	2300      	movs	r3, #0
 8006f12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f18:	4b67      	ldr	r3, [pc, #412]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 030c 	and.w	r3, r3, #12
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d00d      	beq.n	8006f40 <HAL_RCC_GetSysClockFreq+0x40>
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	f200 80bd 	bhi.w	80070a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <HAL_RCC_GetSysClockFreq+0x34>
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d003      	beq.n	8006f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f32:	e0b7      	b.n	80070a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f34:	4b61      	ldr	r3, [pc, #388]	; (80070bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f36:	60bb      	str	r3, [r7, #8]
       break;
 8006f38:	e0b7      	b.n	80070aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f3a:	4b61      	ldr	r3, [pc, #388]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006f3c:	60bb      	str	r3, [r7, #8]
      break;
 8006f3e:	e0b4      	b.n	80070aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f40:	4b5d      	ldr	r3, [pc, #372]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f4a:	4b5b      	ldr	r3, [pc, #364]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d04d      	beq.n	8006ff2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f56:	4b58      	ldr	r3, [pc, #352]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	099b      	lsrs	r3, r3, #6
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f66:	f04f 0100 	mov.w	r1, #0
 8006f6a:	ea02 0800 	and.w	r8, r2, r0
 8006f6e:	ea03 0901 	and.w	r9, r3, r1
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	014b      	lsls	r3, r1, #5
 8006f80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f84:	0142      	lsls	r2, r0, #5
 8006f86:	4610      	mov	r0, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	ebb0 0008 	subs.w	r0, r0, r8
 8006f8e:	eb61 0109 	sbc.w	r1, r1, r9
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	f04f 0300 	mov.w	r3, #0
 8006f9a:	018b      	lsls	r3, r1, #6
 8006f9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006fa0:	0182      	lsls	r2, r0, #6
 8006fa2:	1a12      	subs	r2, r2, r0
 8006fa4:	eb63 0301 	sbc.w	r3, r3, r1
 8006fa8:	f04f 0000 	mov.w	r0, #0
 8006fac:	f04f 0100 	mov.w	r1, #0
 8006fb0:	00d9      	lsls	r1, r3, #3
 8006fb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fb6:	00d0      	lsls	r0, r2, #3
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	eb12 0208 	adds.w	r2, r2, r8
 8006fc0:	eb43 0309 	adc.w	r3, r3, r9
 8006fc4:	f04f 0000 	mov.w	r0, #0
 8006fc8:	f04f 0100 	mov.w	r1, #0
 8006fcc:	0259      	lsls	r1, r3, #9
 8006fce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006fd2:	0250      	lsls	r0, r2, #9
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4619      	mov	r1, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f04f 0300 	mov.w	r3, #0
 8006fe4:	f7f9 fdc2 	bl	8000b6c <__aeabi_uldivmod>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4613      	mov	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e04a      	b.n	8007088 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ff2:	4b31      	ldr	r3, [pc, #196]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f04f 0300 	mov.w	r3, #0
 8006ffe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007002:	f04f 0100 	mov.w	r1, #0
 8007006:	ea02 0400 	and.w	r4, r2, r0
 800700a:	ea03 0501 	and.w	r5, r3, r1
 800700e:	4620      	mov	r0, r4
 8007010:	4629      	mov	r1, r5
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	014b      	lsls	r3, r1, #5
 800701c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007020:	0142      	lsls	r2, r0, #5
 8007022:	4610      	mov	r0, r2
 8007024:	4619      	mov	r1, r3
 8007026:	1b00      	subs	r0, r0, r4
 8007028:	eb61 0105 	sbc.w	r1, r1, r5
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	018b      	lsls	r3, r1, #6
 8007036:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800703a:	0182      	lsls	r2, r0, #6
 800703c:	1a12      	subs	r2, r2, r0
 800703e:	eb63 0301 	sbc.w	r3, r3, r1
 8007042:	f04f 0000 	mov.w	r0, #0
 8007046:	f04f 0100 	mov.w	r1, #0
 800704a:	00d9      	lsls	r1, r3, #3
 800704c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007050:	00d0      	lsls	r0, r2, #3
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	1912      	adds	r2, r2, r4
 8007058:	eb45 0303 	adc.w	r3, r5, r3
 800705c:	f04f 0000 	mov.w	r0, #0
 8007060:	f04f 0100 	mov.w	r1, #0
 8007064:	0299      	lsls	r1, r3, #10
 8007066:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800706a:	0290      	lsls	r0, r2, #10
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4610      	mov	r0, r2
 8007072:	4619      	mov	r1, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	461a      	mov	r2, r3
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	f7f9 fd76 	bl	8000b6c <__aeabi_uldivmod>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4613      	mov	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007088:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	0c1b      	lsrs	r3, r3, #16
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	3301      	adds	r3, #1
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a0:	60bb      	str	r3, [r7, #8]
      break;
 80070a2:	e002      	b.n	80070aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80070a6:	60bb      	str	r3, [r7, #8]
      break;
 80070a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070aa:	68bb      	ldr	r3, [r7, #8]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80070b6:	bf00      	nop
 80070b8:	40023800 	.word	0x40023800
 80070bc:	00f42400 	.word	0x00f42400
 80070c0:	007a1200 	.word	0x007a1200

080070c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070c8:	4b03      	ldr	r3, [pc, #12]	; (80070d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80070ca:	681b      	ldr	r3, [r3, #0]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	20000000 	.word	0x20000000

080070dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070e0:	f7ff fff0 	bl	80070c4 <HAL_RCC_GetHCLKFreq>
 80070e4:	4602      	mov	r2, r0
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	0a9b      	lsrs	r3, r3, #10
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	4903      	ldr	r1, [pc, #12]	; (8007100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070f2:	5ccb      	ldrb	r3, [r1, r3]
 80070f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	40023800 	.word	0x40023800
 8007100:	08010de8 	.word	0x08010de8

08007104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007108:	f7ff ffdc 	bl	80070c4 <HAL_RCC_GetHCLKFreq>
 800710c:	4602      	mov	r2, r0
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	0b5b      	lsrs	r3, r3, #13
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	4903      	ldr	r1, [pc, #12]	; (8007128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800711a:	5ccb      	ldrb	r3, [r1, r3]
 800711c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007120:	4618      	mov	r0, r3
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40023800 	.word	0x40023800
 8007128:	08010de8 	.word	0x08010de8

0800712c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	220f      	movs	r2, #15
 800713a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800713c:	4b12      	ldr	r3, [pc, #72]	; (8007188 <HAL_RCC_GetClockConfig+0x5c>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f003 0203 	and.w	r2, r3, #3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <HAL_RCC_GetClockConfig+0x5c>)
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <HAL_RCC_GetClockConfig+0x5c>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007160:	4b09      	ldr	r3, [pc, #36]	; (8007188 <HAL_RCC_GetClockConfig+0x5c>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	08db      	lsrs	r3, r3, #3
 8007166:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800716e:	4b07      	ldr	r3, [pc, #28]	; (800718c <HAL_RCC_GetClockConfig+0x60>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0207 	and.w	r2, r3, #7
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	601a      	str	r2, [r3, #0]
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40023800 	.word	0x40023800
 800718c:	40023c00 	.word	0x40023c00

08007190 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d105      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d035      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80071b8:	4b62      	ldr	r3, [pc, #392]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80071ba:	2200      	movs	r2, #0
 80071bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071be:	f7fb fb75 	bl	80028ac <HAL_GetTick>
 80071c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071c4:	e008      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071c6:	f7fb fb71 	bl	80028ac <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e0b0      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071d8:	4b5b      	ldr	r3, [pc, #364]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1f0      	bne.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	019a      	lsls	r2, r3, #6
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	071b      	lsls	r3, r3, #28
 80071f0:	4955      	ldr	r1, [pc, #340]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071f8:	4b52      	ldr	r3, [pc, #328]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071fe:	f7fb fb55 	bl	80028ac <HAL_GetTick>
 8007202:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007204:	e008      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007206:	f7fb fb51 	bl	80028ac <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d901      	bls.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e090      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007218:	4b4b      	ldr	r3, [pc, #300]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0f0      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8083 	beq.w	8007338 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	4b44      	ldr	r3, [pc, #272]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	4a43      	ldr	r2, [pc, #268]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800723c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007240:	6413      	str	r3, [r2, #64]	; 0x40
 8007242:	4b41      	ldr	r3, [pc, #260]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800724e:	4b3f      	ldr	r3, [pc, #252]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a3e      	ldr	r2, [pc, #248]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007258:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800725a:	f7fb fb27 	bl	80028ac <HAL_GetTick>
 800725e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007260:	e008      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007262:	f7fb fb23 	bl	80028ac <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e062      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007274:	4b35      	ldr	r3, [pc, #212]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0f0      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007280:	4b31      	ldr	r3, [pc, #196]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007288:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d02f      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	429a      	cmp	r2, r3
 800729c:	d028      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800729e:	4b2a      	ldr	r3, [pc, #168]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072a8:	4b29      	ldr	r3, [pc, #164]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072ae:	4b28      	ldr	r3, [pc, #160]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80072b4:	4a24      	ldr	r2, [pc, #144]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072ba:	4b23      	ldr	r3, [pc, #140]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d114      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072c6:	f7fb faf1 	bl	80028ac <HAL_GetTick>
 80072ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072cc:	e00a      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072ce:	f7fb faed 	bl	80028ac <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072dc:	4293      	cmp	r3, r2
 80072de:	d901      	bls.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e02a      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e4:	4b18      	ldr	r3, [pc, #96]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0ee      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fc:	d10d      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80072fe:	4b12      	ldr	r3, [pc, #72]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800730e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007312:	490d      	ldr	r1, [pc, #52]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007314:	4313      	orrs	r3, r2
 8007316:	608b      	str	r3, [r1, #8]
 8007318:	e005      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	4a0a      	ldr	r2, [pc, #40]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007320:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007324:	6093      	str	r3, [r2, #8]
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007332:	4905      	ldr	r1, [pc, #20]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007334:	4313      	orrs	r3, r2
 8007336:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	42470068 	.word	0x42470068
 8007348:	40023800 	.word	0x40023800
 800734c:	40007000 	.word	0x40007000
 8007350:	42470e40 	.word	0x42470e40

08007354 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d13e      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007372:	4b23      	ldr	r3, [pc, #140]	; (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d005      	beq.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d12f      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007388:	4b1e      	ldr	r3, [pc, #120]	; (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800738a:	617b      	str	r3, [r7, #20]
          break;
 800738c:	e02f      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800738e:	4b1c      	ldr	r3, [pc, #112]	; (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800739a:	d108      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800739c:	4b18      	ldr	r3, [pc, #96]	; (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a4:	4a18      	ldr	r2, [pc, #96]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80073a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	e007      	b.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073ae:	4b14      	ldr	r3, [pc, #80]	; (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073b6:	4a15      	ldr	r2, [pc, #84]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80073b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073bc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80073be:	4b10      	ldr	r3, [pc, #64]	; (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c4:	099b      	lsrs	r3, r3, #6
 80073c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	fb02 f303 	mul.w	r3, r2, r3
 80073d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80073d2:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d8:	0f1b      	lsrs	r3, r3, #28
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e4:	617b      	str	r3, [r7, #20]
          break;
 80073e6:	e002      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	617b      	str	r3, [r7, #20]
          break;
 80073ec:	bf00      	nop
        }
      }
      break;
 80073ee:	bf00      	nop
    }
  }
  return frequency;
 80073f0:	697b      	ldr	r3, [r7, #20]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40023800 	.word	0x40023800
 8007404:	00bb8000 	.word	0x00bb8000
 8007408:	007a1200 	.word	0x007a1200
 800740c:	00f42400 	.word	0x00f42400

08007410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e07b      	b.n	800751a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d108      	bne.n	800743c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007432:	d009      	beq.n	8007448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	61da      	str	r2, [r3, #28]
 800743a:	e005      	b.n	8007448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7fa ffee 	bl	8002444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800747e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074cc:	ea42 0103 	orr.w	r1, r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	0c1b      	lsrs	r3, r3, #16
 80074e6:	f003 0104 	and.w	r1, r3, #4
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	f003 0210 	and.w	r2, r3, #16
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69da      	ldr	r2, [r3, #28]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e041      	b.n	80075b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d106      	bne.n	800754e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fa ffc3 	bl	80024d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2202      	movs	r2, #2
 8007552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3304      	adds	r3, #4
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f000 fa91 	bl	8007a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d001      	beq.n	80075d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e04e      	b.n	8007676 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a23      	ldr	r2, [pc, #140]	; (8007684 <HAL_TIM_Base_Start_IT+0xc4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d022      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x80>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007602:	d01d      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x80>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1f      	ldr	r2, [pc, #124]	; (8007688 <HAL_TIM_Base_Start_IT+0xc8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d018      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x80>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1e      	ldr	r2, [pc, #120]	; (800768c <HAL_TIM_Base_Start_IT+0xcc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d013      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x80>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1c      	ldr	r2, [pc, #112]	; (8007690 <HAL_TIM_Base_Start_IT+0xd0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00e      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x80>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1b      	ldr	r2, [pc, #108]	; (8007694 <HAL_TIM_Base_Start_IT+0xd4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d009      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x80>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a19      	ldr	r2, [pc, #100]	; (8007698 <HAL_TIM_Base_Start_IT+0xd8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d004      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x80>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a18      	ldr	r2, [pc, #96]	; (800769c <HAL_TIM_Base_Start_IT+0xdc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d111      	bne.n	8007664 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b06      	cmp	r3, #6
 8007650:	d010      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f042 0201 	orr.w	r2, r2, #1
 8007660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007662:	e007      	b.n	8007674 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40010000 	.word	0x40010000
 8007688:	40000400 	.word	0x40000400
 800768c:	40000800 	.word	0x40000800
 8007690:	40000c00 	.word	0x40000c00
 8007694:	40010400 	.word	0x40010400
 8007698:	40014000 	.word	0x40014000
 800769c:	40001800 	.word	0x40001800

080076a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d122      	bne.n	80076fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d11b      	bne.n	80076fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0202 	mvn.w	r2, #2
 80076cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f9b2 	bl	8007a4c <HAL_TIM_IC_CaptureCallback>
 80076e8:	e005      	b.n	80076f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f9a4 	bl	8007a38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f9b5 	bl	8007a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b04      	cmp	r3, #4
 8007708:	d122      	bne.n	8007750 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b04      	cmp	r3, #4
 8007716:	d11b      	bne.n	8007750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0204 	mvn.w	r2, #4
 8007720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2202      	movs	r2, #2
 8007726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f988 	bl	8007a4c <HAL_TIM_IC_CaptureCallback>
 800773c:	e005      	b.n	800774a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f97a 	bl	8007a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f98b 	bl	8007a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	2b08      	cmp	r3, #8
 800775c:	d122      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b08      	cmp	r3, #8
 800776a:	d11b      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0208 	mvn.w	r2, #8
 8007774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2204      	movs	r2, #4
 800777a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f95e 	bl	8007a4c <HAL_TIM_IC_CaptureCallback>
 8007790:	e005      	b.n	800779e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f950 	bl	8007a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f961 	bl	8007a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b10      	cmp	r3, #16
 80077b0:	d122      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f003 0310 	and.w	r3, r3, #16
 80077bc:	2b10      	cmp	r3, #16
 80077be:	d11b      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f06f 0210 	mvn.w	r2, #16
 80077c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2208      	movs	r2, #8
 80077ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f934 	bl	8007a4c <HAL_TIM_IC_CaptureCallback>
 80077e4:	e005      	b.n	80077f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f926 	bl	8007a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f937 	bl	8007a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b01      	cmp	r3, #1
 8007804:	d10e      	bne.n	8007824 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b01      	cmp	r3, #1
 8007812:	d107      	bne.n	8007824 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0201 	mvn.w	r2, #1
 800781c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7fa f83a 	bl	8001898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782e:	2b80      	cmp	r3, #128	; 0x80
 8007830:	d10e      	bne.n	8007850 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783c:	2b80      	cmp	r3, #128	; 0x80
 800783e:	d107      	bne.n	8007850 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fadc 	bl	8007e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785a:	2b40      	cmp	r3, #64	; 0x40
 800785c:	d10e      	bne.n	800787c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b40      	cmp	r3, #64	; 0x40
 800786a:	d107      	bne.n	800787c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f8fc 	bl	8007a74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b20      	cmp	r3, #32
 8007888:	d10e      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f003 0320 	and.w	r3, r3, #32
 8007894:	2b20      	cmp	r3, #32
 8007896:	d107      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f06f 0220 	mvn.w	r2, #32
 80078a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 faa6 	bl	8007df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078a8:	bf00      	nop
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_TIM_ConfigClockSource+0x18>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e0b3      	b.n	8007a30 <HAL_TIM_ConfigClockSource+0x180>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007900:	d03e      	beq.n	8007980 <HAL_TIM_ConfigClockSource+0xd0>
 8007902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007906:	f200 8087 	bhi.w	8007a18 <HAL_TIM_ConfigClockSource+0x168>
 800790a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790e:	f000 8085 	beq.w	8007a1c <HAL_TIM_ConfigClockSource+0x16c>
 8007912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007916:	d87f      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x168>
 8007918:	2b70      	cmp	r3, #112	; 0x70
 800791a:	d01a      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0xa2>
 800791c:	2b70      	cmp	r3, #112	; 0x70
 800791e:	d87b      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x168>
 8007920:	2b60      	cmp	r3, #96	; 0x60
 8007922:	d050      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x116>
 8007924:	2b60      	cmp	r3, #96	; 0x60
 8007926:	d877      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x168>
 8007928:	2b50      	cmp	r3, #80	; 0x50
 800792a:	d03c      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0xf6>
 800792c:	2b50      	cmp	r3, #80	; 0x50
 800792e:	d873      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x168>
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	d058      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x136>
 8007934:	2b40      	cmp	r3, #64	; 0x40
 8007936:	d86f      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x168>
 8007938:	2b30      	cmp	r3, #48	; 0x30
 800793a:	d064      	beq.n	8007a06 <HAL_TIM_ConfigClockSource+0x156>
 800793c:	2b30      	cmp	r3, #48	; 0x30
 800793e:	d86b      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x168>
 8007940:	2b20      	cmp	r3, #32
 8007942:	d060      	beq.n	8007a06 <HAL_TIM_ConfigClockSource+0x156>
 8007944:	2b20      	cmp	r3, #32
 8007946:	d867      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x168>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d05c      	beq.n	8007a06 <HAL_TIM_ConfigClockSource+0x156>
 800794c:	2b10      	cmp	r3, #16
 800794e:	d05a      	beq.n	8007a06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007950:	e062      	b.n	8007a18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6899      	ldr	r1, [r3, #8]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f000 f9ab 	bl	8007cbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007974:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	609a      	str	r2, [r3, #8]
      break;
 800797e:	e04e      	b.n	8007a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6818      	ldr	r0, [r3, #0]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	6899      	ldr	r1, [r3, #8]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f000 f994 	bl	8007cbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079a2:	609a      	str	r2, [r3, #8]
      break;
 80079a4:	e03b      	b.n	8007a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6859      	ldr	r1, [r3, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f000 f908 	bl	8007bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2150      	movs	r1, #80	; 0x50
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f961 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80079c4:	e02b      	b.n	8007a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	6859      	ldr	r1, [r3, #4]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	461a      	mov	r2, r3
 80079d4:	f000 f927 	bl	8007c26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2160      	movs	r1, #96	; 0x60
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 f951 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80079e4:	e01b      	b.n	8007a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	6859      	ldr	r1, [r3, #4]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	461a      	mov	r2, r3
 80079f4:	f000 f8e8 	bl	8007bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2140      	movs	r1, #64	; 0x40
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 f941 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 8007a04:	e00b      	b.n	8007a1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4610      	mov	r0, r2
 8007a12:	f000 f938 	bl	8007c86 <TIM_ITRx_SetConfig>
        break;
 8007a16:	e002      	b.n	8007a1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007a18:	bf00      	nop
 8007a1a:	e000      	b.n	8007a1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007a1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a40      	ldr	r2, [pc, #256]	; (8007b9c <TIM_Base_SetConfig+0x114>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d013      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa6:	d00f      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a3d      	ldr	r2, [pc, #244]	; (8007ba0 <TIM_Base_SetConfig+0x118>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00b      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a3c      	ldr	r2, [pc, #240]	; (8007ba4 <TIM_Base_SetConfig+0x11c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d007      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a3b      	ldr	r2, [pc, #236]	; (8007ba8 <TIM_Base_SetConfig+0x120>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d003      	beq.n	8007ac8 <TIM_Base_SetConfig+0x40>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a3a      	ldr	r2, [pc, #232]	; (8007bac <TIM_Base_SetConfig+0x124>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d108      	bne.n	8007ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a2f      	ldr	r2, [pc, #188]	; (8007b9c <TIM_Base_SetConfig+0x114>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d02b      	beq.n	8007b3a <TIM_Base_SetConfig+0xb2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae8:	d027      	beq.n	8007b3a <TIM_Base_SetConfig+0xb2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a2c      	ldr	r2, [pc, #176]	; (8007ba0 <TIM_Base_SetConfig+0x118>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d023      	beq.n	8007b3a <TIM_Base_SetConfig+0xb2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a2b      	ldr	r2, [pc, #172]	; (8007ba4 <TIM_Base_SetConfig+0x11c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d01f      	beq.n	8007b3a <TIM_Base_SetConfig+0xb2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a2a      	ldr	r2, [pc, #168]	; (8007ba8 <TIM_Base_SetConfig+0x120>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d01b      	beq.n	8007b3a <TIM_Base_SetConfig+0xb2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a29      	ldr	r2, [pc, #164]	; (8007bac <TIM_Base_SetConfig+0x124>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d017      	beq.n	8007b3a <TIM_Base_SetConfig+0xb2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a28      	ldr	r2, [pc, #160]	; (8007bb0 <TIM_Base_SetConfig+0x128>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d013      	beq.n	8007b3a <TIM_Base_SetConfig+0xb2>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a27      	ldr	r2, [pc, #156]	; (8007bb4 <TIM_Base_SetConfig+0x12c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d00f      	beq.n	8007b3a <TIM_Base_SetConfig+0xb2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a26      	ldr	r2, [pc, #152]	; (8007bb8 <TIM_Base_SetConfig+0x130>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d00b      	beq.n	8007b3a <TIM_Base_SetConfig+0xb2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a25      	ldr	r2, [pc, #148]	; (8007bbc <TIM_Base_SetConfig+0x134>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d007      	beq.n	8007b3a <TIM_Base_SetConfig+0xb2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a24      	ldr	r2, [pc, #144]	; (8007bc0 <TIM_Base_SetConfig+0x138>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d003      	beq.n	8007b3a <TIM_Base_SetConfig+0xb2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a23      	ldr	r2, [pc, #140]	; (8007bc4 <TIM_Base_SetConfig+0x13c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d108      	bne.n	8007b4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <TIM_Base_SetConfig+0x114>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_Base_SetConfig+0xf8>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a0c      	ldr	r2, [pc, #48]	; (8007bac <TIM_Base_SetConfig+0x124>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d103      	bne.n	8007b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	615a      	str	r2, [r3, #20]
}
 8007b8e:	bf00      	nop
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40010000 	.word	0x40010000
 8007ba0:	40000400 	.word	0x40000400
 8007ba4:	40000800 	.word	0x40000800
 8007ba8:	40000c00 	.word	0x40000c00
 8007bac:	40010400 	.word	0x40010400
 8007bb0:	40014000 	.word	0x40014000
 8007bb4:	40014400 	.word	0x40014400
 8007bb8:	40014800 	.word	0x40014800
 8007bbc:	40001800 	.word	0x40001800
 8007bc0:	40001c00 	.word	0x40001c00
 8007bc4:	40002000 	.word	0x40002000

08007bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	f023 0201 	bic.w	r2, r3, #1
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f023 030a 	bic.w	r3, r3, #10
 8007c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	621a      	str	r2, [r3, #32]
}
 8007c1a:	bf00      	nop
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b087      	sub	sp, #28
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	f023 0210 	bic.w	r2, r3, #16
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	031b      	lsls	r3, r3, #12
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	621a      	str	r2, [r3, #32]
}
 8007c7a:	bf00      	nop
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f043 0307 	orr.w	r3, r3, #7
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	609a      	str	r2, [r3, #8]
}
 8007cb0:	bf00      	nop
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	021a      	lsls	r2, r3, #8
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	609a      	str	r2, [r3, #8]
}
 8007cf0:	bf00      	nop
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e05a      	b.n	8007dca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a21      	ldr	r2, [pc, #132]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d022      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d60:	d01d      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1d      	ldr	r2, [pc, #116]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d018      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a1b      	ldr	r2, [pc, #108]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1a      	ldr	r2, [pc, #104]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00e      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a18      	ldr	r2, [pc, #96]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d009      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a17      	ldr	r2, [pc, #92]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d004      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a15      	ldr	r2, [pc, #84]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d10c      	bne.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	40010000 	.word	0x40010000
 8007ddc:	40000400 	.word	0x40000400
 8007de0:	40000800 	.word	0x40000800
 8007de4:	40000c00 	.word	0x40000c00
 8007de8:	40010400 	.word	0x40010400
 8007dec:	40014000 	.word	0x40014000
 8007df0:	40001800 	.word	0x40001800

08007df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e03f      	b.n	8007eae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d106      	bne.n	8007e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fa fb6c 	bl	8002520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2224      	movs	r2, #36	; 0x24
 8007e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fcbd 	bl	80087e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	695a      	ldr	r2, [r3, #20]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b08a      	sub	sp, #40	; 0x28
 8007eba:	af02      	add	r7, sp, #8
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d17c      	bne.n	8007fd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <HAL_UART_Transmit+0x2c>
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e075      	b.n	8007fd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_UART_Transmit+0x3e>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e06e      	b.n	8007fd2 <HAL_UART_Transmit+0x11c>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2221      	movs	r2, #33	; 0x21
 8007f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f0a:	f7fa fccf 	bl	80028ac <HAL_GetTick>
 8007f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	88fa      	ldrh	r2, [r7, #6]
 8007f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	88fa      	ldrh	r2, [r7, #6]
 8007f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f24:	d108      	bne.n	8007f38 <HAL_UART_Transmit+0x82>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d104      	bne.n	8007f38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	61bb      	str	r3, [r7, #24]
 8007f36:	e003      	b.n	8007f40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f48:	e02a      	b.n	8007fa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2200      	movs	r2, #0
 8007f52:	2180      	movs	r1, #128	; 0x80
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 fab9 	bl	80084cc <UART_WaitOnFlagUntilTimeout>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e036      	b.n	8007fd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10b      	bne.n	8007f82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	3302      	adds	r3, #2
 8007f7e:	61bb      	str	r3, [r7, #24]
 8007f80:	e007      	b.n	8007f92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	781a      	ldrb	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1cf      	bne.n	8007f4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2140      	movs	r1, #64	; 0x40
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fa89 	bl	80084cc <UART_WaitOnFlagUntilTimeout>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e006      	b.n	8007fd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e000      	b.n	8007fd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fd0:	2302      	movs	r3, #2
  }
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3720      	adds	r7, #32
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b08a      	sub	sp, #40	; 0x28
 8007fde:	af02      	add	r7, sp, #8
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	603b      	str	r3, [r7, #0]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	f040 808c 	bne.w	8008114 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <HAL_UART_Receive+0x2e>
 8008002:	88fb      	ldrh	r3, [r7, #6]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e084      	b.n	8008116 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008012:	2b01      	cmp	r3, #1
 8008014:	d101      	bne.n	800801a <HAL_UART_Receive+0x40>
 8008016:	2302      	movs	r3, #2
 8008018:	e07d      	b.n	8008116 <HAL_UART_Receive+0x13c>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2222      	movs	r2, #34	; 0x22
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008036:	f7fa fc39 	bl	80028ac <HAL_GetTick>
 800803a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	88fa      	ldrh	r2, [r7, #6]
 8008040:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	88fa      	ldrh	r2, [r7, #6]
 8008046:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008050:	d108      	bne.n	8008064 <HAL_UART_Receive+0x8a>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d104      	bne.n	8008064 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	61bb      	str	r3, [r7, #24]
 8008062:	e003      	b.n	800806c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008068:	2300      	movs	r3, #0
 800806a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008074:	e043      	b.n	80080fe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2200      	movs	r2, #0
 800807e:	2120      	movs	r1, #32
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 fa23 	bl	80084cc <UART_WaitOnFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e042      	b.n	8008116 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10c      	bne.n	80080b0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	3302      	adds	r3, #2
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	e01f      	b.n	80080f0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b8:	d007      	beq.n	80080ca <HAL_UART_Receive+0xf0>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <HAL_UART_Receive+0xfe>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	e008      	b.n	80080ea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	3301      	adds	r3, #1
 80080ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008102:	b29b      	uxth	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1b6      	bne.n	8008076 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2220      	movs	r2, #32
 800810c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	e000      	b.n	8008116 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008114:	2302      	movs	r3, #2
  }
}
 8008116:	4618      	mov	r0, r3
 8008118:	3720      	adds	r7, #32
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
	...

08008120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08a      	sub	sp, #40	; 0x28
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008140:	2300      	movs	r3, #0
 8008142:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008144:	2300      	movs	r3, #0
 8008146:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	f003 030f 	and.w	r3, r3, #15
 800814e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10d      	bne.n	8008172 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d008      	beq.n	8008172 <HAL_UART_IRQHandler+0x52>
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 faa1 	bl	80086b2 <UART_Receive_IT>
      return;
 8008170:	e17c      	b.n	800846c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 80b1 	beq.w	80082dc <HAL_UART_IRQHandler+0x1bc>
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <HAL_UART_IRQHandler+0x70>
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80a6 	beq.w	80082dc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <HAL_UART_IRQHandler+0x90>
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a8:	f043 0201 	orr.w	r2, r3, #1
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <HAL_UART_IRQHandler+0xb0>
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d005      	beq.n	80081d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	f043 0202 	orr.w	r2, r3, #2
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <HAL_UART_IRQHandler+0xd0>
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e8:	f043 0204 	orr.w	r2, r3, #4
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00f      	beq.n	800821a <HAL_UART_IRQHandler+0xfa>
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	f003 0320 	and.w	r3, r3, #32
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <HAL_UART_IRQHandler+0xee>
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d005      	beq.n	800821a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	f043 0208 	orr.w	r2, r3, #8
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 811f 	beq.w	8008462 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <HAL_UART_IRQHandler+0x11e>
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fa3a 	bl	80086b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008248:	2b40      	cmp	r3, #64	; 0x40
 800824a:	bf0c      	ite	eq
 800824c:	2301      	moveq	r3, #1
 800824e:	2300      	movne	r3, #0
 8008250:	b2db      	uxtb	r3, r3
 8008252:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <HAL_UART_IRQHandler+0x146>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d031      	beq.n	80082ca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f97a 	bl	8008560 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008276:	2b40      	cmp	r3, #64	; 0x40
 8008278:	d123      	bne.n	80082c2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	695a      	ldr	r2, [r3, #20]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008288:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	2b00      	cmp	r3, #0
 8008290:	d013      	beq.n	80082ba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008296:	4a77      	ldr	r2, [pc, #476]	; (8008474 <HAL_UART_IRQHandler+0x354>)
 8008298:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fa fc86 	bl	8002bb0 <HAL_DMA_Abort_IT>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d016      	beq.n	80082d8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082b4:	4610      	mov	r0, r2
 80082b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b8:	e00e      	b.n	80082d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f8f0 	bl	80084a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c0:	e00a      	b.n	80082d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f8ec 	bl	80084a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c8:	e006      	b.n	80082d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f8e8 	bl	80084a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80082d6:	e0c4      	b.n	8008462 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d8:	bf00      	nop
    return;
 80082da:	e0c2      	b.n	8008462 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	f040 80a2 	bne.w	800842a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 809c 	beq.w	800842a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	f003 0310 	and.w	r3, r3, #16
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 8096 	beq.w	800842a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831e:	2b40      	cmp	r3, #64	; 0x40
 8008320:	d14f      	bne.n	80083c2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800832c:	8a3b      	ldrh	r3, [r7, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 8099 	beq.w	8008466 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008338:	8a3a      	ldrh	r2, [r7, #16]
 800833a:	429a      	cmp	r2, r3
 800833c:	f080 8093 	bcs.w	8008466 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8a3a      	ldrh	r2, [r7, #16]
 8008344:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008350:	d02b      	beq.n	80083aa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008360:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695a      	ldr	r2, [r3, #20]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0201 	bic.w	r2, r2, #1
 8008370:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	695a      	ldr	r2, [r3, #20]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008380:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0210 	bic.w	r2, r2, #16
 800839e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fa fb93 	bl	8002ad0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f87a 	bl	80084b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80083c0:	e051      	b.n	8008466 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d047      	beq.n	800846a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80083da:	8a7b      	ldrh	r3, [r7, #18]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d044      	beq.n	800846a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083ee:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	695a      	ldr	r2, [r3, #20]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 0210 	bic.w	r2, r2, #16
 800841c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800841e:	8a7b      	ldrh	r3, [r7, #18]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f846 	bl	80084b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008428:	e01f      	b.n	800846a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008430:	2b00      	cmp	r3, #0
 8008432:	d008      	beq.n	8008446 <HAL_UART_IRQHandler+0x326>
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f8cf 	bl	80085e2 <UART_Transmit_IT>
    return;
 8008444:	e012      	b.n	800846c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00d      	beq.n	800846c <HAL_UART_IRQHandler+0x34c>
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d008      	beq.n	800846c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f911 	bl	8008682 <UART_EndTransmit_IT>
    return;
 8008460:	e004      	b.n	800846c <HAL_UART_IRQHandler+0x34c>
    return;
 8008462:	bf00      	nop
 8008464:	e002      	b.n	800846c <HAL_UART_IRQHandler+0x34c>
      return;
 8008466:	bf00      	nop
 8008468:	e000      	b.n	800846c <HAL_UART_IRQHandler+0x34c>
      return;
 800846a:	bf00      	nop
  }
}
 800846c:	3728      	adds	r7, #40	; 0x28
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	080085bb 	.word	0x080085bb

08008478 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	603b      	str	r3, [r7, #0]
 80084d8:	4613      	mov	r3, r2
 80084da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084dc:	e02c      	b.n	8008538 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e4:	d028      	beq.n	8008538 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d007      	beq.n	80084fc <UART_WaitOnFlagUntilTimeout+0x30>
 80084ec:	f7fa f9de 	bl	80028ac <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d21d      	bcs.n	8008538 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68da      	ldr	r2, [r3, #12]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800850a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	695a      	ldr	r2, [r3, #20]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0201 	bic.w	r2, r2, #1
 800851a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2220      	movs	r2, #32
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2220      	movs	r2, #32
 8008528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e00f      	b.n	8008558 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4013      	ands	r3, r2
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	429a      	cmp	r2, r3
 8008546:	bf0c      	ite	eq
 8008548:	2301      	moveq	r3, #1
 800854a:	2300      	movne	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	461a      	mov	r2, r3
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	429a      	cmp	r2, r3
 8008554:	d0c3      	beq.n	80084de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008576:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	695a      	ldr	r2, [r3, #20]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f022 0201 	bic.w	r2, r2, #1
 8008586:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858c:	2b01      	cmp	r3, #1
 800858e:	d107      	bne.n	80085a0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0210 	bic.w	r2, r2, #16
 800859e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff ff63 	bl	80084a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085da:	bf00      	nop
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b21      	cmp	r3, #33	; 0x21
 80085f4:	d13e      	bne.n	8008674 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085fe:	d114      	bne.n	800862a <UART_Transmit_IT+0x48>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d110      	bne.n	800862a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800861c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	1c9a      	adds	r2, r3, #2
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	621a      	str	r2, [r3, #32]
 8008628:	e008      	b.n	800863c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	1c59      	adds	r1, r3, #1
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	6211      	str	r1, [r2, #32]
 8008634:	781a      	ldrb	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008640:	b29b      	uxth	r3, r3
 8008642:	3b01      	subs	r3, #1
 8008644:	b29b      	uxth	r3, r3
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	4619      	mov	r1, r3
 800864a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10f      	bne.n	8008670 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800865e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800866e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	e000      	b.n	8008676 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008674:	2302      	movs	r3, #2
  }
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008698:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff fee8 	bl	8008478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b22      	cmp	r3, #34	; 0x22
 80086c4:	f040 8087 	bne.w	80087d6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d0:	d117      	bne.n	8008702 <UART_Receive_IT+0x50>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d113      	bne.n	8008702 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80086da:	2300      	movs	r3, #0
 80086dc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	1c9a      	adds	r2, r3, #2
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	629a      	str	r2, [r3, #40]	; 0x28
 8008700:	e026      	b.n	8008750 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008708:	2300      	movs	r3, #0
 800870a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008714:	d007      	beq.n	8008726 <UART_Receive_IT+0x74>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10a      	bne.n	8008734 <UART_Receive_IT+0x82>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d106      	bne.n	8008734 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	b2da      	uxtb	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	e008      	b.n	8008746 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008740:	b2da      	uxtb	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008754:	b29b      	uxth	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	b29b      	uxth	r3, r3
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	4619      	mov	r1, r3
 800875e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008760:	2b00      	cmp	r3, #0
 8008762:	d136      	bne.n	80087d2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68da      	ldr	r2, [r3, #12]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f022 0220 	bic.w	r2, r2, #32
 8008772:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008782:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	695a      	ldr	r2, [r3, #20]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0201 	bic.w	r2, r2, #1
 8008792:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d10e      	bne.n	80087c2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f022 0210 	bic.w	r2, r2, #16
 80087b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fe7a 	bl	80084b4 <HAL_UARTEx_RxEventCallback>
 80087c0:	e002      	b.n	80087c8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff fe62 	bl	800848c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	e002      	b.n	80087d8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e000      	b.n	80087d8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80087d6:	2302      	movs	r3, #2
  }
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	b09f      	sub	sp, #124	; 0x7c
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f6:	68d9      	ldr	r1, [r3, #12]
 80087f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	ea40 0301 	orr.w	r3, r0, r1
 8008800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	431a      	orrs	r2, r3
 800880c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	431a      	orrs	r2, r3
 8008812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	4313      	orrs	r3, r2
 8008818:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800881a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008824:	f021 010c 	bic.w	r1, r1, #12
 8008828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800882e:	430b      	orrs	r3, r1
 8008830:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800883c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800883e:	6999      	ldr	r1, [r3, #24]
 8008840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	ea40 0301 	orr.w	r3, r0, r1
 8008848:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800884a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	4bc5      	ldr	r3, [pc, #788]	; (8008b64 <UART_SetConfig+0x384>)
 8008850:	429a      	cmp	r2, r3
 8008852:	d004      	beq.n	800885e <UART_SetConfig+0x7e>
 8008854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	4bc3      	ldr	r3, [pc, #780]	; (8008b68 <UART_SetConfig+0x388>)
 800885a:	429a      	cmp	r2, r3
 800885c:	d103      	bne.n	8008866 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800885e:	f7fe fc51 	bl	8007104 <HAL_RCC_GetPCLK2Freq>
 8008862:	6778      	str	r0, [r7, #116]	; 0x74
 8008864:	e002      	b.n	800886c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008866:	f7fe fc39 	bl	80070dc <HAL_RCC_GetPCLK1Freq>
 800886a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800886c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008874:	f040 80b6 	bne.w	80089e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800887a:	461c      	mov	r4, r3
 800887c:	f04f 0500 	mov.w	r5, #0
 8008880:	4622      	mov	r2, r4
 8008882:	462b      	mov	r3, r5
 8008884:	1891      	adds	r1, r2, r2
 8008886:	6439      	str	r1, [r7, #64]	; 0x40
 8008888:	415b      	adcs	r3, r3
 800888a:	647b      	str	r3, [r7, #68]	; 0x44
 800888c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008890:	1912      	adds	r2, r2, r4
 8008892:	eb45 0303 	adc.w	r3, r5, r3
 8008896:	f04f 0000 	mov.w	r0, #0
 800889a:	f04f 0100 	mov.w	r1, #0
 800889e:	00d9      	lsls	r1, r3, #3
 80088a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088a4:	00d0      	lsls	r0, r2, #3
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	1911      	adds	r1, r2, r4
 80088ac:	6639      	str	r1, [r7, #96]	; 0x60
 80088ae:	416b      	adcs	r3, r5
 80088b0:	667b      	str	r3, [r7, #100]	; 0x64
 80088b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	461a      	mov	r2, r3
 80088b8:	f04f 0300 	mov.w	r3, #0
 80088bc:	1891      	adds	r1, r2, r2
 80088be:	63b9      	str	r1, [r7, #56]	; 0x38
 80088c0:	415b      	adcs	r3, r3
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80088cc:	f7f8 f94e 	bl	8000b6c <__aeabi_uldivmod>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4ba5      	ldr	r3, [pc, #660]	; (8008b6c <UART_SetConfig+0x38c>)
 80088d6:	fba3 2302 	umull	r2, r3, r3, r2
 80088da:	095b      	lsrs	r3, r3, #5
 80088dc:	011e      	lsls	r6, r3, #4
 80088de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088e0:	461c      	mov	r4, r3
 80088e2:	f04f 0500 	mov.w	r5, #0
 80088e6:	4622      	mov	r2, r4
 80088e8:	462b      	mov	r3, r5
 80088ea:	1891      	adds	r1, r2, r2
 80088ec:	6339      	str	r1, [r7, #48]	; 0x30
 80088ee:	415b      	adcs	r3, r3
 80088f0:	637b      	str	r3, [r7, #52]	; 0x34
 80088f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088f6:	1912      	adds	r2, r2, r4
 80088f8:	eb45 0303 	adc.w	r3, r5, r3
 80088fc:	f04f 0000 	mov.w	r0, #0
 8008900:	f04f 0100 	mov.w	r1, #0
 8008904:	00d9      	lsls	r1, r3, #3
 8008906:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800890a:	00d0      	lsls	r0, r2, #3
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	1911      	adds	r1, r2, r4
 8008912:	65b9      	str	r1, [r7, #88]	; 0x58
 8008914:	416b      	adcs	r3, r5
 8008916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	461a      	mov	r2, r3
 800891e:	f04f 0300 	mov.w	r3, #0
 8008922:	1891      	adds	r1, r2, r2
 8008924:	62b9      	str	r1, [r7, #40]	; 0x28
 8008926:	415b      	adcs	r3, r3
 8008928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800892a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800892e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008932:	f7f8 f91b 	bl	8000b6c <__aeabi_uldivmod>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	4b8c      	ldr	r3, [pc, #560]	; (8008b6c <UART_SetConfig+0x38c>)
 800893c:	fba3 1302 	umull	r1, r3, r3, r2
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	2164      	movs	r1, #100	; 0x64
 8008944:	fb01 f303 	mul.w	r3, r1, r3
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	3332      	adds	r3, #50	; 0x32
 800894e:	4a87      	ldr	r2, [pc, #540]	; (8008b6c <UART_SetConfig+0x38c>)
 8008950:	fba2 2303 	umull	r2, r3, r2, r3
 8008954:	095b      	lsrs	r3, r3, #5
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800895c:	441e      	add	r6, r3
 800895e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008960:	4618      	mov	r0, r3
 8008962:	f04f 0100 	mov.w	r1, #0
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	1894      	adds	r4, r2, r2
 800896c:	623c      	str	r4, [r7, #32]
 800896e:	415b      	adcs	r3, r3
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
 8008972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008976:	1812      	adds	r2, r2, r0
 8008978:	eb41 0303 	adc.w	r3, r1, r3
 800897c:	f04f 0400 	mov.w	r4, #0
 8008980:	f04f 0500 	mov.w	r5, #0
 8008984:	00dd      	lsls	r5, r3, #3
 8008986:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800898a:	00d4      	lsls	r4, r2, #3
 800898c:	4622      	mov	r2, r4
 800898e:	462b      	mov	r3, r5
 8008990:	1814      	adds	r4, r2, r0
 8008992:	653c      	str	r4, [r7, #80]	; 0x50
 8008994:	414b      	adcs	r3, r1
 8008996:	657b      	str	r3, [r7, #84]	; 0x54
 8008998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	461a      	mov	r2, r3
 800899e:	f04f 0300 	mov.w	r3, #0
 80089a2:	1891      	adds	r1, r2, r2
 80089a4:	61b9      	str	r1, [r7, #24]
 80089a6:	415b      	adcs	r3, r3
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80089b2:	f7f8 f8db 	bl	8000b6c <__aeabi_uldivmod>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4b6c      	ldr	r3, [pc, #432]	; (8008b6c <UART_SetConfig+0x38c>)
 80089bc:	fba3 1302 	umull	r1, r3, r3, r2
 80089c0:	095b      	lsrs	r3, r3, #5
 80089c2:	2164      	movs	r1, #100	; 0x64
 80089c4:	fb01 f303 	mul.w	r3, r1, r3
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	3332      	adds	r3, #50	; 0x32
 80089ce:	4a67      	ldr	r2, [pc, #412]	; (8008b6c <UART_SetConfig+0x38c>)
 80089d0:	fba2 2303 	umull	r2, r3, r2, r3
 80089d4:	095b      	lsrs	r3, r3, #5
 80089d6:	f003 0207 	and.w	r2, r3, #7
 80089da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4432      	add	r2, r6
 80089e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089e2:	e0b9      	b.n	8008b58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089e6:	461c      	mov	r4, r3
 80089e8:	f04f 0500 	mov.w	r5, #0
 80089ec:	4622      	mov	r2, r4
 80089ee:	462b      	mov	r3, r5
 80089f0:	1891      	adds	r1, r2, r2
 80089f2:	6139      	str	r1, [r7, #16]
 80089f4:	415b      	adcs	r3, r3
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089fc:	1912      	adds	r2, r2, r4
 80089fe:	eb45 0303 	adc.w	r3, r5, r3
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f04f 0100 	mov.w	r1, #0
 8008a0a:	00d9      	lsls	r1, r3, #3
 8008a0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a10:	00d0      	lsls	r0, r2, #3
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	eb12 0804 	adds.w	r8, r2, r4
 8008a1a:	eb43 0905 	adc.w	r9, r3, r5
 8008a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f04f 0100 	mov.w	r1, #0
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	008b      	lsls	r3, r1, #2
 8008a32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a36:	0082      	lsls	r2, r0, #2
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	f7f8 f896 	bl	8000b6c <__aeabi_uldivmod>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4b49      	ldr	r3, [pc, #292]	; (8008b6c <UART_SetConfig+0x38c>)
 8008a46:	fba3 2302 	umull	r2, r3, r3, r2
 8008a4a:	095b      	lsrs	r3, r3, #5
 8008a4c:	011e      	lsls	r6, r3, #4
 8008a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a50:	4618      	mov	r0, r3
 8008a52:	f04f 0100 	mov.w	r1, #0
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	1894      	adds	r4, r2, r2
 8008a5c:	60bc      	str	r4, [r7, #8]
 8008a5e:	415b      	adcs	r3, r3
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a66:	1812      	adds	r2, r2, r0
 8008a68:	eb41 0303 	adc.w	r3, r1, r3
 8008a6c:	f04f 0400 	mov.w	r4, #0
 8008a70:	f04f 0500 	mov.w	r5, #0
 8008a74:	00dd      	lsls	r5, r3, #3
 8008a76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a7a:	00d4      	lsls	r4, r2, #3
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	462b      	mov	r3, r5
 8008a80:	1814      	adds	r4, r2, r0
 8008a82:	64bc      	str	r4, [r7, #72]	; 0x48
 8008a84:	414b      	adcs	r3, r1
 8008a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f04f 0100 	mov.w	r1, #0
 8008a92:	f04f 0200 	mov.w	r2, #0
 8008a96:	f04f 0300 	mov.w	r3, #0
 8008a9a:	008b      	lsls	r3, r1, #2
 8008a9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008aa0:	0082      	lsls	r2, r0, #2
 8008aa2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008aa6:	f7f8 f861 	bl	8000b6c <__aeabi_uldivmod>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4b2f      	ldr	r3, [pc, #188]	; (8008b6c <UART_SetConfig+0x38c>)
 8008ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	2164      	movs	r1, #100	; 0x64
 8008ab8:	fb01 f303 	mul.w	r3, r1, r3
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	3332      	adds	r3, #50	; 0x32
 8008ac2:	4a2a      	ldr	r2, [pc, #168]	; (8008b6c <UART_SetConfig+0x38c>)
 8008ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac8:	095b      	lsrs	r3, r3, #5
 8008aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ace:	441e      	add	r6, r3
 8008ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f04f 0100 	mov.w	r1, #0
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	1894      	adds	r4, r2, r2
 8008ade:	603c      	str	r4, [r7, #0]
 8008ae0:	415b      	adcs	r3, r3
 8008ae2:	607b      	str	r3, [r7, #4]
 8008ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae8:	1812      	adds	r2, r2, r0
 8008aea:	eb41 0303 	adc.w	r3, r1, r3
 8008aee:	f04f 0400 	mov.w	r4, #0
 8008af2:	f04f 0500 	mov.w	r5, #0
 8008af6:	00dd      	lsls	r5, r3, #3
 8008af8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008afc:	00d4      	lsls	r4, r2, #3
 8008afe:	4622      	mov	r2, r4
 8008b00:	462b      	mov	r3, r5
 8008b02:	eb12 0a00 	adds.w	sl, r2, r0
 8008b06:	eb43 0b01 	adc.w	fp, r3, r1
 8008b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f04f 0100 	mov.w	r1, #0
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	f04f 0300 	mov.w	r3, #0
 8008b1c:	008b      	lsls	r3, r1, #2
 8008b1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b22:	0082      	lsls	r2, r0, #2
 8008b24:	4650      	mov	r0, sl
 8008b26:	4659      	mov	r1, fp
 8008b28:	f7f8 f820 	bl	8000b6c <__aeabi_uldivmod>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <UART_SetConfig+0x38c>)
 8008b32:	fba3 1302 	umull	r1, r3, r3, r2
 8008b36:	095b      	lsrs	r3, r3, #5
 8008b38:	2164      	movs	r1, #100	; 0x64
 8008b3a:	fb01 f303 	mul.w	r3, r1, r3
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	011b      	lsls	r3, r3, #4
 8008b42:	3332      	adds	r3, #50	; 0x32
 8008b44:	4a09      	ldr	r2, [pc, #36]	; (8008b6c <UART_SetConfig+0x38c>)
 8008b46:	fba2 2303 	umull	r2, r3, r2, r3
 8008b4a:	095b      	lsrs	r3, r3, #5
 8008b4c:	f003 020f 	and.w	r2, r3, #15
 8008b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4432      	add	r2, r6
 8008b56:	609a      	str	r2, [r3, #8]
}
 8008b58:	bf00      	nop
 8008b5a:	377c      	adds	r7, #124	; 0x7c
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b62:	bf00      	nop
 8008b64:	40011000 	.word	0x40011000
 8008b68:	40011400 	.word	0x40011400
 8008b6c:	51eb851f 	.word	0x51eb851f

08008b70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b70:	b084      	sub	sp, #16
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	f107 001c 	add.w	r0, r7, #28
 8008b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d122      	bne.n	8008bce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d105      	bne.n	8008bc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f94a 	bl	8008e5c <USB_CoreReset>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73fb      	strb	r3, [r7, #15]
 8008bcc:	e01a      	b.n	8008c04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f93e 	bl	8008e5c <USB_CoreReset>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d106      	bne.n	8008bf8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38
 8008bf6:	e005      	b.n	8008c04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d10b      	bne.n	8008c22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f043 0206 	orr.w	r2, r3, #6
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f043 0220 	orr.w	r2, r3, #32
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c2e:	b004      	add	sp, #16
 8008c30:	4770      	bx	lr

08008c32 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f043 0201 	orr.w	r2, r3, #1
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f023 0201 	bic.w	r2, r3, #1
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d106      	bne.n	8008ca2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60da      	str	r2, [r3, #12]
 8008ca0:	e00b      	b.n	8008cba <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d106      	bne.n	8008cb6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	60da      	str	r2, [r3, #12]
 8008cb4:	e001      	b.n	8008cba <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e003      	b.n	8008cc2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008cba:	2032      	movs	r0, #50	; 0x32
 8008cbc:	f7f9 fe02 	bl	80028c4 <HAL_Delay>

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	019b      	lsls	r3, r3, #6
 8008cde:	f043 0220 	orr.w	r2, r3, #32
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4a09      	ldr	r2, [pc, #36]	; (8008d14 <USB_FlushTxFifo+0x48>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d901      	bls.n	8008cf8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e006      	b.n	8008d06 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d0f0      	beq.n	8008ce6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	00030d40 	.word	0x00030d40

08008d18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2210      	movs	r2, #16
 8008d28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4a09      	ldr	r2, [pc, #36]	; (8008d58 <USB_FlushRxFifo+0x40>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d901      	bls.n	8008d3c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e006      	b.n	8008d4a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	f003 0310 	and.w	r3, r3, #16
 8008d44:	2b10      	cmp	r3, #16
 8008d46:	d0f0      	beq.n	8008d2a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	00030d40 	.word	0x00030d40

08008d5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b089      	sub	sp, #36	; 0x24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	4611      	mov	r1, r2
 8008d68:	461a      	mov	r2, r3
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	71fb      	strb	r3, [r7, #7]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008d7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d11a      	bne.n	8008db8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d82:	88bb      	ldrh	r3, [r7, #4]
 8008d84:	3303      	adds	r3, #3
 8008d86:	089b      	lsrs	r3, r3, #2
 8008d88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	61bb      	str	r3, [r7, #24]
 8008d8e:	e00f      	b.n	8008db0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	031a      	lsls	r2, r3, #12
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	3304      	adds	r3, #4
 8008da8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	3301      	adds	r3, #1
 8008dae:	61bb      	str	r3, [r7, #24]
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d3eb      	bcc.n	8008d90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3724      	adds	r7, #36	; 0x24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b089      	sub	sp, #36	; 0x24
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008ddc:	88fb      	ldrh	r3, [r7, #6]
 8008dde:	3303      	adds	r3, #3
 8008de0:	089b      	lsrs	r3, r3, #2
 8008de2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008de4:	2300      	movs	r3, #0
 8008de6:	61bb      	str	r3, [r7, #24]
 8008de8:	e00b      	b.n	8008e02 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	601a      	str	r2, [r3, #0]
    pDest++;
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	61bb      	str	r3, [r7, #24]
 8008e02:	69ba      	ldr	r2, [r7, #24]
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d3ef      	bcc.n	8008dea <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008e0a:	69fb      	ldr	r3, [r7, #28]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3724      	adds	r7, #36	; 0x24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008e30:	68fb      	ldr	r3, [r7, #12]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	f003 0301 	and.w	r3, r3, #1
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
	...

08008e5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4a13      	ldr	r2, [pc, #76]	; (8008ec0 <USB_CoreReset+0x64>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d901      	bls.n	8008e7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e01b      	b.n	8008eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	daf2      	bge.n	8008e68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	f043 0201 	orr.w	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4a09      	ldr	r2, [pc, #36]	; (8008ec0 <USB_CoreReset+0x64>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d901      	bls.n	8008ea4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e006      	b.n	8008eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d0f0      	beq.n	8008e92 <USB_CoreReset+0x36>

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	00030d40 	.word	0x00030d40

08008ec4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	f107 001c 	add.w	r0, r7, #28
 8008ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f02:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d018      	beq.n	8008f48 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d10a      	bne.n	8008f32 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f2a:	f043 0304 	orr.w	r3, r3, #4
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	e014      	b.n	8008f5c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f40:	f023 0304 	bic.w	r3, r3, #4
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	e009      	b.n	8008f5c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f56:	f023 0304 	bic.w	r3, r3, #4
 8008f5a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008f5c:	2110      	movs	r1, #16
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7ff feb4 	bl	8008ccc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff fed7 	bl	8008d18 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	e015      	b.n	8008f9c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f82:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f90:	461a      	mov	r2, r3
 8008f92:	2300      	movs	r3, #0
 8008f94:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d3e5      	bcc.n	8008f70 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f8ac 	bl	8009104 <USB_DriveVbus>

  HAL_Delay(200U);
 8008fac:	20c8      	movs	r0, #200	; 0xc8
 8008fae:	f7f9 fc89 	bl	80028c4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fbe:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fd2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a14      	ldr	r2, [pc, #80]	; (8009028 <USB_HostInit+0x164>)
 8008fd8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a13      	ldr	r2, [pc, #76]	; (800902c <USB_HostInit+0x168>)
 8008fde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008fe2:	e009      	b.n	8008ff8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2280      	movs	r2, #128	; 0x80
 8008fe8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a10      	ldr	r2, [pc, #64]	; (8009030 <USB_HostInit+0x16c>)
 8008fee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a10      	ldr	r2, [pc, #64]	; (8009034 <USB_HostInit+0x170>)
 8008ff4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d105      	bne.n	800900a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f043 0210 	orr.w	r2, r3, #16
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <USB_HostInit+0x174>)
 8009010:	4313      	orrs	r3, r2
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009022:	b004      	add	sp, #16
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	01000200 	.word	0x01000200
 800902c:	00e00300 	.word	0x00e00300
 8009030:	00600080 	.word	0x00600080
 8009034:	004000e0 	.word	0x004000e0
 8009038:	a3200008 	.word	0xa3200008

0800903c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	f003 0303 	and.w	r3, r3, #3
 800906e:	68f9      	ldr	r1, [r7, #12]
 8009070:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009074:	4313      	orrs	r3, r2
 8009076:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d107      	bne.n	800908e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009084:	461a      	mov	r2, r3
 8009086:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800908a:	6053      	str	r3, [r2, #4]
 800908c:	e009      	b.n	80090a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d106      	bne.n	80090a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800909a:	461a      	mov	r2, r3
 800909c:	f241 7370 	movw	r3, #6000	; 0x1770
 80090a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80090d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80090da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090de:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80090e0:	2064      	movs	r0, #100	; 0x64
 80090e2:	f7f9 fbef 	bl	80028c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80090ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80090f4:	200a      	movs	r0, #10
 80090f6:	f7f9 fbe5 	bl	80028c4 <HAL_Delay>

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009128:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d109      	bne.n	8009148 <USB_DriveVbus+0x44>
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d106      	bne.n	8009148 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009142:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009146:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800914e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009152:	d109      	bne.n	8009168 <USB_DriveVbus+0x64>
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009166:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009176:	b480      	push	{r7}
 8009178:	b085      	sub	sp, #20
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	0c5b      	lsrs	r3, r3, #17
 8009194:	f003 0303 	and.w	r3, r3, #3
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	b29b      	uxth	r3, r3
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
	...

080091c8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	4608      	mov	r0, r1
 80091d2:	4611      	mov	r1, r2
 80091d4:	461a      	mov	r2, r3
 80091d6:	4603      	mov	r3, r0
 80091d8:	70fb      	strb	r3, [r7, #3]
 80091da:	460b      	mov	r3, r1
 80091dc:	70bb      	strb	r3, [r7, #2]
 80091de:	4613      	mov	r3, r2
 80091e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091f6:	461a      	mov	r2, r3
 80091f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80091fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009202:	2b03      	cmp	r3, #3
 8009204:	d87e      	bhi.n	8009304 <USB_HC_Init+0x13c>
 8009206:	a201      	add	r2, pc, #4	; (adr r2, 800920c <USB_HC_Init+0x44>)
 8009208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920c:	0800921d 	.word	0x0800921d
 8009210:	080092c7 	.word	0x080092c7
 8009214:	0800921d 	.word	0x0800921d
 8009218:	08009289 	.word	0x08009289
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	4413      	add	r3, r2
 8009224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009228:	461a      	mov	r2, r3
 800922a:	f240 439d 	movw	r3, #1181	; 0x49d
 800922e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009230:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009234:	2b00      	cmp	r3, #0
 8009236:	da10      	bge.n	800925a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009238:	78fb      	ldrb	r3, [r7, #3]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	4413      	add	r3, r2
 8009240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	78fa      	ldrb	r2, [r7, #3]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	440a      	add	r2, r1
 800924e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009256:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009258:	e057      	b.n	800930a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009262:	2b00      	cmp	r3, #0
 8009264:	d051      	beq.n	800930a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009266:	78fb      	ldrb	r3, [r7, #3]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	4413      	add	r3, r2
 800926e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	78fa      	ldrb	r2, [r7, #3]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	440a      	add	r2, r1
 800927c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009280:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009284:	60d3      	str	r3, [r2, #12]
      break;
 8009286:	e040      	b.n	800930a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	4413      	add	r3, r2
 8009290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009294:	461a      	mov	r2, r3
 8009296:	f240 639d 	movw	r3, #1693	; 0x69d
 800929a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800929c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	da34      	bge.n	800930e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80092a4:	78fb      	ldrb	r3, [r7, #3]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	0151      	lsls	r1, r2, #5
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	440a      	add	r2, r1
 80092ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092c2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80092c4:	e023      	b.n	800930e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092d2:	461a      	mov	r2, r3
 80092d4:	f240 2325 	movw	r3, #549	; 0x225
 80092d8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80092da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da17      	bge.n	8009312 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80092e2:	78fb      	ldrb	r3, [r7, #3]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	78fa      	ldrb	r2, [r7, #3]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092fc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009300:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009302:	e006      	b.n	8009312 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	77fb      	strb	r3, [r7, #31]
      break;
 8009308:	e004      	b.n	8009314 <USB_HC_Init+0x14c>
      break;
 800930a:	bf00      	nop
 800930c:	e002      	b.n	8009314 <USB_HC_Init+0x14c>
      break;
 800930e:	bf00      	nop
 8009310:	e000      	b.n	8009314 <USB_HC_Init+0x14c>
      break;
 8009312:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800931a:	699a      	ldr	r2, [r3, #24]
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	f003 030f 	and.w	r3, r3, #15
 8009322:	2101      	movs	r1, #1
 8009324:	fa01 f303 	lsl.w	r3, r1, r3
 8009328:	6939      	ldr	r1, [r7, #16]
 800932a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800932e:	4313      	orrs	r3, r2
 8009330:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800933e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009342:	2b00      	cmp	r3, #0
 8009344:	da03      	bge.n	800934e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800934a:	61bb      	str	r3, [r7, #24]
 800934c:	e001      	b.n	8009352 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff ff0f 	bl	8009176 <USB_GetHostSpeed>
 8009358:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800935a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800935e:	2b02      	cmp	r3, #2
 8009360:	d106      	bne.n	8009370 <USB_HC_Init+0x1a8>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b02      	cmp	r3, #2
 8009366:	d003      	beq.n	8009370 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	e001      	b.n	8009374 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009374:	787b      	ldrb	r3, [r7, #1]
 8009376:	059b      	lsls	r3, r3, #22
 8009378:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800937c:	78bb      	ldrb	r3, [r7, #2]
 800937e:	02db      	lsls	r3, r3, #11
 8009380:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009384:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009386:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800938a:	049b      	lsls	r3, r3, #18
 800938c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009390:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009392:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009394:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009398:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800939e:	78fb      	ldrb	r3, [r7, #3]
 80093a0:	0159      	lsls	r1, r3, #5
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	440b      	add	r3, r1
 80093a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093aa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80093b0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80093b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d10f      	bne.n	80093da <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	78fa      	ldrb	r2, [r7, #3]
 80093ca:	0151      	lsls	r1, r2, #5
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	440a      	add	r2, r1
 80093d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093d8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80093da:	7ffb      	ldrb	r3, [r7, #31]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3720      	adds	r7, #32
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08c      	sub	sp, #48	; 0x30
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	4613      	mov	r3, r2
 80093f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	785b      	ldrb	r3, [r3, #1]
 80093fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80093fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009400:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940a:	2b00      	cmp	r3, #0
 800940c:	d02d      	beq.n	800946a <USB_HC_StartXfer+0x86>
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	791b      	ldrb	r3, [r3, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d129      	bne.n	800946a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d117      	bne.n	800944c <USB_HC_StartXfer+0x68>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	79db      	ldrb	r3, [r3, #7]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <USB_HC_StartXfer+0x48>
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	79db      	ldrb	r3, [r3, #7]
 8009428:	2b02      	cmp	r3, #2
 800942a:	d10f      	bne.n	800944c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	4413      	add	r3, r2
 8009434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	69fa      	ldr	r2, [r7, #28]
 800943c:	0151      	lsls	r1, r2, #5
 800943e:	6a3a      	ldr	r2, [r7, #32]
 8009440:	440a      	add	r2, r1
 8009442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800944a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10b      	bne.n	800946a <USB_HC_StartXfer+0x86>
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	795b      	ldrb	r3, [r3, #5]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d107      	bne.n	800946a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	785b      	ldrb	r3, [r3, #1]
 800945e:	4619      	mov	r1, r3
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 fa2f 	bl	80098c4 <USB_DoPing>
      return HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	e0f8      	b.n	800965c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d018      	beq.n	80094a4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	8912      	ldrh	r2, [r2, #8]
 800947a:	4413      	add	r3, r2
 800947c:	3b01      	subs	r3, #1
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	8912      	ldrh	r2, [r2, #8]
 8009482:	fbb3 f3f2 	udiv	r3, r3, r2
 8009486:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009488:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800948a:	8b7b      	ldrh	r3, [r7, #26]
 800948c:	429a      	cmp	r2, r3
 800948e:	d90b      	bls.n	80094a8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009490:	8b7b      	ldrh	r3, [r7, #26]
 8009492:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009494:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	8912      	ldrh	r2, [r2, #8]
 800949a:	fb02 f203 	mul.w	r2, r2, r3
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	611a      	str	r2, [r3, #16]
 80094a2:	e001      	b.n	80094a8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80094a4:	2301      	movs	r3, #1
 80094a6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	78db      	ldrb	r3, [r3, #3]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80094b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	8912      	ldrh	r2, [r2, #8]
 80094b6:	fb02 f203 	mul.w	r2, r2, r3
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	611a      	str	r2, [r3, #16]
 80094be:	e003      	b.n	80094c8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	695a      	ldr	r2, [r3, #20]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094d2:	04d9      	lsls	r1, r3, #19
 80094d4:	4b63      	ldr	r3, [pc, #396]	; (8009664 <USB_HC_StartXfer+0x280>)
 80094d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	7a9b      	ldrb	r3, [r3, #10]
 80094de:	075b      	lsls	r3, r3, #29
 80094e0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094e4:	69f9      	ldr	r1, [r7, #28]
 80094e6:	0148      	lsls	r0, r1, #5
 80094e8:	6a39      	ldr	r1, [r7, #32]
 80094ea:	4401      	add	r1, r0
 80094ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d009      	beq.n	800950e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	68d9      	ldr	r1, [r3, #12]
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	4413      	add	r3, r2
 8009506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800950a:	460a      	mov	r2, r1
 800950c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	bf0c      	ite	eq
 800951e:	2301      	moveq	r3, #1
 8009520:	2300      	movne	r3, #0
 8009522:	b2db      	uxtb	r3, r3
 8009524:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	4413      	add	r3, r2
 800952e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	69fa      	ldr	r2, [r7, #28]
 8009536:	0151      	lsls	r1, r2, #5
 8009538:	6a3a      	ldr	r2, [r7, #32]
 800953a:	440a      	add	r2, r1
 800953c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009540:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009544:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	4413      	add	r3, r2
 800954e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	7e7b      	ldrb	r3, [r7, #25]
 8009556:	075b      	lsls	r3, r3, #29
 8009558:	69f9      	ldr	r1, [r7, #28]
 800955a:	0148      	lsls	r0, r1, #5
 800955c:	6a39      	ldr	r1, [r7, #32]
 800955e:	4401      	add	r1, r0
 8009560:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009564:	4313      	orrs	r3, r2
 8009566:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	4413      	add	r3, r2
 8009570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800957e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	78db      	ldrb	r3, [r3, #3]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	e003      	b.n	800959a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009598:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095a0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	015a      	lsls	r2, r3, #5
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	4413      	add	r3, r2
 80095aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ae:	461a      	mov	r2, r3
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	e04e      	b.n	800965c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	78db      	ldrb	r3, [r3, #3]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d149      	bne.n	800965a <USB_HC_StartXfer+0x276>
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d045      	beq.n	800965a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	79db      	ldrb	r3, [r3, #7]
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d830      	bhi.n	8009638 <USB_HC_StartXfer+0x254>
 80095d6:	a201      	add	r2, pc, #4	; (adr r2, 80095dc <USB_HC_StartXfer+0x1f8>)
 80095d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095dc:	080095ed 	.word	0x080095ed
 80095e0:	08009611 	.word	0x08009611
 80095e4:	080095ed 	.word	0x080095ed
 80095e8:	08009611 	.word	0x08009611
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	3303      	adds	r3, #3
 80095f2:	089b      	lsrs	r3, r3, #2
 80095f4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80095f6:	8afa      	ldrh	r2, [r7, #22]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	429a      	cmp	r2, r3
 8009600:	d91c      	bls.n	800963c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	f043 0220 	orr.w	r2, r3, #32
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	619a      	str	r2, [r3, #24]
        }
        break;
 800960e:	e015      	b.n	800963c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	3303      	adds	r3, #3
 8009616:	089b      	lsrs	r3, r3, #2
 8009618:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800961a:	8afa      	ldrh	r2, [r7, #22]
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	b29b      	uxth	r3, r3
 8009626:	429a      	cmp	r2, r3
 8009628:	d90a      	bls.n	8009640 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	619a      	str	r2, [r3, #24]
        }
        break;
 8009636:	e003      	b.n	8009640 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009638:	bf00      	nop
 800963a:	e002      	b.n	8009642 <USB_HC_StartXfer+0x25e>
        break;
 800963c:	bf00      	nop
 800963e:	e000      	b.n	8009642 <USB_HC_StartXfer+0x25e>
        break;
 8009640:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	68d9      	ldr	r1, [r3, #12]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	785a      	ldrb	r2, [r3, #1]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	b29b      	uxth	r3, r3
 8009650:	2000      	movs	r0, #0
 8009652:	9000      	str	r0, [sp, #0]
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff fb81 	bl	8008d5c <USB_WritePacket>
  }

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3728      	adds	r7, #40	; 0x28
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	1ff80000 	.word	0x1ff80000

08009668 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	b29b      	uxth	r3, r3
}
 800967e:	4618      	mov	r0, r3
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800968a:	b480      	push	{r7}
 800968c:	b089      	sub	sp, #36	; 0x24
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	460b      	mov	r3, r1
 8009694:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	0c9b      	lsrs	r3, r3, #18
 80096b2:	f003 0303 	and.w	r3, r3, #3
 80096b6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	0fdb      	lsrs	r3, r3, #31
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f003 0320 	and.w	r3, r3, #32
 80096d6:	2b20      	cmp	r3, #32
 80096d8:	d104      	bne.n	80096e4 <USB_HC_Halt+0x5a>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d101      	bne.n	80096e4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	e0e8      	b.n	80098b6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d002      	beq.n	80096f0 <USB_HC_Halt+0x66>
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d173      	bne.n	80097d8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	0151      	lsls	r1, r2, #5
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	440a      	add	r2, r1
 8009706:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800970a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800970e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	f040 80cb 	bne.w	80098b4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009722:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d143      	bne.n	80097b2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	015a      	lsls	r2, r3, #5
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	4413      	add	r3, r2
 8009732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	0151      	lsls	r1, r2, #5
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	440a      	add	r2, r1
 8009740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009748:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	4413      	add	r3, r2
 8009752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	0151      	lsls	r1, r2, #5
 800975c:	69ba      	ldr	r2, [r7, #24]
 800975e:	440a      	add	r2, r1
 8009760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009768:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	4413      	add	r3, r2
 8009772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	0151      	lsls	r1, r2, #5
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	440a      	add	r2, r1
 8009780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009784:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009788:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	3301      	adds	r3, #1
 800978e:	61fb      	str	r3, [r7, #28]
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009796:	d81d      	bhi.n	80097d4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097ae:	d0ec      	beq.n	800978a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097b0:	e080      	b.n	80098b4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	0151      	lsls	r1, r2, #5
 80097c4:	69ba      	ldr	r2, [r7, #24]
 80097c6:	440a      	add	r2, r1
 80097c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097d0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097d2:	e06f      	b.n	80098b4 <USB_HC_Halt+0x22a>
            break;
 80097d4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097d6:	e06d      	b.n	80098b4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	0151      	lsls	r1, r2, #5
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	440a      	add	r2, r1
 80097ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097f6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d143      	bne.n	8009890 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	4413      	add	r3, r2
 8009810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	0151      	lsls	r1, r2, #5
 800981a:	69ba      	ldr	r2, [r7, #24]
 800981c:	440a      	add	r2, r1
 800981e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009826:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	4413      	add	r3, r2
 8009830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	0151      	lsls	r1, r2, #5
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	440a      	add	r2, r1
 800983e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009842:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009846:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	015a      	lsls	r2, r3, #5
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	4413      	add	r3, r2
 8009850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	0151      	lsls	r1, r2, #5
 800985a:	69ba      	ldr	r2, [r7, #24]
 800985c:	440a      	add	r2, r1
 800985e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009862:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009866:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	3301      	adds	r3, #1
 800986c:	61fb      	str	r3, [r7, #28]
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009874:	d81d      	bhi.n	80098b2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	4413      	add	r3, r2
 800987e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800988c:	d0ec      	beq.n	8009868 <USB_HC_Halt+0x1de>
 800988e:	e011      	b.n	80098b4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	4413      	add	r3, r2
 8009898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	0151      	lsls	r1, r2, #5
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	440a      	add	r2, r1
 80098a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098ae:	6013      	str	r3, [r2, #0]
 80098b0:	e000      	b.n	80098b4 <USB_HC_Halt+0x22a>
          break;
 80098b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3724      	adds	r7, #36	; 0x24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
	...

080098c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80098d8:	2301      	movs	r3, #1
 80098da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	04da      	lsls	r2, r3, #19
 80098e0:	4b15      	ldr	r3, [pc, #84]	; (8009938 <USB_DoPing+0x74>)
 80098e2:	4013      	ands	r3, r2
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	0151      	lsls	r1, r2, #5
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	440a      	add	r2, r1
 80098ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800990c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009914:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	4413      	add	r3, r2
 800991e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009922:	461a      	mov	r2, r3
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	1ff80000 	.word	0x1ff80000

0800993c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff f981 	bl	8008c54 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009952:	2110      	movs	r1, #16
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff f9b9 	bl	8008ccc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7ff f9dc 	bl	8008d18 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009960:	2300      	movs	r3, #0
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	e01f      	b.n	80099a6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800997c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009984:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800998c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4413      	add	r3, r2
 8009996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800999a:	461a      	mov	r2, r3
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	3301      	adds	r3, #1
 80099a4:	613b      	str	r3, [r7, #16]
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b0f      	cmp	r3, #15
 80099aa:	d9dc      	bls.n	8009966 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80099ac:	2300      	movs	r3, #0
 80099ae:	613b      	str	r3, [r7, #16]
 80099b0:	e034      	b.n	8009a1c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	015a      	lsls	r2, r3, #5
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	4413      	add	r3, r2
 80099ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099e6:	461a      	mov	r2, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	3301      	adds	r3, #1
 80099f0:	617b      	str	r3, [r7, #20]
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099f8:	d80c      	bhi.n	8009a14 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	015a      	lsls	r2, r3, #5
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a10:	d0ec      	beq.n	80099ec <USB_StopHost+0xb0>
 8009a12:	e000      	b.n	8009a16 <USB_StopHost+0xda>
        break;
 8009a14:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	613b      	str	r3, [r7, #16]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	2b0f      	cmp	r3, #15
 8009a20:	d9c7      	bls.n	80099b2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a28:	461a      	mov	r2, r3
 8009a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a2e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a36:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff f8fa 	bl	8008c32 <USB_EnableGlobalInt>

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3718      	adds	r7, #24
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009a48:	b590      	push	{r4, r7, lr}
 8009a4a:	b089      	sub	sp, #36	; 0x24
 8009a4c:	af04      	add	r7, sp, #16
 8009a4e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009a50:	2301      	movs	r3, #1
 8009a52:	2202      	movs	r2, #2
 8009a54:	2102      	movs	r1, #2
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fcb2 	bl	800a3c0 <USBH_FindInterface>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	2bff      	cmp	r3, #255	; 0xff
 8009a64:	d002      	beq.n	8009a6c <USBH_CDC_InterfaceInit+0x24>
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d901      	bls.n	8009a70 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	e13d      	b.n	8009cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fc87 	bl	800a388 <USBH_SelectInterface>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a84:	2302      	movs	r3, #2
 8009a86:	e131      	b.n	8009cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009a8e:	2050      	movs	r0, #80	; 0x50
 8009a90:	f005 fbd0 	bl	800f234 <malloc>
 8009a94:	4603      	mov	r3, r0
 8009a96:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d101      	bne.n	8009aac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	e11f      	b.n	8009cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009aac:	2250      	movs	r2, #80	; 0x50
 8009aae:	2100      	movs	r1, #0
 8009ab0:	68b8      	ldr	r0, [r7, #8]
 8009ab2:	f005 fbdd 	bl	800f270 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	211a      	movs	r1, #26
 8009abc:	fb01 f303 	mul.w	r3, r1, r3
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	b25b      	sxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	da15      	bge.n	8009afa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	211a      	movs	r1, #26
 8009ad4:	fb01 f303 	mul.w	r3, r1, r3
 8009ad8:	4413      	add	r3, r2
 8009ada:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ade:	781a      	ldrb	r2, [r3, #0]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	211a      	movs	r1, #26
 8009aea:	fb01 f303 	mul.w	r3, r1, r3
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009af4:	881a      	ldrh	r2, [r3, #0]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	785b      	ldrb	r3, [r3, #1]
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f002 f88c 	bl	800bc1e <USBH_AllocPipe>
 8009b06:	4603      	mov	r3, r0
 8009b08:	461a      	mov	r2, r3
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	7819      	ldrb	r1, [r3, #0]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	7858      	ldrb	r0, [r3, #1]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	8952      	ldrh	r2, [r2, #10]
 8009b26:	9202      	str	r2, [sp, #8]
 8009b28:	2203      	movs	r2, #3
 8009b2a:	9201      	str	r2, [sp, #4]
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	4623      	mov	r3, r4
 8009b30:	4602      	mov	r2, r0
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f002 f844 	bl	800bbc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f005 fac9 	bl	800f0d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009b46:	2300      	movs	r3, #0
 8009b48:	2200      	movs	r2, #0
 8009b4a:	210a      	movs	r1, #10
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fc37 	bl	800a3c0 <USBH_FindInterface>
 8009b52:	4603      	mov	r3, r0
 8009b54:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
 8009b58:	2bff      	cmp	r3, #255	; 0xff
 8009b5a:	d002      	beq.n	8009b62 <USBH_CDC_InterfaceInit+0x11a>
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d901      	bls.n	8009b66 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b62:	2302      	movs	r3, #2
 8009b64:	e0c2      	b.n	8009cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	211a      	movs	r1, #26
 8009b6c:	fb01 f303 	mul.w	r3, r1, r3
 8009b70:	4413      	add	r3, r2
 8009b72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	b25b      	sxtb	r3, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	da16      	bge.n	8009bac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	211a      	movs	r1, #26
 8009b84:	fb01 f303 	mul.w	r3, r1, r3
 8009b88:	4413      	add	r3, r2
 8009b8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b8e:	781a      	ldrb	r2, [r3, #0]
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	211a      	movs	r1, #26
 8009b9a:	fb01 f303 	mul.w	r3, r1, r3
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009ba4:	881a      	ldrh	r2, [r3, #0]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	835a      	strh	r2, [r3, #26]
 8009baa:	e015      	b.n	8009bd8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	211a      	movs	r1, #26
 8009bb2:	fb01 f303 	mul.w	r3, r1, r3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009bbc:	781a      	ldrb	r2, [r3, #0]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009bc2:	7bfb      	ldrb	r3, [r7, #15]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	211a      	movs	r1, #26
 8009bc8:	fb01 f303 	mul.w	r3, r1, r3
 8009bcc:	4413      	add	r3, r2
 8009bce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009bd2:	881a      	ldrh	r2, [r3, #0]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	211a      	movs	r1, #26
 8009bde:	fb01 f303 	mul.w	r3, r1, r3
 8009be2:	4413      	add	r3, r2
 8009be4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	b25b      	sxtb	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	da16      	bge.n	8009c1e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	211a      	movs	r1, #26
 8009bf6:	fb01 f303 	mul.w	r3, r1, r3
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c00:	781a      	ldrb	r2, [r3, #0]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	211a      	movs	r1, #26
 8009c0c:	fb01 f303 	mul.w	r3, r1, r3
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c16:	881a      	ldrh	r2, [r3, #0]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	835a      	strh	r2, [r3, #26]
 8009c1c:	e015      	b.n	8009c4a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	211a      	movs	r1, #26
 8009c24:	fb01 f303 	mul.w	r3, r1, r3
 8009c28:	4413      	add	r3, r2
 8009c2a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c2e:	781a      	ldrb	r2, [r3, #0]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	211a      	movs	r1, #26
 8009c3a:	fb01 f303 	mul.w	r3, r1, r3
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c44:	881a      	ldrh	r2, [r3, #0]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	7b9b      	ldrb	r3, [r3, #14]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 ffe4 	bl	800bc1e <USBH_AllocPipe>
 8009c56:	4603      	mov	r3, r0
 8009c58:	461a      	mov	r2, r3
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	7bdb      	ldrb	r3, [r3, #15]
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f001 ffda 	bl	800bc1e <USBH_AllocPipe>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	7b59      	ldrb	r1, [r3, #13]
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	7b98      	ldrb	r0, [r3, #14]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	8b12      	ldrh	r2, [r2, #24]
 8009c8a:	9202      	str	r2, [sp, #8]
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	9201      	str	r2, [sp, #4]
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	4623      	mov	r3, r4
 8009c94:	4602      	mov	r2, r0
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f001 ff92 	bl	800bbc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	7b19      	ldrb	r1, [r3, #12]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	7bd8      	ldrb	r0, [r3, #15]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	8b52      	ldrh	r2, [r2, #26]
 8009cb4:	9202      	str	r2, [sp, #8]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	9201      	str	r2, [sp, #4]
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	4623      	mov	r3, r4
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f001 ff7d 	bl	800bbc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	7b5b      	ldrb	r3, [r3, #13]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f005 f9fe 	bl	800f0d8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	7b1b      	ldrb	r3, [r3, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f005 f9f7 	bl	800f0d8 <USBH_LL_SetToggle>

  return USBH_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd90      	pop	{r4, r7, pc}

08009cf4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00e      	beq.n	8009d2c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 ff72 	bl	800bbfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 ff9d 	bl	800bc60 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	7b1b      	ldrb	r3, [r3, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00e      	beq.n	8009d52 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	7b1b      	ldrb	r3, [r3, #12]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f001 ff5f 	bl	800bbfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	7b1b      	ldrb	r3, [r3, #12]
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f001 ff8a 	bl	800bc60 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	7b5b      	ldrb	r3, [r3, #13]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00e      	beq.n	8009d78 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	7b5b      	ldrb	r3, [r3, #13]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 ff4c 	bl	800bbfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	7b5b      	ldrb	r3, [r3, #13]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 ff77 	bl	800bc60 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00b      	beq.n	8009d9c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f005 fa59 	bl	800f244 <free>
    phost->pActiveClass->pData = 0U;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d98:	2200      	movs	r2, #0
 8009d9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3340      	adds	r3, #64	; 0x40
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f8b1 	bl	8009f26 <GetLineCoding>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009dc8:	7afb      	ldrb	r3, [r7, #11]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d105      	bne.n	8009dda <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009dd4:	2102      	movs	r1, #2
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009dda:	7afb      	ldrb	r3, [r7, #11]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009dec:	2301      	movs	r3, #1
 8009dee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d877      	bhi.n	8009ef8 <USBH_CDC_Process+0x114>
 8009e08:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <USBH_CDC_Process+0x2c>)
 8009e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0e:	bf00      	nop
 8009e10:	08009e25 	.word	0x08009e25
 8009e14:	08009e2b 	.word	0x08009e2b
 8009e18:	08009e5b 	.word	0x08009e5b
 8009e1c:	08009ecf 	.word	0x08009ecf
 8009e20:	08009edd 	.word	0x08009edd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73fb      	strb	r3, [r7, #15]
      break;
 8009e28:	e06d      	b.n	8009f06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f897 	bl	8009f64 <SetLineCoding>
 8009e36:	4603      	mov	r3, r0
 8009e38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d104      	bne.n	8009e4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2202      	movs	r2, #2
 8009e44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e48:	e058      	b.n	8009efc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d055      	beq.n	8009efc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	2204      	movs	r2, #4
 8009e54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009e58:	e050      	b.n	8009efc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	3340      	adds	r3, #64	; 0x40
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f860 	bl	8009f26 <GetLineCoding>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d126      	bne.n	8009ebe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e82:	791b      	ldrb	r3, [r3, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d13b      	bne.n	8009f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d133      	bne.n	8009f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d12b      	bne.n	8009f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eb0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d124      	bne.n	8009f00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f982 	bl	800a1c0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009ebc:	e020      	b.n	8009f00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d01d      	beq.n	8009f00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2204      	movs	r2, #4
 8009ec8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009ecc:	e018      	b.n	8009f00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f867 	bl	8009fa2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f8f6 	bl	800a0c6 <CDC_ProcessReception>
      break;
 8009eda:	e014      	b.n	8009f06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009edc:	2100      	movs	r1, #0
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f001 f94d 	bl	800b17e <USBH_ClrFeature>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10a      	bne.n	8009f04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009ef6:	e005      	b.n	8009f04 <USBH_CDC_Process+0x120>

    default:
      break;
 8009ef8:	bf00      	nop
 8009efa:	e004      	b.n	8009f06 <USBH_CDC_Process+0x122>
      break;
 8009efc:	bf00      	nop
 8009efe:	e002      	b.n	8009f06 <USBH_CDC_Process+0x122>
      break;
 8009f00:	bf00      	nop
 8009f02:	e000      	b.n	8009f06 <USBH_CDC_Process+0x122>
      break;
 8009f04:	bf00      	nop

  }

  return status;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b082      	sub	sp, #8
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	22a1      	movs	r2, #161	; 0xa1
 8009f34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2221      	movs	r2, #33	; 0x21
 8009f3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2207      	movs	r2, #7
 8009f4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2207      	movs	r2, #7
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 faf2 	bl	800b53e <USBH_CtlReq>
 8009f5a:	4603      	mov	r3, r0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2221      	movs	r2, #33	; 0x21
 8009f72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2220      	movs	r2, #32
 8009f78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2207      	movs	r2, #7
 8009f8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2207      	movs	r2, #7
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f001 fad3 	bl	800b53e <USBH_CtlReq>
 8009f98:	4603      	mov	r3, r0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b086      	sub	sp, #24
 8009fa6:	af02      	add	r7, sp, #8
 8009fa8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d002      	beq.n	8009fc8 <CDC_ProcessTransmission+0x26>
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d023      	beq.n	800a00e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009fc6:	e07a      	b.n	800a0be <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	8b12      	ldrh	r2, [r2, #24]
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d90b      	bls.n	8009fec <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	69d9      	ldr	r1, [r3, #28]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	8b1a      	ldrh	r2, [r3, #24]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	7b5b      	ldrb	r3, [r3, #13]
 8009fe0:	2001      	movs	r0, #1
 8009fe2:	9000      	str	r0, [sp, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f001 fda8 	bl	800bb3a <USBH_BulkSendData>
 8009fea:	e00b      	b.n	800a004 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	7b5b      	ldrb	r3, [r3, #13]
 8009ffa:	2001      	movs	r0, #1
 8009ffc:	9000      	str	r0, [sp, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 fd9b 	bl	800bb3a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a00c:	e057      	b.n	800a0be <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	7b5b      	ldrb	r3, [r3, #13]
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f005 f835 	bl	800f084 <USBH_LL_GetURBState>
 800a01a:	4603      	mov	r3, r0
 800a01c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a01e:	7afb      	ldrb	r3, [r7, #11]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d136      	bne.n	800a092 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	8b12      	ldrh	r2, [r2, #24]
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d90e      	bls.n	800a04e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	8b12      	ldrh	r2, [r2, #24]
 800a038:	1a9a      	subs	r2, r3, r2
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	8b12      	ldrh	r2, [r2, #24]
 800a046:	441a      	add	r2, r3
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	61da      	str	r2, [r3, #28]
 800a04c:	e002      	b.n	800a054 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d004      	beq.n	800a066 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a064:	e006      	b.n	800a074 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f892 	bl	800a198 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2204      	movs	r2, #4
 800a078:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a088:	2300      	movs	r3, #0
 800a08a:	2200      	movs	r2, #0
 800a08c:	f001 ffd8 	bl	800c040 <osMessageQueuePut>
      break;
 800a090:	e014      	b.n	800a0bc <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d111      	bne.n	800a0bc <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2204      	movs	r2, #4
 800a0a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f001 ffc2 	bl	800c040 <osMessageQueuePut>
      break;
 800a0bc:	bf00      	nop
  }
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b086      	sub	sp, #24
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0d4:	69db      	ldr	r3, [r3, #28]
 800a0d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d002      	beq.n	800a0ec <CDC_ProcessReception+0x26>
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	d00e      	beq.n	800a108 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a0ea:	e051      	b.n	800a190 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	6a19      	ldr	r1, [r3, #32]
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	8b5a      	ldrh	r2, [r3, #26]
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	7b1b      	ldrb	r3, [r3, #12]
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 fd43 	bl	800bb84 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2204      	movs	r2, #4
 800a102:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a106:	e043      	b.n	800a190 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	7b1b      	ldrb	r3, [r3, #12]
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f004 ffb8 	bl	800f084 <USBH_LL_GetURBState>
 800a114:	4603      	mov	r3, r0
 800a116:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a118:	7cfb      	ldrb	r3, [r7, #19]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d137      	bne.n	800a18e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	7b1b      	ldrb	r3, [r3, #12]
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f004 ff1b 	bl	800ef60 <USBH_LL_GetLastXferSize>
 800a12a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	429a      	cmp	r2, r3
 800a134:	d016      	beq.n	800a164 <CDC_ProcessReception+0x9e>
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	8b5b      	ldrh	r3, [r3, #26]
 800a13a:	461a      	mov	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	4293      	cmp	r3, r2
 800a140:	d910      	bls.n	800a164 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	1ad2      	subs	r2, r2, r3
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	6a1a      	ldr	r2, [r3, #32]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	441a      	add	r2, r3
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2203      	movs	r2, #3
 800a15e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a162:	e006      	b.n	800a172 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f81d 	bl	800a1ac <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2204      	movs	r2, #4
 800a176:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a186:	2300      	movs	r3, #0
 800a188:	2200      	movs	r2, #0
 800a18a:	f001 ff59 	bl	800c040 <osMessageQueuePut>
      break;
 800a18e:	bf00      	nop
  }
}
 800a190:	bf00      	nop
 800a192:	3718      	adds	r7, #24
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	e044      	b.n	800a276 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	79fa      	ldrb	r2, [r7, #7]
 800a1f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 f841 	bl	800a28c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a238:	2200      	movs	r2, #0
 800a23a:	2104      	movs	r1, #4
 800a23c:	2010      	movs	r0, #16
 800a23e:	f001 fe8c 	bl	800bf5a <osMessageQueueNew>
 800a242:	4602      	mov	r2, r0
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a24a:	4b0d      	ldr	r3, [pc, #52]	; (800a280 <USBH_Init+0xac>)
 800a24c:	4a0d      	ldr	r2, [pc, #52]	; (800a284 <USBH_Init+0xb0>)
 800a24e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a250:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <USBH_Init+0xac>)
 800a252:	2280      	movs	r2, #128	; 0x80
 800a254:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a256:	4b0a      	ldr	r3, [pc, #40]	; (800a280 <USBH_Init+0xac>)
 800a258:	2218      	movs	r2, #24
 800a25a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a25c:	4a08      	ldr	r2, [pc, #32]	; (800a280 <USBH_Init+0xac>)
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	4809      	ldr	r0, [pc, #36]	; (800a288 <USBH_Init+0xb4>)
 800a262:	f001 fdcd 	bl	800be00 <osThreadNew>
 800a266:	4602      	mov	r2, r0
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f004 fdc2 	bl	800edf8 <USBH_LL_Init>

  return USBH_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	2000506c 	.word	0x2000506c
 800a284:	0800f590 	.word	0x0800f590
 800a288:	0800aef5 	.word	0x0800aef5

0800a28c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a294:	2300      	movs	r3, #0
 800a296:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a298:	2300      	movs	r3, #0
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	e009      	b.n	800a2b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	33e0      	adds	r3, #224	; 0xe0
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	60fb      	str	r3, [r7, #12]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b0e      	cmp	r3, #14
 800a2b6:	d9f2      	bls.n	800a29e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	e009      	b.n	800a2d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2d8:	d3f1      	bcc.n	800a2be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2240      	movs	r2, #64	; 0x40
 800a2fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d016      	beq.n	800a376 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10e      	bne.n	800a370 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a358:	1c59      	adds	r1, r3, #1
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	33de      	adds	r3, #222	; 0xde
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]
 800a36e:	e004      	b.n	800a37a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a370:	2302      	movs	r3, #2
 800a372:	73fb      	strb	r3, [r7, #15]
 800a374:	e001      	b.n	800a37a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a376:	2302      	movs	r3, #2
 800a378:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a39e:	78fa      	ldrb	r2, [r7, #3]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d204      	bcs.n	800a3ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	78fa      	ldrb	r2, [r7, #3]
 800a3a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a3ac:	e001      	b.n	800a3b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	70fb      	strb	r3, [r7, #3]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70bb      	strb	r3, [r7, #2]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a3e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3ea:	e025      	b.n	800a438 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	221a      	movs	r2, #26
 800a3f0:	fb02 f303 	mul.w	r3, r2, r3
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	3302      	adds	r3, #2
 800a3fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	795b      	ldrb	r3, [r3, #5]
 800a402:	78fa      	ldrb	r2, [r7, #3]
 800a404:	429a      	cmp	r2, r3
 800a406:	d002      	beq.n	800a40e <USBH_FindInterface+0x4e>
 800a408:	78fb      	ldrb	r3, [r7, #3]
 800a40a:	2bff      	cmp	r3, #255	; 0xff
 800a40c:	d111      	bne.n	800a432 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a412:	78ba      	ldrb	r2, [r7, #2]
 800a414:	429a      	cmp	r2, r3
 800a416:	d002      	beq.n	800a41e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a418:	78bb      	ldrb	r3, [r7, #2]
 800a41a:	2bff      	cmp	r3, #255	; 0xff
 800a41c:	d109      	bne.n	800a432 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a422:	787a      	ldrb	r2, [r7, #1]
 800a424:	429a      	cmp	r2, r3
 800a426:	d002      	beq.n	800a42e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a428:	787b      	ldrb	r3, [r7, #1]
 800a42a:	2bff      	cmp	r3, #255	; 0xff
 800a42c:	d101      	bne.n	800a432 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
 800a430:	e006      	b.n	800a440 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a432:	7dfb      	ldrb	r3, [r7, #23]
 800a434:	3301      	adds	r3, #1
 800a436:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d9d6      	bls.n	800a3ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a43e:	23ff      	movs	r3, #255	; 0xff
}
 800a440:	4618      	mov	r0, r3
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f004 fd0b 	bl	800ee70 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a45a:	2101      	movs	r1, #1
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f004 fe24 	bl	800f0aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af04      	add	r7, sp, #16
 800a472:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a474:	2302      	movs	r3, #2
 800a476:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b01      	cmp	r3, #1
 800a486:	d102      	bne.n	800a48e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2203      	movs	r2, #3
 800a48c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	b2db      	uxtb	r3, r3
 800a494:	2b0b      	cmp	r3, #11
 800a496:	f200 823c 	bhi.w	800a912 <USBH_Process+0x4a6>
 800a49a:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <USBH_Process+0x34>)
 800a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a0:	0800a4d1 	.word	0x0800a4d1
 800a4a4:	0800a51f 	.word	0x0800a51f
 800a4a8:	0800a5a3 	.word	0x0800a5a3
 800a4ac:	0800a891 	.word	0x0800a891
 800a4b0:	0800a913 	.word	0x0800a913
 800a4b4:	0800a663 	.word	0x0800a663
 800a4b8:	0800a81b 	.word	0x0800a81b
 800a4bc:	0800a6b5 	.word	0x0800a6b5
 800a4c0:	0800a6f1 	.word	0x0800a6f1
 800a4c4:	0800a72b 	.word	0x0800a72b
 800a4c8:	0800a773 	.word	0x0800a773
 800a4cc:	0800a879 	.word	0x0800a879
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 821c 	beq.w	800a916 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a4e4:	20c8      	movs	r0, #200	; 0xc8
 800a4e6:	f004 fe27 	bl	800f138 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f004 fd1d 	bl	800ef2a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a514:	2300      	movs	r3, #0
 800a516:	2200      	movs	r2, #0
 800a518:	f001 fd92 	bl	800c040 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a51c:	e1fb      	b.n	800a916 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a524:	2b01      	cmp	r3, #1
 800a526:	d107      	bne.n	800a538 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2202      	movs	r2, #2
 800a534:	701a      	strb	r2, [r3, #0]
 800a536:	e025      	b.n	800a584 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a53e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a542:	d914      	bls.n	800a56e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a54a:	3301      	adds	r3, #1
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	d903      	bls.n	800a566 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	220d      	movs	r2, #13
 800a562:	701a      	strb	r2, [r3, #0]
 800a564:	e00e      	b.n	800a584 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	e00a      	b.n	800a584 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a574:	f103 020a 	add.w	r2, r3, #10
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a57e:	200a      	movs	r0, #10
 800a580:	f004 fdda 	bl	800f138 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a598:	2300      	movs	r3, #0
 800a59a:	2200      	movs	r2, #0
 800a59c:	f001 fd50 	bl	800c040 <osMessageQueuePut>
#endif
#endif
      break;
 800a5a0:	e1c0      	b.n	800a924 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d005      	beq.n	800a5b8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5b2:	2104      	movs	r1, #4
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a5b8:	2064      	movs	r0, #100	; 0x64
 800a5ba:	f004 fdbd 	bl	800f138 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f004 fc8c 	bl	800eedc <USBH_LL_GetSpeed>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2205      	movs	r2, #5
 800a5d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f001 fb21 	bl	800bc1e <USBH_AllocPipe>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	461a      	mov	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5e4:	2180      	movs	r1, #128	; 0x80
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f001 fb19 	bl	800bc1e <USBH_AllocPipe>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	7919      	ldrb	r1, [r3, #4]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a608:	b292      	uxth	r2, r2
 800a60a:	9202      	str	r2, [sp, #8]
 800a60c:	2200      	movs	r2, #0
 800a60e:	9201      	str	r2, [sp, #4]
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	4603      	mov	r3, r0
 800a614:	2280      	movs	r2, #128	; 0x80
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 fad2 	bl	800bbc0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	7959      	ldrb	r1, [r3, #5]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a630:	b292      	uxth	r2, r2
 800a632:	9202      	str	r2, [sp, #8]
 800a634:	2200      	movs	r2, #0
 800a636:	9201      	str	r2, [sp, #4]
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	4603      	mov	r3, r0
 800a63c:	2200      	movs	r2, #0
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 fabe 	bl	800bbc0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a658:	2300      	movs	r3, #0
 800a65a:	2200      	movs	r2, #0
 800a65c:	f001 fcf0 	bl	800c040 <osMessageQueuePut>
#endif
#endif
      break;
 800a660:	e160      	b.n	800a924 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f964 	bl	800a930 <USBH_HandleEnum>
 800a668:	4603      	mov	r3, r0
 800a66a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	2b00      	cmp	r3, #0
 800a672:	f040 8152 	bne.w	800a91a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a684:	2b01      	cmp	r3, #1
 800a686:	d103      	bne.n	800a690 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2208      	movs	r2, #8
 800a68c:	701a      	strb	r2, [r3, #0]
 800a68e:	e002      	b.n	800a696 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2207      	movs	r2, #7
 800a694:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2205      	movs	r2, #5
 800a69a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f001 fcc7 	bl	800c040 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a6b2:	e132      	b.n	800a91a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 812f 	beq.w	800a91e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2208      	movs	r2, #8
 800a6d0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2205      	movs	r2, #5
 800a6d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f001 fca9 	bl	800c040 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a6ee:	e116      	b.n	800a91e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fcf8 	bl	800b0f0 <USBH_SetCfg>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d102      	bne.n	800a70c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2209      	movs	r2, #9
 800a70a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a720:	2300      	movs	r3, #0
 800a722:	2200      	movs	r2, #0
 800a724:	f001 fc8c 	bl	800c040 <osMessageQueuePut>
#endif
#endif
      break;
 800a728:	e0fc      	b.n	800a924 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a730:	f003 0320 	and.w	r3, r3, #32
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00a      	beq.n	800a74e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a738:	2101      	movs	r1, #1
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fcfb 	bl	800b136 <USBH_SetFeature>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d106      	bne.n	800a754 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	220a      	movs	r2, #10
 800a74a:	701a      	strb	r2, [r3, #0]
 800a74c:	e002      	b.n	800a754 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	220a      	movs	r2, #10
 800a752:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a768:	2300      	movs	r3, #0
 800a76a:	2200      	movs	r2, #0
 800a76c:	f001 fc68 	bl	800c040 <osMessageQueuePut>
#endif
#endif
      break;
 800a770:	e0d8      	b.n	800a924 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d03f      	beq.n	800a7fc <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
 800a788:	e016      	b.n	800a7b8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a78a:	7bfa      	ldrb	r2, [r7, #15]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	32de      	adds	r2, #222	; 0xde
 800a790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a794:	791a      	ldrb	r2, [r3, #4]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d108      	bne.n	800a7b2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a7a0:	7bfa      	ldrb	r2, [r7, #15]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	32de      	adds	r2, #222	; 0xde
 800a7a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a7b0:	e005      	b.n	800a7be <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a7b2:	7bfb      	ldrb	r3, [r7, #15]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	73fb      	strb	r3, [r7, #15]
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0e5      	beq.n	800a78a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d016      	beq.n	800a7f6 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	4798      	blx	r3
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2206      	movs	r2, #6
 800a7de:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7e6:	2103      	movs	r1, #3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	4798      	blx	r3
 800a7ec:	e006      	b.n	800a7fc <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	220d      	movs	r2, #13
 800a7f2:	701a      	strb	r2, [r3, #0]
 800a7f4:	e002      	b.n	800a7fc <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	220d      	movs	r2, #13
 800a7fa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2205      	movs	r2, #5
 800a800:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a810:	2300      	movs	r3, #0
 800a812:	2200      	movs	r2, #0
 800a814:	f001 fc14 	bl	800c040 <osMessageQueuePut>
#endif
#endif
      break;
 800a818:	e084      	b.n	800a924 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a820:	2b00      	cmp	r3, #0
 800a822:	d017      	beq.n	800a854 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	4798      	blx	r3
 800a830:	4603      	mov	r3, r0
 800a832:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a834:	7bbb      	ldrb	r3, [r7, #14]
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d103      	bne.n	800a844 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	220b      	movs	r2, #11
 800a840:	701a      	strb	r2, [r3, #0]
 800a842:	e00a      	b.n	800a85a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a844:	7bbb      	ldrb	r3, [r7, #14]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d106      	bne.n	800a85a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	220d      	movs	r2, #13
 800a850:	701a      	strb	r2, [r3, #0]
 800a852:	e002      	b.n	800a85a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	220d      	movs	r2, #13
 800a858:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2205      	movs	r2, #5
 800a85e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a86e:	2300      	movs	r3, #0
 800a870:	2200      	movs	r2, #0
 800a872:	f001 fbe5 	bl	800c040 <osMessageQueuePut>
#endif
#endif
      break;
 800a876:	e055      	b.n	800a924 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d04f      	beq.n	800a922 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	4798      	blx	r3
      }
      break;
 800a88e:	e048      	b.n	800a922 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7ff fcf7 	bl	800a28c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d009      	beq.n	800a8bc <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d005      	beq.n	800a8d2 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8cc:	2105      	movs	r1, #5
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d107      	bne.n	800a8ee <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7ff fdb0 	bl	800a44c <USBH_Start>
 800a8ec:	e002      	b.n	800a8f4 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f004 fabe 	bl	800ee70 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a908:	2300      	movs	r3, #0
 800a90a:	2200      	movs	r2, #0
 800a90c:	f001 fb98 	bl	800c040 <osMessageQueuePut>
#endif
#endif
      break;
 800a910:	e008      	b.n	800a924 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a912:	bf00      	nop
 800a914:	e006      	b.n	800a924 <USBH_Process+0x4b8>
      break;
 800a916:	bf00      	nop
 800a918:	e004      	b.n	800a924 <USBH_Process+0x4b8>
      break;
 800a91a:	bf00      	nop
 800a91c:	e002      	b.n	800a924 <USBH_Process+0x4b8>
    break;
 800a91e:	bf00      	nop
 800a920:	e000      	b.n	800a924 <USBH_Process+0x4b8>
      break;
 800a922:	bf00      	nop
  }
  return USBH_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop

0800a930 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b088      	sub	sp, #32
 800a934:	af04      	add	r7, sp, #16
 800a936:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a938:	2301      	movs	r3, #1
 800a93a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a93c:	2301      	movs	r3, #1
 800a93e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	785b      	ldrb	r3, [r3, #1]
 800a944:	2b07      	cmp	r3, #7
 800a946:	f200 8208 	bhi.w	800ad5a <USBH_HandleEnum+0x42a>
 800a94a:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <USBH_HandleEnum+0x20>)
 800a94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a950:	0800a971 	.word	0x0800a971
 800a954:	0800aa2f 	.word	0x0800aa2f
 800a958:	0800aa99 	.word	0x0800aa99
 800a95c:	0800ab27 	.word	0x0800ab27
 800a960:	0800ab91 	.word	0x0800ab91
 800a964:	0800ac01 	.word	0x0800ac01
 800a968:	0800ac9d 	.word	0x0800ac9d
 800a96c:	0800ad1b 	.word	0x0800ad1b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a970:	2108      	movs	r1, #8
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 faec 	bl	800af50 <USBH_Get_DevDesc>
 800a978:	4603      	mov	r3, r0
 800a97a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d130      	bne.n	800a9e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	7919      	ldrb	r1, [r3, #4]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a9a6:	b292      	uxth	r2, r2
 800a9a8:	9202      	str	r2, [sp, #8]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	9201      	str	r2, [sp, #4]
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2280      	movs	r2, #128	; 0x80
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 f903 	bl	800bbc0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	7959      	ldrb	r1, [r3, #5]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9ce:	b292      	uxth	r2, r2
 800a9d0:	9202      	str	r2, [sp, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	9201      	str	r2, [sp, #4]
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2200      	movs	r2, #0
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 f8ef 	bl	800bbc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a9e2:	e1bc      	b.n	800ad5e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	f040 81b9 	bne.w	800ad5e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	b2da      	uxtb	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d903      	bls.n	800aa0e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	220d      	movs	r2, #13
 800aa0a:	701a      	strb	r2, [r3, #0]
      break;
 800aa0c:	e1a7      	b.n	800ad5e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	795b      	ldrb	r3, [r3, #5]
 800aa12:	4619      	mov	r1, r3
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f001 f923 	bl	800bc60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	791b      	ldrb	r3, [r3, #4]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f001 f91d 	bl	800bc60 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	701a      	strb	r2, [r3, #0]
      break;
 800aa2c:	e197      	b.n	800ad5e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aa2e:	2112      	movs	r1, #18
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fa8d 	bl	800af50 <USBH_Get_DevDesc>
 800aa36:	4603      	mov	r3, r0
 800aa38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d103      	bne.n	800aa48 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2202      	movs	r2, #2
 800aa44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa46:	e18c      	b.n	800ad62 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	f040 8189 	bne.w	800ad62 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa56:	3301      	adds	r3, #1
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d903      	bls.n	800aa72 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	220d      	movs	r2, #13
 800aa6e:	701a      	strb	r2, [r3, #0]
      break;
 800aa70:	e177      	b.n	800ad62 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	795b      	ldrb	r3, [r3, #5]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 f8f1 	bl	800bc60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	791b      	ldrb	r3, [r3, #4]
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f001 f8eb 	bl	800bc60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	701a      	strb	r2, [r3, #0]
      break;
 800aa96:	e164      	b.n	800ad62 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800aa98:	2101      	movs	r1, #1
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fb04 	bl	800b0a8 <USBH_SetAddress>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d132      	bne.n	800ab10 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800aaaa:	2002      	movs	r0, #2
 800aaac:	f004 fb44 	bl	800f138 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2203      	movs	r2, #3
 800aabc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	7919      	ldrb	r1, [r3, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aad2:	b292      	uxth	r2, r2
 800aad4:	9202      	str	r2, [sp, #8]
 800aad6:	2200      	movs	r2, #0
 800aad8:	9201      	str	r2, [sp, #4]
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	4603      	mov	r3, r0
 800aade:	2280      	movs	r2, #128	; 0x80
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f001 f86d 	bl	800bbc0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	7959      	ldrb	r1, [r3, #5]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aafa:	b292      	uxth	r2, r2
 800aafc:	9202      	str	r2, [sp, #8]
 800aafe:	2200      	movs	r2, #0
 800ab00:	9201      	str	r2, [sp, #4]
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	4603      	mov	r3, r0
 800ab06:	2200      	movs	r2, #0
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f001 f859 	bl	800bbc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab0e:	e12a      	b.n	800ad66 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
 800ab12:	2b03      	cmp	r3, #3
 800ab14:	f040 8127 	bne.w	800ad66 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	220d      	movs	r2, #13
 800ab1c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	705a      	strb	r2, [r3, #1]
      break;
 800ab24:	e11f      	b.n	800ad66 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ab26:	2109      	movs	r1, #9
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fa39 	bl	800afa0 <USBH_Get_CfgDesc>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab32:	7bbb      	ldrb	r3, [r7, #14]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d103      	bne.n	800ab40 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2204      	movs	r2, #4
 800ab3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab3e:	e114      	b.n	800ad6a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	f040 8111 	bne.w	800ad6a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab4e:	3301      	adds	r3, #1
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d903      	bls.n	800ab6a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	220d      	movs	r2, #13
 800ab66:	701a      	strb	r2, [r3, #0]
      break;
 800ab68:	e0ff      	b.n	800ad6a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	795b      	ldrb	r3, [r3, #5]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f001 f875 	bl	800bc60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	791b      	ldrb	r3, [r3, #4]
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f001 f86f 	bl	800bc60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	701a      	strb	r2, [r3, #0]
      break;
 800ab8e:	e0ec      	b.n	800ad6a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fa01 	bl	800afa0 <USBH_Get_CfgDesc>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d103      	bne.n	800abb0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2205      	movs	r2, #5
 800abac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800abae:	e0de      	b.n	800ad6e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abb0:	7bbb      	ldrb	r3, [r7, #14]
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	f040 80db 	bne.w	800ad6e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abbe:	3301      	adds	r3, #1
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d903      	bls.n	800abda <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	220d      	movs	r2, #13
 800abd6:	701a      	strb	r2, [r3, #0]
      break;
 800abd8:	e0c9      	b.n	800ad6e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	795b      	ldrb	r3, [r3, #5]
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f001 f83d 	bl	800bc60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	791b      	ldrb	r3, [r3, #4]
 800abea:	4619      	mov	r1, r3
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f001 f837 	bl	800bc60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	701a      	strb	r2, [r3, #0]
      break;
 800abfe:	e0b6      	b.n	800ad6e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d036      	beq.n	800ac78 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ac16:	23ff      	movs	r3, #255	; 0xff
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f9e5 	bl	800afe8 <USBH_Get_StringDesc>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d111      	bne.n	800ac4c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2206      	movs	r2, #6
 800ac2c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2205      	movs	r2, #5
 800ac32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ac42:	2300      	movs	r3, #0
 800ac44:	2200      	movs	r2, #0
 800ac46:	f001 f9fb 	bl	800c040 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ac4a:	e092      	b.n	800ad72 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	f040 808f 	bne.w	800ad72 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2206      	movs	r2, #6
 800ac58:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2205      	movs	r2, #5
 800ac5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ac6e:	2300      	movs	r3, #0
 800ac70:	2200      	movs	r2, #0
 800ac72:	f001 f9e5 	bl	800c040 <osMessageQueuePut>
      break;
 800ac76:	e07c      	b.n	800ad72 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2206      	movs	r2, #6
 800ac7c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2205      	movs	r2, #5
 800ac82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ac92:	2300      	movs	r3, #0
 800ac94:	2200      	movs	r2, #0
 800ac96:	f001 f9d3 	bl	800c040 <osMessageQueuePut>
      break;
 800ac9a:	e06a      	b.n	800ad72 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d027      	beq.n	800acf6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800acb2:	23ff      	movs	r3, #255	; 0xff
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f997 	bl	800afe8 <USBH_Get_StringDesc>
 800acba:	4603      	mov	r3, r0
 800acbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d103      	bne.n	800accc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2207      	movs	r2, #7
 800acc8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800acca:	e054      	b.n	800ad76 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800accc:	7bbb      	ldrb	r3, [r7, #14]
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d151      	bne.n	800ad76 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2207      	movs	r2, #7
 800acd6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2205      	movs	r2, #5
 800acdc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800acec:	2300      	movs	r3, #0
 800acee:	2200      	movs	r2, #0
 800acf0:	f001 f9a6 	bl	800c040 <osMessageQueuePut>
      break;
 800acf4:	e03f      	b.n	800ad76 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2207      	movs	r2, #7
 800acfa:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2205      	movs	r2, #5
 800ad00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ad10:	2300      	movs	r3, #0
 800ad12:	2200      	movs	r2, #0
 800ad14:	f001 f994 	bl	800c040 <osMessageQueuePut>
      break;
 800ad18:	e02d      	b.n	800ad76 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d017      	beq.n	800ad54 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad30:	23ff      	movs	r3, #255	; 0xff
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 f958 	bl	800afe8 <USBH_Get_StringDesc>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad3c:	7bbb      	ldrb	r3, [r7, #14]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d102      	bne.n	800ad48 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ad46:	e018      	b.n	800ad7a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	d115      	bne.n	800ad7a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73fb      	strb	r3, [r7, #15]
      break;
 800ad52:	e012      	b.n	800ad7a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	73fb      	strb	r3, [r7, #15]
      break;
 800ad58:	e00f      	b.n	800ad7a <USBH_HandleEnum+0x44a>

    default:
      break;
 800ad5a:	bf00      	nop
 800ad5c:	e00e      	b.n	800ad7c <USBH_HandleEnum+0x44c>
      break;
 800ad5e:	bf00      	nop
 800ad60:	e00c      	b.n	800ad7c <USBH_HandleEnum+0x44c>
      break;
 800ad62:	bf00      	nop
 800ad64:	e00a      	b.n	800ad7c <USBH_HandleEnum+0x44c>
      break;
 800ad66:	bf00      	nop
 800ad68:	e008      	b.n	800ad7c <USBH_HandleEnum+0x44c>
      break;
 800ad6a:	bf00      	nop
 800ad6c:	e006      	b.n	800ad7c <USBH_HandleEnum+0x44c>
      break;
 800ad6e:	bf00      	nop
 800ad70:	e004      	b.n	800ad7c <USBH_HandleEnum+0x44c>
      break;
 800ad72:	bf00      	nop
 800ad74:	e002      	b.n	800ad7c <USBH_HandleEnum+0x44c>
      break;
 800ad76:	bf00      	nop
 800ad78:	e000      	b.n	800ad7c <USBH_HandleEnum+0x44c>
      break;
 800ad7a:	bf00      	nop
  }
  return Status;
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop

0800ad88 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b082      	sub	sp, #8
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f804 	bl	800adca <USBH_HandleSof>
}
 800adc2:	bf00      	nop
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b0b      	cmp	r3, #11
 800adda:	d10a      	bne.n	800adf2 <USBH_HandleSof+0x28>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d005      	beq.n	800adf2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	4798      	blx	r3
  }
}
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b082      	sub	sp, #8
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae1e:	2300      	movs	r3, #0
 800ae20:	2200      	movs	r2, #0
 800ae22:	f001 f90d 	bl	800c040 <osMessageQueuePut>
#endif
#endif

  return;
 800ae26:	bf00      	nop
}
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b083      	sub	sp, #12
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ae3e:	bf00      	nop
}
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae7e:	2300      	movs	r3, #0
 800ae80:	2200      	movs	r2, #0
 800ae82:	f001 f8dd 	bl	800c040 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f003 fff8 	bl	800eea6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	791b      	ldrb	r3, [r3, #4]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fecf 	bl	800bc60 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	795b      	ldrb	r3, [r3, #5]
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fec9 	bl	800bc60 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aee2:	2300      	movs	r3, #0
 800aee4:	2200      	movs	r2, #0
 800aee6:	f001 f8ab 	bl	800c040 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800af08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af0c:	2200      	movs	r2, #0
 800af0e:	f001 f8f7 	bl	800c100 <osMessageQueueGet>
 800af12:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1f0      	bne.n	800aefc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff faa6 	bl	800a46c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800af20:	e7ec      	b.n	800aefc <USBH_Process_OS+0x8>

0800af22 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af3e:	2300      	movs	r3, #0
 800af40:	2200      	movs	r2, #0
 800af42:	f001 f87d 	bl	800c040 <osMessageQueuePut>
#endif

  return USBH_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af02      	add	r7, sp, #8
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	b29b      	uxth	r3, r3
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	4613      	mov	r3, r2
 800af6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af6e:	2100      	movs	r1, #0
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f864 	bl	800b03e <USBH_GetDescriptor>
 800af76:	4603      	mov	r3, r0
 800af78:	73fb      	strb	r3, [r7, #15]
 800af7a:	7bfb      	ldrb	r3, [r7, #15]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10a      	bne.n	800af96 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f203 3026 	addw	r0, r3, #806	; 0x326
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af8c:	78fa      	ldrb	r2, [r7, #3]
 800af8e:	b292      	uxth	r2, r2
 800af90:	4619      	mov	r1, r3
 800af92:	f000 f918 	bl	800b1c6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800af96:	7bfb      	ldrb	r3, [r7, #15]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af02      	add	r7, sp, #8
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	331c      	adds	r3, #28
 800afb0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800afb2:	887b      	ldrh	r3, [r7, #2]
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afbc:	2100      	movs	r1, #0
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f83d 	bl	800b03e <USBH_GetDescriptor>
 800afc4:	4603      	mov	r3, r0
 800afc6:	72fb      	strb	r3, [r7, #11]
 800afc8:	7afb      	ldrb	r3, [r7, #11]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d107      	bne.n	800afde <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800afd4:	887a      	ldrh	r2, [r7, #2]
 800afd6:	68f9      	ldr	r1, [r7, #12]
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 f964 	bl	800b2a6 <USBH_ParseCfgDesc>
  }

  return status;
 800afde:	7afb      	ldrb	r3, [r7, #11]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af02      	add	r7, sp, #8
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	607a      	str	r2, [r7, #4]
 800aff2:	461a      	mov	r2, r3
 800aff4:	460b      	mov	r3, r1
 800aff6:	72fb      	strb	r3, [r7, #11]
 800aff8:	4613      	mov	r3, r2
 800affa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800affc:	7afb      	ldrb	r3, [r7, #11]
 800affe:	b29b      	uxth	r3, r3
 800b000:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b004:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b00c:	893b      	ldrh	r3, [r7, #8]
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	460b      	mov	r3, r1
 800b012:	2100      	movs	r1, #0
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f000 f812 	bl	800b03e <USBH_GetDescriptor>
 800b01a:	4603      	mov	r3, r0
 800b01c:	75fb      	strb	r3, [r7, #23]
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d107      	bne.n	800b034 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b02a:	893a      	ldrh	r2, [r7, #8]
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fa37 	bl	800b4a2 <USBH_ParseStringDesc>
  }

  return status;
 800b034:	7dfb      	ldrb	r3, [r7, #23]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b084      	sub	sp, #16
 800b042:	af00      	add	r7, sp, #0
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	607b      	str	r3, [r7, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	72fb      	strb	r3, [r7, #11]
 800b04c:	4613      	mov	r3, r2
 800b04e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	789b      	ldrb	r3, [r3, #2]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d11c      	bne.n	800b092 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b058:	7afb      	ldrb	r3, [r7, #11]
 800b05a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2206      	movs	r2, #6
 800b068:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	893a      	ldrh	r2, [r7, #8]
 800b06e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b070:	893b      	ldrh	r3, [r7, #8]
 800b072:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b07a:	d104      	bne.n	800b086 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f240 4209 	movw	r2, #1033	; 0x409
 800b082:	829a      	strh	r2, [r3, #20]
 800b084:	e002      	b.n	800b08c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	8b3a      	ldrh	r2, [r7, #24]
 800b090:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b092:	8b3b      	ldrh	r3, [r7, #24]
 800b094:	461a      	mov	r2, r3
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 fa50 	bl	800b53e <USBH_CtlReq>
 800b09e:	4603      	mov	r3, r0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	789b      	ldrb	r3, [r3, #2]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d10f      	bne.n	800b0dc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2205      	movs	r2, #5
 800b0c6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b0c8:	78fb      	ldrb	r3, [r7, #3]
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2100      	movs	r1, #0
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fa2c 	bl	800b53e <USBH_CtlReq>
 800b0e6:	4603      	mov	r3, r0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	789b      	ldrb	r3, [r3, #2]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d10e      	bne.n	800b122 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2209      	movs	r2, #9
 800b10e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	887a      	ldrh	r2, [r7, #2]
 800b114:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b122:	2200      	movs	r2, #0
 800b124:	2100      	movs	r1, #0
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fa09 	bl	800b53e <USBH_CtlReq>
 800b12c:	4603      	mov	r3, r0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b082      	sub	sp, #8
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	460b      	mov	r3, r1
 800b140:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	789b      	ldrb	r3, [r3, #2]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d10f      	bne.n	800b16a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2203      	movs	r2, #3
 800b154:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b156:	78fb      	ldrb	r3, [r7, #3]
 800b158:	b29a      	uxth	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b16a:	2200      	movs	r2, #0
 800b16c:	2100      	movs	r1, #0
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f9e5 	bl	800b53e <USBH_CtlReq>
 800b174:	4603      	mov	r3, r0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b082      	sub	sp, #8
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	460b      	mov	r3, r1
 800b188:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	789b      	ldrb	r3, [r3, #2]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d10f      	bne.n	800b1b2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2202      	movs	r2, #2
 800b196:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f9c1 	bl	800b53e <USBH_CtlReq>
 800b1bc:	4603      	mov	r3, r0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b085      	sub	sp, #20
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	781a      	ldrb	r2, [r3, #0]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	785a      	ldrb	r2, [r3, #1]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	3302      	adds	r3, #2
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	3303      	adds	r3, #3
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	021b      	lsls	r3, r3, #8
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	791a      	ldrb	r2, [r3, #4]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	795a      	ldrb	r2, [r3, #5]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	799a      	ldrb	r2, [r3, #6]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	79da      	ldrb	r2, [r3, #7]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b220:	88fb      	ldrh	r3, [r7, #6]
 800b222:	2b08      	cmp	r3, #8
 800b224:	d939      	bls.n	800b29a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	3308      	adds	r3, #8
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	3309      	adds	r3, #9
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	b29b      	uxth	r3, r3
 800b236:	021b      	lsls	r3, r3, #8
 800b238:	b29b      	uxth	r3, r3
 800b23a:	4313      	orrs	r3, r2
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	330a      	adds	r3, #10
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	b29a      	uxth	r2, r3
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	330b      	adds	r3, #11
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	b29b      	uxth	r3, r3
 800b252:	021b      	lsls	r3, r3, #8
 800b254:	b29b      	uxth	r3, r3
 800b256:	4313      	orrs	r3, r2
 800b258:	b29a      	uxth	r2, r3
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	330c      	adds	r3, #12
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	b29a      	uxth	r2, r3
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	330d      	adds	r3, #13
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	021b      	lsls	r3, r3, #8
 800b270:	b29b      	uxth	r3, r3
 800b272:	4313      	orrs	r3, r2
 800b274:	b29a      	uxth	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	7b9a      	ldrb	r2, [r3, #14]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	7bda      	ldrb	r2, [r3, #15]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	7c1a      	ldrb	r2, [r3, #16]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	7c5a      	ldrb	r2, [r3, #17]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	745a      	strb	r2, [r3, #17]
  }
}
 800b29a:	bf00      	nop
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b08a      	sub	sp, #40	; 0x28
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	60f8      	str	r0, [r7, #12]
 800b2ae:	60b9      	str	r1, [r7, #8]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	781a      	ldrb	r2, [r3, #0]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	785a      	ldrb	r2, [r3, #1]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	3302      	adds	r3, #2
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	3303      	adds	r3, #3
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	021b      	lsls	r3, r3, #8
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	791a      	ldrb	r2, [r3, #4]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	795a      	ldrb	r2, [r3, #5]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	799a      	ldrb	r2, [r3, #6]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	79da      	ldrb	r2, [r3, #7]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	7a1a      	ldrb	r2, [r3, #8]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b31c:	88fb      	ldrh	r3, [r7, #6]
 800b31e:	2b09      	cmp	r3, #9
 800b320:	d95f      	bls.n	800b3e2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b322:	2309      	movs	r3, #9
 800b324:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b326:	2300      	movs	r3, #0
 800b328:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b32a:	e051      	b.n	800b3d0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b32c:	f107 0316 	add.w	r3, r7, #22
 800b330:	4619      	mov	r1, r3
 800b332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b334:	f000 f8e8 	bl	800b508 <USBH_GetNextDesc>
 800b338:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	785b      	ldrb	r3, [r3, #1]
 800b33e:	2b04      	cmp	r3, #4
 800b340:	d146      	bne.n	800b3d0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b346:	221a      	movs	r2, #26
 800b348:	fb02 f303 	mul.w	r3, r2, r3
 800b34c:	3308      	adds	r3, #8
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	4413      	add	r3, r2
 800b352:	3302      	adds	r3, #2
 800b354:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b358:	69f8      	ldr	r0, [r7, #28]
 800b35a:	f000 f846 	bl	800b3ea <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b35e:	2300      	movs	r3, #0
 800b360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b364:	2300      	movs	r3, #0
 800b366:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b368:	e022      	b.n	800b3b0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b36a:	f107 0316 	add.w	r3, r7, #22
 800b36e:	4619      	mov	r1, r3
 800b370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b372:	f000 f8c9 	bl	800b508 <USBH_GetNextDesc>
 800b376:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	785b      	ldrb	r3, [r3, #1]
 800b37c:	2b05      	cmp	r3, #5
 800b37e:	d117      	bne.n	800b3b0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b380:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b384:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b388:	3201      	adds	r2, #1
 800b38a:	00d2      	lsls	r2, r2, #3
 800b38c:	211a      	movs	r1, #26
 800b38e:	fb01 f303 	mul.w	r3, r1, r3
 800b392:	4413      	add	r3, r2
 800b394:	3308      	adds	r3, #8
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	4413      	add	r3, r2
 800b39a:	3304      	adds	r3, #4
 800b39c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b39e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3a0:	69b8      	ldr	r0, [r7, #24]
 800b3a2:	f000 f851 	bl	800b448 <USBH_ParseEPDesc>
            ep_ix++;
 800b3a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	791b      	ldrb	r3, [r3, #4]
 800b3b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d204      	bcs.n	800b3c6 <USBH_ParseCfgDesc+0x120>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	885a      	ldrh	r2, [r3, #2]
 800b3c0:	8afb      	ldrh	r3, [r7, #22]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d8d1      	bhi.n	800b36a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b3c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b3d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d804      	bhi.n	800b3e2 <USBH_ParseCfgDesc+0x13c>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	885a      	ldrh	r2, [r3, #2]
 800b3dc:	8afb      	ldrh	r3, [r7, #22]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d8a4      	bhi.n	800b32c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b3e2:	bf00      	nop
 800b3e4:	3728      	adds	r7, #40	; 0x28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	781a      	ldrb	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	785a      	ldrb	r2, [r3, #1]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	789a      	ldrb	r2, [r3, #2]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	78da      	ldrb	r2, [r3, #3]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	791a      	ldrb	r2, [r3, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	795a      	ldrb	r2, [r3, #5]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	799a      	ldrb	r2, [r3, #6]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	79da      	ldrb	r2, [r3, #7]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	7a1a      	ldrb	r2, [r3, #8]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	721a      	strb	r2, [r3, #8]
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781a      	ldrb	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	785a      	ldrb	r2, [r3, #1]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	789a      	ldrb	r2, [r3, #2]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	78da      	ldrb	r2, [r3, #3]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	3304      	adds	r3, #4
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	b29a      	uxth	r2, r3
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	3305      	adds	r3, #5
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	b29b      	uxth	r3, r3
 800b482:	021b      	lsls	r3, r3, #8
 800b484:	b29b      	uxth	r3, r3
 800b486:	4313      	orrs	r3, r2
 800b488:	b29a      	uxth	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	799a      	ldrb	r2, [r3, #6]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	719a      	strb	r2, [r3, #6]
}
 800b496:	bf00      	nop
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b087      	sub	sp, #28
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d120      	bne.n	800b4fc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	1e9a      	subs	r2, r3, #2
 800b4c0:	88fb      	ldrh	r3, [r7, #6]
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	bf28      	it	cs
 800b4c6:	4613      	movcs	r3, r2
 800b4c8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3302      	adds	r3, #2
 800b4ce:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	82fb      	strh	r3, [r7, #22]
 800b4d4:	e00b      	b.n	800b4ee <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b4d6:	8afb      	ldrh	r3, [r7, #22]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4413      	add	r3, r2
 800b4dc:	781a      	ldrb	r2, [r3, #0]
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b4e8:	8afb      	ldrh	r3, [r7, #22]
 800b4ea:	3302      	adds	r3, #2
 800b4ec:	82fb      	strh	r3, [r7, #22]
 800b4ee:	8afa      	ldrh	r2, [r7, #22]
 800b4f0:	8abb      	ldrh	r3, [r7, #20]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d3ef      	bcc.n	800b4d6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	701a      	strb	r2, [r3, #0]
  }
}
 800b4fc:	bf00      	nop
 800b4fe:	371c      	adds	r7, #28
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	881a      	ldrh	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	4413      	add	r3, r2
 800b51e:	b29a      	uxth	r2, r3
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4413      	add	r3, r2
 800b52e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b530:	68fb      	ldr	r3, [r7, #12]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr

0800b53e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b086      	sub	sp, #24
 800b542:	af00      	add	r7, sp, #0
 800b544:	60f8      	str	r0, [r7, #12]
 800b546:	60b9      	str	r1, [r7, #8]
 800b548:	4613      	mov	r3, r2
 800b54a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b54c:	2301      	movs	r3, #1
 800b54e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	789b      	ldrb	r3, [r3, #2]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d002      	beq.n	800b55e <USBH_CtlReq+0x20>
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d01d      	beq.n	800b598 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b55c:	e043      	b.n	800b5e6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	88fa      	ldrh	r2, [r7, #6]
 800b568:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2201      	movs	r2, #1
 800b56e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2202      	movs	r2, #2
 800b574:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b576:	2301      	movs	r3, #1
 800b578:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2203      	movs	r2, #3
 800b57e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b58e:	2300      	movs	r3, #0
 800b590:	2200      	movs	r2, #0
 800b592:	f000 fd55 	bl	800c040 <osMessageQueuePut>
      break;
 800b596:	e026      	b.n	800b5e6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 f829 	bl	800b5f0 <USBH_HandleControl>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b5a2:	7dfb      	ldrb	r3, [r7, #23]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d002      	beq.n	800b5ae <USBH_CtlReq+0x70>
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d106      	bne.n	800b5bc <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	761a      	strb	r2, [r3, #24]
 800b5ba:	e005      	b.n	800b5c8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b5bc:	7dfb      	ldrb	r3, [r7, #23]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d102      	bne.n	800b5c8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2203      	movs	r2, #3
 800b5cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b5dc:	2300      	movs	r3, #0
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f000 fd2e 	bl	800c040 <osMessageQueuePut>
      break;
 800b5e4:	bf00      	nop
  }
  return status;
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b086      	sub	sp, #24
 800b5f4:	af02      	add	r7, sp, #8
 800b5f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	7e1b      	ldrb	r3, [r3, #24]
 800b604:	3b01      	subs	r3, #1
 800b606:	2b0a      	cmp	r3, #10
 800b608:	f200 8229 	bhi.w	800ba5e <USBH_HandleControl+0x46e>
 800b60c:	a201      	add	r2, pc, #4	; (adr r2, 800b614 <USBH_HandleControl+0x24>)
 800b60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b612:	bf00      	nop
 800b614:	0800b641 	.word	0x0800b641
 800b618:	0800b65b 	.word	0x0800b65b
 800b61c:	0800b6fd 	.word	0x0800b6fd
 800b620:	0800b723 	.word	0x0800b723
 800b624:	0800b7af 	.word	0x0800b7af
 800b628:	0800b7d9 	.word	0x0800b7d9
 800b62c:	0800b89b 	.word	0x0800b89b
 800b630:	0800b8bd 	.word	0x0800b8bd
 800b634:	0800b94f 	.word	0x0800b94f
 800b638:	0800b975 	.word	0x0800b975
 800b63c:	0800ba07 	.word	0x0800ba07
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f103 0110 	add.w	r1, r3, #16
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	795b      	ldrb	r3, [r3, #5]
 800b64a:	461a      	mov	r2, r3
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fa17 	bl	800ba80 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2202      	movs	r2, #2
 800b656:	761a      	strb	r2, [r3, #24]
      break;
 800b658:	e20c      	b.n	800ba74 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	795b      	ldrb	r3, [r3, #5]
 800b65e:	4619      	mov	r1, r3
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f003 fd0f 	bl	800f084 <USBH_LL_GetURBState>
 800b666:	4603      	mov	r3, r0
 800b668:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d12c      	bne.n	800b6ca <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	7c1b      	ldrb	r3, [r3, #16]
 800b674:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b678:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	8adb      	ldrh	r3, [r3, #22]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00a      	beq.n	800b698 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b682:	7b7b      	ldrb	r3, [r7, #13]
 800b684:	2b80      	cmp	r3, #128	; 0x80
 800b686:	d103      	bne.n	800b690 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2203      	movs	r2, #3
 800b68c:	761a      	strb	r2, [r3, #24]
 800b68e:	e00d      	b.n	800b6ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2205      	movs	r2, #5
 800b694:	761a      	strb	r2, [r3, #24]
 800b696:	e009      	b.n	800b6ac <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b698:	7b7b      	ldrb	r3, [r7, #13]
 800b69a:	2b80      	cmp	r3, #128	; 0x80
 800b69c:	d103      	bne.n	800b6a6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2209      	movs	r2, #9
 800b6a2:	761a      	strb	r2, [r3, #24]
 800b6a4:	e002      	b.n	800b6ac <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2207      	movs	r2, #7
 800b6aa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2203      	movs	r2, #3
 800b6b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f000 fcbc 	bl	800c040 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b6c8:	e1cb      	b.n	800ba62 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b6ca:	7bbb      	ldrb	r3, [r7, #14]
 800b6cc:	2b04      	cmp	r3, #4
 800b6ce:	d003      	beq.n	800b6d8 <USBH_HandleControl+0xe8>
 800b6d0:	7bbb      	ldrb	r3, [r7, #14]
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	f040 81c5 	bne.w	800ba62 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	220b      	movs	r2, #11
 800b6dc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2203      	movs	r2, #3
 800b6e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f000 fca3 	bl	800c040 <osMessageQueuePut>
      break;
 800b6fa:	e1b2      	b.n	800ba62 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b702:	b29a      	uxth	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6899      	ldr	r1, [r3, #8]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	899a      	ldrh	r2, [r3, #12]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	791b      	ldrb	r3, [r3, #4]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f9f2 	bl	800bafe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2204      	movs	r2, #4
 800b71e:	761a      	strb	r2, [r3, #24]
      break;
 800b720:	e1a8      	b.n	800ba74 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	791b      	ldrb	r3, [r3, #4]
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f003 fcab 	bl	800f084 <USBH_LL_GetURBState>
 800b72e:	4603      	mov	r3, r0
 800b730:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b732:	7bbb      	ldrb	r3, [r7, #14]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d110      	bne.n	800b75a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2209      	movs	r2, #9
 800b73c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2203      	movs	r2, #3
 800b742:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b752:	2300      	movs	r3, #0
 800b754:	2200      	movs	r2, #0
 800b756:	f000 fc73 	bl	800c040 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b75a:	7bbb      	ldrb	r3, [r7, #14]
 800b75c:	2b05      	cmp	r3, #5
 800b75e:	d110      	bne.n	800b782 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b760:	2303      	movs	r3, #3
 800b762:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2203      	movs	r2, #3
 800b768:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b778:	2300      	movs	r3, #0
 800b77a:	2200      	movs	r2, #0
 800b77c:	f000 fc60 	bl	800c040 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b780:	e171      	b.n	800ba66 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b782:	7bbb      	ldrb	r3, [r7, #14]
 800b784:	2b04      	cmp	r3, #4
 800b786:	f040 816e 	bne.w	800ba66 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	220b      	movs	r2, #11
 800b78e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2203      	movs	r2, #3
 800b794:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f000 fc4a 	bl	800c040 <osMessageQueuePut>
      break;
 800b7ac:	e15b      	b.n	800ba66 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6899      	ldr	r1, [r3, #8]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	899a      	ldrh	r2, [r3, #12]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	795b      	ldrb	r3, [r3, #5]
 800b7ba:	2001      	movs	r0, #1
 800b7bc:	9000      	str	r0, [sp, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f978 	bl	800bab4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2206      	movs	r2, #6
 800b7d4:	761a      	strb	r2, [r3, #24]
      break;
 800b7d6:	e14d      	b.n	800ba74 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	795b      	ldrb	r3, [r3, #5]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f003 fc50 	bl	800f084 <USBH_LL_GetURBState>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b7e8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d111      	bne.n	800b812 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2207      	movs	r2, #7
 800b7f2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2203      	movs	r2, #3
 800b7f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b808:	2300      	movs	r3, #0
 800b80a:	2200      	movs	r2, #0
 800b80c:	f000 fc18 	bl	800c040 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b810:	e12b      	b.n	800ba6a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b812:	7bbb      	ldrb	r3, [r7, #14]
 800b814:	2b05      	cmp	r3, #5
 800b816:	d113      	bne.n	800b840 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	220c      	movs	r2, #12
 800b81c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b81e:	2303      	movs	r3, #3
 800b820:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2203      	movs	r2, #3
 800b826:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b836:	2300      	movs	r3, #0
 800b838:	2200      	movs	r2, #0
 800b83a:	f000 fc01 	bl	800c040 <osMessageQueuePut>
      break;
 800b83e:	e114      	b.n	800ba6a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	2b02      	cmp	r3, #2
 800b844:	d111      	bne.n	800b86a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2205      	movs	r2, #5
 800b84a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2203      	movs	r2, #3
 800b850:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b860:	2300      	movs	r3, #0
 800b862:	2200      	movs	r2, #0
 800b864:	f000 fbec 	bl	800c040 <osMessageQueuePut>
      break;
 800b868:	e0ff      	b.n	800ba6a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b86a:	7bbb      	ldrb	r3, [r7, #14]
 800b86c:	2b04      	cmp	r3, #4
 800b86e:	f040 80fc 	bne.w	800ba6a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	220b      	movs	r2, #11
 800b876:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b878:	2302      	movs	r3, #2
 800b87a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2203      	movs	r2, #3
 800b880:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b890:	2300      	movs	r3, #0
 800b892:	2200      	movs	r2, #0
 800b894:	f000 fbd4 	bl	800c040 <osMessageQueuePut>
      break;
 800b898:	e0e7      	b.n	800ba6a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	791b      	ldrb	r3, [r3, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f92b 	bl	800bafe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2208      	movs	r2, #8
 800b8b8:	761a      	strb	r2, [r3, #24]

      break;
 800b8ba:	e0db      	b.n	800ba74 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	791b      	ldrb	r3, [r3, #4]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f003 fbde 	bl	800f084 <USBH_LL_GetURBState>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b8cc:	7bbb      	ldrb	r3, [r7, #14]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d113      	bne.n	800b8fa <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	220d      	movs	r2, #13
 800b8d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2203      	movs	r2, #3
 800b8e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f000 fba4 	bl	800c040 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8f8:	e0b9      	b.n	800ba6e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b8fa:	7bbb      	ldrb	r3, [r7, #14]
 800b8fc:	2b04      	cmp	r3, #4
 800b8fe:	d111      	bne.n	800b924 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	220b      	movs	r2, #11
 800b904:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2203      	movs	r2, #3
 800b90a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b91a:	2300      	movs	r3, #0
 800b91c:	2200      	movs	r2, #0
 800b91e:	f000 fb8f 	bl	800c040 <osMessageQueuePut>
      break;
 800b922:	e0a4      	b.n	800ba6e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b924:	7bbb      	ldrb	r3, [r7, #14]
 800b926:	2b05      	cmp	r3, #5
 800b928:	f040 80a1 	bne.w	800ba6e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b92c:	2303      	movs	r3, #3
 800b92e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2203      	movs	r2, #3
 800b934:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b944:	2300      	movs	r3, #0
 800b946:	2200      	movs	r2, #0
 800b948:	f000 fb7a 	bl	800c040 <osMessageQueuePut>
      break;
 800b94c:	e08f      	b.n	800ba6e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	795b      	ldrb	r3, [r3, #5]
 800b952:	2201      	movs	r2, #1
 800b954:	9200      	str	r2, [sp, #0]
 800b956:	2200      	movs	r2, #0
 800b958:	2100      	movs	r1, #0
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f8aa 	bl	800bab4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b966:	b29a      	uxth	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	220a      	movs	r2, #10
 800b970:	761a      	strb	r2, [r3, #24]
      break;
 800b972:	e07f      	b.n	800ba74 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	795b      	ldrb	r3, [r3, #5]
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f003 fb82 	bl	800f084 <USBH_LL_GetURBState>
 800b980:	4603      	mov	r3, r0
 800b982:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b984:	7bbb      	ldrb	r3, [r7, #14]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d113      	bne.n	800b9b2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	220d      	movs	r2, #13
 800b992:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2203      	movs	r2, #3
 800b998:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f000 fb48 	bl	800c040 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9b0:	e05f      	b.n	800ba72 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b9b2:	7bbb      	ldrb	r3, [r7, #14]
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d111      	bne.n	800b9dc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2209      	movs	r2, #9
 800b9bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2203      	movs	r2, #3
 800b9c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f000 fb33 	bl	800c040 <osMessageQueuePut>
      break;
 800b9da:	e04a      	b.n	800ba72 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	2b04      	cmp	r3, #4
 800b9e0:	d147      	bne.n	800ba72 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	220b      	movs	r2, #11
 800b9e6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2203      	movs	r2, #3
 800b9ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f000 fb1e 	bl	800c040 <osMessageQueuePut>
      break;
 800ba04:	e035      	b.n	800ba72 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	7e5b      	ldrb	r3, [r3, #25]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	765a      	strb	r2, [r3, #25]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	7e5b      	ldrb	r3, [r3, #25]
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d806      	bhi.n	800ba28 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ba26:	e025      	b.n	800ba74 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba2e:	2106      	movs	r1, #6
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	795b      	ldrb	r3, [r3, #5]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f90d 	bl	800bc60 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	791b      	ldrb	r3, [r3, #4]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f907 	bl	800bc60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ba58:	2302      	movs	r3, #2
 800ba5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba5c:	e00a      	b.n	800ba74 <USBH_HandleControl+0x484>

    default:
      break;
 800ba5e:	bf00      	nop
 800ba60:	e008      	b.n	800ba74 <USBH_HandleControl+0x484>
      break;
 800ba62:	bf00      	nop
 800ba64:	e006      	b.n	800ba74 <USBH_HandleControl+0x484>
      break;
 800ba66:	bf00      	nop
 800ba68:	e004      	b.n	800ba74 <USBH_HandleControl+0x484>
      break;
 800ba6a:	bf00      	nop
 800ba6c:	e002      	b.n	800ba74 <USBH_HandleControl+0x484>
      break;
 800ba6e:	bf00      	nop
 800ba70:	e000      	b.n	800ba74 <USBH_HandleControl+0x484>
      break;
 800ba72:	bf00      	nop
  }

  return status;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop

0800ba80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b088      	sub	sp, #32
 800ba84:	af04      	add	r7, sp, #16
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ba8e:	79f9      	ldrb	r1, [r7, #7]
 800ba90:	2300      	movs	r3, #0
 800ba92:	9303      	str	r3, [sp, #12]
 800ba94:	2308      	movs	r3, #8
 800ba96:	9302      	str	r3, [sp, #8]
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	9301      	str	r3, [sp, #4]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	2300      	movs	r3, #0
 800baa2:	2200      	movs	r2, #0
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f003 fabc 	bl	800f022 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b088      	sub	sp, #32
 800bab8:	af04      	add	r7, sp, #16
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	4611      	mov	r1, r2
 800bac0:	461a      	mov	r2, r3
 800bac2:	460b      	mov	r3, r1
 800bac4:	80fb      	strh	r3, [r7, #6]
 800bac6:	4613      	mov	r3, r2
 800bac8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bad8:	7979      	ldrb	r1, [r7, #5]
 800bada:	7e3b      	ldrb	r3, [r7, #24]
 800badc:	9303      	str	r3, [sp, #12]
 800bade:	88fb      	ldrh	r3, [r7, #6]
 800bae0:	9302      	str	r3, [sp, #8]
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	2301      	movs	r3, #1
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	2300      	movs	r3, #0
 800baec:	2200      	movs	r2, #0
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f003 fa97 	bl	800f022 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b088      	sub	sp, #32
 800bb02:	af04      	add	r7, sp, #16
 800bb04:	60f8      	str	r0, [r7, #12]
 800bb06:	60b9      	str	r1, [r7, #8]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	80fb      	strh	r3, [r7, #6]
 800bb10:	4613      	mov	r3, r2
 800bb12:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb14:	7979      	ldrb	r1, [r7, #5]
 800bb16:	2300      	movs	r3, #0
 800bb18:	9303      	str	r3, [sp, #12]
 800bb1a:	88fb      	ldrh	r3, [r7, #6]
 800bb1c:	9302      	str	r3, [sp, #8]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	9301      	str	r3, [sp, #4]
 800bb22:	2301      	movs	r3, #1
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	2300      	movs	r3, #0
 800bb28:	2201      	movs	r2, #1
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f003 fa79 	bl	800f022 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bb30:	2300      	movs	r3, #0

}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b088      	sub	sp, #32
 800bb3e:	af04      	add	r7, sp, #16
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	4611      	mov	r1, r2
 800bb46:	461a      	mov	r2, r3
 800bb48:	460b      	mov	r3, r1
 800bb4a:	80fb      	strh	r3, [r7, #6]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb5e:	7979      	ldrb	r1, [r7, #5]
 800bb60:	7e3b      	ldrb	r3, [r7, #24]
 800bb62:	9303      	str	r3, [sp, #12]
 800bb64:	88fb      	ldrh	r3, [r7, #6]
 800bb66:	9302      	str	r3, [sp, #8]
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	9301      	str	r3, [sp, #4]
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	2302      	movs	r3, #2
 800bb72:	2200      	movs	r2, #0
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f003 fa54 	bl	800f022 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af04      	add	r7, sp, #16
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	4611      	mov	r1, r2
 800bb90:	461a      	mov	r2, r3
 800bb92:	460b      	mov	r3, r1
 800bb94:	80fb      	strh	r3, [r7, #6]
 800bb96:	4613      	mov	r3, r2
 800bb98:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb9a:	7979      	ldrb	r1, [r7, #5]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9303      	str	r3, [sp, #12]
 800bba0:	88fb      	ldrh	r3, [r7, #6]
 800bba2:	9302      	str	r3, [sp, #8]
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	2301      	movs	r3, #1
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	2302      	movs	r3, #2
 800bbae:	2201      	movs	r2, #1
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f003 fa36 	bl	800f022 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af04      	add	r7, sp, #16
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	4608      	mov	r0, r1
 800bbca:	4611      	mov	r1, r2
 800bbcc:	461a      	mov	r2, r3
 800bbce:	4603      	mov	r3, r0
 800bbd0:	70fb      	strb	r3, [r7, #3]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70bb      	strb	r3, [r7, #2]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bbda:	7878      	ldrb	r0, [r7, #1]
 800bbdc:	78ba      	ldrb	r2, [r7, #2]
 800bbde:	78f9      	ldrb	r1, [r7, #3]
 800bbe0:	8b3b      	ldrh	r3, [r7, #24]
 800bbe2:	9302      	str	r3, [sp, #8]
 800bbe4:	7d3b      	ldrb	r3, [r7, #20]
 800bbe6:	9301      	str	r3, [sp, #4]
 800bbe8:	7c3b      	ldrb	r3, [r7, #16]
 800bbea:	9300      	str	r3, [sp, #0]
 800bbec:	4603      	mov	r3, r0
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f003 f9c9 	bl	800ef86 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b082      	sub	sp, #8
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bc0a:	78fb      	ldrb	r3, [r7, #3]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f003 f9e8 	bl	800efe4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b084      	sub	sp, #16
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	460b      	mov	r3, r1
 800bc28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f836 	bl	800bc9c <USBH_GetFreePipe>
 800bc30:	4603      	mov	r3, r0
 800bc32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bc34:	89fb      	ldrh	r3, [r7, #14]
 800bc36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d00a      	beq.n	800bc54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bc3e:	78fa      	ldrb	r2, [r7, #3]
 800bc40:	89fb      	ldrh	r3, [r7, #14]
 800bc42:	f003 030f 	and.w	r3, r3, #15
 800bc46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	33e0      	adds	r3, #224	; 0xe0
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	440b      	add	r3, r1
 800bc52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bc54:	89fb      	ldrh	r3, [r7, #14]
 800bc56:	b2db      	uxtb	r3, r3
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bc6c:	78fb      	ldrb	r3, [r7, #3]
 800bc6e:	2b0a      	cmp	r3, #10
 800bc70:	d80d      	bhi.n	800bc8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bc72:	78fb      	ldrb	r3, [r7, #3]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	33e0      	adds	r3, #224	; 0xe0
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	78fb      	ldrb	r3, [r7, #3]
 800bc80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bc84:	6879      	ldr	r1, [r7, #4]
 800bc86:	33e0      	adds	r3, #224	; 0xe0
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	440b      	add	r3, r1
 800bc8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bca4:	2300      	movs	r3, #0
 800bca6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bca8:	2300      	movs	r3, #0
 800bcaa:	73fb      	strb	r3, [r7, #15]
 800bcac:	e00f      	b.n	800bcce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	33e0      	adds	r3, #224	; 0xe0
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d102      	bne.n	800bcc8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	e007      	b.n	800bcd8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bcc8:	7bfb      	ldrb	r3, [r7, #15]
 800bcca:	3301      	adds	r3, #1
 800bccc:	73fb      	strb	r3, [r7, #15]
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
 800bcd0:	2b0a      	cmp	r3, #10
 800bcd2:	d9ec      	bls.n	800bcae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bcd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <__NVIC_SetPriority>:
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	db0a      	blt.n	800bd0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	490c      	ldr	r1, [pc, #48]	; (800bd30 <__NVIC_SetPriority+0x4c>)
 800bcfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd02:	0112      	lsls	r2, r2, #4
 800bd04:	b2d2      	uxtb	r2, r2
 800bd06:	440b      	add	r3, r1
 800bd08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bd0c:	e00a      	b.n	800bd24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	4908      	ldr	r1, [pc, #32]	; (800bd34 <__NVIC_SetPriority+0x50>)
 800bd14:	79fb      	ldrb	r3, [r7, #7]
 800bd16:	f003 030f 	and.w	r3, r3, #15
 800bd1a:	3b04      	subs	r3, #4
 800bd1c:	0112      	lsls	r2, r2, #4
 800bd1e:	b2d2      	uxtb	r2, r2
 800bd20:	440b      	add	r3, r1
 800bd22:	761a      	strb	r2, [r3, #24]
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	e000e100 	.word	0xe000e100
 800bd34:	e000ed00 	.word	0xe000ed00

0800bd38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bd3c:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <SysTick_Handler+0x1c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bd40:	f001 fee8 	bl	800db14 <xTaskGetSchedulerState>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d001      	beq.n	800bd4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bd4a:	f002 fccd 	bl	800e6e8 <xPortSysTickHandler>
  }
}
 800bd4e:	bf00      	nop
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	e000e010 	.word	0xe000e010

0800bd58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	f06f 0004 	mvn.w	r0, #4
 800bd62:	f7ff ffbf 	bl	800bce4 <__NVIC_SetPriority>
#endif
}
 800bd66:	bf00      	nop
 800bd68:	bd80      	pop	{r7, pc}
	...

0800bd6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd72:	f3ef 8305 	mrs	r3, IPSR
 800bd76:	603b      	str	r3, [r7, #0]
  return(result);
 800bd78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d003      	beq.n	800bd86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd7e:	f06f 0305 	mvn.w	r3, #5
 800bd82:	607b      	str	r3, [r7, #4]
 800bd84:	e00c      	b.n	800bda0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bd86:	4b0a      	ldr	r3, [pc, #40]	; (800bdb0 <osKernelInitialize+0x44>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d105      	bne.n	800bd9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bd8e:	4b08      	ldr	r3, [pc, #32]	; (800bdb0 <osKernelInitialize+0x44>)
 800bd90:	2201      	movs	r2, #1
 800bd92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	607b      	str	r3, [r7, #4]
 800bd98:	e002      	b.n	800bda0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bd9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bda0:	687b      	ldr	r3, [r7, #4]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	370c      	adds	r7, #12
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	200004c0 	.word	0x200004c0

0800bdb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdba:	f3ef 8305 	mrs	r3, IPSR
 800bdbe:	603b      	str	r3, [r7, #0]
  return(result);
 800bdc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d003      	beq.n	800bdce <osKernelStart+0x1a>
    stat = osErrorISR;
 800bdc6:	f06f 0305 	mvn.w	r3, #5
 800bdca:	607b      	str	r3, [r7, #4]
 800bdcc:	e010      	b.n	800bdf0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bdce:	4b0b      	ldr	r3, [pc, #44]	; (800bdfc <osKernelStart+0x48>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d109      	bne.n	800bdea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bdd6:	f7ff ffbf 	bl	800bd58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bdda:	4b08      	ldr	r3, [pc, #32]	; (800bdfc <osKernelStart+0x48>)
 800bddc:	2202      	movs	r2, #2
 800bdde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bde0:	f001 fa50 	bl	800d284 <vTaskStartScheduler>
      stat = osOK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	607b      	str	r3, [r7, #4]
 800bde8:	e002      	b.n	800bdf0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bdea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bdf0:	687b      	ldr	r3, [r7, #4]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	200004c0 	.word	0x200004c0

0800be00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800be00:	b580      	push	{r7, lr}
 800be02:	b08e      	sub	sp, #56	; 0x38
 800be04:	af04      	add	r7, sp, #16
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800be0c:	2300      	movs	r3, #0
 800be0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be10:	f3ef 8305 	mrs	r3, IPSR
 800be14:	617b      	str	r3, [r7, #20]
  return(result);
 800be16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d17e      	bne.n	800bf1a <osThreadNew+0x11a>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d07b      	beq.n	800bf1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800be22:	2380      	movs	r3, #128	; 0x80
 800be24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800be26:	2318      	movs	r3, #24
 800be28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800be2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d045      	beq.n	800bec6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d002      	beq.n	800be48 <osThreadNew+0x48>
        name = attr->name;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d008      	beq.n	800be6e <osThreadNew+0x6e>
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	2b38      	cmp	r3, #56	; 0x38
 800be60:	d805      	bhi.n	800be6e <osThreadNew+0x6e>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	f003 0301 	and.w	r3, r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d001      	beq.n	800be72 <osThreadNew+0x72>
        return (NULL);
 800be6e:	2300      	movs	r3, #0
 800be70:	e054      	b.n	800bf1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d003      	beq.n	800be82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	695b      	ldr	r3, [r3, #20]
 800be7e:	089b      	lsrs	r3, r3, #2
 800be80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00e      	beq.n	800bea8 <osThreadNew+0xa8>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	2b5b      	cmp	r3, #91	; 0x5b
 800be90:	d90a      	bls.n	800bea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be96:	2b00      	cmp	r3, #0
 800be98:	d006      	beq.n	800bea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d002      	beq.n	800bea8 <osThreadNew+0xa8>
        mem = 1;
 800bea2:	2301      	movs	r3, #1
 800bea4:	61bb      	str	r3, [r7, #24]
 800bea6:	e010      	b.n	800beca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10c      	bne.n	800beca <osThreadNew+0xca>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d108      	bne.n	800beca <osThreadNew+0xca>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d104      	bne.n	800beca <osThreadNew+0xca>
          mem = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	61bb      	str	r3, [r7, #24]
 800bec4:	e001      	b.n	800beca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d110      	bne.n	800bef2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bed8:	9202      	str	r2, [sp, #8]
 800beda:	9301      	str	r3, [sp, #4]
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	6a3a      	ldr	r2, [r7, #32]
 800bee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f000 fff6 	bl	800ced8 <xTaskCreateStatic>
 800beec:	4603      	mov	r3, r0
 800beee:	613b      	str	r3, [r7, #16]
 800bef0:	e013      	b.n	800bf1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d110      	bne.n	800bf1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bef8:	6a3b      	ldr	r3, [r7, #32]
 800befa:	b29a      	uxth	r2, r3
 800befc:	f107 0310 	add.w	r3, r7, #16
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f001 f841 	bl	800cf92 <xTaskCreate>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d001      	beq.n	800bf1a <osThreadNew+0x11a>
            hTask = NULL;
 800bf16:	2300      	movs	r3, #0
 800bf18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bf1a:	693b      	ldr	r3, [r7, #16]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3728      	adds	r7, #40	; 0x28
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf2c:	f3ef 8305 	mrs	r3, IPSR
 800bf30:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d003      	beq.n	800bf40 <osDelay+0x1c>
    stat = osErrorISR;
 800bf38:	f06f 0305 	mvn.w	r3, #5
 800bf3c:	60fb      	str	r3, [r7, #12]
 800bf3e:	e007      	b.n	800bf50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d002      	beq.n	800bf50 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f001 f966 	bl	800d21c <vTaskDelay>
    }
  }

  return (stat);
 800bf50:	68fb      	ldr	r3, [r7, #12]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b08a      	sub	sp, #40	; 0x28
 800bf5e:	af02      	add	r7, sp, #8
 800bf60:	60f8      	str	r0, [r7, #12]
 800bf62:	60b9      	str	r1, [r7, #8]
 800bf64:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bf66:	2300      	movs	r3, #0
 800bf68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf6a:	f3ef 8305 	mrs	r3, IPSR
 800bf6e:	613b      	str	r3, [r7, #16]
  return(result);
 800bf70:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d15f      	bne.n	800c036 <osMessageQueueNew+0xdc>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d05c      	beq.n	800c036 <osMessageQueueNew+0xdc>
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d059      	beq.n	800c036 <osMessageQueueNew+0xdc>
    mem = -1;
 800bf82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d029      	beq.n	800bfe2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d012      	beq.n	800bfbc <osMessageQueueNew+0x62>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	2b4f      	cmp	r3, #79	; 0x4f
 800bf9c:	d90e      	bls.n	800bfbc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00a      	beq.n	800bfbc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	695a      	ldr	r2, [r3, #20]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	68b9      	ldr	r1, [r7, #8]
 800bfae:	fb01 f303 	mul.w	r3, r1, r3
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d302      	bcc.n	800bfbc <osMessageQueueNew+0x62>
        mem = 1;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	61bb      	str	r3, [r7, #24]
 800bfba:	e014      	b.n	800bfe6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d110      	bne.n	800bfe6 <osMessageQueueNew+0x8c>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10c      	bne.n	800bfe6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d108      	bne.n	800bfe6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d104      	bne.n	800bfe6 <osMessageQueueNew+0x8c>
          mem = 0;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	61bb      	str	r3, [r7, #24]
 800bfe0:	e001      	b.n	800bfe6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d10b      	bne.n	800c004 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	691a      	ldr	r2, [r3, #16]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	2100      	movs	r1, #0
 800bff6:	9100      	str	r1, [sp, #0]
 800bff8:	68b9      	ldr	r1, [r7, #8]
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f000 fa2e 	bl	800c45c <xQueueGenericCreateStatic>
 800c000:	61f8      	str	r0, [r7, #28]
 800c002:	e008      	b.n	800c016 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d105      	bne.n	800c016 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c00a:	2200      	movs	r2, #0
 800c00c:	68b9      	ldr	r1, [r7, #8]
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f000 fa9c 	bl	800c54c <xQueueGenericCreate>
 800c014:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00c      	beq.n	800c036 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <osMessageQueueNew+0xd0>
        name = attr->name;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	e001      	b.n	800c02e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c02e:	6979      	ldr	r1, [r7, #20]
 800c030:	69f8      	ldr	r0, [r7, #28]
 800c032:	f000 fef3 	bl	800ce1c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c036:	69fb      	ldr	r3, [r7, #28]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3720      	adds	r7, #32
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c040:	b580      	push	{r7, lr}
 800c042:	b088      	sub	sp, #32
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	603b      	str	r3, [r7, #0]
 800c04c:	4613      	mov	r3, r2
 800c04e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c054:	2300      	movs	r3, #0
 800c056:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c058:	f3ef 8305 	mrs	r3, IPSR
 800c05c:	617b      	str	r3, [r7, #20]
  return(result);
 800c05e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c060:	2b00      	cmp	r3, #0
 800c062:	d028      	beq.n	800c0b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d005      	beq.n	800c076 <osMessageQueuePut+0x36>
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d002      	beq.n	800c076 <osMessageQueuePut+0x36>
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d003      	beq.n	800c07e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c076:	f06f 0303 	mvn.w	r3, #3
 800c07a:	61fb      	str	r3, [r7, #28]
 800c07c:	e038      	b.n	800c0f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c07e:	2300      	movs	r3, #0
 800c080:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c082:	f107 0210 	add.w	r2, r7, #16
 800c086:	2300      	movs	r3, #0
 800c088:	68b9      	ldr	r1, [r7, #8]
 800c08a:	69b8      	ldr	r0, [r7, #24]
 800c08c:	f000 fbba 	bl	800c804 <xQueueGenericSendFromISR>
 800c090:	4603      	mov	r3, r0
 800c092:	2b01      	cmp	r3, #1
 800c094:	d003      	beq.n	800c09e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c096:	f06f 0302 	mvn.w	r3, #2
 800c09a:	61fb      	str	r3, [r7, #28]
 800c09c:	e028      	b.n	800c0f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d025      	beq.n	800c0f0 <osMessageQueuePut+0xb0>
 800c0a4:	4b15      	ldr	r3, [pc, #84]	; (800c0fc <osMessageQueuePut+0xbc>)
 800c0a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0aa:	601a      	str	r2, [r3, #0]
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	e01c      	b.n	800c0f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d002      	beq.n	800c0c2 <osMessageQueuePut+0x82>
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d103      	bne.n	800c0ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c0c2:	f06f 0303 	mvn.w	r3, #3
 800c0c6:	61fb      	str	r3, [r7, #28]
 800c0c8:	e012      	b.n	800c0f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	68b9      	ldr	r1, [r7, #8]
 800c0d0:	69b8      	ldr	r0, [r7, #24]
 800c0d2:	f000 fa99 	bl	800c608 <xQueueGenericSend>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d009      	beq.n	800c0f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d003      	beq.n	800c0ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c0e2:	f06f 0301 	mvn.w	r3, #1
 800c0e6:	61fb      	str	r3, [r7, #28]
 800c0e8:	e002      	b.n	800c0f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c0ea:	f06f 0302 	mvn.w	r3, #2
 800c0ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c0f0:	69fb      	ldr	r3, [r7, #28]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3720      	adds	r7, #32
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	e000ed04 	.word	0xe000ed04

0800c100 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c100:	b580      	push	{r7, lr}
 800c102:	b088      	sub	sp, #32
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c112:	2300      	movs	r3, #0
 800c114:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c116:	f3ef 8305 	mrs	r3, IPSR
 800c11a:	617b      	str	r3, [r7, #20]
  return(result);
 800c11c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d028      	beq.n	800c174 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d005      	beq.n	800c134 <osMessageQueueGet+0x34>
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d002      	beq.n	800c134 <osMessageQueueGet+0x34>
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d003      	beq.n	800c13c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c134:	f06f 0303 	mvn.w	r3, #3
 800c138:	61fb      	str	r3, [r7, #28]
 800c13a:	e037      	b.n	800c1ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c13c:	2300      	movs	r3, #0
 800c13e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c140:	f107 0310 	add.w	r3, r7, #16
 800c144:	461a      	mov	r2, r3
 800c146:	68b9      	ldr	r1, [r7, #8]
 800c148:	69b8      	ldr	r0, [r7, #24]
 800c14a:	f000 fcd7 	bl	800cafc <xQueueReceiveFromISR>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b01      	cmp	r3, #1
 800c152:	d003      	beq.n	800c15c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c154:	f06f 0302 	mvn.w	r3, #2
 800c158:	61fb      	str	r3, [r7, #28]
 800c15a:	e027      	b.n	800c1ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d024      	beq.n	800c1ac <osMessageQueueGet+0xac>
 800c162:	4b15      	ldr	r3, [pc, #84]	; (800c1b8 <osMessageQueueGet+0xb8>)
 800c164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c168:	601a      	str	r2, [r3, #0]
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	e01b      	b.n	800c1ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d002      	beq.n	800c180 <osMessageQueueGet+0x80>
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d103      	bne.n	800c188 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c180:	f06f 0303 	mvn.w	r3, #3
 800c184:	61fb      	str	r3, [r7, #28]
 800c186:	e011      	b.n	800c1ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c188:	683a      	ldr	r2, [r7, #0]
 800c18a:	68b9      	ldr	r1, [r7, #8]
 800c18c:	69b8      	ldr	r0, [r7, #24]
 800c18e:	f000 fbd5 	bl	800c93c <xQueueReceive>
 800c192:	4603      	mov	r3, r0
 800c194:	2b01      	cmp	r3, #1
 800c196:	d009      	beq.n	800c1ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c19e:	f06f 0301 	mvn.w	r3, #1
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	e002      	b.n	800c1ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c1a6:	f06f 0302 	mvn.w	r3, #2
 800c1aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c1ac:	69fb      	ldr	r3, [r7, #28]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3720      	adds	r7, #32
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	e000ed04 	.word	0xe000ed04

0800c1bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4a07      	ldr	r2, [pc, #28]	; (800c1e8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c1cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	4a06      	ldr	r2, [pc, #24]	; (800c1ec <vApplicationGetIdleTaskMemory+0x30>)
 800c1d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2280      	movs	r2, #128	; 0x80
 800c1d8:	601a      	str	r2, [r3, #0]
}
 800c1da:	bf00      	nop
 800c1dc:	3714      	adds	r7, #20
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	200004c4 	.word	0x200004c4
 800c1ec:	20000520 	.word	0x20000520

0800c1f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	4a07      	ldr	r2, [pc, #28]	; (800c21c <vApplicationGetTimerTaskMemory+0x2c>)
 800c200:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	4a06      	ldr	r2, [pc, #24]	; (800c220 <vApplicationGetTimerTaskMemory+0x30>)
 800c206:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c20e:	601a      	str	r2, [r3, #0]
}
 800c210:	bf00      	nop
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	20000720 	.word	0x20000720
 800c220:	2000077c 	.word	0x2000077c

0800c224 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f103 0208 	add.w	r2, r3, #8
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c23c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f103 0208 	add.w	r2, r3, #8
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f103 0208 	add.w	r2, r3, #8
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c272:	bf00      	nop
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr

0800c27e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c27e:	b480      	push	{r7}
 800c280:	b085      	sub	sp, #20
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
 800c286:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	689a      	ldr	r2, [r3, #8]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	683a      	ldr	r2, [r7, #0]
 800c2a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	1c5a      	adds	r2, r3, #1
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	601a      	str	r2, [r3, #0]
}
 800c2ba:	bf00      	nop
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2c6:	b480      	push	{r7}
 800c2c8:	b085      	sub	sp, #20
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2dc:	d103      	bne.n	800c2e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	60fb      	str	r3, [r7, #12]
 800c2e4:	e00c      	b.n	800c300 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	3308      	adds	r3, #8
 800c2ea:	60fb      	str	r3, [r7, #12]
 800c2ec:	e002      	b.n	800c2f4 <vListInsert+0x2e>
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	60fb      	str	r3, [r7, #12]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d2f6      	bcs.n	800c2ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	685a      	ldr	r2, [r3, #4]
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	683a      	ldr	r2, [r7, #0]
 800c31a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	1c5a      	adds	r2, r3, #1
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	601a      	str	r2, [r3, #0]
}
 800c32c:	bf00      	nop
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	6892      	ldr	r2, [r2, #8]
 800c34e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	6852      	ldr	r2, [r2, #4]
 800c358:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	429a      	cmp	r2, r3
 800c362:	d103      	bne.n	800c36c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	689a      	ldr	r2, [r3, #8]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	1e5a      	subs	r2, r3, #1
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10a      	bne.n	800c3b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c3b2:	bf00      	nop
 800c3b4:	e7fe      	b.n	800c3b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c3b6:	f002 f905 	bl	800e5c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3c2:	68f9      	ldr	r1, [r7, #12]
 800c3c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3c6:	fb01 f303 	mul.w	r3, r1, r3
 800c3ca:	441a      	add	r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	68f9      	ldr	r1, [r7, #12]
 800c3ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3ec:	fb01 f303 	mul.w	r3, r1, r3
 800c3f0:	441a      	add	r2, r3
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	22ff      	movs	r2, #255	; 0xff
 800c3fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	22ff      	movs	r2, #255	; 0xff
 800c402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d114      	bne.n	800c436 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d01a      	beq.n	800c44a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	3310      	adds	r3, #16
 800c418:	4618      	mov	r0, r3
 800c41a:	f001 f9bd 	bl	800d798 <xTaskRemoveFromEventList>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d012      	beq.n	800c44a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c424:	4b0c      	ldr	r3, [pc, #48]	; (800c458 <xQueueGenericReset+0xcc>)
 800c426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	e009      	b.n	800c44a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	3310      	adds	r3, #16
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7ff fef2 	bl	800c224 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3324      	adds	r3, #36	; 0x24
 800c444:	4618      	mov	r0, r3
 800c446:	f7ff feed 	bl	800c224 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c44a:	f002 f8eb 	bl	800e624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c44e:	2301      	movs	r3, #1
}
 800c450:	4618      	mov	r0, r3
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	e000ed04 	.word	0xe000ed04

0800c45c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b08e      	sub	sp, #56	; 0x38
 800c460:	af02      	add	r7, sp, #8
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
 800c468:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d10a      	bne.n	800c486 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c482:	bf00      	nop
 800c484:	e7fe      	b.n	800c484 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c49e:	bf00      	nop
 800c4a0:	e7fe      	b.n	800c4a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <xQueueGenericCreateStatic+0x52>
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <xQueueGenericCreateStatic+0x56>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e000      	b.n	800c4b4 <xQueueGenericCreateStatic+0x58>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10a      	bne.n	800c4ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4bc:	f383 8811 	msr	BASEPRI, r3
 800c4c0:	f3bf 8f6f 	isb	sy
 800c4c4:	f3bf 8f4f 	dsb	sy
 800c4c8:	623b      	str	r3, [r7, #32]
}
 800c4ca:	bf00      	nop
 800c4cc:	e7fe      	b.n	800c4cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d102      	bne.n	800c4da <xQueueGenericCreateStatic+0x7e>
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d101      	bne.n	800c4de <xQueueGenericCreateStatic+0x82>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e000      	b.n	800c4e0 <xQueueGenericCreateStatic+0x84>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10a      	bne.n	800c4fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	61fb      	str	r3, [r7, #28]
}
 800c4f6:	bf00      	nop
 800c4f8:	e7fe      	b.n	800c4f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c4fa:	2350      	movs	r3, #80	; 0x50
 800c4fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	2b50      	cmp	r3, #80	; 0x50
 800c502:	d00a      	beq.n	800c51a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	61bb      	str	r3, [r7, #24]
}
 800c516:	bf00      	nop
 800c518:	e7fe      	b.n	800c518 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c51a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00d      	beq.n	800c542 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c528:	2201      	movs	r2, #1
 800c52a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c52e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c534:	9300      	str	r3, [sp, #0]
 800c536:	4613      	mov	r3, r2
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	68b9      	ldr	r1, [r7, #8]
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 f83f 	bl	800c5c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c544:	4618      	mov	r0, r3
 800c546:	3730      	adds	r7, #48	; 0x30
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08a      	sub	sp, #40	; 0x28
 800c550:	af02      	add	r7, sp, #8
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	4613      	mov	r3, r2
 800c558:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10a      	bne.n	800c576 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	613b      	str	r3, [r7, #16]
}
 800c572:	bf00      	nop
 800c574:	e7fe      	b.n	800c574 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	fb02 f303 	mul.w	r3, r2, r3
 800c57e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	3350      	adds	r3, #80	; 0x50
 800c584:	4618      	mov	r0, r3
 800c586:	f002 f93f 	bl	800e808 <pvPortMalloc>
 800c58a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d011      	beq.n	800c5b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	3350      	adds	r3, #80	; 0x50
 800c59a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c5a4:	79fa      	ldrb	r2, [r7, #7]
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 f805 	bl	800c5c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c5b6:	69bb      	ldr	r3, [r7, #24]
	}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3720      	adds	r7, #32
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
 800c5cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d103      	bne.n	800c5dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	69ba      	ldr	r2, [r7, #24]
 800c5d8:	601a      	str	r2, [r3, #0]
 800c5da:	e002      	b.n	800c5e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	69b8      	ldr	r0, [r7, #24]
 800c5f2:	f7ff fecb 	bl	800c38c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	78fa      	ldrb	r2, [r7, #3]
 800c5fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c5fe:	bf00      	nop
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
	...

0800c608 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b08e      	sub	sp, #56	; 0x38
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c616:	2300      	movs	r3, #0
 800c618:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10a      	bne.n	800c63a <xQueueGenericSend+0x32>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c636:	bf00      	nop
 800c638:	e7fe      	b.n	800c638 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d103      	bne.n	800c648 <xQueueGenericSend+0x40>
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c644:	2b00      	cmp	r3, #0
 800c646:	d101      	bne.n	800c64c <xQueueGenericSend+0x44>
 800c648:	2301      	movs	r3, #1
 800c64a:	e000      	b.n	800c64e <xQueueGenericSend+0x46>
 800c64c:	2300      	movs	r3, #0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10a      	bne.n	800c668 <xQueueGenericSend+0x60>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c664:	bf00      	nop
 800c666:	e7fe      	b.n	800c666 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d103      	bne.n	800c676 <xQueueGenericSend+0x6e>
 800c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c672:	2b01      	cmp	r3, #1
 800c674:	d101      	bne.n	800c67a <xQueueGenericSend+0x72>
 800c676:	2301      	movs	r3, #1
 800c678:	e000      	b.n	800c67c <xQueueGenericSend+0x74>
 800c67a:	2300      	movs	r3, #0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10a      	bne.n	800c696 <xQueueGenericSend+0x8e>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	623b      	str	r3, [r7, #32]
}
 800c692:	bf00      	nop
 800c694:	e7fe      	b.n	800c694 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c696:	f001 fa3d 	bl	800db14 <xTaskGetSchedulerState>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <xQueueGenericSend+0x9e>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <xQueueGenericSend+0xa2>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e000      	b.n	800c6ac <xQueueGenericSend+0xa4>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10a      	bne.n	800c6c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	61fb      	str	r3, [r7, #28]
}
 800c6c2:	bf00      	nop
 800c6c4:	e7fe      	b.n	800c6c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6c6:	f001 ff7d 	bl	800e5c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d302      	bcc.n	800c6dc <xQueueGenericSend+0xd4>
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d129      	bne.n	800c730 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6dc:	683a      	ldr	r2, [r7, #0]
 800c6de:	68b9      	ldr	r1, [r7, #8]
 800c6e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6e2:	f000 fa8b 	bl	800cbfc <prvCopyDataToQueue>
 800c6e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d010      	beq.n	800c712 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f2:	3324      	adds	r3, #36	; 0x24
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f001 f84f 	bl	800d798 <xTaskRemoveFromEventList>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d013      	beq.n	800c728 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c700:	4b3f      	ldr	r3, [pc, #252]	; (800c800 <xQueueGenericSend+0x1f8>)
 800c702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c706:	601a      	str	r2, [r3, #0]
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	e00a      	b.n	800c728 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c714:	2b00      	cmp	r3, #0
 800c716:	d007      	beq.n	800c728 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c718:	4b39      	ldr	r3, [pc, #228]	; (800c800 <xQueueGenericSend+0x1f8>)
 800c71a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c71e:	601a      	str	r2, [r3, #0]
 800c720:	f3bf 8f4f 	dsb	sy
 800c724:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c728:	f001 ff7c 	bl	800e624 <vPortExitCritical>
				return pdPASS;
 800c72c:	2301      	movs	r3, #1
 800c72e:	e063      	b.n	800c7f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d103      	bne.n	800c73e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c736:	f001 ff75 	bl	800e624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	e05c      	b.n	800c7f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c740:	2b00      	cmp	r3, #0
 800c742:	d106      	bne.n	800c752 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c744:	f107 0314 	add.w	r3, r7, #20
 800c748:	4618      	mov	r0, r3
 800c74a:	f001 f889 	bl	800d860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c74e:	2301      	movs	r3, #1
 800c750:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c752:	f001 ff67 	bl	800e624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c756:	f000 fdfb 	bl	800d350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c75a:	f001 ff33 	bl	800e5c4 <vPortEnterCritical>
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c764:	b25b      	sxtb	r3, r3
 800c766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c76a:	d103      	bne.n	800c774 <xQueueGenericSend+0x16c>
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c77a:	b25b      	sxtb	r3, r3
 800c77c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c780:	d103      	bne.n	800c78a <xQueueGenericSend+0x182>
 800c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c784:	2200      	movs	r2, #0
 800c786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c78a:	f001 ff4b 	bl	800e624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c78e:	1d3a      	adds	r2, r7, #4
 800c790:	f107 0314 	add.w	r3, r7, #20
 800c794:	4611      	mov	r1, r2
 800c796:	4618      	mov	r0, r3
 800c798:	f001 f878 	bl	800d88c <xTaskCheckForTimeOut>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d124      	bne.n	800c7ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c7a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7a4:	f000 fb22 	bl	800cdec <prvIsQueueFull>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d018      	beq.n	800c7e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	3310      	adds	r3, #16
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 ff9e 	bl	800d6f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c7bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7be:	f000 faad 	bl	800cd1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c7c2:	f000 fdd3 	bl	800d36c <xTaskResumeAll>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f47f af7c 	bne.w	800c6c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c7ce:	4b0c      	ldr	r3, [pc, #48]	; (800c800 <xQueueGenericSend+0x1f8>)
 800c7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	e772      	b.n	800c6c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c7e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7e2:	f000 fa9b 	bl	800cd1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7e6:	f000 fdc1 	bl	800d36c <xTaskResumeAll>
 800c7ea:	e76c      	b.n	800c6c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c7ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7ee:	f000 fa95 	bl	800cd1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7f2:	f000 fdbb 	bl	800d36c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c7f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3738      	adds	r7, #56	; 0x38
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	e000ed04 	.word	0xe000ed04

0800c804 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b090      	sub	sp, #64	; 0x40
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
 800c810:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10a      	bne.n	800c832 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c82e:	bf00      	nop
 800c830:	e7fe      	b.n	800c830 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d103      	bne.n	800c840 <xQueueGenericSendFromISR+0x3c>
 800c838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d101      	bne.n	800c844 <xQueueGenericSendFromISR+0x40>
 800c840:	2301      	movs	r3, #1
 800c842:	e000      	b.n	800c846 <xQueueGenericSendFromISR+0x42>
 800c844:	2300      	movs	r3, #0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d10a      	bne.n	800c860 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84e:	f383 8811 	msr	BASEPRI, r3
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	f3bf 8f4f 	dsb	sy
 800c85a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c85c:	bf00      	nop
 800c85e:	e7fe      	b.n	800c85e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	2b02      	cmp	r3, #2
 800c864:	d103      	bne.n	800c86e <xQueueGenericSendFromISR+0x6a>
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d101      	bne.n	800c872 <xQueueGenericSendFromISR+0x6e>
 800c86e:	2301      	movs	r3, #1
 800c870:	e000      	b.n	800c874 <xQueueGenericSendFromISR+0x70>
 800c872:	2300      	movs	r3, #0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d10a      	bne.n	800c88e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	623b      	str	r3, [r7, #32]
}
 800c88a:	bf00      	nop
 800c88c:	e7fe      	b.n	800c88c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c88e:	f001 ff7b 	bl	800e788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c892:	f3ef 8211 	mrs	r2, BASEPRI
 800c896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	61fa      	str	r2, [r7, #28]
 800c8a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c8aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d302      	bcc.n	800c8c0 <xQueueGenericSendFromISR+0xbc>
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d12f      	bne.n	800c920 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	68b9      	ldr	r1, [r7, #8]
 800c8d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8d6:	f000 f991 	bl	800cbfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c8da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c8de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8e2:	d112      	bne.n	800c90a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d016      	beq.n	800c91a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	3324      	adds	r3, #36	; 0x24
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 ff51 	bl	800d798 <xTaskRemoveFromEventList>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00e      	beq.n	800c91a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00b      	beq.n	800c91a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2201      	movs	r2, #1
 800c906:	601a      	str	r2, [r3, #0]
 800c908:	e007      	b.n	800c91a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c90a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c90e:	3301      	adds	r3, #1
 800c910:	b2db      	uxtb	r3, r3
 800c912:	b25a      	sxtb	r2, r3
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c91a:	2301      	movs	r3, #1
 800c91c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c91e:	e001      	b.n	800c924 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c920:	2300      	movs	r3, #0
 800c922:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c926:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c92e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c932:	4618      	mov	r0, r3
 800c934:	3740      	adds	r7, #64	; 0x40
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
	...

0800c93c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08c      	sub	sp, #48	; 0x30
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c948:	2300      	movs	r3, #0
 800c94a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10a      	bne.n	800c96c <xQueueReceive+0x30>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	623b      	str	r3, [r7, #32]
}
 800c968:	bf00      	nop
 800c96a:	e7fe      	b.n	800c96a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d103      	bne.n	800c97a <xQueueReceive+0x3e>
 800c972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c976:	2b00      	cmp	r3, #0
 800c978:	d101      	bne.n	800c97e <xQueueReceive+0x42>
 800c97a:	2301      	movs	r3, #1
 800c97c:	e000      	b.n	800c980 <xQueueReceive+0x44>
 800c97e:	2300      	movs	r3, #0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10a      	bne.n	800c99a <xQueueReceive+0x5e>
	__asm volatile
 800c984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c988:	f383 8811 	msr	BASEPRI, r3
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	61fb      	str	r3, [r7, #28]
}
 800c996:	bf00      	nop
 800c998:	e7fe      	b.n	800c998 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c99a:	f001 f8bb 	bl	800db14 <xTaskGetSchedulerState>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d102      	bne.n	800c9aa <xQueueReceive+0x6e>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <xQueueReceive+0x72>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e000      	b.n	800c9b0 <xQueueReceive+0x74>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <xQueueReceive+0x8e>
	__asm volatile
 800c9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	61bb      	str	r3, [r7, #24]
}
 800c9c6:	bf00      	nop
 800c9c8:	e7fe      	b.n	800c9c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9ca:	f001 fdfb 	bl	800e5c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d01f      	beq.n	800ca1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9da:	68b9      	ldr	r1, [r7, #8]
 800c9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9de:	f000 f977 	bl	800ccd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e4:	1e5a      	subs	r2, r3, #1
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00f      	beq.n	800ca12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f4:	3310      	adds	r3, #16
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 fece 	bl	800d798 <xTaskRemoveFromEventList>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d007      	beq.n	800ca12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca02:	4b3d      	ldr	r3, [pc, #244]	; (800caf8 <xQueueReceive+0x1bc>)
 800ca04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca08:	601a      	str	r2, [r3, #0]
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca12:	f001 fe07 	bl	800e624 <vPortExitCritical>
				return pdPASS;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e069      	b.n	800caee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d103      	bne.n	800ca28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca20:	f001 fe00 	bl	800e624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca24:	2300      	movs	r3, #0
 800ca26:	e062      	b.n	800caee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d106      	bne.n	800ca3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca2e:	f107 0310 	add.w	r3, r7, #16
 800ca32:	4618      	mov	r0, r3
 800ca34:	f000 ff14 	bl	800d860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca3c:	f001 fdf2 	bl	800e624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca40:	f000 fc86 	bl	800d350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca44:	f001 fdbe 	bl	800e5c4 <vPortEnterCritical>
 800ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca4e:	b25b      	sxtb	r3, r3
 800ca50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca54:	d103      	bne.n	800ca5e <xQueueReceive+0x122>
 800ca56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca64:	b25b      	sxtb	r3, r3
 800ca66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca6a:	d103      	bne.n	800ca74 <xQueueReceive+0x138>
 800ca6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca74:	f001 fdd6 	bl	800e624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca78:	1d3a      	adds	r2, r7, #4
 800ca7a:	f107 0310 	add.w	r3, r7, #16
 800ca7e:	4611      	mov	r1, r2
 800ca80:	4618      	mov	r0, r3
 800ca82:	f000 ff03 	bl	800d88c <xTaskCheckForTimeOut>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d123      	bne.n	800cad4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca8e:	f000 f997 	bl	800cdc0 <prvIsQueueEmpty>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d017      	beq.n	800cac8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9a:	3324      	adds	r3, #36	; 0x24
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 fe29 	bl	800d6f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800caa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caa8:	f000 f938 	bl	800cd1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800caac:	f000 fc5e 	bl	800d36c <xTaskResumeAll>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d189      	bne.n	800c9ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cab6:	4b10      	ldr	r3, [pc, #64]	; (800caf8 <xQueueReceive+0x1bc>)
 800cab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	f3bf 8f6f 	isb	sy
 800cac6:	e780      	b.n	800c9ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caca:	f000 f927 	bl	800cd1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cace:	f000 fc4d 	bl	800d36c <xTaskResumeAll>
 800cad2:	e77a      	b.n	800c9ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cad6:	f000 f921 	bl	800cd1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cada:	f000 fc47 	bl	800d36c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cae0:	f000 f96e 	bl	800cdc0 <prvIsQueueEmpty>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f43f af6f 	beq.w	800c9ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800caec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3730      	adds	r7, #48	; 0x30
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	e000ed04 	.word	0xe000ed04

0800cafc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b08e      	sub	sp, #56	; 0x38
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10a      	bne.n	800cb28 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb16:	f383 8811 	msr	BASEPRI, r3
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	623b      	str	r3, [r7, #32]
}
 800cb24:	bf00      	nop
 800cb26:	e7fe      	b.n	800cb26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d103      	bne.n	800cb36 <xQueueReceiveFromISR+0x3a>
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d101      	bne.n	800cb3a <xQueueReceiveFromISR+0x3e>
 800cb36:	2301      	movs	r3, #1
 800cb38:	e000      	b.n	800cb3c <xQueueReceiveFromISR+0x40>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10a      	bne.n	800cb56 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	61fb      	str	r3, [r7, #28]
}
 800cb52:	bf00      	nop
 800cb54:	e7fe      	b.n	800cb54 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb56:	f001 fe17 	bl	800e788 <vPortValidateInterruptPriority>
	__asm volatile
 800cb5a:	f3ef 8211 	mrs	r2, BASEPRI
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	61ba      	str	r2, [r7, #24]
 800cb70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cb72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d02f      	beq.n	800cbe2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb8c:	68b9      	ldr	r1, [r7, #8]
 800cb8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb90:	f000 f89e 	bl	800ccd0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb96:	1e5a      	subs	r2, r3, #1
 800cb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cb9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cba4:	d112      	bne.n	800cbcc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	691b      	ldr	r3, [r3, #16]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d016      	beq.n	800cbdc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb0:	3310      	adds	r3, #16
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f000 fdf0 	bl	800d798 <xTaskRemoveFromEventList>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00e      	beq.n	800cbdc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00b      	beq.n	800cbdc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	601a      	str	r2, [r3, #0]
 800cbca:	e007      	b.n	800cbdc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	b25a      	sxtb	r2, r3
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	637b      	str	r3, [r7, #52]	; 0x34
 800cbe0:	e001      	b.n	800cbe6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	637b      	str	r3, [r7, #52]	; 0x34
 800cbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	f383 8811 	msr	BASEPRI, r3
}
 800cbf0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3738      	adds	r7, #56	; 0x38
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b086      	sub	sp, #24
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10d      	bne.n	800cc36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d14d      	bne.n	800ccbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f000 ff92 	bl	800db50 <xTaskPriorityDisinherit>
 800cc2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	609a      	str	r2, [r3, #8]
 800cc34:	e043      	b.n	800ccbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d119      	bne.n	800cc70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6858      	ldr	r0, [r3, #4]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc44:	461a      	mov	r2, r3
 800cc46:	68b9      	ldr	r1, [r7, #8]
 800cc48:	f002 fb04 	bl	800f254 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc54:	441a      	add	r2, r3
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	685a      	ldr	r2, [r3, #4]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	689b      	ldr	r3, [r3, #8]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d32b      	bcc.n	800ccbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	605a      	str	r2, [r3, #4]
 800cc6e:	e026      	b.n	800ccbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	68d8      	ldr	r0, [r3, #12]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc78:	461a      	mov	r2, r3
 800cc7a:	68b9      	ldr	r1, [r7, #8]
 800cc7c:	f002 faea 	bl	800f254 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	68da      	ldr	r2, [r3, #12]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc88:	425b      	negs	r3, r3
 800cc8a:	441a      	add	r2, r3
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	68da      	ldr	r2, [r3, #12]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d207      	bcs.n	800ccac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	689a      	ldr	r2, [r3, #8]
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca4:	425b      	negs	r3, r3
 800cca6:	441a      	add	r2, r3
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d105      	bne.n	800ccbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d002      	beq.n	800ccbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	1c5a      	adds	r2, r3, #1
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ccc6:	697b      	ldr	r3, [r7, #20]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3718      	adds	r7, #24
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d018      	beq.n	800cd14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68da      	ldr	r2, [r3, #12]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccea:	441a      	add	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	68da      	ldr	r2, [r3, #12]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d303      	bcc.n	800cd04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	68d9      	ldr	r1, [r3, #12]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	6838      	ldr	r0, [r7, #0]
 800cd10:	f002 faa0 	bl	800f254 <memcpy>
	}
}
 800cd14:	bf00      	nop
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cd24:	f001 fc4e 	bl	800e5c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd30:	e011      	b.n	800cd56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d012      	beq.n	800cd60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	3324      	adds	r3, #36	; 0x24
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f000 fd2a 	bl	800d798 <xTaskRemoveFromEventList>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd4a:	f000 fe01 	bl	800d950 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cd4e:	7bfb      	ldrb	r3, [r7, #15]
 800cd50:	3b01      	subs	r3, #1
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	dce9      	bgt.n	800cd32 <prvUnlockQueue+0x16>
 800cd5e:	e000      	b.n	800cd62 <prvUnlockQueue+0x46>
					break;
 800cd60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	22ff      	movs	r2, #255	; 0xff
 800cd66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cd6a:	f001 fc5b 	bl	800e624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cd6e:	f001 fc29 	bl	800e5c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd7a:	e011      	b.n	800cda0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d012      	beq.n	800cdaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	3310      	adds	r3, #16
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f000 fd05 	bl	800d798 <xTaskRemoveFromEventList>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d001      	beq.n	800cd98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cd94:	f000 fddc 	bl	800d950 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd98:	7bbb      	ldrb	r3, [r7, #14]
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cda0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	dce9      	bgt.n	800cd7c <prvUnlockQueue+0x60>
 800cda8:	e000      	b.n	800cdac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cdaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	22ff      	movs	r2, #255	; 0xff
 800cdb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cdb4:	f001 fc36 	bl	800e624 <vPortExitCritical>
}
 800cdb8:	bf00      	nop
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdc8:	f001 fbfc 	bl	800e5c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d102      	bne.n	800cdda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	60fb      	str	r3, [r7, #12]
 800cdd8:	e001      	b.n	800cdde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cdda:	2300      	movs	r3, #0
 800cddc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdde:	f001 fc21 	bl	800e624 <vPortExitCritical>

	return xReturn;
 800cde2:	68fb      	ldr	r3, [r7, #12]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdf4:	f001 fbe6 	bl	800e5c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d102      	bne.n	800ce0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ce04:	2301      	movs	r3, #1
 800ce06:	60fb      	str	r3, [r7, #12]
 800ce08:	e001      	b.n	800ce0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce0e:	f001 fc09 	bl	800e624 <vPortExitCritical>

	return xReturn;
 800ce12:	68fb      	ldr	r3, [r7, #12]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce26:	2300      	movs	r3, #0
 800ce28:	60fb      	str	r3, [r7, #12]
 800ce2a:	e014      	b.n	800ce56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ce2c:	4a0f      	ldr	r2, [pc, #60]	; (800ce6c <vQueueAddToRegistry+0x50>)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d10b      	bne.n	800ce50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ce38:	490c      	ldr	r1, [pc, #48]	; (800ce6c <vQueueAddToRegistry+0x50>)
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ce42:	4a0a      	ldr	r2, [pc, #40]	; (800ce6c <vQueueAddToRegistry+0x50>)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	00db      	lsls	r3, r3, #3
 800ce48:	4413      	add	r3, r2
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ce4e:	e006      	b.n	800ce5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	3301      	adds	r3, #1
 800ce54:	60fb      	str	r3, [r7, #12]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2b07      	cmp	r3, #7
 800ce5a:	d9e7      	bls.n	800ce2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ce5c:	bf00      	nop
 800ce5e:	bf00      	nop
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	20005090 	.word	0x20005090

0800ce70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce80:	f001 fba0 	bl	800e5c4 <vPortEnterCritical>
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce8a:	b25b      	sxtb	r3, r3
 800ce8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce90:	d103      	bne.n	800ce9a <vQueueWaitForMessageRestricted+0x2a>
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cea0:	b25b      	sxtb	r3, r3
 800cea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cea6:	d103      	bne.n	800ceb0 <vQueueWaitForMessageRestricted+0x40>
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ceb0:	f001 fbb8 	bl	800e624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d106      	bne.n	800ceca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	3324      	adds	r3, #36	; 0x24
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	68b9      	ldr	r1, [r7, #8]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f000 fc3b 	bl	800d740 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ceca:	6978      	ldr	r0, [r7, #20]
 800cecc:	f7ff ff26 	bl	800cd1c <prvUnlockQueue>
	}
 800ced0:	bf00      	nop
 800ced2:	3718      	adds	r7, #24
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b08e      	sub	sp, #56	; 0x38
 800cedc:	af04      	add	r7, sp, #16
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
 800cee4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d10a      	bne.n	800cf02 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ceec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	623b      	str	r3, [r7, #32]
}
 800cefe:	bf00      	nop
 800cf00:	e7fe      	b.n	800cf00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10a      	bne.n	800cf1e <xTaskCreateStatic+0x46>
	__asm volatile
 800cf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0c:	f383 8811 	msr	BASEPRI, r3
 800cf10:	f3bf 8f6f 	isb	sy
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	61fb      	str	r3, [r7, #28]
}
 800cf1a:	bf00      	nop
 800cf1c:	e7fe      	b.n	800cf1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cf1e:	235c      	movs	r3, #92	; 0x5c
 800cf20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	2b5c      	cmp	r3, #92	; 0x5c
 800cf26:	d00a      	beq.n	800cf3e <xTaskCreateStatic+0x66>
	__asm volatile
 800cf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2c:	f383 8811 	msr	BASEPRI, r3
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	61bb      	str	r3, [r7, #24]
}
 800cf3a:	bf00      	nop
 800cf3c:	e7fe      	b.n	800cf3c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d01e      	beq.n	800cf84 <xTaskCreateStatic+0xac>
 800cf46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d01b      	beq.n	800cf84 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf58:	2202      	movs	r2, #2
 800cf5a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf5e:	2300      	movs	r3, #0
 800cf60:	9303      	str	r3, [sp, #12]
 800cf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf64:	9302      	str	r3, [sp, #8]
 800cf66:	f107 0314 	add.w	r3, r7, #20
 800cf6a:	9301      	str	r3, [sp, #4]
 800cf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	68b9      	ldr	r1, [r7, #8]
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f000 f850 	bl	800d01c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf7e:	f000 f8dd 	bl	800d13c <prvAddNewTaskToReadyList>
 800cf82:	e001      	b.n	800cf88 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cf84:	2300      	movs	r3, #0
 800cf86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf88:	697b      	ldr	r3, [r7, #20]
	}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3728      	adds	r7, #40	; 0x28
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b08c      	sub	sp, #48	; 0x30
 800cf96:	af04      	add	r7, sp, #16
 800cf98:	60f8      	str	r0, [r7, #12]
 800cf9a:	60b9      	str	r1, [r7, #8]
 800cf9c:	603b      	str	r3, [r7, #0]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cfa2:	88fb      	ldrh	r3, [r7, #6]
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f001 fc2e 	bl	800e808 <pvPortMalloc>
 800cfac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00e      	beq.n	800cfd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cfb4:	205c      	movs	r0, #92	; 0x5c
 800cfb6:	f001 fc27 	bl	800e808 <pvPortMalloc>
 800cfba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d003      	beq.n	800cfca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	631a      	str	r2, [r3, #48]	; 0x30
 800cfc8:	e005      	b.n	800cfd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cfca:	6978      	ldr	r0, [r7, #20]
 800cfcc:	f001 fce8 	bl	800e9a0 <vPortFree>
 800cfd0:	e001      	b.n	800cfd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d017      	beq.n	800d00c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cfe4:	88fa      	ldrh	r2, [r7, #6]
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	9303      	str	r3, [sp, #12]
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	9302      	str	r3, [sp, #8]
 800cfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff0:	9301      	str	r3, [sp, #4]
 800cff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	68b9      	ldr	r1, [r7, #8]
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f000 f80e 	bl	800d01c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d000:	69f8      	ldr	r0, [r7, #28]
 800d002:	f000 f89b 	bl	800d13c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d006:	2301      	movs	r3, #1
 800d008:	61bb      	str	r3, [r7, #24]
 800d00a:	e002      	b.n	800d012 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d00c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d010:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d012:	69bb      	ldr	r3, [r7, #24]
	}
 800d014:	4618      	mov	r0, r3
 800d016:	3720      	adds	r7, #32
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b088      	sub	sp, #32
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	461a      	mov	r2, r3
 800d034:	21a5      	movs	r1, #165	; 0xa5
 800d036:	f002 f91b 	bl	800f270 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d044:	3b01      	subs	r3, #1
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	4413      	add	r3, r2
 800d04a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	f023 0307 	bic.w	r3, r3, #7
 800d052:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	f003 0307 	and.w	r3, r3, #7
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00a      	beq.n	800d074 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	617b      	str	r3, [r7, #20]
}
 800d070:	bf00      	nop
 800d072:	e7fe      	b.n	800d072 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d01f      	beq.n	800d0ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d07a:	2300      	movs	r3, #0
 800d07c:	61fb      	str	r3, [r7, #28]
 800d07e:	e012      	b.n	800d0a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d080:	68ba      	ldr	r2, [r7, #8]
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	4413      	add	r3, r2
 800d086:	7819      	ldrb	r1, [r3, #0]
 800d088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	4413      	add	r3, r2
 800d08e:	3334      	adds	r3, #52	; 0x34
 800d090:	460a      	mov	r2, r1
 800d092:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	4413      	add	r3, r2
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d006      	beq.n	800d0ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	61fb      	str	r3, [r7, #28]
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	2b0f      	cmp	r3, #15
 800d0aa:	d9e9      	bls.n	800d080 <prvInitialiseNewTask+0x64>
 800d0ac:	e000      	b.n	800d0b0 <prvInitialiseNewTask+0x94>
			{
				break;
 800d0ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d0b8:	e003      	b.n	800d0c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c4:	2b37      	cmp	r3, #55	; 0x37
 800d0c6:	d901      	bls.n	800d0cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d0c8:	2337      	movs	r3, #55	; 0x37
 800d0ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0da:	2200      	movs	r2, #0
 800d0dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e0:	3304      	adds	r3, #4
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7ff f8be 	bl	800c264 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	3318      	adds	r3, #24
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7ff f8b9 	bl	800c264 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d100:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d106:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10a:	2200      	movs	r2, #0
 800d10c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d116:	683a      	ldr	r2, [r7, #0]
 800d118:	68f9      	ldr	r1, [r7, #12]
 800d11a:	69b8      	ldr	r0, [r7, #24]
 800d11c:	f001 f928 	bl	800e370 <pxPortInitialiseStack>
 800d120:	4602      	mov	r2, r0
 800d122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d124:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d132:	bf00      	nop
 800d134:	3720      	adds	r7, #32
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
	...

0800d13c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d144:	f001 fa3e 	bl	800e5c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d148:	4b2d      	ldr	r3, [pc, #180]	; (800d200 <prvAddNewTaskToReadyList+0xc4>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	3301      	adds	r3, #1
 800d14e:	4a2c      	ldr	r2, [pc, #176]	; (800d200 <prvAddNewTaskToReadyList+0xc4>)
 800d150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d152:	4b2c      	ldr	r3, [pc, #176]	; (800d204 <prvAddNewTaskToReadyList+0xc8>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d109      	bne.n	800d16e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d15a:	4a2a      	ldr	r2, [pc, #168]	; (800d204 <prvAddNewTaskToReadyList+0xc8>)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d160:	4b27      	ldr	r3, [pc, #156]	; (800d200 <prvAddNewTaskToReadyList+0xc4>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d110      	bne.n	800d18a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d168:	f000 fc16 	bl	800d998 <prvInitialiseTaskLists>
 800d16c:	e00d      	b.n	800d18a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d16e:	4b26      	ldr	r3, [pc, #152]	; (800d208 <prvAddNewTaskToReadyList+0xcc>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d109      	bne.n	800d18a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d176:	4b23      	ldr	r3, [pc, #140]	; (800d204 <prvAddNewTaskToReadyList+0xc8>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d180:	429a      	cmp	r2, r3
 800d182:	d802      	bhi.n	800d18a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d184:	4a1f      	ldr	r2, [pc, #124]	; (800d204 <prvAddNewTaskToReadyList+0xc8>)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d18a:	4b20      	ldr	r3, [pc, #128]	; (800d20c <prvAddNewTaskToReadyList+0xd0>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3301      	adds	r3, #1
 800d190:	4a1e      	ldr	r2, [pc, #120]	; (800d20c <prvAddNewTaskToReadyList+0xd0>)
 800d192:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d194:	4b1d      	ldr	r3, [pc, #116]	; (800d20c <prvAddNewTaskToReadyList+0xd0>)
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a0:	4b1b      	ldr	r3, [pc, #108]	; (800d210 <prvAddNewTaskToReadyList+0xd4>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d903      	bls.n	800d1b0 <prvAddNewTaskToReadyList+0x74>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ac:	4a18      	ldr	r2, [pc, #96]	; (800d210 <prvAddNewTaskToReadyList+0xd4>)
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4413      	add	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4a15      	ldr	r2, [pc, #84]	; (800d214 <prvAddNewTaskToReadyList+0xd8>)
 800d1be:	441a      	add	r2, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	4610      	mov	r0, r2
 800d1c8:	f7ff f859 	bl	800c27e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d1cc:	f001 fa2a 	bl	800e624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d1d0:	4b0d      	ldr	r3, [pc, #52]	; (800d208 <prvAddNewTaskToReadyList+0xcc>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00e      	beq.n	800d1f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1d8:	4b0a      	ldr	r3, [pc, #40]	; (800d204 <prvAddNewTaskToReadyList+0xc8>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d207      	bcs.n	800d1f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1e6:	4b0c      	ldr	r3, [pc, #48]	; (800d218 <prvAddNewTaskToReadyList+0xdc>)
 800d1e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ec:	601a      	str	r2, [r3, #0]
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1f6:	bf00      	nop
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	20001050 	.word	0x20001050
 800d204:	20000b7c 	.word	0x20000b7c
 800d208:	2000105c 	.word	0x2000105c
 800d20c:	2000106c 	.word	0x2000106c
 800d210:	20001058 	.word	0x20001058
 800d214:	20000b80 	.word	0x20000b80
 800d218:	e000ed04 	.word	0xe000ed04

0800d21c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d224:	2300      	movs	r3, #0
 800d226:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d017      	beq.n	800d25e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d22e:	4b13      	ldr	r3, [pc, #76]	; (800d27c <vTaskDelay+0x60>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00a      	beq.n	800d24c <vTaskDelay+0x30>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	60bb      	str	r3, [r7, #8]
}
 800d248:	bf00      	nop
 800d24a:	e7fe      	b.n	800d24a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d24c:	f000 f880 	bl	800d350 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d250:	2100      	movs	r1, #0
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 fcea 	bl	800dc2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d258:	f000 f888 	bl	800d36c <xTaskResumeAll>
 800d25c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d107      	bne.n	800d274 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d264:	4b06      	ldr	r3, [pc, #24]	; (800d280 <vTaskDelay+0x64>)
 800d266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d274:	bf00      	nop
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	20001078 	.word	0x20001078
 800d280:	e000ed04 	.word	0xe000ed04

0800d284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b08a      	sub	sp, #40	; 0x28
 800d288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d28a:	2300      	movs	r3, #0
 800d28c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d28e:	2300      	movs	r3, #0
 800d290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d292:	463a      	mov	r2, r7
 800d294:	1d39      	adds	r1, r7, #4
 800d296:	f107 0308 	add.w	r3, r7, #8
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fe ff8e 	bl	800c1bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d2a0:	6839      	ldr	r1, [r7, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	68ba      	ldr	r2, [r7, #8]
 800d2a6:	9202      	str	r2, [sp, #8]
 800d2a8:	9301      	str	r3, [sp, #4]
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	460a      	mov	r2, r1
 800d2b2:	4921      	ldr	r1, [pc, #132]	; (800d338 <vTaskStartScheduler+0xb4>)
 800d2b4:	4821      	ldr	r0, [pc, #132]	; (800d33c <vTaskStartScheduler+0xb8>)
 800d2b6:	f7ff fe0f 	bl	800ced8 <xTaskCreateStatic>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	4a20      	ldr	r2, [pc, #128]	; (800d340 <vTaskStartScheduler+0xbc>)
 800d2be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2c0:	4b1f      	ldr	r3, [pc, #124]	; (800d340 <vTaskStartScheduler+0xbc>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	617b      	str	r3, [r7, #20]
 800d2cc:	e001      	b.n	800d2d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d102      	bne.n	800d2de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2d8:	f000 fcfc 	bl	800dcd4 <xTimerCreateTimerTask>
 800d2dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d116      	bne.n	800d312 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e8:	f383 8811 	msr	BASEPRI, r3
 800d2ec:	f3bf 8f6f 	isb	sy
 800d2f0:	f3bf 8f4f 	dsb	sy
 800d2f4:	613b      	str	r3, [r7, #16]
}
 800d2f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2f8:	4b12      	ldr	r3, [pc, #72]	; (800d344 <vTaskStartScheduler+0xc0>)
 800d2fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d300:	4b11      	ldr	r3, [pc, #68]	; (800d348 <vTaskStartScheduler+0xc4>)
 800d302:	2201      	movs	r2, #1
 800d304:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d306:	4b11      	ldr	r3, [pc, #68]	; (800d34c <vTaskStartScheduler+0xc8>)
 800d308:	2200      	movs	r2, #0
 800d30a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d30c:	f001 f8b8 	bl	800e480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d310:	e00e      	b.n	800d330 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d318:	d10a      	bne.n	800d330 <vTaskStartScheduler+0xac>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	60fb      	str	r3, [r7, #12]
}
 800d32c:	bf00      	nop
 800d32e:	e7fe      	b.n	800d32e <vTaskStartScheduler+0xaa>
}
 800d330:	bf00      	nop
 800d332:	3718      	adds	r7, #24
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	0800f59c 	.word	0x0800f59c
 800d33c:	0800d969 	.word	0x0800d969
 800d340:	20001074 	.word	0x20001074
 800d344:	20001070 	.word	0x20001070
 800d348:	2000105c 	.word	0x2000105c
 800d34c:	20001054 	.word	0x20001054

0800d350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d350:	b480      	push	{r7}
 800d352:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d354:	4b04      	ldr	r3, [pc, #16]	; (800d368 <vTaskSuspendAll+0x18>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	3301      	adds	r3, #1
 800d35a:	4a03      	ldr	r2, [pc, #12]	; (800d368 <vTaskSuspendAll+0x18>)
 800d35c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d35e:	bf00      	nop
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	20001078 	.word	0x20001078

0800d36c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d372:	2300      	movs	r3, #0
 800d374:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d376:	2300      	movs	r3, #0
 800d378:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d37a:	4b42      	ldr	r3, [pc, #264]	; (800d484 <xTaskResumeAll+0x118>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d10a      	bne.n	800d398 <xTaskResumeAll+0x2c>
	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	603b      	str	r3, [r7, #0]
}
 800d394:	bf00      	nop
 800d396:	e7fe      	b.n	800d396 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d398:	f001 f914 	bl	800e5c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d39c:	4b39      	ldr	r3, [pc, #228]	; (800d484 <xTaskResumeAll+0x118>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	4a38      	ldr	r2, [pc, #224]	; (800d484 <xTaskResumeAll+0x118>)
 800d3a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3a6:	4b37      	ldr	r3, [pc, #220]	; (800d484 <xTaskResumeAll+0x118>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d162      	bne.n	800d474 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d3ae:	4b36      	ldr	r3, [pc, #216]	; (800d488 <xTaskResumeAll+0x11c>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d05e      	beq.n	800d474 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3b6:	e02f      	b.n	800d418 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3b8:	4b34      	ldr	r3, [pc, #208]	; (800d48c <xTaskResumeAll+0x120>)
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3318      	adds	r3, #24
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fe ffb7 	bl	800c338 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7fe ffb2 	bl	800c338 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d8:	4b2d      	ldr	r3, [pc, #180]	; (800d490 <xTaskResumeAll+0x124>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d903      	bls.n	800d3e8 <xTaskResumeAll+0x7c>
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e4:	4a2a      	ldr	r2, [pc, #168]	; (800d490 <xTaskResumeAll+0x124>)
 800d3e6:	6013      	str	r3, [r2, #0]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	4413      	add	r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	4a27      	ldr	r2, [pc, #156]	; (800d494 <xTaskResumeAll+0x128>)
 800d3f6:	441a      	add	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	3304      	adds	r3, #4
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	4610      	mov	r0, r2
 800d400:	f7fe ff3d 	bl	800c27e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d408:	4b23      	ldr	r3, [pc, #140]	; (800d498 <xTaskResumeAll+0x12c>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40e:	429a      	cmp	r2, r3
 800d410:	d302      	bcc.n	800d418 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d412:	4b22      	ldr	r3, [pc, #136]	; (800d49c <xTaskResumeAll+0x130>)
 800d414:	2201      	movs	r2, #1
 800d416:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d418:	4b1c      	ldr	r3, [pc, #112]	; (800d48c <xTaskResumeAll+0x120>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1cb      	bne.n	800d3b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d426:	f000 fb55 	bl	800dad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d42a:	4b1d      	ldr	r3, [pc, #116]	; (800d4a0 <xTaskResumeAll+0x134>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d010      	beq.n	800d458 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d436:	f000 f847 	bl	800d4c8 <xTaskIncrementTick>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d002      	beq.n	800d446 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d440:	4b16      	ldr	r3, [pc, #88]	; (800d49c <xTaskResumeAll+0x130>)
 800d442:	2201      	movs	r2, #1
 800d444:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	3b01      	subs	r3, #1
 800d44a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1f1      	bne.n	800d436 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d452:	4b13      	ldr	r3, [pc, #76]	; (800d4a0 <xTaskResumeAll+0x134>)
 800d454:	2200      	movs	r2, #0
 800d456:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d458:	4b10      	ldr	r3, [pc, #64]	; (800d49c <xTaskResumeAll+0x130>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d009      	beq.n	800d474 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d460:	2301      	movs	r3, #1
 800d462:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d464:	4b0f      	ldr	r3, [pc, #60]	; (800d4a4 <xTaskResumeAll+0x138>)
 800d466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d46a:	601a      	str	r2, [r3, #0]
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d474:	f001 f8d6 	bl	800e624 <vPortExitCritical>

	return xAlreadyYielded;
 800d478:	68bb      	ldr	r3, [r7, #8]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	20001078 	.word	0x20001078
 800d488:	20001050 	.word	0x20001050
 800d48c:	20001010 	.word	0x20001010
 800d490:	20001058 	.word	0x20001058
 800d494:	20000b80 	.word	0x20000b80
 800d498:	20000b7c 	.word	0x20000b7c
 800d49c:	20001064 	.word	0x20001064
 800d4a0:	20001060 	.word	0x20001060
 800d4a4:	e000ed04 	.word	0xe000ed04

0800d4a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d4ae:	4b05      	ldr	r3, [pc, #20]	; (800d4c4 <xTaskGetTickCount+0x1c>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d4b4:	687b      	ldr	r3, [r7, #4]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	20001054 	.word	0x20001054

0800d4c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4d2:	4b4f      	ldr	r3, [pc, #316]	; (800d610 <xTaskIncrementTick+0x148>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f040 808f 	bne.w	800d5fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4dc:	4b4d      	ldr	r3, [pc, #308]	; (800d614 <xTaskIncrementTick+0x14c>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4e4:	4a4b      	ldr	r2, [pc, #300]	; (800d614 <xTaskIncrementTick+0x14c>)
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d120      	bne.n	800d532 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4f0:	4b49      	ldr	r3, [pc, #292]	; (800d618 <xTaskIncrementTick+0x150>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00a      	beq.n	800d510 <xTaskIncrementTick+0x48>
	__asm volatile
 800d4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	603b      	str	r3, [r7, #0]
}
 800d50c:	bf00      	nop
 800d50e:	e7fe      	b.n	800d50e <xTaskIncrementTick+0x46>
 800d510:	4b41      	ldr	r3, [pc, #260]	; (800d618 <xTaskIncrementTick+0x150>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	60fb      	str	r3, [r7, #12]
 800d516:	4b41      	ldr	r3, [pc, #260]	; (800d61c <xTaskIncrementTick+0x154>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a3f      	ldr	r2, [pc, #252]	; (800d618 <xTaskIncrementTick+0x150>)
 800d51c:	6013      	str	r3, [r2, #0]
 800d51e:	4a3f      	ldr	r2, [pc, #252]	; (800d61c <xTaskIncrementTick+0x154>)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	4b3e      	ldr	r3, [pc, #248]	; (800d620 <xTaskIncrementTick+0x158>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	3301      	adds	r3, #1
 800d52a:	4a3d      	ldr	r2, [pc, #244]	; (800d620 <xTaskIncrementTick+0x158>)
 800d52c:	6013      	str	r3, [r2, #0]
 800d52e:	f000 fad1 	bl	800dad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d532:	4b3c      	ldr	r3, [pc, #240]	; (800d624 <xTaskIncrementTick+0x15c>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d349      	bcc.n	800d5d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d53c:	4b36      	ldr	r3, [pc, #216]	; (800d618 <xTaskIncrementTick+0x150>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d104      	bne.n	800d550 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d546:	4b37      	ldr	r3, [pc, #220]	; (800d624 <xTaskIncrementTick+0x15c>)
 800d548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d54c:	601a      	str	r2, [r3, #0]
					break;
 800d54e:	e03f      	b.n	800d5d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d550:	4b31      	ldr	r3, [pc, #196]	; (800d618 <xTaskIncrementTick+0x150>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d560:	693a      	ldr	r2, [r7, #16]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	429a      	cmp	r2, r3
 800d566:	d203      	bcs.n	800d570 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d568:	4a2e      	ldr	r2, [pc, #184]	; (800d624 <xTaskIncrementTick+0x15c>)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d56e:	e02f      	b.n	800d5d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	3304      	adds	r3, #4
 800d574:	4618      	mov	r0, r3
 800d576:	f7fe fedf 	bl	800c338 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d004      	beq.n	800d58c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	3318      	adds	r3, #24
 800d586:	4618      	mov	r0, r3
 800d588:	f7fe fed6 	bl	800c338 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d590:	4b25      	ldr	r3, [pc, #148]	; (800d628 <xTaskIncrementTick+0x160>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	429a      	cmp	r2, r3
 800d596:	d903      	bls.n	800d5a0 <xTaskIncrementTick+0xd8>
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59c:	4a22      	ldr	r2, [pc, #136]	; (800d628 <xTaskIncrementTick+0x160>)
 800d59e:	6013      	str	r3, [r2, #0]
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	4413      	add	r3, r2
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	4a1f      	ldr	r2, [pc, #124]	; (800d62c <xTaskIncrementTick+0x164>)
 800d5ae:	441a      	add	r2, r3
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	f7fe fe61 	bl	800c27e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5c0:	4b1b      	ldr	r3, [pc, #108]	; (800d630 <xTaskIncrementTick+0x168>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d3b8      	bcc.n	800d53c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5ce:	e7b5      	b.n	800d53c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5d0:	4b17      	ldr	r3, [pc, #92]	; (800d630 <xTaskIncrementTick+0x168>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d6:	4915      	ldr	r1, [pc, #84]	; (800d62c <xTaskIncrementTick+0x164>)
 800d5d8:	4613      	mov	r3, r2
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	4413      	add	r3, r2
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	440b      	add	r3, r1
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d901      	bls.n	800d5ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5ec:	4b11      	ldr	r3, [pc, #68]	; (800d634 <xTaskIncrementTick+0x16c>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d007      	beq.n	800d604 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	e004      	b.n	800d604 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5fa:	4b0f      	ldr	r3, [pc, #60]	; (800d638 <xTaskIncrementTick+0x170>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	3301      	adds	r3, #1
 800d600:	4a0d      	ldr	r2, [pc, #52]	; (800d638 <xTaskIncrementTick+0x170>)
 800d602:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d604:	697b      	ldr	r3, [r7, #20]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3718      	adds	r7, #24
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	20001078 	.word	0x20001078
 800d614:	20001054 	.word	0x20001054
 800d618:	20001008 	.word	0x20001008
 800d61c:	2000100c 	.word	0x2000100c
 800d620:	20001068 	.word	0x20001068
 800d624:	20001070 	.word	0x20001070
 800d628:	20001058 	.word	0x20001058
 800d62c:	20000b80 	.word	0x20000b80
 800d630:	20000b7c 	.word	0x20000b7c
 800d634:	20001064 	.word	0x20001064
 800d638:	20001060 	.word	0x20001060

0800d63c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d642:	4b28      	ldr	r3, [pc, #160]	; (800d6e4 <vTaskSwitchContext+0xa8>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d003      	beq.n	800d652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d64a:	4b27      	ldr	r3, [pc, #156]	; (800d6e8 <vTaskSwitchContext+0xac>)
 800d64c:	2201      	movs	r2, #1
 800d64e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d650:	e041      	b.n	800d6d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d652:	4b25      	ldr	r3, [pc, #148]	; (800d6e8 <vTaskSwitchContext+0xac>)
 800d654:	2200      	movs	r2, #0
 800d656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d658:	4b24      	ldr	r3, [pc, #144]	; (800d6ec <vTaskSwitchContext+0xb0>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	60fb      	str	r3, [r7, #12]
 800d65e:	e010      	b.n	800d682 <vTaskSwitchContext+0x46>
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d10a      	bne.n	800d67c <vTaskSwitchContext+0x40>
	__asm volatile
 800d666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	607b      	str	r3, [r7, #4]
}
 800d678:	bf00      	nop
 800d67a:	e7fe      	b.n	800d67a <vTaskSwitchContext+0x3e>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	3b01      	subs	r3, #1
 800d680:	60fb      	str	r3, [r7, #12]
 800d682:	491b      	ldr	r1, [pc, #108]	; (800d6f0 <vTaskSwitchContext+0xb4>)
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	4613      	mov	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4413      	add	r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	440b      	add	r3, r1
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d0e4      	beq.n	800d660 <vTaskSwitchContext+0x24>
 800d696:	68fa      	ldr	r2, [r7, #12]
 800d698:	4613      	mov	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	4413      	add	r3, r2
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	4a13      	ldr	r2, [pc, #76]	; (800d6f0 <vTaskSwitchContext+0xb4>)
 800d6a2:	4413      	add	r3, r2
 800d6a4:	60bb      	str	r3, [r7, #8]
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	605a      	str	r2, [r3, #4]
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	685a      	ldr	r2, [r3, #4]
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	3308      	adds	r3, #8
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d104      	bne.n	800d6c6 <vTaskSwitchContext+0x8a>
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	685a      	ldr	r2, [r3, #4]
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	605a      	str	r2, [r3, #4]
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	4a09      	ldr	r2, [pc, #36]	; (800d6f4 <vTaskSwitchContext+0xb8>)
 800d6ce:	6013      	str	r3, [r2, #0]
 800d6d0:	4a06      	ldr	r2, [pc, #24]	; (800d6ec <vTaskSwitchContext+0xb0>)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6013      	str	r3, [r2, #0]
}
 800d6d6:	bf00      	nop
 800d6d8:	3714      	adds	r7, #20
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	20001078 	.word	0x20001078
 800d6e8:	20001064 	.word	0x20001064
 800d6ec:	20001058 	.word	0x20001058
 800d6f0:	20000b80 	.word	0x20000b80
 800d6f4:	20000b7c 	.word	0x20000b7c

0800d6f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d10a      	bne.n	800d71e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70c:	f383 8811 	msr	BASEPRI, r3
 800d710:	f3bf 8f6f 	isb	sy
 800d714:	f3bf 8f4f 	dsb	sy
 800d718:	60fb      	str	r3, [r7, #12]
}
 800d71a:	bf00      	nop
 800d71c:	e7fe      	b.n	800d71c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d71e:	4b07      	ldr	r3, [pc, #28]	; (800d73c <vTaskPlaceOnEventList+0x44>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	3318      	adds	r3, #24
 800d724:	4619      	mov	r1, r3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f7fe fdcd 	bl	800c2c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d72c:	2101      	movs	r1, #1
 800d72e:	6838      	ldr	r0, [r7, #0]
 800d730:	f000 fa7c 	bl	800dc2c <prvAddCurrentTaskToDelayedList>
}
 800d734:	bf00      	nop
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	20000b7c 	.word	0x20000b7c

0800d740 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10a      	bne.n	800d768 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d756:	f383 8811 	msr	BASEPRI, r3
 800d75a:	f3bf 8f6f 	isb	sy
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	617b      	str	r3, [r7, #20]
}
 800d764:	bf00      	nop
 800d766:	e7fe      	b.n	800d766 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d768:	4b0a      	ldr	r3, [pc, #40]	; (800d794 <vTaskPlaceOnEventListRestricted+0x54>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	3318      	adds	r3, #24
 800d76e:	4619      	mov	r1, r3
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f7fe fd84 	bl	800c27e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d77c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d780:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d782:	6879      	ldr	r1, [r7, #4]
 800d784:	68b8      	ldr	r0, [r7, #8]
 800d786:	f000 fa51 	bl	800dc2c <prvAddCurrentTaskToDelayedList>
	}
 800d78a:	bf00      	nop
 800d78c:	3718      	adds	r7, #24
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	20000b7c 	.word	0x20000b7c

0800d798 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d10a      	bne.n	800d7c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b2:	f383 8811 	msr	BASEPRI, r3
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	f3bf 8f4f 	dsb	sy
 800d7be:	60fb      	str	r3, [r7, #12]
}
 800d7c0:	bf00      	nop
 800d7c2:	e7fe      	b.n	800d7c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	3318      	adds	r3, #24
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fe fdb5 	bl	800c338 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ce:	4b1e      	ldr	r3, [pc, #120]	; (800d848 <xTaskRemoveFromEventList+0xb0>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d11d      	bne.n	800d812 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	3304      	adds	r3, #4
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fe fdac 	bl	800c338 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e4:	4b19      	ldr	r3, [pc, #100]	; (800d84c <xTaskRemoveFromEventList+0xb4>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d903      	bls.n	800d7f4 <xTaskRemoveFromEventList+0x5c>
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f0:	4a16      	ldr	r2, [pc, #88]	; (800d84c <xTaskRemoveFromEventList+0xb4>)
 800d7f2:	6013      	str	r3, [r2, #0]
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4413      	add	r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	4a13      	ldr	r2, [pc, #76]	; (800d850 <xTaskRemoveFromEventList+0xb8>)
 800d802:	441a      	add	r2, r3
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	3304      	adds	r3, #4
 800d808:	4619      	mov	r1, r3
 800d80a:	4610      	mov	r0, r2
 800d80c:	f7fe fd37 	bl	800c27e <vListInsertEnd>
 800d810:	e005      	b.n	800d81e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	3318      	adds	r3, #24
 800d816:	4619      	mov	r1, r3
 800d818:	480e      	ldr	r0, [pc, #56]	; (800d854 <xTaskRemoveFromEventList+0xbc>)
 800d81a:	f7fe fd30 	bl	800c27e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d822:	4b0d      	ldr	r3, [pc, #52]	; (800d858 <xTaskRemoveFromEventList+0xc0>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d828:	429a      	cmp	r2, r3
 800d82a:	d905      	bls.n	800d838 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d82c:	2301      	movs	r3, #1
 800d82e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d830:	4b0a      	ldr	r3, [pc, #40]	; (800d85c <xTaskRemoveFromEventList+0xc4>)
 800d832:	2201      	movs	r2, #1
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	e001      	b.n	800d83c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d838:	2300      	movs	r3, #0
 800d83a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d83c:	697b      	ldr	r3, [r7, #20]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3718      	adds	r7, #24
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	20001078 	.word	0x20001078
 800d84c:	20001058 	.word	0x20001058
 800d850:	20000b80 	.word	0x20000b80
 800d854:	20001010 	.word	0x20001010
 800d858:	20000b7c 	.word	0x20000b7c
 800d85c:	20001064 	.word	0x20001064

0800d860 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d868:	4b06      	ldr	r3, [pc, #24]	; (800d884 <vTaskInternalSetTimeOutState+0x24>)
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d870:	4b05      	ldr	r3, [pc, #20]	; (800d888 <vTaskInternalSetTimeOutState+0x28>)
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	605a      	str	r2, [r3, #4]
}
 800d878:	bf00      	nop
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	20001068 	.word	0x20001068
 800d888:	20001054 	.word	0x20001054

0800d88c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b088      	sub	sp, #32
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10a      	bne.n	800d8b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	613b      	str	r3, [r7, #16]
}
 800d8ae:	bf00      	nop
 800d8b0:	e7fe      	b.n	800d8b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d10a      	bne.n	800d8ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8bc:	f383 8811 	msr	BASEPRI, r3
 800d8c0:	f3bf 8f6f 	isb	sy
 800d8c4:	f3bf 8f4f 	dsb	sy
 800d8c8:	60fb      	str	r3, [r7, #12]
}
 800d8ca:	bf00      	nop
 800d8cc:	e7fe      	b.n	800d8cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d8ce:	f000 fe79 	bl	800e5c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8d2:	4b1d      	ldr	r3, [pc, #116]	; (800d948 <xTaskCheckForTimeOut+0xbc>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	69ba      	ldr	r2, [r7, #24]
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8ea:	d102      	bne.n	800d8f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	61fb      	str	r3, [r7, #28]
 800d8f0:	e023      	b.n	800d93a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	4b15      	ldr	r3, [pc, #84]	; (800d94c <xTaskCheckForTimeOut+0xc0>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d007      	beq.n	800d90e <xTaskCheckForTimeOut+0x82>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	69ba      	ldr	r2, [r7, #24]
 800d904:	429a      	cmp	r2, r3
 800d906:	d302      	bcc.n	800d90e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d908:	2301      	movs	r3, #1
 800d90a:	61fb      	str	r3, [r7, #28]
 800d90c:	e015      	b.n	800d93a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	429a      	cmp	r2, r3
 800d916:	d20b      	bcs.n	800d930 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	1ad2      	subs	r2, r2, r3
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7ff ff9b 	bl	800d860 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d92a:	2300      	movs	r3, #0
 800d92c:	61fb      	str	r3, [r7, #28]
 800d92e:	e004      	b.n	800d93a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	2200      	movs	r2, #0
 800d934:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d936:	2301      	movs	r3, #1
 800d938:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d93a:	f000 fe73 	bl	800e624 <vPortExitCritical>

	return xReturn;
 800d93e:	69fb      	ldr	r3, [r7, #28]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3720      	adds	r7, #32
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	20001054 	.word	0x20001054
 800d94c:	20001068 	.word	0x20001068

0800d950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d950:	b480      	push	{r7}
 800d952:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d954:	4b03      	ldr	r3, [pc, #12]	; (800d964 <vTaskMissedYield+0x14>)
 800d956:	2201      	movs	r2, #1
 800d958:	601a      	str	r2, [r3, #0]
}
 800d95a:	bf00      	nop
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	20001064 	.word	0x20001064

0800d968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d970:	f000 f852 	bl	800da18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d974:	4b06      	ldr	r3, [pc, #24]	; (800d990 <prvIdleTask+0x28>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d9f9      	bls.n	800d970 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d97c:	4b05      	ldr	r3, [pc, #20]	; (800d994 <prvIdleTask+0x2c>)
 800d97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d982:	601a      	str	r2, [r3, #0]
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d98c:	e7f0      	b.n	800d970 <prvIdleTask+0x8>
 800d98e:	bf00      	nop
 800d990:	20000b80 	.word	0x20000b80
 800d994:	e000ed04 	.word	0xe000ed04

0800d998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d99e:	2300      	movs	r3, #0
 800d9a0:	607b      	str	r3, [r7, #4]
 800d9a2:	e00c      	b.n	800d9be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	4413      	add	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4a12      	ldr	r2, [pc, #72]	; (800d9f8 <prvInitialiseTaskLists+0x60>)
 800d9b0:	4413      	add	r3, r2
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fe fc36 	bl	800c224 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	607b      	str	r3, [r7, #4]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b37      	cmp	r3, #55	; 0x37
 800d9c2:	d9ef      	bls.n	800d9a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9c4:	480d      	ldr	r0, [pc, #52]	; (800d9fc <prvInitialiseTaskLists+0x64>)
 800d9c6:	f7fe fc2d 	bl	800c224 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9ca:	480d      	ldr	r0, [pc, #52]	; (800da00 <prvInitialiseTaskLists+0x68>)
 800d9cc:	f7fe fc2a 	bl	800c224 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9d0:	480c      	ldr	r0, [pc, #48]	; (800da04 <prvInitialiseTaskLists+0x6c>)
 800d9d2:	f7fe fc27 	bl	800c224 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9d6:	480c      	ldr	r0, [pc, #48]	; (800da08 <prvInitialiseTaskLists+0x70>)
 800d9d8:	f7fe fc24 	bl	800c224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9dc:	480b      	ldr	r0, [pc, #44]	; (800da0c <prvInitialiseTaskLists+0x74>)
 800d9de:	f7fe fc21 	bl	800c224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9e2:	4b0b      	ldr	r3, [pc, #44]	; (800da10 <prvInitialiseTaskLists+0x78>)
 800d9e4:	4a05      	ldr	r2, [pc, #20]	; (800d9fc <prvInitialiseTaskLists+0x64>)
 800d9e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9e8:	4b0a      	ldr	r3, [pc, #40]	; (800da14 <prvInitialiseTaskLists+0x7c>)
 800d9ea:	4a05      	ldr	r2, [pc, #20]	; (800da00 <prvInitialiseTaskLists+0x68>)
 800d9ec:	601a      	str	r2, [r3, #0]
}
 800d9ee:	bf00      	nop
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20000b80 	.word	0x20000b80
 800d9fc:	20000fe0 	.word	0x20000fe0
 800da00:	20000ff4 	.word	0x20000ff4
 800da04:	20001010 	.word	0x20001010
 800da08:	20001024 	.word	0x20001024
 800da0c:	2000103c 	.word	0x2000103c
 800da10:	20001008 	.word	0x20001008
 800da14:	2000100c 	.word	0x2000100c

0800da18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da1e:	e019      	b.n	800da54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da20:	f000 fdd0 	bl	800e5c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da24:	4b10      	ldr	r3, [pc, #64]	; (800da68 <prvCheckTasksWaitingTermination+0x50>)
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	3304      	adds	r3, #4
 800da30:	4618      	mov	r0, r3
 800da32:	f7fe fc81 	bl	800c338 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da36:	4b0d      	ldr	r3, [pc, #52]	; (800da6c <prvCheckTasksWaitingTermination+0x54>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	3b01      	subs	r3, #1
 800da3c:	4a0b      	ldr	r2, [pc, #44]	; (800da6c <prvCheckTasksWaitingTermination+0x54>)
 800da3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da40:	4b0b      	ldr	r3, [pc, #44]	; (800da70 <prvCheckTasksWaitingTermination+0x58>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3b01      	subs	r3, #1
 800da46:	4a0a      	ldr	r2, [pc, #40]	; (800da70 <prvCheckTasksWaitingTermination+0x58>)
 800da48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da4a:	f000 fdeb 	bl	800e624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 f810 	bl	800da74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da54:	4b06      	ldr	r3, [pc, #24]	; (800da70 <prvCheckTasksWaitingTermination+0x58>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1e1      	bne.n	800da20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da5c:	bf00      	nop
 800da5e:	bf00      	nop
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	20001024 	.word	0x20001024
 800da6c:	20001050 	.word	0x20001050
 800da70:	20001038 	.word	0x20001038

0800da74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da82:	2b00      	cmp	r3, #0
 800da84:	d108      	bne.n	800da98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da8a:	4618      	mov	r0, r3
 800da8c:	f000 ff88 	bl	800e9a0 <vPortFree>
				vPortFree( pxTCB );
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 ff85 	bl	800e9a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da96:	e018      	b.n	800daca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d103      	bne.n	800daaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 ff7c 	bl	800e9a0 <vPortFree>
	}
 800daa8:	e00f      	b.n	800daca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	d00a      	beq.n	800daca <prvDeleteTCB+0x56>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	60fb      	str	r3, [r7, #12]
}
 800dac6:	bf00      	nop
 800dac8:	e7fe      	b.n	800dac8 <prvDeleteTCB+0x54>
	}
 800daca:	bf00      	nop
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dada:	4b0c      	ldr	r3, [pc, #48]	; (800db0c <prvResetNextTaskUnblockTime+0x38>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d104      	bne.n	800daee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dae4:	4b0a      	ldr	r3, [pc, #40]	; (800db10 <prvResetNextTaskUnblockTime+0x3c>)
 800dae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800daea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800daec:	e008      	b.n	800db00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daee:	4b07      	ldr	r3, [pc, #28]	; (800db0c <prvResetNextTaskUnblockTime+0x38>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	4a04      	ldr	r2, [pc, #16]	; (800db10 <prvResetNextTaskUnblockTime+0x3c>)
 800dafe:	6013      	str	r3, [r2, #0]
}
 800db00:	bf00      	nop
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr
 800db0c:	20001008 	.word	0x20001008
 800db10:	20001070 	.word	0x20001070

0800db14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db1a:	4b0b      	ldr	r3, [pc, #44]	; (800db48 <xTaskGetSchedulerState+0x34>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d102      	bne.n	800db28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db22:	2301      	movs	r3, #1
 800db24:	607b      	str	r3, [r7, #4]
 800db26:	e008      	b.n	800db3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db28:	4b08      	ldr	r3, [pc, #32]	; (800db4c <xTaskGetSchedulerState+0x38>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d102      	bne.n	800db36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db30:	2302      	movs	r3, #2
 800db32:	607b      	str	r3, [r7, #4]
 800db34:	e001      	b.n	800db3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db36:	2300      	movs	r3, #0
 800db38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db3a:	687b      	ldr	r3, [r7, #4]
	}
 800db3c:	4618      	mov	r0, r3
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	2000105c 	.word	0x2000105c
 800db4c:	20001078 	.word	0x20001078

0800db50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db5c:	2300      	movs	r3, #0
 800db5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d056      	beq.n	800dc14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db66:	4b2e      	ldr	r3, [pc, #184]	; (800dc20 <xTaskPriorityDisinherit+0xd0>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	693a      	ldr	r2, [r7, #16]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d00a      	beq.n	800db86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800db70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db74:	f383 8811 	msr	BASEPRI, r3
 800db78:	f3bf 8f6f 	isb	sy
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	60fb      	str	r3, [r7, #12]
}
 800db82:	bf00      	nop
 800db84:	e7fe      	b.n	800db84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10a      	bne.n	800dba4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	60bb      	str	r3, [r7, #8]
}
 800dba0:	bf00      	nop
 800dba2:	e7fe      	b.n	800dba2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dba8:	1e5a      	subs	r2, r3, #1
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d02c      	beq.n	800dc14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d128      	bne.n	800dc14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fe fbb6 	bl	800c338 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe4:	4b0f      	ldr	r3, [pc, #60]	; (800dc24 <xTaskPriorityDisinherit+0xd4>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d903      	bls.n	800dbf4 <xTaskPriorityDisinherit+0xa4>
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf0:	4a0c      	ldr	r2, [pc, #48]	; (800dc24 <xTaskPriorityDisinherit+0xd4>)
 800dbf2:	6013      	str	r3, [r2, #0]
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4413      	add	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4a09      	ldr	r2, [pc, #36]	; (800dc28 <xTaskPriorityDisinherit+0xd8>)
 800dc02:	441a      	add	r2, r3
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	3304      	adds	r3, #4
 800dc08:	4619      	mov	r1, r3
 800dc0a:	4610      	mov	r0, r2
 800dc0c:	f7fe fb37 	bl	800c27e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc10:	2301      	movs	r3, #1
 800dc12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc14:	697b      	ldr	r3, [r7, #20]
	}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3718      	adds	r7, #24
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	20000b7c 	.word	0x20000b7c
 800dc24:	20001058 	.word	0x20001058
 800dc28:	20000b80 	.word	0x20000b80

0800dc2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc36:	4b21      	ldr	r3, [pc, #132]	; (800dcbc <prvAddCurrentTaskToDelayedList+0x90>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc3c:	4b20      	ldr	r3, [pc, #128]	; (800dcc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	3304      	adds	r3, #4
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fe fb78 	bl	800c338 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc4e:	d10a      	bne.n	800dc66 <prvAddCurrentTaskToDelayedList+0x3a>
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d007      	beq.n	800dc66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc56:	4b1a      	ldr	r3, [pc, #104]	; (800dcc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	4819      	ldr	r0, [pc, #100]	; (800dcc4 <prvAddCurrentTaskToDelayedList+0x98>)
 800dc60:	f7fe fb0d 	bl	800c27e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc64:	e026      	b.n	800dcb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc66:	68fa      	ldr	r2, [r7, #12]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc6e:	4b14      	ldr	r3, [pc, #80]	; (800dcc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	68ba      	ldr	r2, [r7, #8]
 800dc74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc76:	68ba      	ldr	r2, [r7, #8]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d209      	bcs.n	800dc92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc7e:	4b12      	ldr	r3, [pc, #72]	; (800dcc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	4b0f      	ldr	r3, [pc, #60]	; (800dcc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	3304      	adds	r3, #4
 800dc88:	4619      	mov	r1, r3
 800dc8a:	4610      	mov	r0, r2
 800dc8c:	f7fe fb1b 	bl	800c2c6 <vListInsert>
}
 800dc90:	e010      	b.n	800dcb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc92:	4b0e      	ldr	r3, [pc, #56]	; (800dccc <prvAddCurrentTaskToDelayedList+0xa0>)
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	4b0a      	ldr	r3, [pc, #40]	; (800dcc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	3304      	adds	r3, #4
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	4610      	mov	r0, r2
 800dca0:	f7fe fb11 	bl	800c2c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dca4:	4b0a      	ldr	r3, [pc, #40]	; (800dcd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	68ba      	ldr	r2, [r7, #8]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d202      	bcs.n	800dcb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dcae:	4a08      	ldr	r2, [pc, #32]	; (800dcd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	6013      	str	r3, [r2, #0]
}
 800dcb4:	bf00      	nop
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	20001054 	.word	0x20001054
 800dcc0:	20000b7c 	.word	0x20000b7c
 800dcc4:	2000103c 	.word	0x2000103c
 800dcc8:	2000100c 	.word	0x2000100c
 800dccc:	20001008 	.word	0x20001008
 800dcd0:	20001070 	.word	0x20001070

0800dcd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b08a      	sub	sp, #40	; 0x28
 800dcd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dcde:	f000 fb07 	bl	800e2f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dce2:	4b1c      	ldr	r3, [pc, #112]	; (800dd54 <xTimerCreateTimerTask+0x80>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d021      	beq.n	800dd2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dcea:	2300      	movs	r3, #0
 800dcec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dcf2:	1d3a      	adds	r2, r7, #4
 800dcf4:	f107 0108 	add.w	r1, r7, #8
 800dcf8:	f107 030c 	add.w	r3, r7, #12
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7fe fa77 	bl	800c1f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dd02:	6879      	ldr	r1, [r7, #4]
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	9202      	str	r2, [sp, #8]
 800dd0a:	9301      	str	r3, [sp, #4]
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	2300      	movs	r3, #0
 800dd12:	460a      	mov	r2, r1
 800dd14:	4910      	ldr	r1, [pc, #64]	; (800dd58 <xTimerCreateTimerTask+0x84>)
 800dd16:	4811      	ldr	r0, [pc, #68]	; (800dd5c <xTimerCreateTimerTask+0x88>)
 800dd18:	f7ff f8de 	bl	800ced8 <xTaskCreateStatic>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	4a10      	ldr	r2, [pc, #64]	; (800dd60 <xTimerCreateTimerTask+0x8c>)
 800dd20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd22:	4b0f      	ldr	r3, [pc, #60]	; (800dd60 <xTimerCreateTimerTask+0x8c>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d001      	beq.n	800dd2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d10a      	bne.n	800dd4a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd38:	f383 8811 	msr	BASEPRI, r3
 800dd3c:	f3bf 8f6f 	isb	sy
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	613b      	str	r3, [r7, #16]
}
 800dd46:	bf00      	nop
 800dd48:	e7fe      	b.n	800dd48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dd4a:	697b      	ldr	r3, [r7, #20]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3718      	adds	r7, #24
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	200010ac 	.word	0x200010ac
 800dd58:	0800f5a4 	.word	0x0800f5a4
 800dd5c:	0800de99 	.word	0x0800de99
 800dd60:	200010b0 	.word	0x200010b0

0800dd64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b08a      	sub	sp, #40	; 0x28
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	607a      	str	r2, [r7, #4]
 800dd70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd72:	2300      	movs	r3, #0
 800dd74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10a      	bne.n	800dd92 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd80:	f383 8811 	msr	BASEPRI, r3
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	f3bf 8f4f 	dsb	sy
 800dd8c:	623b      	str	r3, [r7, #32]
}
 800dd8e:	bf00      	nop
 800dd90:	e7fe      	b.n	800dd90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd92:	4b1a      	ldr	r3, [pc, #104]	; (800ddfc <xTimerGenericCommand+0x98>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d02a      	beq.n	800ddf0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	2b05      	cmp	r3, #5
 800ddaa:	dc18      	bgt.n	800ddde <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ddac:	f7ff feb2 	bl	800db14 <xTaskGetSchedulerState>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b02      	cmp	r3, #2
 800ddb4:	d109      	bne.n	800ddca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ddb6:	4b11      	ldr	r3, [pc, #68]	; (800ddfc <xTimerGenericCommand+0x98>)
 800ddb8:	6818      	ldr	r0, [r3, #0]
 800ddba:	f107 0110 	add.w	r1, r7, #16
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddc2:	f7fe fc21 	bl	800c608 <xQueueGenericSend>
 800ddc6:	6278      	str	r0, [r7, #36]	; 0x24
 800ddc8:	e012      	b.n	800ddf0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddca:	4b0c      	ldr	r3, [pc, #48]	; (800ddfc <xTimerGenericCommand+0x98>)
 800ddcc:	6818      	ldr	r0, [r3, #0]
 800ddce:	f107 0110 	add.w	r1, r7, #16
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f7fe fc17 	bl	800c608 <xQueueGenericSend>
 800ddda:	6278      	str	r0, [r7, #36]	; 0x24
 800dddc:	e008      	b.n	800ddf0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ddde:	4b07      	ldr	r3, [pc, #28]	; (800ddfc <xTimerGenericCommand+0x98>)
 800dde0:	6818      	ldr	r0, [r3, #0]
 800dde2:	f107 0110 	add.w	r1, r7, #16
 800dde6:	2300      	movs	r3, #0
 800dde8:	683a      	ldr	r2, [r7, #0]
 800ddea:	f7fe fd0b 	bl	800c804 <xQueueGenericSendFromISR>
 800ddee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ddf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3728      	adds	r7, #40	; 0x28
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	200010ac 	.word	0x200010ac

0800de00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b088      	sub	sp, #32
 800de04:	af02      	add	r7, sp, #8
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de0a:	4b22      	ldr	r3, [pc, #136]	; (800de94 <prvProcessExpiredTimer+0x94>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	3304      	adds	r3, #4
 800de18:	4618      	mov	r0, r3
 800de1a:	f7fe fa8d 	bl	800c338 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de24:	f003 0304 	and.w	r3, r3, #4
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d022      	beq.n	800de72 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	699a      	ldr	r2, [r3, #24]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	18d1      	adds	r1, r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	683a      	ldr	r2, [r7, #0]
 800de38:	6978      	ldr	r0, [r7, #20]
 800de3a:	f000 f8d1 	bl	800dfe0 <prvInsertTimerInActiveList>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d01f      	beq.n	800de84 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de44:	2300      	movs	r3, #0
 800de46:	9300      	str	r3, [sp, #0]
 800de48:	2300      	movs	r3, #0
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	2100      	movs	r1, #0
 800de4e:	6978      	ldr	r0, [r7, #20]
 800de50:	f7ff ff88 	bl	800dd64 <xTimerGenericCommand>
 800de54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d113      	bne.n	800de84 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800de5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de60:	f383 8811 	msr	BASEPRI, r3
 800de64:	f3bf 8f6f 	isb	sy
 800de68:	f3bf 8f4f 	dsb	sy
 800de6c:	60fb      	str	r3, [r7, #12]
}
 800de6e:	bf00      	nop
 800de70:	e7fe      	b.n	800de70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de78:	f023 0301 	bic.w	r3, r3, #1
 800de7c:	b2da      	uxtb	r2, r3
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	6a1b      	ldr	r3, [r3, #32]
 800de88:	6978      	ldr	r0, [r7, #20]
 800de8a:	4798      	blx	r3
}
 800de8c:	bf00      	nop
 800de8e:	3718      	adds	r7, #24
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	200010a4 	.word	0x200010a4

0800de98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dea0:	f107 0308 	add.w	r3, r7, #8
 800dea4:	4618      	mov	r0, r3
 800dea6:	f000 f857 	bl	800df58 <prvGetNextExpireTime>
 800deaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	4619      	mov	r1, r3
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 f803 	bl	800debc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800deb6:	f000 f8d5 	bl	800e064 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800deba:	e7f1      	b.n	800dea0 <prvTimerTask+0x8>

0800debc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dec6:	f7ff fa43 	bl	800d350 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800deca:	f107 0308 	add.w	r3, r7, #8
 800dece:	4618      	mov	r0, r3
 800ded0:	f000 f866 	bl	800dfa0 <prvSampleTimeNow>
 800ded4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d130      	bne.n	800df3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d10a      	bne.n	800def8 <prvProcessTimerOrBlockTask+0x3c>
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d806      	bhi.n	800def8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800deea:	f7ff fa3f 	bl	800d36c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800deee:	68f9      	ldr	r1, [r7, #12]
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7ff ff85 	bl	800de00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800def6:	e024      	b.n	800df42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d008      	beq.n	800df10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800defe:	4b13      	ldr	r3, [pc, #76]	; (800df4c <prvProcessTimerOrBlockTask+0x90>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d101      	bne.n	800df0c <prvProcessTimerOrBlockTask+0x50>
 800df08:	2301      	movs	r3, #1
 800df0a:	e000      	b.n	800df0e <prvProcessTimerOrBlockTask+0x52>
 800df0c:	2300      	movs	r3, #0
 800df0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df10:	4b0f      	ldr	r3, [pc, #60]	; (800df50 <prvProcessTimerOrBlockTask+0x94>)
 800df12:	6818      	ldr	r0, [r3, #0]
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	683a      	ldr	r2, [r7, #0]
 800df1c:	4619      	mov	r1, r3
 800df1e:	f7fe ffa7 	bl	800ce70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df22:	f7ff fa23 	bl	800d36c <xTaskResumeAll>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d10a      	bne.n	800df42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df2c:	4b09      	ldr	r3, [pc, #36]	; (800df54 <prvProcessTimerOrBlockTask+0x98>)
 800df2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	f3bf 8f6f 	isb	sy
}
 800df3c:	e001      	b.n	800df42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df3e:	f7ff fa15 	bl	800d36c <xTaskResumeAll>
}
 800df42:	bf00      	nop
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	200010a8 	.word	0x200010a8
 800df50:	200010ac 	.word	0x200010ac
 800df54:	e000ed04 	.word	0xe000ed04

0800df58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df58:	b480      	push	{r7}
 800df5a:	b085      	sub	sp, #20
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df60:	4b0e      	ldr	r3, [pc, #56]	; (800df9c <prvGetNextExpireTime+0x44>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <prvGetNextExpireTime+0x16>
 800df6a:	2201      	movs	r2, #1
 800df6c:	e000      	b.n	800df70 <prvGetNextExpireTime+0x18>
 800df6e:	2200      	movs	r2, #0
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d105      	bne.n	800df88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df7c:	4b07      	ldr	r3, [pc, #28]	; (800df9c <prvGetNextExpireTime+0x44>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	60fb      	str	r3, [r7, #12]
 800df86:	e001      	b.n	800df8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df88:	2300      	movs	r3, #0
 800df8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df8c:	68fb      	ldr	r3, [r7, #12]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3714      	adds	r7, #20
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	200010a4 	.word	0x200010a4

0800dfa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dfa8:	f7ff fa7e 	bl	800d4a8 <xTaskGetTickCount>
 800dfac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dfae:	4b0b      	ldr	r3, [pc, #44]	; (800dfdc <prvSampleTimeNow+0x3c>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d205      	bcs.n	800dfc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dfb8:	f000 f936 	bl	800e228 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	601a      	str	r2, [r3, #0]
 800dfc2:	e002      	b.n	800dfca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dfca:	4a04      	ldr	r2, [pc, #16]	; (800dfdc <prvSampleTimeNow+0x3c>)
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	200010b4 	.word	0x200010b4

0800dfe0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
 800dfec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dfee:	2300      	movs	r3, #0
 800dff0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	68ba      	ldr	r2, [r7, #8]
 800dff6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	429a      	cmp	r2, r3
 800e004:	d812      	bhi.n	800e02c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	1ad2      	subs	r2, r2, r3
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	429a      	cmp	r2, r3
 800e012:	d302      	bcc.n	800e01a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e014:	2301      	movs	r3, #1
 800e016:	617b      	str	r3, [r7, #20]
 800e018:	e01b      	b.n	800e052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e01a:	4b10      	ldr	r3, [pc, #64]	; (800e05c <prvInsertTimerInActiveList+0x7c>)
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	3304      	adds	r3, #4
 800e022:	4619      	mov	r1, r3
 800e024:	4610      	mov	r0, r2
 800e026:	f7fe f94e 	bl	800c2c6 <vListInsert>
 800e02a:	e012      	b.n	800e052 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	429a      	cmp	r2, r3
 800e032:	d206      	bcs.n	800e042 <prvInsertTimerInActiveList+0x62>
 800e034:	68ba      	ldr	r2, [r7, #8]
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d302      	bcc.n	800e042 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e03c:	2301      	movs	r3, #1
 800e03e:	617b      	str	r3, [r7, #20]
 800e040:	e007      	b.n	800e052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e042:	4b07      	ldr	r3, [pc, #28]	; (800e060 <prvInsertTimerInActiveList+0x80>)
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	3304      	adds	r3, #4
 800e04a:	4619      	mov	r1, r3
 800e04c:	4610      	mov	r0, r2
 800e04e:	f7fe f93a 	bl	800c2c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e052:	697b      	ldr	r3, [r7, #20]
}
 800e054:	4618      	mov	r0, r3
 800e056:	3718      	adds	r7, #24
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	200010a8 	.word	0x200010a8
 800e060:	200010a4 	.word	0x200010a4

0800e064 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08e      	sub	sp, #56	; 0x38
 800e068:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e06a:	e0ca      	b.n	800e202 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	da18      	bge.n	800e0a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e072:	1d3b      	adds	r3, r7, #4
 800e074:	3304      	adds	r3, #4
 800e076:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10a      	bne.n	800e094 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	61fb      	str	r3, [r7, #28]
}
 800e090:	bf00      	nop
 800e092:	e7fe      	b.n	800e092 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e09a:	6850      	ldr	r0, [r2, #4]
 800e09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e09e:	6892      	ldr	r2, [r2, #8]
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f2c0 80aa 	blt.w	800e200 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b2:	695b      	ldr	r3, [r3, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d004      	beq.n	800e0c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fe f93b 	bl	800c338 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0c2:	463b      	mov	r3, r7
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff ff6b 	bl	800dfa0 <prvSampleTimeNow>
 800e0ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b09      	cmp	r3, #9
 800e0d0:	f200 8097 	bhi.w	800e202 <prvProcessReceivedCommands+0x19e>
 800e0d4:	a201      	add	r2, pc, #4	; (adr r2, 800e0dc <prvProcessReceivedCommands+0x78>)
 800e0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0da:	bf00      	nop
 800e0dc:	0800e105 	.word	0x0800e105
 800e0e0:	0800e105 	.word	0x0800e105
 800e0e4:	0800e105 	.word	0x0800e105
 800e0e8:	0800e179 	.word	0x0800e179
 800e0ec:	0800e18d 	.word	0x0800e18d
 800e0f0:	0800e1d7 	.word	0x0800e1d7
 800e0f4:	0800e105 	.word	0x0800e105
 800e0f8:	0800e105 	.word	0x0800e105
 800e0fc:	0800e179 	.word	0x0800e179
 800e100:	0800e18d 	.word	0x0800e18d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e10a:	f043 0301 	orr.w	r3, r3, #1
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	18d1      	adds	r1, r2, r3
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e124:	f7ff ff5c 	bl	800dfe0 <prvInsertTimerInActiveList>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d069      	beq.n	800e202 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e130:	6a1b      	ldr	r3, [r3, #32]
 800e132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e134:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e13c:	f003 0304 	and.w	r3, r3, #4
 800e140:	2b00      	cmp	r3, #0
 800e142:	d05e      	beq.n	800e202 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e144:	68ba      	ldr	r2, [r7, #8]
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	441a      	add	r2, r3
 800e14c:	2300      	movs	r3, #0
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	2300      	movs	r3, #0
 800e152:	2100      	movs	r1, #0
 800e154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e156:	f7ff fe05 	bl	800dd64 <xTimerGenericCommand>
 800e15a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d14f      	bne.n	800e202 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	61bb      	str	r3, [r7, #24]
}
 800e174:	bf00      	nop
 800e176:	e7fe      	b.n	800e176 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e17e:	f023 0301 	bic.w	r3, r3, #1
 800e182:	b2da      	uxtb	r2, r3
 800e184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e18a:	e03a      	b.n	800e202 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e192:	f043 0301 	orr.w	r3, r3, #1
 800e196:	b2da      	uxtb	r2, r3
 800e198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e19e:	68ba      	ldr	r2, [r7, #8]
 800e1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10a      	bne.n	800e1c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b0:	f383 8811 	msr	BASEPRI, r3
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	f3bf 8f4f 	dsb	sy
 800e1bc:	617b      	str	r3, [r7, #20]
}
 800e1be:	bf00      	nop
 800e1c0:	e7fe      	b.n	800e1c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c4:	699a      	ldr	r2, [r3, #24]
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	18d1      	adds	r1, r2, r3
 800e1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1d0:	f7ff ff06 	bl	800dfe0 <prvInsertTimerInActiveList>
					break;
 800e1d4:	e015      	b.n	800e202 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1dc:	f003 0302 	and.w	r3, r3, #2
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d103      	bne.n	800e1ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1e6:	f000 fbdb 	bl	800e9a0 <vPortFree>
 800e1ea:	e00a      	b.n	800e202 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1f2:	f023 0301 	bic.w	r3, r3, #1
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e1fe:	e000      	b.n	800e202 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e200:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e202:	4b08      	ldr	r3, [pc, #32]	; (800e224 <prvProcessReceivedCommands+0x1c0>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	1d39      	adds	r1, r7, #4
 800e208:	2200      	movs	r2, #0
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe fb96 	bl	800c93c <xQueueReceive>
 800e210:	4603      	mov	r3, r0
 800e212:	2b00      	cmp	r3, #0
 800e214:	f47f af2a 	bne.w	800e06c <prvProcessReceivedCommands+0x8>
	}
}
 800e218:	bf00      	nop
 800e21a:	bf00      	nop
 800e21c:	3730      	adds	r7, #48	; 0x30
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	200010ac 	.word	0x200010ac

0800e228 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e22e:	e048      	b.n	800e2c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e230:	4b2d      	ldr	r3, [pc, #180]	; (800e2e8 <prvSwitchTimerLists+0xc0>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e23a:	4b2b      	ldr	r3, [pc, #172]	; (800e2e8 <prvSwitchTimerLists+0xc0>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	68db      	ldr	r3, [r3, #12]
 800e242:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	3304      	adds	r3, #4
 800e248:	4618      	mov	r0, r3
 800e24a:	f7fe f875 	bl	800c338 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	6a1b      	ldr	r3, [r3, #32]
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e25c:	f003 0304 	and.w	r3, r3, #4
 800e260:	2b00      	cmp	r3, #0
 800e262:	d02e      	beq.n	800e2c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	699b      	ldr	r3, [r3, #24]
 800e268:	693a      	ldr	r2, [r7, #16]
 800e26a:	4413      	add	r3, r2
 800e26c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	429a      	cmp	r2, r3
 800e274:	d90e      	bls.n	800e294 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e282:	4b19      	ldr	r3, [pc, #100]	; (800e2e8 <prvSwitchTimerLists+0xc0>)
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	3304      	adds	r3, #4
 800e28a:	4619      	mov	r1, r3
 800e28c:	4610      	mov	r0, r2
 800e28e:	f7fe f81a 	bl	800c2c6 <vListInsert>
 800e292:	e016      	b.n	800e2c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e294:	2300      	movs	r3, #0
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	2300      	movs	r3, #0
 800e29a:	693a      	ldr	r2, [r7, #16]
 800e29c:	2100      	movs	r1, #0
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	f7ff fd60 	bl	800dd64 <xTimerGenericCommand>
 800e2a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d10a      	bne.n	800e2c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b0:	f383 8811 	msr	BASEPRI, r3
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	603b      	str	r3, [r7, #0]
}
 800e2be:	bf00      	nop
 800e2c0:	e7fe      	b.n	800e2c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2c2:	4b09      	ldr	r3, [pc, #36]	; (800e2e8 <prvSwitchTimerLists+0xc0>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1b1      	bne.n	800e230 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2cc:	4b06      	ldr	r3, [pc, #24]	; (800e2e8 <prvSwitchTimerLists+0xc0>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2d2:	4b06      	ldr	r3, [pc, #24]	; (800e2ec <prvSwitchTimerLists+0xc4>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a04      	ldr	r2, [pc, #16]	; (800e2e8 <prvSwitchTimerLists+0xc0>)
 800e2d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e2da:	4a04      	ldr	r2, [pc, #16]	; (800e2ec <prvSwitchTimerLists+0xc4>)
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	6013      	str	r3, [r2, #0]
}
 800e2e0:	bf00      	nop
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	200010a4 	.word	0x200010a4
 800e2ec:	200010a8 	.word	0x200010a8

0800e2f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e2f6:	f000 f965 	bl	800e5c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e2fa:	4b15      	ldr	r3, [pc, #84]	; (800e350 <prvCheckForValidListAndQueue+0x60>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d120      	bne.n	800e344 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e302:	4814      	ldr	r0, [pc, #80]	; (800e354 <prvCheckForValidListAndQueue+0x64>)
 800e304:	f7fd ff8e 	bl	800c224 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e308:	4813      	ldr	r0, [pc, #76]	; (800e358 <prvCheckForValidListAndQueue+0x68>)
 800e30a:	f7fd ff8b 	bl	800c224 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e30e:	4b13      	ldr	r3, [pc, #76]	; (800e35c <prvCheckForValidListAndQueue+0x6c>)
 800e310:	4a10      	ldr	r2, [pc, #64]	; (800e354 <prvCheckForValidListAndQueue+0x64>)
 800e312:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e314:	4b12      	ldr	r3, [pc, #72]	; (800e360 <prvCheckForValidListAndQueue+0x70>)
 800e316:	4a10      	ldr	r2, [pc, #64]	; (800e358 <prvCheckForValidListAndQueue+0x68>)
 800e318:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e31a:	2300      	movs	r3, #0
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	4b11      	ldr	r3, [pc, #68]	; (800e364 <prvCheckForValidListAndQueue+0x74>)
 800e320:	4a11      	ldr	r2, [pc, #68]	; (800e368 <prvCheckForValidListAndQueue+0x78>)
 800e322:	2110      	movs	r1, #16
 800e324:	200a      	movs	r0, #10
 800e326:	f7fe f899 	bl	800c45c <xQueueGenericCreateStatic>
 800e32a:	4603      	mov	r3, r0
 800e32c:	4a08      	ldr	r2, [pc, #32]	; (800e350 <prvCheckForValidListAndQueue+0x60>)
 800e32e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e330:	4b07      	ldr	r3, [pc, #28]	; (800e350 <prvCheckForValidListAndQueue+0x60>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d005      	beq.n	800e344 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e338:	4b05      	ldr	r3, [pc, #20]	; (800e350 <prvCheckForValidListAndQueue+0x60>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	490b      	ldr	r1, [pc, #44]	; (800e36c <prvCheckForValidListAndQueue+0x7c>)
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fe fd6c 	bl	800ce1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e344:	f000 f96e 	bl	800e624 <vPortExitCritical>
}
 800e348:	bf00      	nop
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	200010ac 	.word	0x200010ac
 800e354:	2000107c 	.word	0x2000107c
 800e358:	20001090 	.word	0x20001090
 800e35c:	200010a4 	.word	0x200010a4
 800e360:	200010a8 	.word	0x200010a8
 800e364:	20001158 	.word	0x20001158
 800e368:	200010b8 	.word	0x200010b8
 800e36c:	0800f5ac 	.word	0x0800f5ac

0800e370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	3b04      	subs	r3, #4
 800e380:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	3b04      	subs	r3, #4
 800e38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	f023 0201 	bic.w	r2, r3, #1
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	3b04      	subs	r3, #4
 800e39e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3a0:	4a0c      	ldr	r2, [pc, #48]	; (800e3d4 <pxPortInitialiseStack+0x64>)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	3b14      	subs	r3, #20
 800e3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3b04      	subs	r3, #4
 800e3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f06f 0202 	mvn.w	r2, #2
 800e3be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	3b20      	subs	r3, #32
 800e3c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3714      	adds	r7, #20
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr
 800e3d4:	0800e3d9 	.word	0x0800e3d9

0800e3d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b085      	sub	sp, #20
 800e3dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3e2:	4b12      	ldr	r3, [pc, #72]	; (800e42c <prvTaskExitError+0x54>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3ea:	d00a      	beq.n	800e402 <prvTaskExitError+0x2a>
	__asm volatile
 800e3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f0:	f383 8811 	msr	BASEPRI, r3
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	60fb      	str	r3, [r7, #12]
}
 800e3fe:	bf00      	nop
 800e400:	e7fe      	b.n	800e400 <prvTaskExitError+0x28>
	__asm volatile
 800e402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e406:	f383 8811 	msr	BASEPRI, r3
 800e40a:	f3bf 8f6f 	isb	sy
 800e40e:	f3bf 8f4f 	dsb	sy
 800e412:	60bb      	str	r3, [r7, #8]
}
 800e414:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e416:	bf00      	nop
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d0fc      	beq.n	800e418 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e41e:	bf00      	nop
 800e420:	bf00      	nop
 800e422:	3714      	adds	r7, #20
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	2000002c 	.word	0x2000002c

0800e430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e430:	4b07      	ldr	r3, [pc, #28]	; (800e450 <pxCurrentTCBConst2>)
 800e432:	6819      	ldr	r1, [r3, #0]
 800e434:	6808      	ldr	r0, [r1, #0]
 800e436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43a:	f380 8809 	msr	PSP, r0
 800e43e:	f3bf 8f6f 	isb	sy
 800e442:	f04f 0000 	mov.w	r0, #0
 800e446:	f380 8811 	msr	BASEPRI, r0
 800e44a:	4770      	bx	lr
 800e44c:	f3af 8000 	nop.w

0800e450 <pxCurrentTCBConst2>:
 800e450:	20000b7c 	.word	0x20000b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e454:	bf00      	nop
 800e456:	bf00      	nop

0800e458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e458:	4808      	ldr	r0, [pc, #32]	; (800e47c <prvPortStartFirstTask+0x24>)
 800e45a:	6800      	ldr	r0, [r0, #0]
 800e45c:	6800      	ldr	r0, [r0, #0]
 800e45e:	f380 8808 	msr	MSP, r0
 800e462:	f04f 0000 	mov.w	r0, #0
 800e466:	f380 8814 	msr	CONTROL, r0
 800e46a:	b662      	cpsie	i
 800e46c:	b661      	cpsie	f
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	f3bf 8f6f 	isb	sy
 800e476:	df00      	svc	0
 800e478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e47a:	bf00      	nop
 800e47c:	e000ed08 	.word	0xe000ed08

0800e480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e486:	4b46      	ldr	r3, [pc, #280]	; (800e5a0 <xPortStartScheduler+0x120>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a46      	ldr	r2, [pc, #280]	; (800e5a4 <xPortStartScheduler+0x124>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d10a      	bne.n	800e4a6 <xPortStartScheduler+0x26>
	__asm volatile
 800e490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e494:	f383 8811 	msr	BASEPRI, r3
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	613b      	str	r3, [r7, #16]
}
 800e4a2:	bf00      	nop
 800e4a4:	e7fe      	b.n	800e4a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e4a6:	4b3e      	ldr	r3, [pc, #248]	; (800e5a0 <xPortStartScheduler+0x120>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4a3f      	ldr	r2, [pc, #252]	; (800e5a8 <xPortStartScheduler+0x128>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d10a      	bne.n	800e4c6 <xPortStartScheduler+0x46>
	__asm volatile
 800e4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b4:	f383 8811 	msr	BASEPRI, r3
 800e4b8:	f3bf 8f6f 	isb	sy
 800e4bc:	f3bf 8f4f 	dsb	sy
 800e4c0:	60fb      	str	r3, [r7, #12]
}
 800e4c2:	bf00      	nop
 800e4c4:	e7fe      	b.n	800e4c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e4c6:	4b39      	ldr	r3, [pc, #228]	; (800e5ac <xPortStartScheduler+0x12c>)
 800e4c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	22ff      	movs	r2, #255	; 0xff
 800e4d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e4e0:	78fb      	ldrb	r3, [r7, #3]
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e4e8:	b2da      	uxtb	r2, r3
 800e4ea:	4b31      	ldr	r3, [pc, #196]	; (800e5b0 <xPortStartScheduler+0x130>)
 800e4ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e4ee:	4b31      	ldr	r3, [pc, #196]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e4f0:	2207      	movs	r2, #7
 800e4f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4f4:	e009      	b.n	800e50a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e4f6:	4b2f      	ldr	r3, [pc, #188]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	4a2d      	ldr	r2, [pc, #180]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e4fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e500:	78fb      	ldrb	r3, [r7, #3]
 800e502:	b2db      	uxtb	r3, r3
 800e504:	005b      	lsls	r3, r3, #1
 800e506:	b2db      	uxtb	r3, r3
 800e508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e50a:	78fb      	ldrb	r3, [r7, #3]
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e512:	2b80      	cmp	r3, #128	; 0x80
 800e514:	d0ef      	beq.n	800e4f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e516:	4b27      	ldr	r3, [pc, #156]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f1c3 0307 	rsb	r3, r3, #7
 800e51e:	2b04      	cmp	r3, #4
 800e520:	d00a      	beq.n	800e538 <xPortStartScheduler+0xb8>
	__asm volatile
 800e522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e526:	f383 8811 	msr	BASEPRI, r3
 800e52a:	f3bf 8f6f 	isb	sy
 800e52e:	f3bf 8f4f 	dsb	sy
 800e532:	60bb      	str	r3, [r7, #8]
}
 800e534:	bf00      	nop
 800e536:	e7fe      	b.n	800e536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e538:	4b1e      	ldr	r3, [pc, #120]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	021b      	lsls	r3, r3, #8
 800e53e:	4a1d      	ldr	r2, [pc, #116]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e542:	4b1c      	ldr	r3, [pc, #112]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e54a:	4a1a      	ldr	r2, [pc, #104]	; (800e5b4 <xPortStartScheduler+0x134>)
 800e54c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	b2da      	uxtb	r2, r3
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e556:	4b18      	ldr	r3, [pc, #96]	; (800e5b8 <xPortStartScheduler+0x138>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a17      	ldr	r2, [pc, #92]	; (800e5b8 <xPortStartScheduler+0x138>)
 800e55c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e562:	4b15      	ldr	r3, [pc, #84]	; (800e5b8 <xPortStartScheduler+0x138>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	4a14      	ldr	r2, [pc, #80]	; (800e5b8 <xPortStartScheduler+0x138>)
 800e568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e56c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e56e:	f000 f8dd 	bl	800e72c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e572:	4b12      	ldr	r3, [pc, #72]	; (800e5bc <xPortStartScheduler+0x13c>)
 800e574:	2200      	movs	r2, #0
 800e576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e578:	f000 f8fc 	bl	800e774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e57c:	4b10      	ldr	r3, [pc, #64]	; (800e5c0 <xPortStartScheduler+0x140>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a0f      	ldr	r2, [pc, #60]	; (800e5c0 <xPortStartScheduler+0x140>)
 800e582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e588:	f7ff ff66 	bl	800e458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e58c:	f7ff f856 	bl	800d63c <vTaskSwitchContext>
	prvTaskExitError();
 800e590:	f7ff ff22 	bl	800e3d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	e000ed00 	.word	0xe000ed00
 800e5a4:	410fc271 	.word	0x410fc271
 800e5a8:	410fc270 	.word	0x410fc270
 800e5ac:	e000e400 	.word	0xe000e400
 800e5b0:	200011a8 	.word	0x200011a8
 800e5b4:	200011ac 	.word	0x200011ac
 800e5b8:	e000ed20 	.word	0xe000ed20
 800e5bc:	2000002c 	.word	0x2000002c
 800e5c0:	e000ef34 	.word	0xe000ef34

0800e5c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
	__asm volatile
 800e5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ce:	f383 8811 	msr	BASEPRI, r3
 800e5d2:	f3bf 8f6f 	isb	sy
 800e5d6:	f3bf 8f4f 	dsb	sy
 800e5da:	607b      	str	r3, [r7, #4]
}
 800e5dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e5de:	4b0f      	ldr	r3, [pc, #60]	; (800e61c <vPortEnterCritical+0x58>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	4a0d      	ldr	r2, [pc, #52]	; (800e61c <vPortEnterCritical+0x58>)
 800e5e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e5e8:	4b0c      	ldr	r3, [pc, #48]	; (800e61c <vPortEnterCritical+0x58>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d10f      	bne.n	800e610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e5f0:	4b0b      	ldr	r3, [pc, #44]	; (800e620 <vPortEnterCritical+0x5c>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00a      	beq.n	800e610 <vPortEnterCritical+0x4c>
	__asm volatile
 800e5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fe:	f383 8811 	msr	BASEPRI, r3
 800e602:	f3bf 8f6f 	isb	sy
 800e606:	f3bf 8f4f 	dsb	sy
 800e60a:	603b      	str	r3, [r7, #0]
}
 800e60c:	bf00      	nop
 800e60e:	e7fe      	b.n	800e60e <vPortEnterCritical+0x4a>
	}
}
 800e610:	bf00      	nop
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr
 800e61c:	2000002c 	.word	0x2000002c
 800e620:	e000ed04 	.word	0xe000ed04

0800e624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e62a:	4b12      	ldr	r3, [pc, #72]	; (800e674 <vPortExitCritical+0x50>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d10a      	bne.n	800e648 <vPortExitCritical+0x24>
	__asm volatile
 800e632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e636:	f383 8811 	msr	BASEPRI, r3
 800e63a:	f3bf 8f6f 	isb	sy
 800e63e:	f3bf 8f4f 	dsb	sy
 800e642:	607b      	str	r3, [r7, #4]
}
 800e644:	bf00      	nop
 800e646:	e7fe      	b.n	800e646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e648:	4b0a      	ldr	r3, [pc, #40]	; (800e674 <vPortExitCritical+0x50>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	3b01      	subs	r3, #1
 800e64e:	4a09      	ldr	r2, [pc, #36]	; (800e674 <vPortExitCritical+0x50>)
 800e650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e652:	4b08      	ldr	r3, [pc, #32]	; (800e674 <vPortExitCritical+0x50>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d105      	bne.n	800e666 <vPortExitCritical+0x42>
 800e65a:	2300      	movs	r3, #0
 800e65c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	f383 8811 	msr	BASEPRI, r3
}
 800e664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e666:	bf00      	nop
 800e668:	370c      	adds	r7, #12
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr
 800e672:	bf00      	nop
 800e674:	2000002c 	.word	0x2000002c
	...

0800e680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e680:	f3ef 8009 	mrs	r0, PSP
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	4b15      	ldr	r3, [pc, #84]	; (800e6e0 <pxCurrentTCBConst>)
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	f01e 0f10 	tst.w	lr, #16
 800e690:	bf08      	it	eq
 800e692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e69a:	6010      	str	r0, [r2, #0]
 800e69c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e6a4:	f380 8811 	msr	BASEPRI, r0
 800e6a8:	f3bf 8f4f 	dsb	sy
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f7fe ffc4 	bl	800d63c <vTaskSwitchContext>
 800e6b4:	f04f 0000 	mov.w	r0, #0
 800e6b8:	f380 8811 	msr	BASEPRI, r0
 800e6bc:	bc09      	pop	{r0, r3}
 800e6be:	6819      	ldr	r1, [r3, #0]
 800e6c0:	6808      	ldr	r0, [r1, #0]
 800e6c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c6:	f01e 0f10 	tst.w	lr, #16
 800e6ca:	bf08      	it	eq
 800e6cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e6d0:	f380 8809 	msr	PSP, r0
 800e6d4:	f3bf 8f6f 	isb	sy
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	f3af 8000 	nop.w

0800e6e0 <pxCurrentTCBConst>:
 800e6e0:	20000b7c 	.word	0x20000b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e6e4:	bf00      	nop
 800e6e6:	bf00      	nop

0800e6e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	607b      	str	r3, [r7, #4]
}
 800e700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e702:	f7fe fee1 	bl	800d4c8 <xTaskIncrementTick>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d003      	beq.n	800e714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e70c:	4b06      	ldr	r3, [pc, #24]	; (800e728 <xPortSysTickHandler+0x40>)
 800e70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e712:	601a      	str	r2, [r3, #0]
 800e714:	2300      	movs	r3, #0
 800e716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	f383 8811 	msr	BASEPRI, r3
}
 800e71e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e720:	bf00      	nop
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	e000ed04 	.word	0xe000ed04

0800e72c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e72c:	b480      	push	{r7}
 800e72e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e730:	4b0b      	ldr	r3, [pc, #44]	; (800e760 <vPortSetupTimerInterrupt+0x34>)
 800e732:	2200      	movs	r2, #0
 800e734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e736:	4b0b      	ldr	r3, [pc, #44]	; (800e764 <vPortSetupTimerInterrupt+0x38>)
 800e738:	2200      	movs	r2, #0
 800e73a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e73c:	4b0a      	ldr	r3, [pc, #40]	; (800e768 <vPortSetupTimerInterrupt+0x3c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4a0a      	ldr	r2, [pc, #40]	; (800e76c <vPortSetupTimerInterrupt+0x40>)
 800e742:	fba2 2303 	umull	r2, r3, r2, r3
 800e746:	099b      	lsrs	r3, r3, #6
 800e748:	4a09      	ldr	r2, [pc, #36]	; (800e770 <vPortSetupTimerInterrupt+0x44>)
 800e74a:	3b01      	subs	r3, #1
 800e74c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e74e:	4b04      	ldr	r3, [pc, #16]	; (800e760 <vPortSetupTimerInterrupt+0x34>)
 800e750:	2207      	movs	r2, #7
 800e752:	601a      	str	r2, [r3, #0]
}
 800e754:	bf00      	nop
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	e000e010 	.word	0xe000e010
 800e764:	e000e018 	.word	0xe000e018
 800e768:	20000000 	.word	0x20000000
 800e76c:	10624dd3 	.word	0x10624dd3
 800e770:	e000e014 	.word	0xe000e014

0800e774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e784 <vPortEnableVFP+0x10>
 800e778:	6801      	ldr	r1, [r0, #0]
 800e77a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e77e:	6001      	str	r1, [r0, #0]
 800e780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e782:	bf00      	nop
 800e784:	e000ed88 	.word	0xe000ed88

0800e788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e788:	b480      	push	{r7}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e78e:	f3ef 8305 	mrs	r3, IPSR
 800e792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b0f      	cmp	r3, #15
 800e798:	d914      	bls.n	800e7c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e79a:	4a17      	ldr	r2, [pc, #92]	; (800e7f8 <vPortValidateInterruptPriority+0x70>)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	4413      	add	r3, r2
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7a4:	4b15      	ldr	r3, [pc, #84]	; (800e7fc <vPortValidateInterruptPriority+0x74>)
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	7afa      	ldrb	r2, [r7, #11]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d20a      	bcs.n	800e7c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	607b      	str	r3, [r7, #4]
}
 800e7c0:	bf00      	nop
 800e7c2:	e7fe      	b.n	800e7c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e7c4:	4b0e      	ldr	r3, [pc, #56]	; (800e800 <vPortValidateInterruptPriority+0x78>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e7cc:	4b0d      	ldr	r3, [pc, #52]	; (800e804 <vPortValidateInterruptPriority+0x7c>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d90a      	bls.n	800e7ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d8:	f383 8811 	msr	BASEPRI, r3
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	f3bf 8f4f 	dsb	sy
 800e7e4:	603b      	str	r3, [r7, #0]
}
 800e7e6:	bf00      	nop
 800e7e8:	e7fe      	b.n	800e7e8 <vPortValidateInterruptPriority+0x60>
	}
 800e7ea:	bf00      	nop
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	e000e3f0 	.word	0xe000e3f0
 800e7fc:	200011a8 	.word	0x200011a8
 800e800:	e000ed0c 	.word	0xe000ed0c
 800e804:	200011ac 	.word	0x200011ac

0800e808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b08a      	sub	sp, #40	; 0x28
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e810:	2300      	movs	r3, #0
 800e812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e814:	f7fe fd9c 	bl	800d350 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e818:	4b5b      	ldr	r3, [pc, #364]	; (800e988 <pvPortMalloc+0x180>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d101      	bne.n	800e824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e820:	f000 f920 	bl	800ea64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e824:	4b59      	ldr	r3, [pc, #356]	; (800e98c <pvPortMalloc+0x184>)
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4013      	ands	r3, r2
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f040 8093 	bne.w	800e958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d01d      	beq.n	800e874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e838:	2208      	movs	r2, #8
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4413      	add	r3, r2
 800e83e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f003 0307 	and.w	r3, r3, #7
 800e846:	2b00      	cmp	r3, #0
 800e848:	d014      	beq.n	800e874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f023 0307 	bic.w	r3, r3, #7
 800e850:	3308      	adds	r3, #8
 800e852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f003 0307 	and.w	r3, r3, #7
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00a      	beq.n	800e874 <pvPortMalloc+0x6c>
	__asm volatile
 800e85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e862:	f383 8811 	msr	BASEPRI, r3
 800e866:	f3bf 8f6f 	isb	sy
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	617b      	str	r3, [r7, #20]
}
 800e870:	bf00      	nop
 800e872:	e7fe      	b.n	800e872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d06e      	beq.n	800e958 <pvPortMalloc+0x150>
 800e87a:	4b45      	ldr	r3, [pc, #276]	; (800e990 <pvPortMalloc+0x188>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	429a      	cmp	r2, r3
 800e882:	d869      	bhi.n	800e958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e884:	4b43      	ldr	r3, [pc, #268]	; (800e994 <pvPortMalloc+0x18c>)
 800e886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e888:	4b42      	ldr	r3, [pc, #264]	; (800e994 <pvPortMalloc+0x18c>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e88e:	e004      	b.n	800e89a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d903      	bls.n	800e8ac <pvPortMalloc+0xa4>
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d1f1      	bne.n	800e890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e8ac:	4b36      	ldr	r3, [pc, #216]	; (800e988 <pvPortMalloc+0x180>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d050      	beq.n	800e958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	2208      	movs	r2, #8
 800e8bc:	4413      	add	r3, r2
 800e8be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	6a3b      	ldr	r3, [r7, #32]
 800e8c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ca:	685a      	ldr	r2, [r3, #4]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	1ad2      	subs	r2, r2, r3
 800e8d0:	2308      	movs	r3, #8
 800e8d2:	005b      	lsls	r3, r3, #1
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d91f      	bls.n	800e918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4413      	add	r3, r2
 800e8de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	f003 0307 	and.w	r3, r3, #7
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00a      	beq.n	800e900 <pvPortMalloc+0xf8>
	__asm volatile
 800e8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ee:	f383 8811 	msr	BASEPRI, r3
 800e8f2:	f3bf 8f6f 	isb	sy
 800e8f6:	f3bf 8f4f 	dsb	sy
 800e8fa:	613b      	str	r3, [r7, #16]
}
 800e8fc:	bf00      	nop
 800e8fe:	e7fe      	b.n	800e8fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e902:	685a      	ldr	r2, [r3, #4]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	1ad2      	subs	r2, r2, r3
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e912:	69b8      	ldr	r0, [r7, #24]
 800e914:	f000 f908 	bl	800eb28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e918:	4b1d      	ldr	r3, [pc, #116]	; (800e990 <pvPortMalloc+0x188>)
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	4a1b      	ldr	r2, [pc, #108]	; (800e990 <pvPortMalloc+0x188>)
 800e924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e926:	4b1a      	ldr	r3, [pc, #104]	; (800e990 <pvPortMalloc+0x188>)
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	4b1b      	ldr	r3, [pc, #108]	; (800e998 <pvPortMalloc+0x190>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d203      	bcs.n	800e93a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e932:	4b17      	ldr	r3, [pc, #92]	; (800e990 <pvPortMalloc+0x188>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a18      	ldr	r2, [pc, #96]	; (800e998 <pvPortMalloc+0x190>)
 800e938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93c:	685a      	ldr	r2, [r3, #4]
 800e93e:	4b13      	ldr	r3, [pc, #76]	; (800e98c <pvPortMalloc+0x184>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	431a      	orrs	r2, r3
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94a:	2200      	movs	r2, #0
 800e94c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e94e:	4b13      	ldr	r3, [pc, #76]	; (800e99c <pvPortMalloc+0x194>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3301      	adds	r3, #1
 800e954:	4a11      	ldr	r2, [pc, #68]	; (800e99c <pvPortMalloc+0x194>)
 800e956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e958:	f7fe fd08 	bl	800d36c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	f003 0307 	and.w	r3, r3, #7
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00a      	beq.n	800e97c <pvPortMalloc+0x174>
	__asm volatile
 800e966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96a:	f383 8811 	msr	BASEPRI, r3
 800e96e:	f3bf 8f6f 	isb	sy
 800e972:	f3bf 8f4f 	dsb	sy
 800e976:	60fb      	str	r3, [r7, #12]
}
 800e978:	bf00      	nop
 800e97a:	e7fe      	b.n	800e97a <pvPortMalloc+0x172>
	return pvReturn;
 800e97c:	69fb      	ldr	r3, [r7, #28]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3728      	adds	r7, #40	; 0x28
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	20004db8 	.word	0x20004db8
 800e98c:	20004dcc 	.word	0x20004dcc
 800e990:	20004dbc 	.word	0x20004dbc
 800e994:	20004db0 	.word	0x20004db0
 800e998:	20004dc0 	.word	0x20004dc0
 800e99c:	20004dc4 	.word	0x20004dc4

0800e9a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b086      	sub	sp, #24
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d04d      	beq.n	800ea4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e9b2:	2308      	movs	r3, #8
 800e9b4:	425b      	negs	r3, r3
 800e9b6:	697a      	ldr	r2, [r7, #20]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	685a      	ldr	r2, [r3, #4]
 800e9c4:	4b24      	ldr	r3, [pc, #144]	; (800ea58 <vPortFree+0xb8>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d10a      	bne.n	800e9e4 <vPortFree+0x44>
	__asm volatile
 800e9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d2:	f383 8811 	msr	BASEPRI, r3
 800e9d6:	f3bf 8f6f 	isb	sy
 800e9da:	f3bf 8f4f 	dsb	sy
 800e9de:	60fb      	str	r3, [r7, #12]
}
 800e9e0:	bf00      	nop
 800e9e2:	e7fe      	b.n	800e9e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00a      	beq.n	800ea02 <vPortFree+0x62>
	__asm volatile
 800e9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f0:	f383 8811 	msr	BASEPRI, r3
 800e9f4:	f3bf 8f6f 	isb	sy
 800e9f8:	f3bf 8f4f 	dsb	sy
 800e9fc:	60bb      	str	r3, [r7, #8]
}
 800e9fe:	bf00      	nop
 800ea00:	e7fe      	b.n	800ea00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	685a      	ldr	r2, [r3, #4]
 800ea06:	4b14      	ldr	r3, [pc, #80]	; (800ea58 <vPortFree+0xb8>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4013      	ands	r3, r2
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d01e      	beq.n	800ea4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d11a      	bne.n	800ea4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	685a      	ldr	r2, [r3, #4]
 800ea1c:	4b0e      	ldr	r3, [pc, #56]	; (800ea58 <vPortFree+0xb8>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	43db      	mvns	r3, r3
 800ea22:	401a      	ands	r2, r3
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea28:	f7fe fc92 	bl	800d350 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	685a      	ldr	r2, [r3, #4]
 800ea30:	4b0a      	ldr	r3, [pc, #40]	; (800ea5c <vPortFree+0xbc>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4413      	add	r3, r2
 800ea36:	4a09      	ldr	r2, [pc, #36]	; (800ea5c <vPortFree+0xbc>)
 800ea38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea3a:	6938      	ldr	r0, [r7, #16]
 800ea3c:	f000 f874 	bl	800eb28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea40:	4b07      	ldr	r3, [pc, #28]	; (800ea60 <vPortFree+0xc0>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3301      	adds	r3, #1
 800ea46:	4a06      	ldr	r2, [pc, #24]	; (800ea60 <vPortFree+0xc0>)
 800ea48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ea4a:	f7fe fc8f 	bl	800d36c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea4e:	bf00      	nop
 800ea50:	3718      	adds	r7, #24
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	20004dcc 	.word	0x20004dcc
 800ea5c:	20004dbc 	.word	0x20004dbc
 800ea60:	20004dc8 	.word	0x20004dc8

0800ea64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea64:	b480      	push	{r7}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ea6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea70:	4b27      	ldr	r3, [pc, #156]	; (800eb10 <prvHeapInit+0xac>)
 800ea72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f003 0307 	and.w	r3, r3, #7
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00c      	beq.n	800ea98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	3307      	adds	r3, #7
 800ea82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f023 0307 	bic.w	r3, r3, #7
 800ea8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea8c:	68ba      	ldr	r2, [r7, #8]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	4a1f      	ldr	r2, [pc, #124]	; (800eb10 <prvHeapInit+0xac>)
 800ea94:	4413      	add	r3, r2
 800ea96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea9c:	4a1d      	ldr	r2, [pc, #116]	; (800eb14 <prvHeapInit+0xb0>)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eaa2:	4b1c      	ldr	r3, [pc, #112]	; (800eb14 <prvHeapInit+0xb0>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	4413      	add	r3, r2
 800eaae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eab0:	2208      	movs	r2, #8
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	1a9b      	subs	r3, r3, r2
 800eab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f023 0307 	bic.w	r3, r3, #7
 800eabe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	4a15      	ldr	r2, [pc, #84]	; (800eb18 <prvHeapInit+0xb4>)
 800eac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eac6:	4b14      	ldr	r3, [pc, #80]	; (800eb18 <prvHeapInit+0xb4>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2200      	movs	r2, #0
 800eacc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eace:	4b12      	ldr	r3, [pc, #72]	; (800eb18 <prvHeapInit+0xb4>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2200      	movs	r2, #0
 800ead4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	1ad2      	subs	r2, r2, r3
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eae4:	4b0c      	ldr	r3, [pc, #48]	; (800eb18 <prvHeapInit+0xb4>)
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	4a0a      	ldr	r2, [pc, #40]	; (800eb1c <prvHeapInit+0xb8>)
 800eaf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	4a09      	ldr	r2, [pc, #36]	; (800eb20 <prvHeapInit+0xbc>)
 800eafa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eafc:	4b09      	ldr	r3, [pc, #36]	; (800eb24 <prvHeapInit+0xc0>)
 800eafe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb02:	601a      	str	r2, [r3, #0]
}
 800eb04:	bf00      	nop
 800eb06:	3714      	adds	r7, #20
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	200011b0 	.word	0x200011b0
 800eb14:	20004db0 	.word	0x20004db0
 800eb18:	20004db8 	.word	0x20004db8
 800eb1c:	20004dc0 	.word	0x20004dc0
 800eb20:	20004dbc 	.word	0x20004dbc
 800eb24:	20004dcc 	.word	0x20004dcc

0800eb28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb30:	4b28      	ldr	r3, [pc, #160]	; (800ebd4 <prvInsertBlockIntoFreeList+0xac>)
 800eb32:	60fb      	str	r3, [r7, #12]
 800eb34:	e002      	b.n	800eb3c <prvInsertBlockIntoFreeList+0x14>
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	60fb      	str	r3, [r7, #12]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d8f7      	bhi.n	800eb36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	68ba      	ldr	r2, [r7, #8]
 800eb50:	4413      	add	r3, r2
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d108      	bne.n	800eb6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	685a      	ldr	r2, [r3, #4]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	441a      	add	r2, r3
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	68ba      	ldr	r2, [r7, #8]
 800eb74:	441a      	add	r2, r3
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d118      	bne.n	800ebb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	4b15      	ldr	r3, [pc, #84]	; (800ebd8 <prvInsertBlockIntoFreeList+0xb0>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d00d      	beq.n	800eba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	685a      	ldr	r2, [r3, #4]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	441a      	add	r2, r3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	601a      	str	r2, [r3, #0]
 800eba4:	e008      	b.n	800ebb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eba6:	4b0c      	ldr	r3, [pc, #48]	; (800ebd8 <prvInsertBlockIntoFreeList+0xb0>)
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	601a      	str	r2, [r3, #0]
 800ebae:	e003      	b.n	800ebb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ebb8:	68fa      	ldr	r2, [r7, #12]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d002      	beq.n	800ebc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebc6:	bf00      	nop
 800ebc8:	3714      	adds	r7, #20
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop
 800ebd4:	20004db0 	.word	0x20004db0
 800ebd8:	20004db8 	.word	0x20004db8

0800ebdc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	490e      	ldr	r1, [pc, #56]	; (800ec1c <MX_USB_HOST_Init+0x40>)
 800ebe4:	480e      	ldr	r0, [pc, #56]	; (800ec20 <MX_USB_HOST_Init+0x44>)
 800ebe6:	f7fb faf5 	bl	800a1d4 <USBH_Init>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d001      	beq.n	800ebf4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ebf0:	f7f2 fe64 	bl	80018bc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ebf4:	490b      	ldr	r1, [pc, #44]	; (800ec24 <MX_USB_HOST_Init+0x48>)
 800ebf6:	480a      	ldr	r0, [pc, #40]	; (800ec20 <MX_USB_HOST_Init+0x44>)
 800ebf8:	f7fb fb9c 	bl	800a334 <USBH_RegisterClass>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d001      	beq.n	800ec06 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ec02:	f7f2 fe5b 	bl	80018bc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ec06:	4806      	ldr	r0, [pc, #24]	; (800ec20 <MX_USB_HOST_Init+0x44>)
 800ec08:	f7fb fc20 	bl	800a44c <USBH_Start>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ec12:	f7f2 fe53 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ec16:	bf00      	nop
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	0800ec29 	.word	0x0800ec29
 800ec20:	200050d0 	.word	0x200050d0
 800ec24:	2000000c 	.word	0x2000000c

0800ec28 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	460b      	mov	r3, r1
 800ec32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ec34:	78fb      	ldrb	r3, [r7, #3]
 800ec36:	3b01      	subs	r3, #1
 800ec38:	2b04      	cmp	r3, #4
 800ec3a:	d819      	bhi.n	800ec70 <USBH_UserProcess+0x48>
 800ec3c:	a201      	add	r2, pc, #4	; (adr r2, 800ec44 <USBH_UserProcess+0x1c>)
 800ec3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec42:	bf00      	nop
 800ec44:	0800ec71 	.word	0x0800ec71
 800ec48:	0800ec61 	.word	0x0800ec61
 800ec4c:	0800ec71 	.word	0x0800ec71
 800ec50:	0800ec69 	.word	0x0800ec69
 800ec54:	0800ec59 	.word	0x0800ec59
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ec58:	4b09      	ldr	r3, [pc, #36]	; (800ec80 <USBH_UserProcess+0x58>)
 800ec5a:	2203      	movs	r2, #3
 800ec5c:	701a      	strb	r2, [r3, #0]
  break;
 800ec5e:	e008      	b.n	800ec72 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ec60:	4b07      	ldr	r3, [pc, #28]	; (800ec80 <USBH_UserProcess+0x58>)
 800ec62:	2202      	movs	r2, #2
 800ec64:	701a      	strb	r2, [r3, #0]
  break;
 800ec66:	e004      	b.n	800ec72 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ec68:	4b05      	ldr	r3, [pc, #20]	; (800ec80 <USBH_UserProcess+0x58>)
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	701a      	strb	r2, [r3, #0]
  break;
 800ec6e:	e000      	b.n	800ec72 <USBH_UserProcess+0x4a>

  default:
  break;
 800ec70:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ec72:	bf00      	nop
 800ec74:	370c      	adds	r7, #12
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	20004dd0 	.word	0x20004dd0

0800ec84 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b08a      	sub	sp, #40	; 0x28
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec8c:	f107 0314 	add.w	r3, r7, #20
 800ec90:	2200      	movs	r2, #0
 800ec92:	601a      	str	r2, [r3, #0]
 800ec94:	605a      	str	r2, [r3, #4]
 800ec96:	609a      	str	r2, [r3, #8]
 800ec98:	60da      	str	r2, [r3, #12]
 800ec9a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eca4:	d147      	bne.n	800ed36 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eca6:	2300      	movs	r3, #0
 800eca8:	613b      	str	r3, [r7, #16]
 800ecaa:	4b25      	ldr	r3, [pc, #148]	; (800ed40 <HAL_HCD_MspInit+0xbc>)
 800ecac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecae:	4a24      	ldr	r2, [pc, #144]	; (800ed40 <HAL_HCD_MspInit+0xbc>)
 800ecb0:	f043 0301 	orr.w	r3, r3, #1
 800ecb4:	6313      	str	r3, [r2, #48]	; 0x30
 800ecb6:	4b22      	ldr	r3, [pc, #136]	; (800ed40 <HAL_HCD_MspInit+0xbc>)
 800ecb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecba:	f003 0301 	and.w	r3, r3, #1
 800ecbe:	613b      	str	r3, [r7, #16]
 800ecc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ecc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ecc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eccc:	2300      	movs	r3, #0
 800ecce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ecd0:	f107 0314 	add.w	r3, r7, #20
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	481b      	ldr	r0, [pc, #108]	; (800ed44 <HAL_HCD_MspInit+0xc0>)
 800ecd8:	f7f3 ff8c 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ecdc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ece0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ece2:	2302      	movs	r3, #2
 800ece4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ece6:	2300      	movs	r3, #0
 800ece8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ecea:	2300      	movs	r3, #0
 800ecec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ecee:	230a      	movs	r3, #10
 800ecf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ecf2:	f107 0314 	add.w	r3, r7, #20
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	4812      	ldr	r0, [pc, #72]	; (800ed44 <HAL_HCD_MspInit+0xc0>)
 800ecfa:	f7f3 ff7b 	bl	8002bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ecfe:	4b10      	ldr	r3, [pc, #64]	; (800ed40 <HAL_HCD_MspInit+0xbc>)
 800ed00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed02:	4a0f      	ldr	r2, [pc, #60]	; (800ed40 <HAL_HCD_MspInit+0xbc>)
 800ed04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed08:	6353      	str	r3, [r2, #52]	; 0x34
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	60fb      	str	r3, [r7, #12]
 800ed0e:	4b0c      	ldr	r3, [pc, #48]	; (800ed40 <HAL_HCD_MspInit+0xbc>)
 800ed10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed12:	4a0b      	ldr	r2, [pc, #44]	; (800ed40 <HAL_HCD_MspInit+0xbc>)
 800ed14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed18:	6453      	str	r3, [r2, #68]	; 0x44
 800ed1a:	4b09      	ldr	r3, [pc, #36]	; (800ed40 <HAL_HCD_MspInit+0xbc>)
 800ed1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed22:	60fb      	str	r3, [r7, #12]
 800ed24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ed26:	2200      	movs	r2, #0
 800ed28:	2105      	movs	r1, #5
 800ed2a:	2043      	movs	r0, #67	; 0x43
 800ed2c:	f7f3 fea6 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed30:	2043      	movs	r0, #67	; 0x43
 800ed32:	f7f3 febf 	bl	8002ab4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed36:	bf00      	nop
 800ed38:	3728      	adds	r7, #40	; 0x28
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	40023800 	.word	0x40023800
 800ed44:	40020000 	.word	0x40020000

0800ed48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fc f825 	bl	800ada6 <USBH_LL_IncTimer>
}
 800ed5c:	bf00      	nop
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fc f869 	bl	800ae4a <USBH_LL_Connect>
}
 800ed78:	bf00      	nop
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fc f87e 	bl	800ae90 <USBH_LL_Disconnect>
}
 800ed94:	bf00      	nop
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	460b      	mov	r3, r1
 800eda6:	70fb      	strb	r3, [r7, #3]
 800eda8:	4613      	mov	r3, r2
 800edaa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fc f8b5 	bl	800af22 <USBH_LL_NotifyURBChange>
#endif
}
 800edb8:	bf00      	nop
 800edba:	3708      	adds	r7, #8
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fc f813 	bl	800adfa <USBH_LL_PortEnabled>
}
 800edd4:	bf00      	nop
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800edea:	4618      	mov	r0, r3
 800edec:	f7fc f81f 	bl	800ae2e <USBH_LL_PortDisabled>
}
 800edf0:	bf00      	nop
 800edf2:	3708      	adds	r7, #8
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ee06:	2b01      	cmp	r3, #1
 800ee08:	d12a      	bne.n	800ee60 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ee0a:	4a18      	ldr	r2, [pc, #96]	; (800ee6c <USBH_LL_Init+0x74>)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4a15      	ldr	r2, [pc, #84]	; (800ee6c <USBH_LL_Init+0x74>)
 800ee16:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ee1a:	4b14      	ldr	r3, [pc, #80]	; (800ee6c <USBH_LL_Init+0x74>)
 800ee1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ee20:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ee22:	4b12      	ldr	r3, [pc, #72]	; (800ee6c <USBH_LL_Init+0x74>)
 800ee24:	2208      	movs	r2, #8
 800ee26:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ee28:	4b10      	ldr	r3, [pc, #64]	; (800ee6c <USBH_LL_Init+0x74>)
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ee2e:	4b0f      	ldr	r3, [pc, #60]	; (800ee6c <USBH_LL_Init+0x74>)
 800ee30:	2200      	movs	r2, #0
 800ee32:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ee34:	4b0d      	ldr	r3, [pc, #52]	; (800ee6c <USBH_LL_Init+0x74>)
 800ee36:	2202      	movs	r2, #2
 800ee38:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ee3a:	4b0c      	ldr	r3, [pc, #48]	; (800ee6c <USBH_LL_Init+0x74>)
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ee40:	480a      	ldr	r0, [pc, #40]	; (800ee6c <USBH_LL_Init+0x74>)
 800ee42:	f7f4 f88c 	bl	8002f5e <HAL_HCD_Init>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d001      	beq.n	800ee50 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ee4c:	f7f2 fd36 	bl	80018bc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ee50:	4806      	ldr	r0, [pc, #24]	; (800ee6c <USBH_LL_Init+0x74>)
 800ee52:	f7f4 fc69 	bl	8003728 <HAL_HCD_GetCurrentFrame>
 800ee56:	4603      	mov	r3, r0
 800ee58:	4619      	mov	r1, r3
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f7fb ff94 	bl	800ad88 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3708      	adds	r7, #8
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	200054b4 	.word	0x200054b4

0800ee70 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7f4 fbd8 	bl	800363c <HAL_HCD_Start>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee90:	7bfb      	ldrb	r3, [r7, #15]
 800ee92:	4618      	mov	r0, r3
 800ee94:	f000 f95c 	bl	800f150 <USBH_Get_USB_Status>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b084      	sub	sp, #16
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7f4 fbe0 	bl	8003682 <HAL_HCD_Stop>
 800eec2:	4603      	mov	r3, r0
 800eec4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eec6:	7bfb      	ldrb	r3, [r7, #15]
 800eec8:	4618      	mov	r0, r3
 800eeca:	f000 f941 	bl	800f150 <USBH_Get_USB_Status>
 800eece:	4603      	mov	r3, r0
 800eed0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eed2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3710      	adds	r7, #16
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800eee4:	2301      	movs	r3, #1
 800eee6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7f4 fc28 	bl	8003744 <HAL_HCD_GetCurrentSpeed>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	d00c      	beq.n	800ef14 <USBH_LL_GetSpeed+0x38>
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d80d      	bhi.n	800ef1a <USBH_LL_GetSpeed+0x3e>
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d002      	beq.n	800ef08 <USBH_LL_GetSpeed+0x2c>
 800ef02:	2b01      	cmp	r3, #1
 800ef04:	d003      	beq.n	800ef0e <USBH_LL_GetSpeed+0x32>
 800ef06:	e008      	b.n	800ef1a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef0c:	e008      	b.n	800ef20 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	73fb      	strb	r3, [r7, #15]
    break;
 800ef12:	e005      	b.n	800ef20 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ef14:	2302      	movs	r3, #2
 800ef16:	73fb      	strb	r3, [r7, #15]
    break;
 800ef18:	e002      	b.n	800ef20 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ef1e:	bf00      	nop
  }
  return  speed;
 800ef20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b084      	sub	sp, #16
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef32:	2300      	movs	r3, #0
 800ef34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef36:	2300      	movs	r3, #0
 800ef38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7f4 fbbb 	bl	80036bc <HAL_HCD_ResetPort>
 800ef46:	4603      	mov	r3, r0
 800ef48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef4a:	7bfb      	ldrb	r3, [r7, #15]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f000 f8ff 	bl	800f150 <USBH_Get_USB_Status>
 800ef52:	4603      	mov	r3, r0
 800ef54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3710      	adds	r7, #16
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	460b      	mov	r3, r1
 800ef6a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef72:	78fa      	ldrb	r2, [r7, #3]
 800ef74:	4611      	mov	r1, r2
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7f4 fbc2 	bl	8003700 <HAL_HCD_HC_GetXferCount>
 800ef7c:	4603      	mov	r3, r0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ef86:	b590      	push	{r4, r7, lr}
 800ef88:	b089      	sub	sp, #36	; 0x24
 800ef8a:	af04      	add	r7, sp, #16
 800ef8c:	6078      	str	r0, [r7, #4]
 800ef8e:	4608      	mov	r0, r1
 800ef90:	4611      	mov	r1, r2
 800ef92:	461a      	mov	r2, r3
 800ef94:	4603      	mov	r3, r0
 800ef96:	70fb      	strb	r3, [r7, #3]
 800ef98:	460b      	mov	r3, r1
 800ef9a:	70bb      	strb	r3, [r7, #2]
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efa0:	2300      	movs	r3, #0
 800efa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800efae:	787c      	ldrb	r4, [r7, #1]
 800efb0:	78ba      	ldrb	r2, [r7, #2]
 800efb2:	78f9      	ldrb	r1, [r7, #3]
 800efb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800efb6:	9302      	str	r3, [sp, #8]
 800efb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800efbc:	9301      	str	r3, [sp, #4]
 800efbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	4623      	mov	r3, r4
 800efc6:	f7f4 f82c 	bl	8003022 <HAL_HCD_HC_Init>
 800efca:	4603      	mov	r3, r0
 800efcc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800efce:	7bfb      	ldrb	r3, [r7, #15]
 800efd0:	4618      	mov	r0, r3
 800efd2:	f000 f8bd 	bl	800f150 <USBH_Get_USB_Status>
 800efd6:	4603      	mov	r3, r0
 800efd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efda:	7bbb      	ldrb	r3, [r7, #14]
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3714      	adds	r7, #20
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd90      	pop	{r4, r7, pc}

0800efe4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	460b      	mov	r3, r1
 800efee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eff0:	2300      	movs	r3, #0
 800eff2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800effe:	78fa      	ldrb	r2, [r7, #3]
 800f000:	4611      	mov	r1, r2
 800f002:	4618      	mov	r0, r3
 800f004:	f7f4 f89c 	bl	8003140 <HAL_HCD_HC_Halt>
 800f008:	4603      	mov	r3, r0
 800f00a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 f89e 	bl	800f150 <USBH_Get_USB_Status>
 800f014:	4603      	mov	r3, r0
 800f016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f018:	7bbb      	ldrb	r3, [r7, #14]
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f022:	b590      	push	{r4, r7, lr}
 800f024:	b089      	sub	sp, #36	; 0x24
 800f026:	af04      	add	r7, sp, #16
 800f028:	6078      	str	r0, [r7, #4]
 800f02a:	4608      	mov	r0, r1
 800f02c:	4611      	mov	r1, r2
 800f02e:	461a      	mov	r2, r3
 800f030:	4603      	mov	r3, r0
 800f032:	70fb      	strb	r3, [r7, #3]
 800f034:	460b      	mov	r3, r1
 800f036:	70bb      	strb	r3, [r7, #2]
 800f038:	4613      	mov	r3, r2
 800f03a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f03c:	2300      	movs	r3, #0
 800f03e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f040:	2300      	movs	r3, #0
 800f042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f04a:	787c      	ldrb	r4, [r7, #1]
 800f04c:	78ba      	ldrb	r2, [r7, #2]
 800f04e:	78f9      	ldrb	r1, [r7, #3]
 800f050:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f054:	9303      	str	r3, [sp, #12]
 800f056:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f058:	9302      	str	r3, [sp, #8]
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	9301      	str	r3, [sp, #4]
 800f05e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f062:	9300      	str	r3, [sp, #0]
 800f064:	4623      	mov	r3, r4
 800f066:	f7f4 f88f 	bl	8003188 <HAL_HCD_HC_SubmitRequest>
 800f06a:	4603      	mov	r3, r0
 800f06c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f06e:	7bfb      	ldrb	r3, [r7, #15]
 800f070:	4618      	mov	r0, r3
 800f072:	f000 f86d 	bl	800f150 <USBH_Get_USB_Status>
 800f076:	4603      	mov	r3, r0
 800f078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f07a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3714      	adds	r7, #20
 800f080:	46bd      	mov	sp, r7
 800f082:	bd90      	pop	{r4, r7, pc}

0800f084 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	460b      	mov	r3, r1
 800f08e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f096:	78fa      	ldrb	r2, [r7, #3]
 800f098:	4611      	mov	r1, r2
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7f4 fb1c 	bl	80036d8 <HAL_HCD_HC_GetURBState>
 800f0a0:	4603      	mov	r3, r0
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3708      	adds	r7, #8
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}

0800f0aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f0aa:	b580      	push	{r7, lr}
 800f0ac:	b082      	sub	sp, #8
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d103      	bne.n	800f0c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f0c0:	78fb      	ldrb	r3, [r7, #3]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f000 f870 	bl	800f1a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f0c8:	20c8      	movs	r0, #200	; 0xc8
 800f0ca:	f7f3 fbfb 	bl	80028c4 <HAL_Delay>
  return USBH_OK;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	70fb      	strb	r3, [r7, #3]
 800f0e4:	4613      	mov	r3, r2
 800f0e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f0f0:	78fb      	ldrb	r3, [r7, #3]
 800f0f2:	68fa      	ldr	r2, [r7, #12]
 800f0f4:	212c      	movs	r1, #44	; 0x2c
 800f0f6:	fb01 f303 	mul.w	r3, r1, r3
 800f0fa:	4413      	add	r3, r2
 800f0fc:	333b      	adds	r3, #59	; 0x3b
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d009      	beq.n	800f118 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f104:	78fb      	ldrb	r3, [r7, #3]
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	212c      	movs	r1, #44	; 0x2c
 800f10a:	fb01 f303 	mul.w	r3, r1, r3
 800f10e:	4413      	add	r3, r2
 800f110:	3354      	adds	r3, #84	; 0x54
 800f112:	78ba      	ldrb	r2, [r7, #2]
 800f114:	701a      	strb	r2, [r3, #0]
 800f116:	e008      	b.n	800f12a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f118:	78fb      	ldrb	r3, [r7, #3]
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	212c      	movs	r1, #44	; 0x2c
 800f11e:	fb01 f303 	mul.w	r3, r1, r3
 800f122:	4413      	add	r3, r2
 800f124:	3355      	adds	r3, #85	; 0x55
 800f126:	78ba      	ldrb	r2, [r7, #2]
 800f128:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3714      	adds	r7, #20
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr

0800f138 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f7f3 fbbf 	bl	80028c4 <HAL_Delay>
}
 800f146:	bf00      	nop
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
	...

0800f150 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f150:	b480      	push	{r7}
 800f152:	b085      	sub	sp, #20
 800f154:	af00      	add	r7, sp, #0
 800f156:	4603      	mov	r3, r0
 800f158:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f15a:	2300      	movs	r3, #0
 800f15c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f15e:	79fb      	ldrb	r3, [r7, #7]
 800f160:	2b03      	cmp	r3, #3
 800f162:	d817      	bhi.n	800f194 <USBH_Get_USB_Status+0x44>
 800f164:	a201      	add	r2, pc, #4	; (adr r2, 800f16c <USBH_Get_USB_Status+0x1c>)
 800f166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f16a:	bf00      	nop
 800f16c:	0800f17d 	.word	0x0800f17d
 800f170:	0800f183 	.word	0x0800f183
 800f174:	0800f189 	.word	0x0800f189
 800f178:	0800f18f 	.word	0x0800f18f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f17c:	2300      	movs	r3, #0
 800f17e:	73fb      	strb	r3, [r7, #15]
    break;
 800f180:	e00b      	b.n	800f19a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f182:	2302      	movs	r3, #2
 800f184:	73fb      	strb	r3, [r7, #15]
    break;
 800f186:	e008      	b.n	800f19a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f188:	2301      	movs	r3, #1
 800f18a:	73fb      	strb	r3, [r7, #15]
    break;
 800f18c:	e005      	b.n	800f19a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f18e:	2302      	movs	r3, #2
 800f190:	73fb      	strb	r3, [r7, #15]
    break;
 800f192:	e002      	b.n	800f19a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f194:	2302      	movs	r3, #2
 800f196:	73fb      	strb	r3, [r7, #15]
    break;
 800f198:	bf00      	nop
  }
  return usb_status;
 800f19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3714      	adds	r7, #20
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f1b2:	79fb      	ldrb	r3, [r7, #7]
 800f1b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f1b6:	79fb      	ldrb	r3, [r7, #7]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d102      	bne.n	800f1c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f1bc:	2301      	movs	r3, #1
 800f1be:	73fb      	strb	r3, [r7, #15]
 800f1c0:	e001      	b.n	800f1c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f1c6:	7bfb      	ldrb	r3, [r7, #15]
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	2101      	movs	r1, #1
 800f1cc:	4803      	ldr	r0, [pc, #12]	; (800f1dc <MX_DriverVbusFS+0x34>)
 800f1ce:	f7f3 fead 	bl	8002f2c <HAL_GPIO_WritePin>
}
 800f1d2:	bf00      	nop
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	40020800 	.word	0x40020800

0800f1e0 <__errno>:
 800f1e0:	4b01      	ldr	r3, [pc, #4]	; (800f1e8 <__errno+0x8>)
 800f1e2:	6818      	ldr	r0, [r3, #0]
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop
 800f1e8:	20000030 	.word	0x20000030

0800f1ec <__libc_init_array>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	4d0d      	ldr	r5, [pc, #52]	; (800f224 <__libc_init_array+0x38>)
 800f1f0:	4c0d      	ldr	r4, [pc, #52]	; (800f228 <__libc_init_array+0x3c>)
 800f1f2:	1b64      	subs	r4, r4, r5
 800f1f4:	10a4      	asrs	r4, r4, #2
 800f1f6:	2600      	movs	r6, #0
 800f1f8:	42a6      	cmp	r6, r4
 800f1fa:	d109      	bne.n	800f210 <__libc_init_array+0x24>
 800f1fc:	4d0b      	ldr	r5, [pc, #44]	; (800f22c <__libc_init_array+0x40>)
 800f1fe:	4c0c      	ldr	r4, [pc, #48]	; (800f230 <__libc_init_array+0x44>)
 800f200:	f000 f986 	bl	800f510 <_init>
 800f204:	1b64      	subs	r4, r4, r5
 800f206:	10a4      	asrs	r4, r4, #2
 800f208:	2600      	movs	r6, #0
 800f20a:	42a6      	cmp	r6, r4
 800f20c:	d105      	bne.n	800f21a <__libc_init_array+0x2e>
 800f20e:	bd70      	pop	{r4, r5, r6, pc}
 800f210:	f855 3b04 	ldr.w	r3, [r5], #4
 800f214:	4798      	blx	r3
 800f216:	3601      	adds	r6, #1
 800f218:	e7ee      	b.n	800f1f8 <__libc_init_array+0xc>
 800f21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f21e:	4798      	blx	r3
 800f220:	3601      	adds	r6, #1
 800f222:	e7f2      	b.n	800f20a <__libc_init_array+0x1e>
 800f224:	08010df8 	.word	0x08010df8
 800f228:	08010df8 	.word	0x08010df8
 800f22c:	08010df8 	.word	0x08010df8
 800f230:	08010dfc 	.word	0x08010dfc

0800f234 <malloc>:
 800f234:	4b02      	ldr	r3, [pc, #8]	; (800f240 <malloc+0xc>)
 800f236:	4601      	mov	r1, r0
 800f238:	6818      	ldr	r0, [r3, #0]
 800f23a:	f000 b871 	b.w	800f320 <_malloc_r>
 800f23e:	bf00      	nop
 800f240:	20000030 	.word	0x20000030

0800f244 <free>:
 800f244:	4b02      	ldr	r3, [pc, #8]	; (800f250 <free+0xc>)
 800f246:	4601      	mov	r1, r0
 800f248:	6818      	ldr	r0, [r3, #0]
 800f24a:	f000 b819 	b.w	800f280 <_free_r>
 800f24e:	bf00      	nop
 800f250:	20000030 	.word	0x20000030

0800f254 <memcpy>:
 800f254:	440a      	add	r2, r1
 800f256:	4291      	cmp	r1, r2
 800f258:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f25c:	d100      	bne.n	800f260 <memcpy+0xc>
 800f25e:	4770      	bx	lr
 800f260:	b510      	push	{r4, lr}
 800f262:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f26a:	4291      	cmp	r1, r2
 800f26c:	d1f9      	bne.n	800f262 <memcpy+0xe>
 800f26e:	bd10      	pop	{r4, pc}

0800f270 <memset>:
 800f270:	4402      	add	r2, r0
 800f272:	4603      	mov	r3, r0
 800f274:	4293      	cmp	r3, r2
 800f276:	d100      	bne.n	800f27a <memset+0xa>
 800f278:	4770      	bx	lr
 800f27a:	f803 1b01 	strb.w	r1, [r3], #1
 800f27e:	e7f9      	b.n	800f274 <memset+0x4>

0800f280 <_free_r>:
 800f280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f282:	2900      	cmp	r1, #0
 800f284:	d048      	beq.n	800f318 <_free_r+0x98>
 800f286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f28a:	9001      	str	r0, [sp, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	f1a1 0404 	sub.w	r4, r1, #4
 800f292:	bfb8      	it	lt
 800f294:	18e4      	addlt	r4, r4, r3
 800f296:	f000 f8ad 	bl	800f3f4 <__malloc_lock>
 800f29a:	4a20      	ldr	r2, [pc, #128]	; (800f31c <_free_r+0x9c>)
 800f29c:	9801      	ldr	r0, [sp, #4]
 800f29e:	6813      	ldr	r3, [r2, #0]
 800f2a0:	4615      	mov	r5, r2
 800f2a2:	b933      	cbnz	r3, 800f2b2 <_free_r+0x32>
 800f2a4:	6063      	str	r3, [r4, #4]
 800f2a6:	6014      	str	r4, [r2, #0]
 800f2a8:	b003      	add	sp, #12
 800f2aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2ae:	f000 b8a7 	b.w	800f400 <__malloc_unlock>
 800f2b2:	42a3      	cmp	r3, r4
 800f2b4:	d90b      	bls.n	800f2ce <_free_r+0x4e>
 800f2b6:	6821      	ldr	r1, [r4, #0]
 800f2b8:	1862      	adds	r2, r4, r1
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	bf04      	itt	eq
 800f2be:	681a      	ldreq	r2, [r3, #0]
 800f2c0:	685b      	ldreq	r3, [r3, #4]
 800f2c2:	6063      	str	r3, [r4, #4]
 800f2c4:	bf04      	itt	eq
 800f2c6:	1852      	addeq	r2, r2, r1
 800f2c8:	6022      	streq	r2, [r4, #0]
 800f2ca:	602c      	str	r4, [r5, #0]
 800f2cc:	e7ec      	b.n	800f2a8 <_free_r+0x28>
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	b10b      	cbz	r3, 800f2d8 <_free_r+0x58>
 800f2d4:	42a3      	cmp	r3, r4
 800f2d6:	d9fa      	bls.n	800f2ce <_free_r+0x4e>
 800f2d8:	6811      	ldr	r1, [r2, #0]
 800f2da:	1855      	adds	r5, r2, r1
 800f2dc:	42a5      	cmp	r5, r4
 800f2de:	d10b      	bne.n	800f2f8 <_free_r+0x78>
 800f2e0:	6824      	ldr	r4, [r4, #0]
 800f2e2:	4421      	add	r1, r4
 800f2e4:	1854      	adds	r4, r2, r1
 800f2e6:	42a3      	cmp	r3, r4
 800f2e8:	6011      	str	r1, [r2, #0]
 800f2ea:	d1dd      	bne.n	800f2a8 <_free_r+0x28>
 800f2ec:	681c      	ldr	r4, [r3, #0]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	6053      	str	r3, [r2, #4]
 800f2f2:	4421      	add	r1, r4
 800f2f4:	6011      	str	r1, [r2, #0]
 800f2f6:	e7d7      	b.n	800f2a8 <_free_r+0x28>
 800f2f8:	d902      	bls.n	800f300 <_free_r+0x80>
 800f2fa:	230c      	movs	r3, #12
 800f2fc:	6003      	str	r3, [r0, #0]
 800f2fe:	e7d3      	b.n	800f2a8 <_free_r+0x28>
 800f300:	6825      	ldr	r5, [r4, #0]
 800f302:	1961      	adds	r1, r4, r5
 800f304:	428b      	cmp	r3, r1
 800f306:	bf04      	itt	eq
 800f308:	6819      	ldreq	r1, [r3, #0]
 800f30a:	685b      	ldreq	r3, [r3, #4]
 800f30c:	6063      	str	r3, [r4, #4]
 800f30e:	bf04      	itt	eq
 800f310:	1949      	addeq	r1, r1, r5
 800f312:	6021      	streq	r1, [r4, #0]
 800f314:	6054      	str	r4, [r2, #4]
 800f316:	e7c7      	b.n	800f2a8 <_free_r+0x28>
 800f318:	b003      	add	sp, #12
 800f31a:	bd30      	pop	{r4, r5, pc}
 800f31c:	20004dd4 	.word	0x20004dd4

0800f320 <_malloc_r>:
 800f320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f322:	1ccd      	adds	r5, r1, #3
 800f324:	f025 0503 	bic.w	r5, r5, #3
 800f328:	3508      	adds	r5, #8
 800f32a:	2d0c      	cmp	r5, #12
 800f32c:	bf38      	it	cc
 800f32e:	250c      	movcc	r5, #12
 800f330:	2d00      	cmp	r5, #0
 800f332:	4606      	mov	r6, r0
 800f334:	db01      	blt.n	800f33a <_malloc_r+0x1a>
 800f336:	42a9      	cmp	r1, r5
 800f338:	d903      	bls.n	800f342 <_malloc_r+0x22>
 800f33a:	230c      	movs	r3, #12
 800f33c:	6033      	str	r3, [r6, #0]
 800f33e:	2000      	movs	r0, #0
 800f340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f342:	f000 f857 	bl	800f3f4 <__malloc_lock>
 800f346:	4921      	ldr	r1, [pc, #132]	; (800f3cc <_malloc_r+0xac>)
 800f348:	680a      	ldr	r2, [r1, #0]
 800f34a:	4614      	mov	r4, r2
 800f34c:	b99c      	cbnz	r4, 800f376 <_malloc_r+0x56>
 800f34e:	4f20      	ldr	r7, [pc, #128]	; (800f3d0 <_malloc_r+0xb0>)
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	b923      	cbnz	r3, 800f35e <_malloc_r+0x3e>
 800f354:	4621      	mov	r1, r4
 800f356:	4630      	mov	r0, r6
 800f358:	f000 f83c 	bl	800f3d4 <_sbrk_r>
 800f35c:	6038      	str	r0, [r7, #0]
 800f35e:	4629      	mov	r1, r5
 800f360:	4630      	mov	r0, r6
 800f362:	f000 f837 	bl	800f3d4 <_sbrk_r>
 800f366:	1c43      	adds	r3, r0, #1
 800f368:	d123      	bne.n	800f3b2 <_malloc_r+0x92>
 800f36a:	230c      	movs	r3, #12
 800f36c:	6033      	str	r3, [r6, #0]
 800f36e:	4630      	mov	r0, r6
 800f370:	f000 f846 	bl	800f400 <__malloc_unlock>
 800f374:	e7e3      	b.n	800f33e <_malloc_r+0x1e>
 800f376:	6823      	ldr	r3, [r4, #0]
 800f378:	1b5b      	subs	r3, r3, r5
 800f37a:	d417      	bmi.n	800f3ac <_malloc_r+0x8c>
 800f37c:	2b0b      	cmp	r3, #11
 800f37e:	d903      	bls.n	800f388 <_malloc_r+0x68>
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	441c      	add	r4, r3
 800f384:	6025      	str	r5, [r4, #0]
 800f386:	e004      	b.n	800f392 <_malloc_r+0x72>
 800f388:	6863      	ldr	r3, [r4, #4]
 800f38a:	42a2      	cmp	r2, r4
 800f38c:	bf0c      	ite	eq
 800f38e:	600b      	streq	r3, [r1, #0]
 800f390:	6053      	strne	r3, [r2, #4]
 800f392:	4630      	mov	r0, r6
 800f394:	f000 f834 	bl	800f400 <__malloc_unlock>
 800f398:	f104 000b 	add.w	r0, r4, #11
 800f39c:	1d23      	adds	r3, r4, #4
 800f39e:	f020 0007 	bic.w	r0, r0, #7
 800f3a2:	1ac2      	subs	r2, r0, r3
 800f3a4:	d0cc      	beq.n	800f340 <_malloc_r+0x20>
 800f3a6:	1a1b      	subs	r3, r3, r0
 800f3a8:	50a3      	str	r3, [r4, r2]
 800f3aa:	e7c9      	b.n	800f340 <_malloc_r+0x20>
 800f3ac:	4622      	mov	r2, r4
 800f3ae:	6864      	ldr	r4, [r4, #4]
 800f3b0:	e7cc      	b.n	800f34c <_malloc_r+0x2c>
 800f3b2:	1cc4      	adds	r4, r0, #3
 800f3b4:	f024 0403 	bic.w	r4, r4, #3
 800f3b8:	42a0      	cmp	r0, r4
 800f3ba:	d0e3      	beq.n	800f384 <_malloc_r+0x64>
 800f3bc:	1a21      	subs	r1, r4, r0
 800f3be:	4630      	mov	r0, r6
 800f3c0:	f000 f808 	bl	800f3d4 <_sbrk_r>
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	d1dd      	bne.n	800f384 <_malloc_r+0x64>
 800f3c8:	e7cf      	b.n	800f36a <_malloc_r+0x4a>
 800f3ca:	bf00      	nop
 800f3cc:	20004dd4 	.word	0x20004dd4
 800f3d0:	20004dd8 	.word	0x20004dd8

0800f3d4 <_sbrk_r>:
 800f3d4:	b538      	push	{r3, r4, r5, lr}
 800f3d6:	4d06      	ldr	r5, [pc, #24]	; (800f3f0 <_sbrk_r+0x1c>)
 800f3d8:	2300      	movs	r3, #0
 800f3da:	4604      	mov	r4, r0
 800f3dc:	4608      	mov	r0, r1
 800f3de:	602b      	str	r3, [r5, #0]
 800f3e0:	f7f3 f9bc 	bl	800275c <_sbrk>
 800f3e4:	1c43      	adds	r3, r0, #1
 800f3e6:	d102      	bne.n	800f3ee <_sbrk_r+0x1a>
 800f3e8:	682b      	ldr	r3, [r5, #0]
 800f3ea:	b103      	cbz	r3, 800f3ee <_sbrk_r+0x1a>
 800f3ec:	6023      	str	r3, [r4, #0]
 800f3ee:	bd38      	pop	{r3, r4, r5, pc}
 800f3f0:	200057b8 	.word	0x200057b8

0800f3f4 <__malloc_lock>:
 800f3f4:	4801      	ldr	r0, [pc, #4]	; (800f3fc <__malloc_lock+0x8>)
 800f3f6:	f000 b809 	b.w	800f40c <__retarget_lock_acquire_recursive>
 800f3fa:	bf00      	nop
 800f3fc:	200057c0 	.word	0x200057c0

0800f400 <__malloc_unlock>:
 800f400:	4801      	ldr	r0, [pc, #4]	; (800f408 <__malloc_unlock+0x8>)
 800f402:	f000 b804 	b.w	800f40e <__retarget_lock_release_recursive>
 800f406:	bf00      	nop
 800f408:	200057c0 	.word	0x200057c0

0800f40c <__retarget_lock_acquire_recursive>:
 800f40c:	4770      	bx	lr

0800f40e <__retarget_lock_release_recursive>:
 800f40e:	4770      	bx	lr

0800f410 <floor>:
 800f410:	ec51 0b10 	vmov	r0, r1, d0
 800f414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f418:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f41c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f420:	2e13      	cmp	r6, #19
 800f422:	ee10 5a10 	vmov	r5, s0
 800f426:	ee10 8a10 	vmov	r8, s0
 800f42a:	460c      	mov	r4, r1
 800f42c:	dc32      	bgt.n	800f494 <floor+0x84>
 800f42e:	2e00      	cmp	r6, #0
 800f430:	da14      	bge.n	800f45c <floor+0x4c>
 800f432:	a333      	add	r3, pc, #204	; (adr r3, 800f500 <floor+0xf0>)
 800f434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f438:	f7f0 fed8 	bl	80001ec <__adddf3>
 800f43c:	2200      	movs	r2, #0
 800f43e:	2300      	movs	r3, #0
 800f440:	f7f1 fb1a 	bl	8000a78 <__aeabi_dcmpgt>
 800f444:	b138      	cbz	r0, 800f456 <floor+0x46>
 800f446:	2c00      	cmp	r4, #0
 800f448:	da57      	bge.n	800f4fa <floor+0xea>
 800f44a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f44e:	431d      	orrs	r5, r3
 800f450:	d001      	beq.n	800f456 <floor+0x46>
 800f452:	4c2d      	ldr	r4, [pc, #180]	; (800f508 <floor+0xf8>)
 800f454:	2500      	movs	r5, #0
 800f456:	4621      	mov	r1, r4
 800f458:	4628      	mov	r0, r5
 800f45a:	e025      	b.n	800f4a8 <floor+0x98>
 800f45c:	4f2b      	ldr	r7, [pc, #172]	; (800f50c <floor+0xfc>)
 800f45e:	4137      	asrs	r7, r6
 800f460:	ea01 0307 	and.w	r3, r1, r7
 800f464:	4303      	orrs	r3, r0
 800f466:	d01f      	beq.n	800f4a8 <floor+0x98>
 800f468:	a325      	add	r3, pc, #148	; (adr r3, 800f500 <floor+0xf0>)
 800f46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46e:	f7f0 febd 	bl	80001ec <__adddf3>
 800f472:	2200      	movs	r2, #0
 800f474:	2300      	movs	r3, #0
 800f476:	f7f1 faff 	bl	8000a78 <__aeabi_dcmpgt>
 800f47a:	2800      	cmp	r0, #0
 800f47c:	d0eb      	beq.n	800f456 <floor+0x46>
 800f47e:	2c00      	cmp	r4, #0
 800f480:	bfbe      	ittt	lt
 800f482:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f486:	fa43 f606 	asrlt.w	r6, r3, r6
 800f48a:	19a4      	addlt	r4, r4, r6
 800f48c:	ea24 0407 	bic.w	r4, r4, r7
 800f490:	2500      	movs	r5, #0
 800f492:	e7e0      	b.n	800f456 <floor+0x46>
 800f494:	2e33      	cmp	r6, #51	; 0x33
 800f496:	dd0b      	ble.n	800f4b0 <floor+0xa0>
 800f498:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f49c:	d104      	bne.n	800f4a8 <floor+0x98>
 800f49e:	ee10 2a10 	vmov	r2, s0
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	f7f0 fea2 	bl	80001ec <__adddf3>
 800f4a8:	ec41 0b10 	vmov	d0, r0, r1
 800f4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4b8:	fa23 f707 	lsr.w	r7, r3, r7
 800f4bc:	4207      	tst	r7, r0
 800f4be:	d0f3      	beq.n	800f4a8 <floor+0x98>
 800f4c0:	a30f      	add	r3, pc, #60	; (adr r3, 800f500 <floor+0xf0>)
 800f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c6:	f7f0 fe91 	bl	80001ec <__adddf3>
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	f7f1 fad3 	bl	8000a78 <__aeabi_dcmpgt>
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	d0bf      	beq.n	800f456 <floor+0x46>
 800f4d6:	2c00      	cmp	r4, #0
 800f4d8:	da02      	bge.n	800f4e0 <floor+0xd0>
 800f4da:	2e14      	cmp	r6, #20
 800f4dc:	d103      	bne.n	800f4e6 <floor+0xd6>
 800f4de:	3401      	adds	r4, #1
 800f4e0:	ea25 0507 	bic.w	r5, r5, r7
 800f4e4:	e7b7      	b.n	800f456 <floor+0x46>
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f4ec:	fa03 f606 	lsl.w	r6, r3, r6
 800f4f0:	4435      	add	r5, r6
 800f4f2:	4545      	cmp	r5, r8
 800f4f4:	bf38      	it	cc
 800f4f6:	18e4      	addcc	r4, r4, r3
 800f4f8:	e7f2      	b.n	800f4e0 <floor+0xd0>
 800f4fa:	2500      	movs	r5, #0
 800f4fc:	462c      	mov	r4, r5
 800f4fe:	e7aa      	b.n	800f456 <floor+0x46>
 800f500:	8800759c 	.word	0x8800759c
 800f504:	7e37e43c 	.word	0x7e37e43c
 800f508:	bff00000 	.word	0xbff00000
 800f50c:	000fffff 	.word	0x000fffff

0800f510 <_init>:
 800f510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f512:	bf00      	nop
 800f514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f516:	bc08      	pop	{r3}
 800f518:	469e      	mov	lr, r3
 800f51a:	4770      	bx	lr

0800f51c <_fini>:
 800f51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f51e:	bf00      	nop
 800f520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f522:	bc08      	pop	{r3}
 800f524:	469e      	mov	lr, r3
 800f526:	4770      	bx	lr
