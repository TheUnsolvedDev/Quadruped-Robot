
display_board_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018c4  0800f888  0800f888  0001f888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801114c  0801114c  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  0801114c  0801114c  0002114c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011154  08011154  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011154  08011154  00021154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011158  08011158  00021158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801115c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005734  20000094  080111f0  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200057c8  080111f0  000357c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000342d0  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006525  00000000  00000000  00064394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002340  00000000  00000000  0006a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002120  00000000  00000000  0006cc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002806d  00000000  00000000  0006ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a966  00000000  00000000  00096d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1971  00000000  00000000  000c16f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a3064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000998c  00000000  00000000  001a30b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f870 	.word	0x0800f870

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800f870 	.word	0x0800f870

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <string_compare>:

char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	75bb      	strb	r3, [r7, #22]
 8000e7a:	e012      	b.n	8000ea2 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000e7c:	7dbb      	ldrb	r3, [r7, #22]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	7dbb      	ldrb	r3, [r7, #22]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	440b      	add	r3, r1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d103      	bne.n	8000e98 <string_compare+0x34>
	   	  		  comVAR++;
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	3301      	adds	r3, #1
 8000e94:	75fb      	strb	r3, [r7, #23]
 8000e96:	e001      	b.n	8000e9c <string_compare+0x38>
	   	  	  else comVAR=0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000e9c:	7dbb      	ldrb	r3, [r7, #22]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	75bb      	strb	r3, [r7, #22]
 8000ea2:	7dbb      	ldrb	r3, [r7, #22]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	88fa      	ldrh	r2, [r7, #6]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8e7      	bhi.n	8000e7c <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d101      	bne.n	8000eba <string_compare+0x56>
		 	return 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <string_compare+0x58>
	 else 	return 0;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <Message_handler>:

void Message_handler()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 8000ecc:	2206      	movs	r2, #6
 8000ece:	4927      	ldr	r1, [pc, #156]	; (8000f6c <Message_handler+0xa4>)
 8000ed0:	4827      	ldr	r0, [pc, #156]	; (8000f70 <Message_handler+0xa8>)
 8000ed2:	f7ff ffc7 	bl	8000e64 <string_compare>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00d      	beq.n	8000ef8 <Message_handler+0x30>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee2:	4824      	ldr	r0, [pc, #144]	; (8000f74 <Message_handler+0xac>)
 8000ee4:	f002 f95e 	bl	80031a4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 8000ee8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eec:	220b      	movs	r2, #11
 8000eee:	4922      	ldr	r1, [pc, #136]	; (8000f78 <Message_handler+0xb0>)
 8000ef0:	4822      	ldr	r0, [pc, #136]	; (8000f7c <Message_handler+0xb4>)
 8000ef2:	f007 f91c 	bl	800812e <HAL_UART_Transmit>
 8000ef6:	e02c      	b.n	8000f52 <Message_handler+0x8a>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 8000ef8:	2207      	movs	r2, #7
 8000efa:	4921      	ldr	r1, [pc, #132]	; (8000f80 <Message_handler+0xb8>)
 8000efc:	481c      	ldr	r0, [pc, #112]	; (8000f70 <Message_handler+0xa8>)
 8000efe:	f7ff ffb1 	bl	8000e64 <string_compare>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00d      	beq.n	8000f24 <Message_handler+0x5c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0e:	4819      	ldr	r0, [pc, #100]	; (8000f74 <Message_handler+0xac>)
 8000f10:	f002 f948 	bl	80031a4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 8000f14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f18:	220c      	movs	r2, #12
 8000f1a:	491a      	ldr	r1, [pc, #104]	; (8000f84 <Message_handler+0xbc>)
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <Message_handler+0xb4>)
 8000f1e:	f007 f906 	bl	800812e <HAL_UART_Transmit>
 8000f22:	e016      	b.n	8000f52 <Message_handler+0x8a>
	}else
	{
		strcat(buffer, "\n");
 8000f24:	4812      	ldr	r0, [pc, #72]	; (8000f70 <Message_handler+0xa8>)
 8000f26:	f7ff f953 	bl	80001d0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <Message_handler+0xa8>)
 8000f30:	4413      	add	r3, r2
 8000f32:	4915      	ldr	r1, [pc, #84]	; (8000f88 <Message_handler+0xc0>)
 8000f34:	461a      	mov	r2, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <Message_handler+0xa8>)
 8000f3e:	f7ff f947 	bl	80001d0 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f4a:	4909      	ldr	r1, [pc, #36]	; (8000f70 <Message_handler+0xa8>)
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <Message_handler+0xb4>)
 8000f4e:	f007 f8ee 	bl	800812e <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 8000f52:	2232      	movs	r2, #50	; 0x32
 8000f54:	2100      	movs	r1, #0
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <Message_handler+0xa8>)
 8000f58:	f00e fb3a 	bl	800f5d0 <memset>
	buffer_index = 0;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <Message_handler+0xc4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <Message_handler+0xc8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	0800f888 	.word	0x0800f888
 8000f70:	20004ddc 	.word	0x20004ddc
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	0800f890 	.word	0x0800f890
 8000f7c:	20004f90 	.word	0x20004f90
 8000f80:	0800f89c 	.word	0x0800f89c
 8000f84:	0800f8a4 	.word	0x0800f8a4
 8000f88:	0800f8b4 	.word	0x0800f8b4
 8000f8c:	200000b1 	.word	0x200000b1
 8000f90:	200000b0 	.word	0x200000b0

08000f94 <start_normal>:
#define ANGLE_9_INIT 100
#define ANGLE_10_INIT -10
#define ANGLE_11_INIT 35

void start_normal()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

	PCA9685_SetServoAngle(0, ANGLE_0_INIT);
 8000f98:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001024 <start_normal+0x90>
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 ff87 	bl	8001eb0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, ANGLE_1_INIT);
 8000fa2:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001028 <start_normal+0x94>
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 ff82 	bl	8001eb0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(2, ANGLE_2_INIT);
 8000fac:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001024 <start_normal+0x90>
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f000 ff7d 	bl	8001eb0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(3, ANGLE_3_INIT);
 8000fb6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800102c <start_normal+0x98>
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 ff78 	bl	8001eb0 <PCA9685_SetServoAngle>
	HAL_Delay(500);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc4:	f001 fdba 	bl	8002b3c <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8000fc8:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001030 <start_normal+0x9c>
 8000fcc:	2004      	movs	r0, #4
 8000fce:	f000 ff6f 	bl	8001eb0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 8000fd2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001034 <start_normal+0xa0>
 8000fd6:	2005      	movs	r0, #5
 8000fd8:	f000 ff6a 	bl	8001eb0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 8000fdc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001038 <start_normal+0xa4>
 8000fe0:	2006      	movs	r0, #6
 8000fe2:	f000 ff65 	bl	8001eb0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 8000fe6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001028 <start_normal+0x94>
 8000fea:	2007      	movs	r0, #7
 8000fec:	f000 ff60 	bl	8001eb0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT);
 8000ff0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800103c <start_normal+0xa8>
 8000ff4:	2008      	movs	r0, #8
 8000ff6:	f000 ff5b 	bl	8001eb0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 8000ffa:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001040 <start_normal+0xac>
 8000ffe:	2009      	movs	r0, #9
 8001000:	f000 ff56 	bl	8001eb0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(10, ANGLE_10_INIT);
 8001004:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8001008:	200a      	movs	r0, #10
 800100a:	f000 ff51 	bl	8001eb0 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(11, ANGLE_11_INIT);
 800100e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001034 <start_normal+0xa0>
 8001012:	200b      	movs	r0, #11
 8001014:	f000 ff4c 	bl	8001eb0 <PCA9685_SetServoAngle>
	HAL_Delay(500);
 8001018:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101c:	f001 fd8e 	bl	8002b3c <HAL_Delay>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	42f00000 	.word	0x42f00000
 8001028:	42dc0000 	.word	0x42dc0000
 800102c:	42340000 	.word	0x42340000
 8001030:	42700000 	.word	0x42700000
 8001034:	420c0000 	.word	0x420c0000
 8001038:	42d20000 	.word	0x42d20000
 800103c:	42960000 	.word	0x42960000
 8001040:	42c80000 	.word	0x42c80000

08001044 <walk>:

void walk(void *parameters)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	int delay_time = 100;
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	60fb      	str	r3, [r7, #12]
	PCA9685_SetServoAngle(4, ANGLE_4_INIT + 20);
 8001050:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800121c <walk+0x1d8>
 8001054:	2004      	movs	r0, #4
 8001056:	f000 ff2b 	bl	8001eb0 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fd6d 	bl	8002b3c <HAL_Delay>
	PCA9685_SetServoAngle(8, ANGLE_8_INIT + 20);
 8001062:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8001220 <walk+0x1dc>
 8001066:	2008      	movs	r0, #8
 8001068:	f000 ff22 	bl	8001eb0 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fd64 	bl	8002b3c <HAL_Delay>
	PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8001074:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8001224 <walk+0x1e0>
 8001078:	2004      	movs	r0, #4
 800107a:	f000 ff19 	bl	8001eb0 <PCA9685_SetServoAngle>
	HAL_Delay(delay_time);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fd5b 	bl	8002b3c <HAL_Delay>

	while(rx_buffer[0]=='w')
 8001086:	e0bc      	b.n	8001202 <walk+0x1be>
	{
		PCA9685_SetServoAngle(7, ANGLE_7_INIT - 30);
 8001088:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800121c <walk+0x1d8>
 800108c:	2007      	movs	r0, #7
 800108e:	f000 ff0f 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fd51 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(3, ANGLE_3_INIT);
 800109a:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8001228 <walk+0x1e4>
 800109e:	2003      	movs	r0, #3
 80010a0:	f000 ff06 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 fd48 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(11, ANGLE_11_INIT - 35);
 80010ac:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800122c <walk+0x1e8>
 80010b0:	200b      	movs	r0, #11
 80010b2:	f000 fefd 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fd3f 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 80010be:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8001230 <walk+0x1ec>
 80010c2:	2007      	movs	r0, #7
 80010c4:	f000 fef4 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fd36 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 80010d0:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001230 <walk+0x1ec>
 80010d4:	2007      	movs	r0, #7
 80010d6:	f000 feeb 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fd2d 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(4, ANGLE_4_INIT + 20);
 80010e2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800121c <walk+0x1d8>
 80010e6:	2004      	movs	r0, #4
 80010e8:	f000 fee2 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fd24 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(8, ANGLE_8_INIT - 20);
 80010f4:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001234 <walk+0x1f0>
 80010f8:	2008      	movs	r0, #8
 80010fa:	f000 fed9 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fd1b 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 8001106:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8001224 <walk+0x1e0>
 800110a:	2004      	movs	r0, #4
 800110c:	f000 fed0 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fd12 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(9, ANGLE_9_INIT - 55);
 8001118:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8001228 <walk+0x1e4>
 800111c:	2009      	movs	r0, #9
 800111e:	f000 fec7 	bl	8001eb0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(11, ANGLE_11_INIT);
 8001122:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8001238 <walk+0x1f4>
 8001126:	200b      	movs	r0, #11
 8001128:	f000 fec2 	bl	8001eb0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(2, ANGLE_2_INIT - 30);
 800112c:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800123c <walk+0x1f8>
 8001130:	2002      	movs	r0, #2
 8001132:	f000 febd 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fcff 	bl	8002b3c <HAL_Delay>

		PCA9685_SetServoAngle(6, ANGLE_6_INIT + 30);
 800113e:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8001240 <walk+0x1fc>
 8001142:	2006      	movs	r0, #6
 8001144:	f000 feb4 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fcf6 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(10, ANGLE_10_INIT + 30);
 8001150:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001154:	200a      	movs	r0, #10
 8001156:	f000 feab 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fced 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(2, ANGLE_2_INIT);
 8001162:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001244 <walk+0x200>
 8001166:	2002      	movs	r0, #2
 8001168:	f000 fea2 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4618      	mov	r0, r3
 8001170:	f001 fce4 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 8001174:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8001248 <walk+0x204>
 8001178:	2006      	movs	r0, #6
 800117a:	f000 fe99 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fcdb 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(10, ANGLE_10_INIT + 30);
 8001186:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800118a:	200a      	movs	r0, #10
 800118c:	f000 fe90 	bl	8001eb0 <PCA9685_SetServoAngle>

		//		STATE 2
		PCA9685_SetServoAngle(5, ANGLE_5_INIT + 30);
 8001190:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800124c <walk+0x208>
 8001194:	2005      	movs	r0, #5
 8001196:	f000 fe8b 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fccd 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(9, ANGLE_9_INIT);
 80011a2:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001250 <walk+0x20c>
 80011a6:	2009      	movs	r0, #9
 80011a8:	f000 fe82 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fcc4 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 80011b4:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001238 <walk+0x1f4>
 80011b8:	2005      	movs	r0, #5
 80011ba:	f000 fe79 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 fcbb 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(8, ANGLE_8_INIT + 20);
 80011c6:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001220 <walk+0x1dc>
 80011ca:	2008      	movs	r0, #8
 80011cc:	f000 fe70 	bl	8001eb0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(10, ANGLE_10_INIT);
 80011d0:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80011d4:	200a      	movs	r0, #10
 80011d6:	f000 fe6b 	bl	8001eb0 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(3, ANGLE_3_INIT + 20);
 80011da:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800124c <walk+0x208>
 80011de:	2003      	movs	r0, #3
 80011e0:	f000 fe66 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fca8 	bl	8002b3c <HAL_Delay>
		HAL_UART_Receive(&huart2, (uint8_t *)rx_buffer, 50, 500);
 80011ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011f0:	2232      	movs	r2, #50	; 0x32
 80011f2:	4918      	ldr	r1, [pc, #96]	; (8001254 <walk+0x210>)
 80011f4:	4818      	ldr	r0, [pc, #96]	; (8001258 <walk+0x214>)
 80011f6:	f007 f82c 	bl	8008252 <HAL_UART_Receive>
		if (rx_buffer[0]!='w')
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <walk+0x210>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b77      	cmp	r3, #119	; 0x77
 8001200:	d108      	bne.n	8001214 <walk+0x1d0>
	while(rx_buffer[0]=='w')
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <walk+0x210>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b77      	cmp	r3, #119	; 0x77
 8001208:	f43f af3e 	beq.w	8001088 <walk+0x44>
		{
			return ;
		}
	}
	vTaskDelete(NULL);
 800120c:	2000      	movs	r0, #0
 800120e:	f00c f941 	bl	800d494 <vTaskDelete>
 8001212:	e000      	b.n	8001216 <walk+0x1d2>
			return ;
 8001214:	bf00      	nop
}
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	42a00000 	.word	0x42a00000
 8001220:	42be0000 	.word	0x42be0000
 8001224:	42700000 	.word	0x42700000
 8001228:	42340000 	.word	0x42340000
 800122c:	00000000 	.word	0x00000000
 8001230:	42dc0000 	.word	0x42dc0000
 8001234:	425c0000 	.word	0x425c0000
 8001238:	420c0000 	.word	0x420c0000
 800123c:	42b40000 	.word	0x42b40000
 8001240:	43070000 	.word	0x43070000
 8001244:	42f00000 	.word	0x42f00000
 8001248:	42d20000 	.word	0x42d20000
 800124c:	42820000 	.word	0x42820000
 8001250:	42c80000 	.word	0x42c80000
 8001254:	20004ebc 	.word	0x20004ebc
 8001258:	20004f90 	.word	0x20004f90

0800125c <rotate>:

void rotate(void *parameters)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	int delay_time = 100;
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	60fb      	str	r3, [r7, #12]
//	while(1)
//	{
		PCA9685_SetServoAngle(4, ANGLE_4_INIT + 20);
 8001268:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800134c <rotate+0xf0>
 800126c:	2004      	movs	r0, #4
 800126e:	f000 fe1f 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fc61 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(8, ANGLE_8_INIT + 30);
 800127a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001350 <rotate+0xf4>
 800127e:	2008      	movs	r0, #8
 8001280:	f000 fe16 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fc58 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(4, ANGLE_4_INIT);
 800128c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8001354 <rotate+0xf8>
 8001290:	2004      	movs	r0, #4
 8001292:	f000 fe0d 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fc4f 	bl	8002b3c <HAL_Delay>

		PCA9685_SetServoAngle(5, ANGLE_5_INIT + 30);
 800129e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8001358 <rotate+0xfc>
 80012a2:	2005      	movs	r0, #5
 80012a4:	f000 fe04 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 fc46 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(9, ANGLE_9_INIT + 30);
 80012b0:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800135c <rotate+0x100>
 80012b4:	2009      	movs	r0, #9
 80012b6:	f000 fdfb 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fc3d 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(5, ANGLE_5_INIT);
 80012c2:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001360 <rotate+0x104>
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 fdf2 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fc34 	bl	8002b3c <HAL_Delay>

		PCA9685_SetServoAngle(6, ANGLE_6_INIT + 30);
 80012d4:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001364 <rotate+0x108>
 80012d8:	2006      	movs	r0, #6
 80012da:	f000 fde9 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 fc2b 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(10, ANGLE_10_INIT + 30);
 80012e6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80012ea:	200a      	movs	r0, #10
 80012ec:	f000 fde0 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 fc22 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(6, ANGLE_6_INIT);
 80012f8:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001350 <rotate+0xf4>
 80012fc:	2006      	movs	r0, #6
 80012fe:	f000 fdd7 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4618      	mov	r0, r3
 8001306:	f001 fc19 	bl	8002b3c <HAL_Delay>

		PCA9685_SetServoAngle(7, ANGLE_7_INIT - 30);
 800130a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800134c <rotate+0xf0>
 800130e:	2007      	movs	r0, #7
 8001310:	f000 fdce 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fc10 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(11, ANGLE_11_INIT + 30);
 800131c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001358 <rotate+0xfc>
 8001320:	200b      	movs	r0, #11
 8001322:	f000 fdc5 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4618      	mov	r0, r3
 800132a:	f001 fc07 	bl	8002b3c <HAL_Delay>
		PCA9685_SetServoAngle(7, ANGLE_7_INIT);
 800132e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001368 <rotate+0x10c>
 8001332:	2007      	movs	r0, #7
 8001334:	f000 fdbc 	bl	8001eb0 <PCA9685_SetServoAngle>
		HAL_Delay(delay_time);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4618      	mov	r0, r3
 800133c:	f001 fbfe 	bl	8002b3c <HAL_Delay>

		start_normal();
 8001340:	f7ff fe28 	bl	8000f94 <start_normal>
//	}
//	vTaskDelete(NULL);
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	42a00000 	.word	0x42a00000
 8001350:	42d20000 	.word	0x42d20000
 8001354:	42700000 	.word	0x42700000
 8001358:	42820000 	.word	0x42820000
 800135c:	43020000 	.word	0x43020000
 8001360:	420c0000 	.word	0x420c0000
 8001364:	43070000 	.word	0x43070000
 8001368:	42dc0000 	.word	0x42dc0000

0800136c <bt_config>:
	}
	vTaskDelete(NULL);
}

void bt_config(void *parameters)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	int state = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_UART_Receive(&huart2, (uint8_t *)rx_buffer, 50, 500);
 8001378:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800137c:	2232      	movs	r2, #50	; 0x32
 800137e:	490f      	ldr	r1, [pc, #60]	; (80013bc <bt_config+0x50>)
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <bt_config+0x54>)
 8001382:	f006 ff66 	bl	8008252 <HAL_UART_Receive>
		if (rx_buffer[0] == 'w')
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <bt_config+0x50>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b77      	cmp	r3, #119	; 0x77
 800138c:	d103      	bne.n	8001396 <bt_config+0x2a>
//				PCA9685_SetServoAngle(4, ANGLE_4_INIT);
//				HAL_Delay(delay_time);
//				state = !state;
//			}

			walk(0);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fe58 	bl	8001044 <walk>
 8001394:	e7f0      	b.n	8001378 <bt_config+0xc>

		}
		else if (rx_buffer[0] == 's')
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <bt_config+0x50>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b73      	cmp	r3, #115	; 0x73
 800139c:	d102      	bne.n	80013a4 <bt_config+0x38>
		{
			start_normal();
 800139e:	f7ff fdf9 	bl	8000f94 <start_normal>
 80013a2:	e7e9      	b.n	8001378 <bt_config+0xc>
//			state = !state;
		}

		else if(rx_buffer[0] == 'd' || rx_buffer[0] == 'a')
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <bt_config+0x50>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b64      	cmp	r3, #100	; 0x64
 80013aa:	d003      	beq.n	80013b4 <bt_config+0x48>
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <bt_config+0x50>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b61      	cmp	r3, #97	; 0x61
 80013b2:	d1e1      	bne.n	8001378 <bt_config+0xc>
		{
			rotate(0);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff ff51 	bl	800125c <rotate>
		HAL_UART_Receive(&huart2, (uint8_t *)rx_buffer, 50, 500);
 80013ba:	e7dd      	b.n	8001378 <bt_config+0xc>
 80013bc:	20004ebc 	.word	0x20004ebc
 80013c0:	20004f90 	.word	0x20004f90

080013c4 <faces>:
	}
	vTaskDelete(NULL);
}

void faces(void *parameters)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
	int times = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	2340      	movs	r3, #64	; 0x40
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	4a35      	ldr	r2, [pc, #212]	; (80014b0 <faces+0xec>)
 80013dc:	2100      	movs	r1, #0
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 fdd8 	bl	8001f94 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80013e4:	f000 ff02 	bl	80021ec <SSD1306_UpdateScreen>
		HAL_Delay(times + 1000);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 fba4 	bl	8002b3c <HAL_Delay>
		SSD1306_Clear();
 80013f4:	f000 ffa0 	bl	8002338 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face2, 128, 64, 1);
 80013f8:	2301      	movs	r3, #1
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	2340      	movs	r3, #64	; 0x40
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	4a2c      	ldr	r2, [pc, #176]	; (80014b4 <faces+0xf0>)
 8001404:	2100      	movs	r1, #0
 8001406:	2000      	movs	r0, #0
 8001408:	f000 fdc4 	bl	8001f94 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800140c:	f000 feee 	bl	80021ec <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4618      	mov	r0, r3
 8001414:	f001 fb92 	bl	8002b3c <HAL_Delay>
		SSD1306_Clear();
 8001418:	f000 ff8e 	bl	8002338 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face3, 128, 64, 1);
 800141c:	2301      	movs	r3, #1
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	2340      	movs	r3, #64	; 0x40
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <faces+0xf4>)
 8001428:	2100      	movs	r1, #0
 800142a:	2000      	movs	r0, #0
 800142c:	f000 fdb2 	bl	8001f94 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001430:	f000 fedc 	bl	80021ec <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4618      	mov	r0, r3
 8001438:	f001 fb80 	bl	8002b3c <HAL_Delay>
		SSD1306_Clear();
 800143c:	f000 ff7c 	bl	8002338 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face4, 128, 64, 1);
 8001440:	2301      	movs	r3, #1
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	2340      	movs	r3, #64	; 0x40
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <faces+0xf8>)
 800144c:	2100      	movs	r1, #0
 800144e:	2000      	movs	r0, #0
 8001450:	f000 fda0 	bl	8001f94 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001454:	f000 feca 	bl	80021ec <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fb6e 	bl	8002b3c <HAL_Delay>
		SSD1306_Clear();
 8001460:	f000 ff6a 	bl	8002338 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face5, 128, 64, 1);
 8001464:	2301      	movs	r3, #1
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	2340      	movs	r3, #64	; 0x40
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <faces+0xfc>)
 8001470:	2100      	movs	r1, #0
 8001472:	2000      	movs	r0, #0
 8001474:	f000 fd8e 	bl	8001f94 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8001478:	f000 feb8 	bl	80021ec <SSD1306_UpdateScreen>
		HAL_Delay(times);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fb5c 	bl	8002b3c <HAL_Delay>
		SSD1306_Clear();
 8001484:	f000 ff58 	bl	8002338 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face6, 128, 64, 1);
 8001488:	2301      	movs	r3, #1
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	2340      	movs	r3, #64	; 0x40
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <faces+0x100>)
 8001494:	2100      	movs	r1, #0
 8001496:	2000      	movs	r0, #0
 8001498:	f000 fd7c 	bl	8001f94 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800149c:	f000 fea6 	bl	80021ec <SSD1306_UpdateScreen>
		HAL_Delay(times);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 fb4a 	bl	8002b3c <HAL_Delay>
		SSD1306_Clear();
 80014a8:	f000 ff46 	bl	8002338 <SSD1306_Clear>
		SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 80014ac:	e790      	b.n	80013d0 <faces+0xc>
 80014ae:	bf00      	nop
 80014b0:	0800f910 	.word	0x0800f910
 80014b4:	0800fd10 	.word	0x0800fd10
 80014b8:	08010110 	.word	0x08010110
 80014bc:	08010510 	.word	0x08010510
 80014c0:	08010910 	.word	0x08010910
 80014c4:	08010d10 	.word	0x08010d10

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f001 faf3 	bl	8002ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d2:	f000 f847 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d6:	f000 fa01 	bl	80018dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80014da:	f000 f8c5 	bl	8001668 <MX_I2C1_Init>
  MX_I2S3_Init();
 80014de:	f000 f91f 	bl	8001720 <MX_I2S3_Init>
  MX_SPI1_Init();
 80014e2:	f000 f94d 	bl	8001780 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80014e6:	f000 f9cf 	bl	8001888 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80014ea:	f000 f8eb 	bl	80016c4 <MX_I2C3_Init>
  MX_TIM2_Init();
 80014ee:	f000 f97d 	bl	80017ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	SSD1306_Init();
 80014f2:	f000 fdb7 	bl	8002064 <SSD1306_Init>
	PCA9685_Init(&hi2c3);
 80014f6:	4813      	ldr	r0, [pc, #76]	; (8001544 <main+0x7c>)
 80014f8:	f000 fd36 	bl	8001f68 <PCA9685_Init>

	start_normal();
 80014fc:	f7ff fd4a 	bl	8000f94 <start_normal>
	xTaskHandle HT1, HT2;
	xTaskCreate(faces, "face_show", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT1);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	2300      	movs	r3, #0
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2300      	movs	r3, #0
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	490e      	ldr	r1, [pc, #56]	; (8001548 <main+0x80>)
 800150e:	480f      	ldr	r0, [pc, #60]	; (800154c <main+0x84>)
 8001510:	f00b fe7b 	bl	800d20a <xTaskCreate>
	xTaskCreate(bt_config, "bt", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT2);
 8001514:	463b      	mov	r3, r7
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	2300      	movs	r3, #0
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	490b      	ldr	r1, [pc, #44]	; (8001550 <main+0x88>)
 8001522:	480c      	ldr	r0, [pc, #48]	; (8001554 <main+0x8c>)
 8001524:	f00b fe71 	bl	800d20a <xTaskCreate>
	//	vTaskStartScheduler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001528:	f00a fd5c 	bl	800bfe4 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <main+0x90>)
 800152e:	2100      	movs	r1, #0
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <main+0x94>)
 8001532:	f00a fda1 	bl	800c078 <osThreadNew>
 8001536:	4603      	mov	r3, r0
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <main+0x98>)
 800153a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800153c:	f00a fd76 	bl	800c02c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001540:	e7fe      	b.n	8001540 <main+0x78>
 8001542:	bf00      	nop
 8001544:	20004e14 	.word	0x20004e14
 8001548:	0800f8d8 	.word	0x0800f8d8
 800154c:	080013c5 	.word	0x080013c5
 8001550:	0800f8e4 	.word	0x0800f8e4
 8001554:	0800136d 	.word	0x0800136d
 8001558:	08011110 	.word	0x08011110
 800155c:	08001af9 	.word	0x08001af9
 8001560:	20004e10 	.word	0x20004e10

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b098      	sub	sp, #96	; 0x60
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800156e:	2230      	movs	r2, #48	; 0x30
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f00e f82c 	bl	800f5d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <SystemClock_Config+0xfc>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a30      	ldr	r2, [pc, #192]	; (8001660 <SystemClock_Config+0xfc>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <SystemClock_Config+0xfc>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <SystemClock_Config+0x100>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <SystemClock_Config+0x100>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <SystemClock_Config+0x100>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ce:	2301      	movs	r3, #1
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d8:	2302      	movs	r3, #2
 80015da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015e2:	2308      	movs	r3, #8
 80015e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015e6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015f0:	2307      	movs	r3, #7
 80015f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f8:	4618      	mov	r0, r3
 80015fa:	f005 fa5f 	bl	8006abc <HAL_RCC_OscConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001604:	f000 fa94 	bl	8001b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001608:	230f      	movs	r3, #15
 800160a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160c:	2302      	movs	r3, #2
 800160e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001614:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2105      	movs	r1, #5
 8001626:	4618      	mov	r0, r3
 8001628:	f005 fcc0 	bl	8006fac <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001632:	f000 fa7d 	bl	8001b30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001636:	2301      	movs	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800163a:	23c0      	movs	r3, #192	; 0xc0
 800163c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800163e:	2302      	movs	r3, #2
 8001640:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4618      	mov	r0, r3
 8001648:	f005 fede 	bl	8007408 <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001652:	f000 fa6d 	bl	8001b30 <Error_Handler>
  }
}
 8001656:	bf00      	nop
 8001658:	3760      	adds	r7, #96	; 0x60
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_I2C1_Init+0x50>)
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <MX_I2C1_Init+0x54>)
 8001670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x58>)
 8001676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a6:	f003 fafb 	bl	8004ca0 <HAL_I2C_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b0:	f000 fa3e 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20004e68 	.word	0x20004e68
 80016bc:	40005400 	.word	0x40005400
 80016c0:	00061a80 	.word	0x00061a80

080016c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MX_I2C3_Init+0x50>)
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <MX_I2C3_Init+0x54>)
 80016cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_I2C3_Init+0x50>)
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <MX_I2C3_Init+0x58>)
 80016d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_I2C3_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_I2C3_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_I2C3_Init+0x50>)
 80016e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <MX_I2C3_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_I2C3_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <MX_I2C3_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_I2C3_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <MX_I2C3_Init+0x50>)
 8001702:	f003 facd 	bl	8004ca0 <HAL_I2C_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800170c:	f000 fa10 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20004e14 	.word	0x20004e14
 8001718:	40005c00 	.word	0x40005c00
 800171c:	00061a80 	.word	0x00061a80

08001720 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <MX_I2S3_Init+0x54>)
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <MX_I2S3_Init+0x58>)
 8001728:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_I2S3_Init+0x54>)
 800172c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001730:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_I2S3_Init+0x54>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_I2S3_Init+0x54>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <MX_I2S3_Init+0x54>)
 8001740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001744:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_I2S3_Init+0x54>)
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <MX_I2S3_Init+0x5c>)
 800174a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_I2S3_Init+0x54>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_I2S3_Init+0x54>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_I2S3_Init+0x54>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_I2S3_Init+0x54>)
 8001760:	f004 fd0c 	bl	800617c <HAL_I2S_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800176a:	f000 f9e1 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20004fd4 	.word	0x20004fd4
 8001778:	40003c00 	.word	0x40003c00
 800177c:	00017700 	.word	0x00017700

08001780 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <MX_SPI1_Init+0x64>)
 8001786:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <MX_SPI1_Init+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_SPI1_Init+0x64>)
 800178c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001790:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_SPI1_Init+0x64>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <MX_SPI1_Init+0x64>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017cc:	220a      	movs	r2, #10
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017d2:	f005 ff59 	bl	8007688 <HAL_SPI_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017dc:	f000 f9a8 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20004ef0 	.word	0x20004ef0
 80017e8:	40013000 	.word	0x40013000

080017ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	463b      	mov	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <MX_TIM2_Init+0x98>)
 800180a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800180e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8001810:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <MX_TIM2_Init+0x98>)
 8001812:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001816:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_TIM2_Init+0x98>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <MX_TIM2_Init+0x98>)
 8001820:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001824:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <MX_TIM2_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_TIM2_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001832:	4814      	ldr	r0, [pc, #80]	; (8001884 <MX_TIM2_Init+0x98>)
 8001834:	f005 ffb1 	bl	800779a <HAL_TIM_Base_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800183e:	f000 f977 	bl	8001b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001846:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	4619      	mov	r1, r3
 800184e:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_TIM2_Init+0x98>)
 8001850:	f006 f96a 	bl	8007b28 <HAL_TIM_ConfigClockSource>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800185a:	f000 f969 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001866:	463b      	mov	r3, r7
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <MX_TIM2_Init+0x98>)
 800186c:	f006 fb82 	bl	8007f74 <HAL_TIMEx_MasterConfigSynchronization>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001876:	f000 f95b 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20004f48 	.word	0x20004f48

08001888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <MX_USART2_UART_Init+0x50>)
 8001890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 8001894:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018c0:	f006 fbe8 	bl	8008094 <HAL_UART_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ca:	f000 f931 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20004f90 	.word	0x20004f90
 80018d8:	40004400 	.word	0x40004400

080018dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	4b79      	ldr	r3, [pc, #484]	; (8001adc <MX_GPIO_Init+0x200>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a78      	ldr	r2, [pc, #480]	; (8001adc <MX_GPIO_Init+0x200>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b76      	ldr	r3, [pc, #472]	; (8001adc <MX_GPIO_Init+0x200>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	4b72      	ldr	r3, [pc, #456]	; (8001adc <MX_GPIO_Init+0x200>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a71      	ldr	r2, [pc, #452]	; (8001adc <MX_GPIO_Init+0x200>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b6f      	ldr	r3, [pc, #444]	; (8001adc <MX_GPIO_Init+0x200>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b6b      	ldr	r3, [pc, #428]	; (8001adc <MX_GPIO_Init+0x200>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a6a      	ldr	r2, [pc, #424]	; (8001adc <MX_GPIO_Init+0x200>)
 8001934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b68      	ldr	r3, [pc, #416]	; (8001adc <MX_GPIO_Init+0x200>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b64      	ldr	r3, [pc, #400]	; (8001adc <MX_GPIO_Init+0x200>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a63      	ldr	r2, [pc, #396]	; (8001adc <MX_GPIO_Init+0x200>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b61      	ldr	r3, [pc, #388]	; (8001adc <MX_GPIO_Init+0x200>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b5d      	ldr	r3, [pc, #372]	; (8001adc <MX_GPIO_Init+0x200>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a5c      	ldr	r2, [pc, #368]	; (8001adc <MX_GPIO_Init+0x200>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b5a      	ldr	r3, [pc, #360]	; (8001adc <MX_GPIO_Init+0x200>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b56      	ldr	r3, [pc, #344]	; (8001adc <MX_GPIO_Init+0x200>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a55      	ldr	r2, [pc, #340]	; (8001adc <MX_GPIO_Init+0x200>)
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b53      	ldr	r3, [pc, #332]	; (8001adc <MX_GPIO_Init+0x200>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2108      	movs	r1, #8
 800199e:	4850      	ldr	r0, [pc, #320]	; (8001ae0 <MX_GPIO_Init+0x204>)
 80019a0:	f001 fc00 	bl	80031a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_8, GPIO_PIN_SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f240 1101 	movw	r1, #257	; 0x101
 80019aa:	484e      	ldr	r0, [pc, #312]	; (8001ae4 <MX_GPIO_Init+0x208>)
 80019ac:	f001 fbfa 	bl	80031a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BLUETOOTH_RESET_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80019b0:	2200      	movs	r2, #0
 80019b2:	f64f 0110 	movw	r1, #63504	; 0xf810
 80019b6:	484c      	ldr	r0, [pc, #304]	; (8001ae8 <MX_GPIO_Init+0x20c>)
 80019b8:	f001 fbf4 	bl	80031a4 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80019bc:	2308      	movs	r3, #8
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	4843      	ldr	r0, [pc, #268]	; (8001ae0 <MX_GPIO_Init+0x204>)
 80019d4:	f001 fa4a 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC8 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_8;
 80019d8:	f240 1301 	movw	r3, #257	; 0x101
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	483c      	ldr	r0, [pc, #240]	; (8001ae4 <MX_GPIO_Init+0x208>)
 80019f2:	f001 fa3b 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019f6:	2308      	movs	r3, #8
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a06:	2305      	movs	r3, #5
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4834      	ldr	r0, [pc, #208]	; (8001ae4 <MX_GPIO_Init+0x208>)
 8001a12:	f001 fa2b 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a1a:	4b34      	ldr	r3, [pc, #208]	; (8001aec <MX_GPIO_Init+0x210>)
 8001a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	4831      	ldr	r0, [pc, #196]	; (8001af0 <MX_GPIO_Init+0x214>)
 8001a2a:	f001 fa1f 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	482c      	ldr	r0, [pc, #176]	; (8001af4 <MX_GPIO_Init+0x218>)
 8001a42:	f001 fa13 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a58:	2305      	movs	r3, #5
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	4824      	ldr	r0, [pc, #144]	; (8001af4 <MX_GPIO_Init+0x218>)
 8001a64:	f001 fa02 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_RESET_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_RESET_Pin;
 8001a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BLUETOOTH_RESET_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4819      	ldr	r0, [pc, #100]	; (8001ae8 <MX_GPIO_Init+0x20c>)
 8001a82:	f001 f9f3 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001a86:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001a8a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4812      	ldr	r0, [pc, #72]	; (8001ae8 <MX_GPIO_Init+0x20c>)
 8001aa0:	f001 f9e4 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <MX_GPIO_Init+0x20c>)
 8001ab8:	f001 f9d8 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <MX_GPIO_Init+0x210>)
 8001ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <MX_GPIO_Init+0x204>)
 8001ad0:	f001 f9cc 	bl	8002e6c <HAL_GPIO_Init>

}
 8001ad4:	bf00      	nop
 8001ad6:	3730      	adds	r7, #48	; 0x30
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	10120000 	.word	0x10120000
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020400 	.word	0x40020400

08001af8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001b00:	f00d fa1c 	bl	800ef3c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f00a fb49 	bl	800c19c <osDelay>
 8001b0a:	e7fb      	b.n	8001b04 <StartDefaultTask+0xc>

08001b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d101      	bne.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b1e:	f000 ffed 	bl	8002afc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40001000 	.word	0x40001000

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b38:	e7fe      	b.n	8001b38 <Error_Handler+0x8>
	...

08001b3c <PCA9685_SetBit>:
#include "main.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af04      	add	r7, sp, #16
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
 8001b46:	460b      	mov	r3, r1
 8001b48:	71bb      	strb	r3, [r7, #6]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 8001b4e:	797b      	ldrb	r3, [r7, #5]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <PCA9685_SetBit+0x1c>
 8001b54:	2301      	movs	r3, #1
 8001b56:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <PCA9685_SetBit+0xb0>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	230a      	movs	r3, #10
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	2301      	movs	r3, #1
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	f107 030f 	add.w	r3, r7, #15
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	f003 fbd1 	bl	8005318 <HAL_I2C_Mem_Read>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e031      	b.n	8001be4 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	2201      	movs	r2, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	b25b      	sxtb	r3, r3
 8001b8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	b25a      	sxtb	r2, r3
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8001ba0:	797b      	ldrb	r3, [r7, #5]
 8001ba2:	f003 0201 	and.w	r2, r3, #1
 8001ba6:	79bb      	ldrb	r3, [r7, #6]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	b25a      	sxtb	r2, r3
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <PCA9685_SetBit+0xb0>)
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	230a      	movs	r3, #10
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	f107 030f 	add.w	r3, r7, #15
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	2180      	movs	r1, #128	; 0x80
 8001bd4:	f003 faa6 	bl	8005124 <HAL_I2C_Mem_Write>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000501c 	.word	0x2000501c

08001bf0 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <PCA9685_SoftwareReset+0x30>)
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	1dfa      	adds	r2, r7, #7
 8001c00:	230a      	movs	r3, #10
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2301      	movs	r3, #1
 8001c06:	2100      	movs	r1, #0
 8001c08:	f003 f98e 	bl	8004f28 <HAL_I2C_Master_Transmit>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000501c 	.word	0x2000501c

08001c24 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	461a      	mov	r2, r3
 8001c32:	2104      	movs	r1, #4
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff ff81 	bl	8001b3c <PCA9685_SetBit>
 8001c3a:	4603      	mov	r3, r0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	461a      	mov	r2, r3
 8001c52:	2107      	movs	r1, #7
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff ff71 	bl	8001b3c <PCA9685_SetBit>
 8001c5a:	4603      	mov	r3, r0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	461a      	mov	r2, r3
 8001c72:	2105      	movs	r1, #5
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff ff61 	bl	8001b3c <PCA9685_SetBit>
 8001c7a:	4603      	mov	r3, r0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	0000      	movs	r0, r0
	...

08001c88 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d902      	bls.n	8001ca2 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	72fb      	strb	r3, [r7, #11]
 8001ca0:	e046      	b.n	8001d30 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2b18      	cmp	r3, #24
 8001ca6:	d802      	bhi.n	8001cae <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001ca8:	23ff      	movs	r3, #255	; 0xff
 8001caa:	72fb      	strb	r3, [r7, #11]
 8001cac:	e040      	b.n	8001d30 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb8:	ee17 0a90 	vmov	r0, s15
 8001cbc:	f7fe fbf4 	bl	80004a8 <__aeabi_f2d>
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <PCA9685_SetPwmFrequency+0xe8>)
 8001cc6:	f7fe fc47 	bl	8000558 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	a126      	add	r1, pc, #152	; (adr r1, 8001d68 <PCA9685_SetPwmFrequency+0xe0>)
 8001cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cd4:	f7fe fd6a 	bl	80007ac <__aeabi_ddiv>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <PCA9685_SetPwmFrequency+0xec>)
 8001ce6:	f7fe fa7f 	bl	80001e8 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe feeb 	bl	8000acc <__aeabi_d2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7fe fbd4 	bl	80004a8 <__aeabi_f2d>
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <PCA9685_SetPwmFrequency+0xf0>)
 8001d06:	f7fe fa71 	bl	80001ec <__adddf3>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	ec43 2b17 	vmov	d7, r2, r3
 8001d12:	eeb0 0a47 	vmov.f32	s0, s14
 8001d16:	eef0 0a67 	vmov.f32	s1, s15
 8001d1a:	f00d fd29 	bl	800f770 <floor>
 8001d1e:	ec53 2b10 	vmov	r2, r3, d0
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe feb1 	bl	8000a8c <__aeabi_d2uiz>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7ff ff77 	bl	8001c24 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <PCA9685_SetPwmFrequency+0xf4>)
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	f107 030b 	add.w	r3, r7, #11
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	22fe      	movs	r2, #254	; 0xfe
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	f003 f9e9 	bl	8005124 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7ff ff66 	bl	8001c24 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff ff73 	bl	8001c44 <PCA9685_RestartMode>
	return PCA9685_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	4177d784 	.word	0x4177d784
 8001d70:	40b00000 	.word	0x40b00000
 8001d74:	3ff00000 	.word	0x3ff00000
 8001d78:	3fe00000 	.word	0x3fe00000
 8001d7c:	2000501c 	.word	0x2000501c

08001d80 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af04      	add	r7, sp, #16
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	80bb      	strh	r3, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3306      	adds	r3, #6
 8001d9a:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001d9c:	88bb      	ldrh	r3, [r7, #4]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8001da2:	88bb      	ldrh	r3, [r7, #4]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <PCA9685_SetPwm+0x70>)
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	230a      	movs	r3, #10
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	2304      	movs	r3, #4
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	f107 0308 	add.w	r3, r7, #8
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	f003 f9a5 	bl	8005124 <HAL_I2C_Mem_Write>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000501c 	.word	0x2000501c

08001df4 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	80bb      	strh	r3, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8001e06:	88bb      	ldrh	r3, [r7, #4]
 8001e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0c:	d302      	bcc.n	8001e14 <PCA9685_SetPin+0x20>
 8001e0e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001e12:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8001e14:	79bb      	ldrb	r3, [r7, #6]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d025      	beq.n	8001e66 <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d108      	bne.n	8001e32 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ffa9 	bl	8001d80 <PCA9685_SetPwm>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	e03a      	b.n	8001ea8 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001e32:	88bb      	ldrh	r3, [r7, #4]
 8001e34:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d108      	bne.n	8001e4e <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff9b 	bl	8001d80 <PCA9685_SetPwm>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	e02c      	b.n	8001ea8 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001e4e:	88bb      	ldrh	r3, [r7, #4]
 8001e50:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e54:	330f      	adds	r3, #15
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff8f 	bl	8001d80 <PCA9685_SetPwm>
 8001e62:	4603      	mov	r3, r0
 8001e64:	e020      	b.n	8001ea8 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001e66:	88bb      	ldrh	r3, [r7, #4]
 8001e68:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d108      	bne.n	8001e82 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff81 	bl	8001d80 <PCA9685_SetPwm>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	e012      	b.n	8001ea8 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001e82:	88bb      	ldrh	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d108      	bne.n	8001e9a <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff75 	bl	8001d80 <PCA9685_SetPwm>
 8001e96:	4603      	mov	r3, r0
 8001e98:	e006      	b.n	8001ea8 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001e9a:	88ba      	ldrh	r2, [r7, #4]
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff6d 	bl	8001d80 <PCA9685_SetPwm>
 8001ea6:	4603      	mov	r3, r0
    }
  }
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	ed87 0a00 	vstr	s0, [r7]
 8001ebc:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001ebe:	edd7 7a00 	vldr	s15, [r7]
 8001ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	d502      	bpl.n	8001ed2 <PCA9685_SetServoAngle+0x22>
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001ed2:	edd7 7a00 	vldr	s15, [r7]
 8001ed6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001f58 <PCA9685_SetServoAngle+0xa8>
 8001eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	dd01      	ble.n	8001ee8 <PCA9685_SetServoAngle+0x38>
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <PCA9685_SetServoAngle+0xac>)
 8001ee6:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001ee8:	6838      	ldr	r0, [r7, #0]
 8001eea:	f7fe fadd 	bl	80004a8 <__aeabi_f2d>
 8001eee:	a318      	add	r3, pc, #96	; (adr r3, 8001f50 <PCA9685_SetServoAngle+0xa0>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	f7fe fb30 	bl	8000558 <__aeabi_dmul>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <PCA9685_SetServoAngle+0xb0>)
 8001f06:	f7fe fc51 	bl	80007ac <__aeabi_ddiv>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <PCA9685_SetServoAngle+0xb4>)
 8001f18:	f7fe f968 	bl	80001ec <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fdd2 	bl	8000acc <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f34:	ee17 3a90 	vmov	r3, s15
 8001f38:	b299      	uxth	r1, r3
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff58 	bl	8001df4 <PCA9685_SetPin>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	00000000 	.word	0x00000000
 8001f54:	407c2000 	.word	0x407c2000
 8001f58:	43340000 	.word	0x43340000
 8001f5c:	43340000 	.word	0x43340000
 8001f60:	40668000 	.word	0x40668000
 8001f64:	405f4000 	.word	0x405f4000

08001f68 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <PCA9685_Init+0x28>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8001f76:	f7ff fe3b 	bl	8001bf0 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8001f7a:	2030      	movs	r0, #48	; 0x30
 8001f7c:	f7ff fe84 	bl	8001c88 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f7ff fe6f 	bl	8001c64 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000501c 	.word	0x2000501c

08001f94 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	81fb      	strh	r3, [r7, #14]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	81bb      	strh	r3, [r7, #12]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fae:	3307      	adds	r3, #7
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da00      	bge.n	8001fb6 <SSD1306_DrawBitmap+0x22>
 8001fb4:	3307      	adds	r3, #7
 8001fb6:	10db      	asrs	r3, r3, #3
 8001fb8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	82bb      	strh	r3, [r7, #20]
 8001fc2:	e044      	b.n	800204e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	827b      	strh	r3, [r7, #18]
 8001fc8:	e02f      	b.n	800202a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001fca:	8a7b      	ldrh	r3, [r7, #18]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
 8001fda:	e012      	b.n	8002002 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001fdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fe0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fe4:	fb02 f203 	mul.w	r2, r2, r3
 8001fe8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	da00      	bge.n	8001ff2 <SSD1306_DrawBitmap+0x5e>
 8001ff0:	3307      	adds	r3, #7
 8001ff2:	10db      	asrs	r3, r3, #3
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002002:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002006:	2b00      	cmp	r3, #0
 8002008:	da09      	bge.n	800201e <SSD1306_DrawBitmap+0x8a>
 800200a:	89fa      	ldrh	r2, [r7, #14]
 800200c:	8a7b      	ldrh	r3, [r7, #18]
 800200e:	4413      	add	r3, r2
 8002010:	b29b      	uxth	r3, r3
 8002012:	89b9      	ldrh	r1, [r7, #12]
 8002014:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f92d 	bl	8002278 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800201e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002022:	b29b      	uxth	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	b29b      	uxth	r3, r3
 8002028:	827b      	strh	r3, [r7, #18]
 800202a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800202e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002032:	429a      	cmp	r2, r3
 8002034:	dbc9      	blt.n	8001fca <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002036:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800203a:	b29b      	uxth	r3, r3
 800203c:	3301      	adds	r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	82bb      	strh	r3, [r7, #20]
 8002042:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002046:	b29b      	uxth	r3, r3
 8002048:	3301      	adds	r3, #1
 800204a:	b29b      	uxth	r3, r3
 800204c:	81bb      	strh	r3, [r7, #12]
 800204e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002052:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002056:	429a      	cmp	r2, r3
 8002058:	dbb4      	blt.n	8001fc4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800205a:	bf00      	nop
 800205c:	bf00      	nop
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800206a:	f000 f96f 	bl	800234c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800206e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002072:	2201      	movs	r2, #1
 8002074:	2178      	movs	r1, #120	; 0x78
 8002076:	485b      	ldr	r0, [pc, #364]	; (80021e4 <SSD1306_Init+0x180>)
 8002078:	f003 fb74 	bl	8005764 <HAL_I2C_IsDeviceReady>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002082:	2300      	movs	r3, #0
 8002084:	e0a9      	b.n	80021da <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002086:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800208a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800208c:	e002      	b.n	8002094 <SSD1306_Init+0x30>
		p--;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3b01      	subs	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f9      	bne.n	800208e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800209a:	22ae      	movs	r2, #174	; 0xae
 800209c:	2100      	movs	r1, #0
 800209e:	2078      	movs	r0, #120	; 0x78
 80020a0:	f000 f9b2 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80020a4:	2220      	movs	r2, #32
 80020a6:	2100      	movs	r1, #0
 80020a8:	2078      	movs	r0, #120	; 0x78
 80020aa:	f000 f9ad 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80020ae:	2210      	movs	r2, #16
 80020b0:	2100      	movs	r1, #0
 80020b2:	2078      	movs	r0, #120	; 0x78
 80020b4:	f000 f9a8 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020b8:	22b0      	movs	r2, #176	; 0xb0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2078      	movs	r0, #120	; 0x78
 80020be:	f000 f9a3 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80020c2:	22c8      	movs	r2, #200	; 0xc8
 80020c4:	2100      	movs	r1, #0
 80020c6:	2078      	movs	r0, #120	; 0x78
 80020c8:	f000 f99e 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	2078      	movs	r0, #120	; 0x78
 80020d2:	f000 f999 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80020d6:	2210      	movs	r2, #16
 80020d8:	2100      	movs	r1, #0
 80020da:	2078      	movs	r0, #120	; 0x78
 80020dc:	f000 f994 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80020e0:	2240      	movs	r2, #64	; 0x40
 80020e2:	2100      	movs	r1, #0
 80020e4:	2078      	movs	r0, #120	; 0x78
 80020e6:	f000 f98f 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80020ea:	2281      	movs	r2, #129	; 0x81
 80020ec:	2100      	movs	r1, #0
 80020ee:	2078      	movs	r0, #120	; 0x78
 80020f0:	f000 f98a 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80020f4:	22ff      	movs	r2, #255	; 0xff
 80020f6:	2100      	movs	r1, #0
 80020f8:	2078      	movs	r0, #120	; 0x78
 80020fa:	f000 f985 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80020fe:	22a1      	movs	r2, #161	; 0xa1
 8002100:	2100      	movs	r1, #0
 8002102:	2078      	movs	r0, #120	; 0x78
 8002104:	f000 f980 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002108:	22a6      	movs	r2, #166	; 0xa6
 800210a:	2100      	movs	r1, #0
 800210c:	2078      	movs	r0, #120	; 0x78
 800210e:	f000 f97b 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002112:	22a8      	movs	r2, #168	; 0xa8
 8002114:	2100      	movs	r1, #0
 8002116:	2078      	movs	r0, #120	; 0x78
 8002118:	f000 f976 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800211c:	223f      	movs	r2, #63	; 0x3f
 800211e:	2100      	movs	r1, #0
 8002120:	2078      	movs	r0, #120	; 0x78
 8002122:	f000 f971 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002126:	22a4      	movs	r2, #164	; 0xa4
 8002128:	2100      	movs	r1, #0
 800212a:	2078      	movs	r0, #120	; 0x78
 800212c:	f000 f96c 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002130:	22d3      	movs	r2, #211	; 0xd3
 8002132:	2100      	movs	r1, #0
 8002134:	2078      	movs	r0, #120	; 0x78
 8002136:	f000 f967 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2078      	movs	r0, #120	; 0x78
 8002140:	f000 f962 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002144:	22d5      	movs	r2, #213	; 0xd5
 8002146:	2100      	movs	r1, #0
 8002148:	2078      	movs	r0, #120	; 0x78
 800214a:	f000 f95d 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800214e:	22f0      	movs	r2, #240	; 0xf0
 8002150:	2100      	movs	r1, #0
 8002152:	2078      	movs	r0, #120	; 0x78
 8002154:	f000 f958 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002158:	22d9      	movs	r2, #217	; 0xd9
 800215a:	2100      	movs	r1, #0
 800215c:	2078      	movs	r0, #120	; 0x78
 800215e:	f000 f953 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002162:	2222      	movs	r2, #34	; 0x22
 8002164:	2100      	movs	r1, #0
 8002166:	2078      	movs	r0, #120	; 0x78
 8002168:	f000 f94e 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800216c:	22da      	movs	r2, #218	; 0xda
 800216e:	2100      	movs	r1, #0
 8002170:	2078      	movs	r0, #120	; 0x78
 8002172:	f000 f949 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002176:	2212      	movs	r2, #18
 8002178:	2100      	movs	r1, #0
 800217a:	2078      	movs	r0, #120	; 0x78
 800217c:	f000 f944 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002180:	22db      	movs	r2, #219	; 0xdb
 8002182:	2100      	movs	r1, #0
 8002184:	2078      	movs	r0, #120	; 0x78
 8002186:	f000 f93f 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800218a:	2220      	movs	r2, #32
 800218c:	2100      	movs	r1, #0
 800218e:	2078      	movs	r0, #120	; 0x78
 8002190:	f000 f93a 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002194:	228d      	movs	r2, #141	; 0x8d
 8002196:	2100      	movs	r1, #0
 8002198:	2078      	movs	r0, #120	; 0x78
 800219a:	f000 f935 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800219e:	2214      	movs	r2, #20
 80021a0:	2100      	movs	r1, #0
 80021a2:	2078      	movs	r0, #120	; 0x78
 80021a4:	f000 f930 	bl	8002408 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80021a8:	22af      	movs	r2, #175	; 0xaf
 80021aa:	2100      	movs	r1, #0
 80021ac:	2078      	movs	r0, #120	; 0x78
 80021ae:	f000 f92b 	bl	8002408 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80021b2:	222e      	movs	r2, #46	; 0x2e
 80021b4:	2100      	movs	r1, #0
 80021b6:	2078      	movs	r0, #120	; 0x78
 80021b8:	f000 f926 	bl	8002408 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80021bc:	2000      	movs	r0, #0
 80021be:	f000 f843 	bl	8002248 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80021c2:	f000 f813 	bl	80021ec <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <SSD1306_Init+0x184>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <SSD1306_Init+0x184>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <SSD1306_Init+0x184>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80021d8:	2301      	movs	r3, #1
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20004e68 	.word	0x20004e68
 80021e8:	200004b4 	.word	0x200004b4

080021ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	71fb      	strb	r3, [r7, #7]
 80021f6:	e01d      	b.n	8002234 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	3b50      	subs	r3, #80	; 0x50
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	2100      	movs	r1, #0
 8002202:	2078      	movs	r0, #120	; 0x78
 8002204:	f000 f900 	bl	8002408 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	2078      	movs	r0, #120	; 0x78
 800220e:	f000 f8fb 	bl	8002408 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002212:	2210      	movs	r2, #16
 8002214:	2100      	movs	r1, #0
 8002216:	2078      	movs	r0, #120	; 0x78
 8002218:	f000 f8f6 	bl	8002408 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	01db      	lsls	r3, r3, #7
 8002220:	4a08      	ldr	r2, [pc, #32]	; (8002244 <SSD1306_UpdateScreen+0x58>)
 8002222:	441a      	add	r2, r3
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	2140      	movs	r1, #64	; 0x40
 8002228:	2078      	movs	r0, #120	; 0x78
 800222a:	f000 f8a5 	bl	8002378 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	3301      	adds	r3, #1
 8002232:	71fb      	strb	r3, [r7, #7]
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2b07      	cmp	r3, #7
 8002238:	d9de      	bls.n	80021f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200000b4 	.word	0x200000b4

08002248 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <SSD1306_Fill+0x14>
 8002258:	2300      	movs	r3, #0
 800225a:	e000      	b.n	800225e <SSD1306_Fill+0x16>
 800225c:	23ff      	movs	r3, #255	; 0xff
 800225e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002262:	4619      	mov	r1, r3
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <SSD1306_Fill+0x2c>)
 8002266:	f00d f9b3 	bl	800f5d0 <memset>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200000b4 	.word	0x200000b4

08002278 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
 8002282:	460b      	mov	r3, r1
 8002284:	80bb      	strh	r3, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	70fb      	strb	r3, [r7, #3]
	if (
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	2b7f      	cmp	r3, #127	; 0x7f
 800228e:	d848      	bhi.n	8002322 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002290:	88bb      	ldrh	r3, [r7, #4]
 8002292:	2b3f      	cmp	r3, #63	; 0x3f
 8002294:	d845      	bhi.n	8002322 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <SSD1306_DrawPixel+0xb8>)
 8002298:	791b      	ldrb	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d11a      	bne.n	80022e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022b2:	88fa      	ldrh	r2, [r7, #6]
 80022b4:	88bb      	ldrh	r3, [r7, #4]
 80022b6:	08db      	lsrs	r3, r3, #3
 80022b8:	b298      	uxth	r0, r3
 80022ba:	4603      	mov	r3, r0
 80022bc:	01db      	lsls	r3, r3, #7
 80022be:	4413      	add	r3, r2
 80022c0:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <SSD1306_DrawPixel+0xbc>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	b25a      	sxtb	r2, r3
 80022c6:	88bb      	ldrh	r3, [r7, #4]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	2101      	movs	r1, #1
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	b25b      	sxtb	r3, r3
 80022d4:	4313      	orrs	r3, r2
 80022d6:	b259      	sxtb	r1, r3
 80022d8:	88fa      	ldrh	r2, [r7, #6]
 80022da:	4603      	mov	r3, r0
 80022dc:	01db      	lsls	r3, r3, #7
 80022de:	4413      	add	r3, r2
 80022e0:	b2c9      	uxtb	r1, r1
 80022e2:	4a14      	ldr	r2, [pc, #80]	; (8002334 <SSD1306_DrawPixel+0xbc>)
 80022e4:	54d1      	strb	r1, [r2, r3]
 80022e6:	e01d      	b.n	8002324 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	b298      	uxth	r0, r3
 80022f0:	4603      	mov	r3, r0
 80022f2:	01db      	lsls	r3, r3, #7
 80022f4:	4413      	add	r3, r2
 80022f6:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <SSD1306_DrawPixel+0xbc>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	b25a      	sxtb	r2, r3
 80022fc:	88bb      	ldrh	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	b25b      	sxtb	r3, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	b25b      	sxtb	r3, r3
 800230e:	4013      	ands	r3, r2
 8002310:	b259      	sxtb	r1, r3
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	4603      	mov	r3, r0
 8002316:	01db      	lsls	r3, r3, #7
 8002318:	4413      	add	r3, r2
 800231a:	b2c9      	uxtb	r1, r1
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <SSD1306_DrawPixel+0xbc>)
 800231e:	54d1      	strb	r1, [r2, r3]
 8002320:	e000      	b.n	8002324 <SSD1306_DrawPixel+0xac>
		return;
 8002322:	bf00      	nop
	}
}
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	200004b4 	.word	0x200004b4
 8002334:	200000b4 	.word	0x200000b4

08002338 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800233c:	2000      	movs	r0, #0
 800233e:	f7ff ff83 	bl	8002248 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002342:	f7ff ff53 	bl	80021ec <SSD1306_UpdateScreen>
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <ssd1306_I2C_Init+0x28>)
 8002354:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002356:	e002      	b.n	800235e <ssd1306_I2C_Init+0x12>
		p--;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f9      	bne.n	8002358 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	0003d090 	.word	0x0003d090

08002378 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b0c7      	sub	sp, #284	; 0x11c
 800237c:	af02      	add	r7, sp, #8
 800237e:	4604      	mov	r4, r0
 8002380:	4608      	mov	r0, r1
 8002382:	4639      	mov	r1, r7
 8002384:	600a      	str	r2, [r1, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	1dfb      	adds	r3, r7, #7
 800238a:	4622      	mov	r2, r4
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	1dbb      	adds	r3, r7, #6
 8002390:	4602      	mov	r2, r0
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	460a      	mov	r2, r1
 8002398:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800239a:	f107 030c 	add.w	r3, r7, #12
 800239e:	1dba      	adds	r2, r7, #6
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80023aa:	e010      	b.n	80023ce <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80023ac:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023b0:	463a      	mov	r2, r7
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	441a      	add	r2, r3
 80023b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023ba:	3301      	adds	r3, #1
 80023bc:	7811      	ldrb	r1, [r2, #0]
 80023be:	f107 020c 	add.w	r2, r7, #12
 80023c2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80023c4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023c8:	3301      	adds	r3, #1
 80023ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80023ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	1d3a      	adds	r2, r7, #4
 80023d6:	8812      	ldrh	r2, [r2, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d8e7      	bhi.n	80023ac <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80023dc:	1dfb      	adds	r3, r7, #7
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	b299      	uxth	r1, r3
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	3301      	adds	r3, #1
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f107 020c 	add.w	r2, r7, #12
 80023ee:	200a      	movs	r0, #10
 80023f0:	9000      	str	r0, [sp, #0]
 80023f2:	4804      	ldr	r0, [pc, #16]	; (8002404 <ssd1306_I2C_WriteMulti+0x8c>)
 80023f4:	f002 fd98 	bl	8004f28 <HAL_I2C_Master_Transmit>
}
 80023f8:	bf00      	nop
 80023fa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	bf00      	nop
 8002404:	20004e68 	.word	0x20004e68

08002408 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af02      	add	r7, sp, #8
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
 8002412:	460b      	mov	r3, r1
 8002414:	71bb      	strb	r3, [r7, #6]
 8002416:	4613      	mov	r3, r2
 8002418:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800241a:	79bb      	ldrb	r3, [r7, #6]
 800241c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800241e:	797b      	ldrb	r3, [r7, #5]
 8002420:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	b299      	uxth	r1, r3
 8002426:	f107 020c 	add.w	r2, r7, #12
 800242a:	230a      	movs	r3, #10
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2302      	movs	r3, #2
 8002430:	4803      	ldr	r0, [pc, #12]	; (8002440 <ssd1306_I2C_Write+0x38>)
 8002432:	f002 fd79 	bl	8004f28 <HAL_I2C_Master_Transmit>
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20004e68 	.word	0x20004e68

08002444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_MspInit+0x64>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <HAL_MspInit+0x64>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_MspInit+0x64>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_MspInit+0x64>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <HAL_MspInit+0x64>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_MspInit+0x64>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	210f      	movs	r1, #15
 8002486:	f06f 0001 	mvn.w	r0, #1
 800248a:	f000 fc33 	bl	8002cf4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2105      	movs	r1, #5
 8002492:	2005      	movs	r0, #5
 8002494:	f000 fc2e 	bl	8002cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002498:	2005      	movs	r0, #5
 800249a:	f000 fc47 	bl	8002d2c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800

080024ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	; 0x30
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a42      	ldr	r2, [pc, #264]	; (80025d4 <HAL_I2C_MspInit+0x128>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d12c      	bne.n	8002528 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a40      	ldr	r2, [pc, #256]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b3e      	ldr	r3, [pc, #248]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80024ea:	23c0      	movs	r3, #192	; 0xc0
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ee:	2312      	movs	r3, #18
 80024f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f2:	2301      	movs	r3, #1
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024fa:	2304      	movs	r3, #4
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	4619      	mov	r1, r3
 8002504:	4835      	ldr	r0, [pc, #212]	; (80025dc <HAL_I2C_MspInit+0x130>)
 8002506:	f000 fcb1 	bl	8002e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	4b32      	ldr	r3, [pc, #200]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a31      	ldr	r2, [pc, #196]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 8002514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002526:	e050      	b.n	80025ca <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a2c      	ldr	r2, [pc, #176]	; (80025e0 <HAL_I2C_MspInit+0x134>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d14b      	bne.n	80025ca <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a20      	ldr	r2, [pc, #128]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800256a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002570:	2312      	movs	r3, #18
 8002572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002574:	2301      	movs	r3, #1
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800257c:	2304      	movs	r3, #4
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	4817      	ldr	r0, [pc, #92]	; (80025e4 <HAL_I2C_MspInit+0x138>)
 8002588:	f000 fc70 	bl	8002e6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800258c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002592:	2312      	movs	r3, #18
 8002594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002596:	2301      	movs	r3, #1
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259a:	2303      	movs	r3, #3
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800259e:	2304      	movs	r3, #4
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	4619      	mov	r1, r3
 80025a8:	480f      	ldr	r0, [pc, #60]	; (80025e8 <HAL_I2C_MspInit+0x13c>)
 80025aa:	f000 fc5f 	bl	8002e6c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a08      	ldr	r2, [pc, #32]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 80025b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_I2C_MspInit+0x12c>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
}
 80025ca:	bf00      	nop
 80025cc:	3730      	adds	r7, #48	; 0x30
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40005400 	.word	0x40005400
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40005c00 	.word	0x40005c00
 80025e4:	40020800 	.word	0x40020800
 80025e8:	40020000 	.word	0x40020000

080025ec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a28      	ldr	r2, [pc, #160]	; (80026ac <HAL_I2S_MspInit+0xc0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d14a      	bne.n	80026a4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_I2S_MspInit+0xc4>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <HAL_I2S_MspInit+0xc4>)
 8002618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_I2S_MspInit+0xc4>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_I2S_MspInit+0xc4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <HAL_I2S_MspInit+0xc4>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_I2S_MspInit+0xc4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_I2S_MspInit+0xc4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <HAL_I2S_MspInit+0xc4>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_I2S_MspInit+0xc4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002662:	2310      	movs	r3, #16
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002672:	2306      	movs	r3, #6
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4619      	mov	r1, r3
 800267c:	480d      	ldr	r0, [pc, #52]	; (80026b4 <HAL_I2S_MspInit+0xc8>)
 800267e:	f000 fbf5 	bl	8002e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002682:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002694:	2306      	movs	r3, #6
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	4619      	mov	r1, r3
 800269e:	4806      	ldr	r0, [pc, #24]	; (80026b8 <HAL_I2S_MspInit+0xcc>)
 80026a0:	f000 fbe4 	bl	8002e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80026a4:	bf00      	nop
 80026a6:	3728      	adds	r7, #40	; 0x28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40003c00 	.word	0x40003c00
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40020800 	.word	0x40020800

080026bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a19      	ldr	r2, [pc, #100]	; (8002740 <HAL_SPI_MspInit+0x84>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d12b      	bne.n	8002736 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	4b18      	ldr	r3, [pc, #96]	; (8002744 <HAL_SPI_MspInit+0x88>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a17      	ldr	r2, [pc, #92]	; (8002744 <HAL_SPI_MspInit+0x88>)
 80026e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_SPI_MspInit+0x88>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_SPI_MspInit+0x88>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a10      	ldr	r2, [pc, #64]	; (8002744 <HAL_SPI_MspInit+0x88>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <HAL_SPI_MspInit+0x88>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002716:	23e0      	movs	r3, #224	; 0xe0
 8002718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002726:	2305      	movs	r3, #5
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	4619      	mov	r1, r3
 8002730:	4805      	ldr	r0, [pc, #20]	; (8002748 <HAL_SPI_MspInit+0x8c>)
 8002732:	f000 fb9b 	bl	8002e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002736:	bf00      	nop
 8002738:	3728      	adds	r7, #40	; 0x28
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40013000 	.word	0x40013000
 8002744:	40023800 	.word	0x40023800
 8002748:	40020000 	.word	0x40020000

0800274c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d115      	bne.n	800278a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_TIM_Base_MspInit+0x48>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a0b      	ldr	r2, [pc, #44]	; (8002794 <HAL_TIM_Base_MspInit+0x48>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_TIM_Base_MspInit+0x48>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2105      	movs	r1, #5
 800277e:	201c      	movs	r0, #28
 8002780:	f000 fab8 	bl	8002cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002784:	201c      	movs	r0, #28
 8002786:	f000 fad1 	bl	8002d2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_UART_MspInit+0x94>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d133      	bne.n	8002822 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a1b      	ldr	r2, [pc, #108]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_UART_MspInit+0x98>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027f2:	230c      	movs	r3, #12
 80027f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002802:	2307      	movs	r3, #7
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	4619      	mov	r1, r3
 800280c:	4809      	ldr	r0, [pc, #36]	; (8002834 <HAL_UART_MspInit+0x9c>)
 800280e:	f000 fb2d 	bl	8002e6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2105      	movs	r1, #5
 8002816:	2026      	movs	r0, #38	; 0x26
 8002818:	f000 fa6c 	bl	8002cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800281c:	2026      	movs	r0, #38	; 0x26
 800281e:	f000 fa85 	bl	8002d2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	; 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40004400 	.word	0x40004400
 8002830:	40023800 	.word	0x40023800
 8002834:	40020000 	.word	0x40020000

08002838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002848:	2200      	movs	r2, #0
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	2036      	movs	r0, #54	; 0x36
 800284e:	f000 fa51 	bl	8002cf4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002852:	2036      	movs	r0, #54	; 0x36
 8002854:	f000 fa6a 	bl	8002d2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <HAL_InitTick+0xa4>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <HAL_InitTick+0xa4>)
 8002862:	f043 0310 	orr.w	r3, r3, #16
 8002866:	6413      	str	r3, [r2, #64]	; 0x40
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <HAL_InitTick+0xa4>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002874:	f107 0210 	add.w	r2, r7, #16
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f004 fd90 	bl	80073a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002884:	f004 fd66 	bl	8007354 <HAL_RCC_GetPCLK1Freq>
 8002888:	4603      	mov	r3, r0
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <HAL_InitTick+0xa8>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0c9b      	lsrs	r3, r3, #18
 8002898:	3b01      	subs	r3, #1
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_InitTick+0xac>)
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <HAL_InitTick+0xb0>)
 80028a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_InitTick+0xac>)
 80028a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80028aa:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <HAL_InitTick+0xac>)
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <HAL_InitTick+0xac>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_InitTick+0xac>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80028bc:	4809      	ldr	r0, [pc, #36]	; (80028e4 <HAL_InitTick+0xac>)
 80028be:	f004 ff6c 	bl	800779a <HAL_TIM_Base_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d104      	bne.n	80028d2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80028c8:	4806      	ldr	r0, [pc, #24]	; (80028e4 <HAL_InitTick+0xac>)
 80028ca:	f004 ffb5 	bl	8007838 <HAL_TIM_Base_Start_IT>
 80028ce:	4603      	mov	r3, r0
 80028d0:	e000      	b.n	80028d4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3730      	adds	r7, #48	; 0x30
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800
 80028e0:	431bde83 	.word	0x431bde83
 80028e4:	20005020 	.word	0x20005020
 80028e8:	40001000 	.word	0x40001000

080028ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <NMI_Handler+0x4>

080028f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f6:	e7fe      	b.n	80028f6 <HardFault_Handler+0x4>

080028f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <MemManage_Handler+0x4>

080028fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002902:	e7fe      	b.n	8002902 <BusFault_Handler+0x4>

08002904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002908:	e7fe      	b.n	8002908 <UsageFault_Handler+0x4>

0800290a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <TIM2_IRQHandler+0x30>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <TIM2_IRQHandler+0x18>
			timer_count++;
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <TIM2_IRQHandler+0x34>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b07      	ldr	r3, [pc, #28]	; (800295c <TIM2_IRQHandler+0x34>)
 800293e:	701a      	strb	r2, [r3, #0]

	if(timer_count>5)
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <TIM2_IRQHandler+0x34>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b05      	cmp	r3, #5
 8002946:	d901      	bls.n	800294c <TIM2_IRQHandler+0x24>
		Message_handler();
 8002948:	f7fe fabe 	bl	8000ec8 <Message_handler>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800294c:	4804      	ldr	r0, [pc, #16]	; (8002960 <TIM2_IRQHandler+0x38>)
 800294e:	f004 ffe3 	bl	8007918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20004ddc 	.word	0x20004ddc
 800295c:	200000b0 	.word	0x200000b0
 8002960:	20004f48 	.word	0x20004f48

08002964 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 8002968:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <USART2_IRQHandler+0x3c>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	b2d1      	uxtb	r1, r2
 8002970:	4a0b      	ldr	r2, [pc, #44]	; (80029a0 <USART2_IRQHandler+0x3c>)
 8002972:	7011      	strb	r1, [r2, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <USART2_IRQHandler+0x40>)
 8002978:	18d1      	adds	r1, r2, r3
 800297a:	230a      	movs	r3, #10
 800297c:	2201      	movs	r2, #1
 800297e:	480a      	ldr	r0, [pc, #40]	; (80029a8 <USART2_IRQHandler+0x44>)
 8002980:	f005 fc67 	bl	8008252 <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <USART2_IRQHandler+0x3c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	3b01      	subs	r3, #1
 800298a:	4a06      	ldr	r2, [pc, #24]	; (80029a4 <USART2_IRQHandler+0x40>)
 800298c:	5cd3      	ldrb	r3, [r2, r3]
 800298e:	2b0a      	cmp	r3, #10
 8002990:	d101      	bne.n	8002996 <USART2_IRQHandler+0x32>
		Message_handler();
 8002992:	f7fe fa99 	bl	8000ec8 <Message_handler>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002996:	4804      	ldr	r0, [pc, #16]	; (80029a8 <USART2_IRQHandler+0x44>)
 8002998:	f005 fcfe 	bl	8008398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200000b1 	.word	0x200000b1
 80029a4:	20004ddc 	.word	0x20004ddc
 80029a8:	20004f90 	.word	0x20004f90

080029ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */


  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <TIM6_DAC_IRQHandler+0x10>)
 80029b2:	f004 ffb1 	bl	8007918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20005020 	.word	0x20005020

080029c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <OTG_FS_IRQHandler+0x10>)
 80029c6:	f000 fe71 	bl	80036ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200054b4 	.word	0x200054b4

080029d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029dc:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <_sbrk+0x5c>)
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <_sbrk+0x60>)
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <_sbrk+0x64>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <_sbrk+0x64>)
 80029f2:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <_sbrk+0x68>)
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <_sbrk+0x64>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d207      	bcs.n	8002a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a04:	f00c fd9c 	bl	800f540 <__errno>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	220c      	movs	r2, #12
 8002a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a12:	e009      	b.n	8002a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <_sbrk+0x64>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a1a:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <_sbrk+0x64>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <_sbrk+0x64>)
 8002a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20020000 	.word	0x20020000
 8002a34:	00000400 	.word	0x00000400
 8002a38:	200004bc 	.word	0x200004bc
 8002a3c:	200057c8 	.word	0x200057c8

08002a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <SystemInit+0x20>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <SystemInit+0x20>)
 8002a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a68:	480d      	ldr	r0, [pc, #52]	; (8002aa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a6a:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a6c:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a70:	e002      	b.n	8002a78 <LoopCopyDataInit>

08002a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a76:	3304      	adds	r3, #4

08002a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a7c:	d3f9      	bcc.n	8002a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a80:	4c0b      	ldr	r4, [pc, #44]	; (8002ab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a84:	e001      	b.n	8002a8a <LoopFillZerobss>

08002a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a88:	3204      	adds	r2, #4

08002a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a8c:	d3fb      	bcc.n	8002a86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a8e:	f7ff ffd7 	bl	8002a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a92:	f00c fd5b 	bl	800f54c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a96:	f7fe fd17 	bl	80014c8 <main>
  bx  lr    
 8002a9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002aa8:	0801115c 	.word	0x0801115c
  ldr r2, =_sbss
 8002aac:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002ab0:	200057c8 	.word	0x200057c8

08002ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab4:	e7fe      	b.n	8002ab4 <ADC_IRQHandler>
	...

08002ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_Init+0x40>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <HAL_Init+0x40>)
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <HAL_Init+0x40>)
 8002ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <HAL_Init+0x40>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f000 f8fc 	bl	8002cde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7ff fea6 	bl	8002838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aec:	f7ff fcaa 	bl	8002444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00

08002afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_IncTick+0x20>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_IncTick+0x24>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_IncTick+0x24>)
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000008 	.word	0x20000008
 8002b20:	20005068 	.word	0x20005068

08002b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_GetTick+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20005068 	.word	0x20005068

08002b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff ffee 	bl	8002b24 <HAL_GetTick>
 8002b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b54:	d005      	beq.n	8002b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_Delay+0x44>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b62:	bf00      	nop
 8002b64:	f7ff ffde 	bl	8002b24 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d8f7      	bhi.n	8002b64 <HAL_Delay+0x28>
  {
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000008 	.word	0x20000008

08002b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb6:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	60d3      	str	r3, [r2, #12]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	f003 0307 	and.w	r3, r3, #7
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db0b      	blt.n	8002c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4907      	ldr	r1, [pc, #28]	; (8002c20 <__NVIC_EnableIRQ+0x38>)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2001      	movs	r0, #1
 8002c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db0a      	blt.n	8002c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	490c      	ldr	r1, [pc, #48]	; (8002c70 <__NVIC_SetPriority+0x4c>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	440b      	add	r3, r1
 8002c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c4c:	e00a      	b.n	8002c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4908      	ldr	r1, [pc, #32]	; (8002c74 <__NVIC_SetPriority+0x50>)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	440b      	add	r3, r1
 8002c62:	761a      	strb	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000e100 	.word	0xe000e100
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f1c3 0307 	rsb	r3, r3, #7
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf28      	it	cs
 8002c96:	2304      	movcs	r3, #4
 8002c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d902      	bls.n	8002ca8 <NVIC_EncodePriority+0x30>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3b03      	subs	r3, #3
 8002ca6:	e000      	b.n	8002caa <NVIC_EncodePriority+0x32>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	401a      	ands	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	43d9      	mvns	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	4313      	orrs	r3, r2
         );
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ff4c 	bl	8002b84 <__NVIC_SetPriorityGrouping>
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d06:	f7ff ff61 	bl	8002bcc <__NVIC_GetPriorityGrouping>
 8002d0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	6978      	ldr	r0, [r7, #20]
 8002d12:	f7ff ffb1 	bl	8002c78 <NVIC_EncodePriority>
 8002d16:	4602      	mov	r2, r0
 8002d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff80 	bl	8002c24 <__NVIC_SetPriority>
}
 8002d24:	bf00      	nop
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff54 	bl	8002be8 <__NVIC_EnableIRQ>
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d56:	f7ff fee5 	bl	8002b24 <HAL_GetTick>
 8002d5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d008      	beq.n	8002d7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e052      	b.n	8002e20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0216 	bic.w	r2, r2, #22
 8002d88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <HAL_DMA_Abort+0x62>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0208 	bic.w	r2, r2, #8
 8002db8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dca:	e013      	b.n	8002df4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dcc:	f7ff feaa 	bl	8002b24 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d90c      	bls.n	8002df4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2203      	movs	r2, #3
 8002dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e015      	b.n	8002e20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e4      	bne.n	8002dcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	223f      	movs	r2, #63	; 0x3f
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d004      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e00c      	b.n	8002e60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2205      	movs	r2, #5
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	; 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	e16b      	b.n	8003160 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e88:	2201      	movs	r2, #1
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	f040 815a 	bne.w	800315a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d005      	beq.n	8002ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d130      	bne.n	8002f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 0201 	and.w	r2, r3, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d017      	beq.n	8002f5c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d123      	bne.n	8002fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	08da      	lsrs	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3208      	adds	r2, #8
 8002f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	220f      	movs	r2, #15
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	08da      	lsrs	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3208      	adds	r2, #8
 8002faa:	69b9      	ldr	r1, [r7, #24]
 8002fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0203 	and.w	r2, r3, #3
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80b4 	beq.w	800315a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b60      	ldr	r3, [pc, #384]	; (8003178 <HAL_GPIO_Init+0x30c>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4a5f      	ldr	r2, [pc, #380]	; (8003178 <HAL_GPIO_Init+0x30c>)
 8002ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003000:	6453      	str	r3, [r2, #68]	; 0x44
 8003002:	4b5d      	ldr	r3, [pc, #372]	; (8003178 <HAL_GPIO_Init+0x30c>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800300e:	4a5b      	ldr	r2, [pc, #364]	; (800317c <HAL_GPIO_Init+0x310>)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	3302      	adds	r3, #2
 8003016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	220f      	movs	r2, #15
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_GPIO_Init+0x314>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d02b      	beq.n	8003092 <HAL_GPIO_Init+0x226>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a51      	ldr	r2, [pc, #324]	; (8003184 <HAL_GPIO_Init+0x318>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d025      	beq.n	800308e <HAL_GPIO_Init+0x222>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a50      	ldr	r2, [pc, #320]	; (8003188 <HAL_GPIO_Init+0x31c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01f      	beq.n	800308a <HAL_GPIO_Init+0x21e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4f      	ldr	r2, [pc, #316]	; (800318c <HAL_GPIO_Init+0x320>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d019      	beq.n	8003086 <HAL_GPIO_Init+0x21a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4e      	ldr	r2, [pc, #312]	; (8003190 <HAL_GPIO_Init+0x324>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <HAL_GPIO_Init+0x216>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a4d      	ldr	r2, [pc, #308]	; (8003194 <HAL_GPIO_Init+0x328>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00d      	beq.n	800307e <HAL_GPIO_Init+0x212>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a4c      	ldr	r2, [pc, #304]	; (8003198 <HAL_GPIO_Init+0x32c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <HAL_GPIO_Init+0x20e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a4b      	ldr	r2, [pc, #300]	; (800319c <HAL_GPIO_Init+0x330>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_GPIO_Init+0x20a>
 8003072:	2307      	movs	r3, #7
 8003074:	e00e      	b.n	8003094 <HAL_GPIO_Init+0x228>
 8003076:	2308      	movs	r3, #8
 8003078:	e00c      	b.n	8003094 <HAL_GPIO_Init+0x228>
 800307a:	2306      	movs	r3, #6
 800307c:	e00a      	b.n	8003094 <HAL_GPIO_Init+0x228>
 800307e:	2305      	movs	r3, #5
 8003080:	e008      	b.n	8003094 <HAL_GPIO_Init+0x228>
 8003082:	2304      	movs	r3, #4
 8003084:	e006      	b.n	8003094 <HAL_GPIO_Init+0x228>
 8003086:	2303      	movs	r3, #3
 8003088:	e004      	b.n	8003094 <HAL_GPIO_Init+0x228>
 800308a:	2302      	movs	r3, #2
 800308c:	e002      	b.n	8003094 <HAL_GPIO_Init+0x228>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_GPIO_Init+0x228>
 8003092:	2300      	movs	r3, #0
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	f002 0203 	and.w	r2, r2, #3
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	4093      	lsls	r3, r2
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a4:	4935      	ldr	r1, [pc, #212]	; (800317c <HAL_GPIO_Init+0x310>)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	3302      	adds	r3, #2
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b2:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <HAL_GPIO_Init+0x334>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030d6:	4a32      	ldr	r2, [pc, #200]	; (80031a0 <HAL_GPIO_Init+0x334>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030dc:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_GPIO_Init+0x334>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003100:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <HAL_GPIO_Init+0x334>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003106:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <HAL_GPIO_Init+0x334>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800312a:	4a1d      	ldr	r2, [pc, #116]	; (80031a0 <HAL_GPIO_Init+0x334>)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_GPIO_Init+0x334>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003154:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <HAL_GPIO_Init+0x334>)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3301      	adds	r3, #1
 800315e:	61fb      	str	r3, [r7, #28]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2b0f      	cmp	r3, #15
 8003164:	f67f ae90 	bls.w	8002e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	40013800 	.word	0x40013800
 8003180:	40020000 	.word	0x40020000
 8003184:	40020400 	.word	0x40020400
 8003188:	40020800 	.word	0x40020800
 800318c:	40020c00 	.word	0x40020c00
 8003190:	40021000 	.word	0x40021000
 8003194:	40021400 	.word	0x40021400
 8003198:	40021800 	.word	0x40021800
 800319c:	40021c00 	.word	0x40021c00
 80031a0:	40013c00 	.word	0x40013c00

080031a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
 80031b0:	4613      	mov	r3, r2
 80031b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b4:	787b      	ldrb	r3, [r7, #1]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031c0:	e003      	b.n	80031ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	041a      	lsls	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	619a      	str	r2, [r3, #24]
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80031d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d8:	b08f      	sub	sp, #60	; 0x3c
 80031da:	af0a      	add	r7, sp, #40	; 0x28
 80031dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e054      	b.n	8003292 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f00b feee 	bl	800efe4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2203      	movs	r2, #3
 800320c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f005 fe50 	bl	8008ecc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	687e      	ldr	r6, [r7, #4]
 8003234:	466d      	mov	r5, sp
 8003236:	f106 0410 	add.w	r4, r6, #16
 800323a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800323c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800323e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003246:	e885 0003 	stmia.w	r5, {r0, r1}
 800324a:	1d33      	adds	r3, r6, #4
 800324c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800324e:	6838      	ldr	r0, [r7, #0]
 8003250:	f005 fdca 	bl	8008de8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2101      	movs	r1, #1
 800325a:	4618      	mov	r0, r3
 800325c:	f005 fe47 	bl	8008eee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	687e      	ldr	r6, [r7, #4]
 8003268:	466d      	mov	r5, sp
 800326a:	f106 0410 	add.w	r4, r6, #16
 800326e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800327a:	e885 0003 	stmia.w	r5, {r0, r1}
 800327e:	1d33      	adds	r3, r6, #4
 8003280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003282:	6838      	ldr	r0, [r7, #0]
 8003284:	f005 ff5a 	bl	800913c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800329a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800329a:	b590      	push	{r4, r7, lr}
 800329c:	b089      	sub	sp, #36	; 0x24
 800329e:	af04      	add	r7, sp, #16
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	4608      	mov	r0, r1
 80032a4:	4611      	mov	r1, r2
 80032a6:	461a      	mov	r2, r3
 80032a8:	4603      	mov	r3, r0
 80032aa:	70fb      	strb	r3, [r7, #3]
 80032ac:	460b      	mov	r3, r1
 80032ae:	70bb      	strb	r3, [r7, #2]
 80032b0:	4613      	mov	r3, r2
 80032b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_HCD_HC_Init+0x28>
 80032be:	2302      	movs	r3, #2
 80032c0:	e076      	b.n	80033b0 <HAL_HCD_HC_Init+0x116>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	333d      	adds	r3, #61	; 0x3d
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3338      	adds	r3, #56	; 0x38
 80032ea:	787a      	ldrb	r2, [r7, #1]
 80032ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	3340      	adds	r3, #64	; 0x40
 80032fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80032fe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3339      	adds	r3, #57	; 0x39
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	212c      	movs	r1, #44	; 0x2c
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	333f      	adds	r3, #63	; 0x3f
 8003320:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003324:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	78ba      	ldrb	r2, [r7, #2]
 800332a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800332e:	b2d0      	uxtb	r0, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	333a      	adds	r3, #58	; 0x3a
 800333c:	4602      	mov	r2, r0
 800333e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003340:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003344:	2b00      	cmp	r3, #0
 8003346:	da09      	bge.n	800335c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	333b      	adds	r3, #59	; 0x3b
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e008      	b.n	800336e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	333b      	adds	r3, #59	; 0x3b
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	333c      	adds	r3, #60	; 0x3c
 800337c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003380:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	787c      	ldrb	r4, [r7, #1]
 8003388:	78ba      	ldrb	r2, [r7, #2]
 800338a:	78f9      	ldrb	r1, [r7, #3]
 800338c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800338e:	9302      	str	r3, [sp, #8]
 8003390:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	f897 3020 	ldrb.w	r3, [r7, #32]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	4623      	mov	r3, r4
 800339e:	f006 f84f 	bl	8009440 <USB_HC_Init>
 80033a2:	4603      	mov	r3, r0
 80033a4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd90      	pop	{r4, r7, pc}

080033b8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_HCD_HC_Halt+0x1e>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e00f      	b.n	80033f6 <HAL_HCD_HC_Halt+0x3e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	4611      	mov	r1, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f006 fa8b 	bl	8009902 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	4608      	mov	r0, r1
 800340a:	4611      	mov	r1, r2
 800340c:	461a      	mov	r2, r3
 800340e:	4603      	mov	r3, r0
 8003410:	70fb      	strb	r3, [r7, #3]
 8003412:	460b      	mov	r3, r1
 8003414:	70bb      	strb	r3, [r7, #2]
 8003416:	4613      	mov	r3, r2
 8003418:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	333b      	adds	r3, #59	; 0x3b
 8003428:	78ba      	ldrb	r2, [r7, #2]
 800342a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	212c      	movs	r1, #44	; 0x2c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	333f      	adds	r3, #63	; 0x3f
 800343a:	787a      	ldrb	r2, [r7, #1]
 800343c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800343e:	7c3b      	ldrb	r3, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d112      	bne.n	800346a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	212c      	movs	r1, #44	; 0x2c
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	3342      	adds	r3, #66	; 0x42
 8003452:	2203      	movs	r2, #3
 8003454:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	333d      	adds	r3, #61	; 0x3d
 8003464:	7f3a      	ldrb	r2, [r7, #28]
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	e008      	b.n	800347c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	3342      	adds	r3, #66	; 0x42
 8003478:	2202      	movs	r2, #2
 800347a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b03      	cmp	r3, #3
 8003480:	f200 80c6 	bhi.w	8003610 <HAL_HCD_HC_SubmitRequest+0x210>
 8003484:	a201      	add	r2, pc, #4	; (adr r2, 800348c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	0800349d 	.word	0x0800349d
 8003490:	080035fd 	.word	0x080035fd
 8003494:	08003501 	.word	0x08003501
 8003498:	0800357f 	.word	0x0800357f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800349c:	7c3b      	ldrb	r3, [r7, #16]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	f040 80b8 	bne.w	8003614 <HAL_HCD_HC_SubmitRequest+0x214>
 80034a4:	78bb      	ldrb	r3, [r7, #2]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 80b4 	bne.w	8003614 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80034ac:	8b3b      	ldrh	r3, [r7, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d108      	bne.n	80034c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3355      	adds	r3, #85	; 0x55
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	3355      	adds	r3, #85	; 0x55
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3342      	adds	r3, #66	; 0x42
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034ea:	e093      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	3342      	adds	r3, #66	; 0x42
 80034fa:	2202      	movs	r2, #2
 80034fc:	701a      	strb	r2, [r3, #0]
      break;
 80034fe:	e089      	b.n	8003614 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003500:	78bb      	ldrb	r3, [r7, #2]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11d      	bne.n	8003542 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	3355      	adds	r3, #85	; 0x55
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3342      	adds	r3, #66	; 0x42
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800352c:	e073      	b.n	8003616 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	3342      	adds	r3, #66	; 0x42
 800353c:	2202      	movs	r2, #2
 800353e:	701a      	strb	r2, [r3, #0]
      break;
 8003540:	e069      	b.n	8003616 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	3354      	adds	r3, #84	; 0x54
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3342      	adds	r3, #66	; 0x42
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
      break;
 8003568:	e055      	b.n	8003616 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3342      	adds	r3, #66	; 0x42
 8003578:	2202      	movs	r2, #2
 800357a:	701a      	strb	r2, [r3, #0]
      break;
 800357c:	e04b      	b.n	8003616 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800357e:	78bb      	ldrb	r3, [r7, #2]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11d      	bne.n	80035c0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3355      	adds	r3, #85	; 0x55
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3342      	adds	r3, #66	; 0x42
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80035aa:	e034      	b.n	8003616 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3342      	adds	r3, #66	; 0x42
 80035ba:	2202      	movs	r2, #2
 80035bc:	701a      	strb	r2, [r3, #0]
      break;
 80035be:	e02a      	b.n	8003616 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3354      	adds	r3, #84	; 0x54
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3342      	adds	r3, #66	; 0x42
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
      break;
 80035e6:	e016      	b.n	8003616 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3342      	adds	r3, #66	; 0x42
 80035f6:	2202      	movs	r2, #2
 80035f8:	701a      	strb	r2, [r3, #0]
      break;
 80035fa:	e00c      	b.n	8003616 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3342      	adds	r3, #66	; 0x42
 800360a:	2200      	movs	r2, #0
 800360c:	701a      	strb	r2, [r3, #0]
      break;
 800360e:	e002      	b.n	8003616 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003610:	bf00      	nop
 8003612:	e000      	b.n	8003616 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003614:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	212c      	movs	r1, #44	; 0x2c
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	4413      	add	r3, r2
 8003622:	3344      	adds	r3, #68	; 0x44
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	8b3a      	ldrh	r2, [r7, #24]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	202c      	movs	r0, #44	; 0x2c
 8003630:	fb00 f303 	mul.w	r3, r0, r3
 8003634:	440b      	add	r3, r1
 8003636:	334c      	adds	r3, #76	; 0x4c
 8003638:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	3360      	adds	r3, #96	; 0x60
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	212c      	movs	r1, #44	; 0x2c
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	4413      	add	r3, r2
 8003658:	3350      	adds	r3, #80	; 0x50
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	212c      	movs	r1, #44	; 0x2c
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	3339      	adds	r3, #57	; 0x39
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	3361      	adds	r3, #97	; 0x61
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	222c      	movs	r2, #44	; 0x2c
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	3338      	adds	r3, #56	; 0x38
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	18d1      	adds	r1, r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	f005 ffde 	bl	800965c <USB_HC_StartXfer>
 80036a0:	4603      	mov	r3, r0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop

080036ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f005 fcf7 	bl	80090b6 <USB_GetMode>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	f040 80ef 	bne.w	80038ae <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f005 fcdb 	bl	8009090 <USB_ReadInterrupts>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80e5 	beq.w	80038ac <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f005 fcd2 	bl	8009090 <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036f6:	d104      	bne.n	8003702 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003700:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f005 fcc2 	bl	8009090 <USB_ReadInterrupts>
 800370c:	4603      	mov	r3, r0
 800370e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003716:	d104      	bne.n	8003722 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003720:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f005 fcb2 	bl	8009090 <USB_ReadInterrupts>
 800372c:	4603      	mov	r3, r0
 800372e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003732:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003736:	d104      	bne.n	8003742 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003740:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f005 fca2 	bl	8009090 <USB_ReadInterrupts>
 800374c:	4603      	mov	r3, r0
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d103      	bne.n	800375e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2202      	movs	r2, #2
 800375c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f005 fc94 	bl	8009090 <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800376e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003772:	d115      	bne.n	80037a0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800377c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d108      	bne.n	80037a0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f00b fca6 	bl	800f0e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	4618      	mov	r0, r3
 800379c:	f005 fd8a 	bl	80092b4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f005 fc73 	bl	8009090 <USB_ReadInterrupts>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b4:	d102      	bne.n	80037bc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f001 f9ff 	bl	8004bba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f005 fc65 	bl	8009090 <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d106      	bne.n	80037de <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f00b fc69 	bl	800f0a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2208      	movs	r2, #8
 80037dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f005 fc54 	bl	8009090 <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d101      	bne.n	80037f6 <HAL_HCD_IRQHandler+0x14a>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_HCD_IRQHandler+0x14c>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d012      	beq.n	8003822 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0210 	bic.w	r2, r2, #16
 800380a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f001 f902 	bl	8004a16 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0210 	orr.w	r2, r2, #16
 8003820:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f005 fc32 	bl	8009090 <USB_ReadInterrupts>
 800382c:	4603      	mov	r3, r0
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003836:	d13a      	bne.n	80038ae <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f006 f84f 	bl	80098e0 <USB_HC_ReadInterrupt>
 8003842:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e025      	b.n	8003896 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d018      	beq.n	8003890 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003874:	d106      	bne.n	8003884 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4619      	mov	r1, r3
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8ab 	bl	80039d8 <HCD_HC_IN_IRQHandler>
 8003882:	e005      	b.n	8003890 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fcc6 	bl	800421c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	3301      	adds	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	429a      	cmp	r2, r3
 800389e:	d3d4      	bcc.n	800384a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a8:	615a      	str	r2, [r3, #20]
 80038aa:	e000      	b.n	80038ae <HAL_HCD_IRQHandler+0x202>
      return;
 80038ac:	bf00      	nop
    }
  }
}
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_HCD_Start+0x16>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e013      	b.n	80038f2 <HAL_HCD_Start+0x3e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f005 fae7 	bl	8008eaa <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f005 fd4a 	bl	800937c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_HCD_Stop+0x16>
 800390c:	2302      	movs	r3, #2
 800390e:	e00d      	b.n	800392c <HAL_HCD_Stop+0x32>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f006 f949 	bl	8009bb4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f005 fcf1 	bl	8009328 <USB_ResetPort>
 8003946:	4603      	mov	r3, r0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3360      	adds	r3, #96	; 0x60
 800396a:	781b      	ldrb	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	3350      	adds	r3, #80	; 0x50
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f005 fd35 	bl	800941c <USB_GetCurrentFrame>
 80039b2:	4603      	mov	r3, r0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f005 fd10 	bl	80093ee <USB_GetHostSpeed>
 80039ce:	4603      	mov	r3, r0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d119      	bne.n	8003a3c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	461a      	mov	r2, r3
 8003a16:	2304      	movs	r3, #4
 8003a18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	0151      	lsls	r1, r2, #5
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	440a      	add	r2, r1
 8003a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	60d3      	str	r3, [r2, #12]
 8003a3a:	e101      	b.n	8003c40 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a52:	d12b      	bne.n	8003aac <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a60:	461a      	mov	r2, r3
 8003a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	3361      	adds	r3, #97	; 0x61
 8003a76:	2207      	movs	r2, #7
 8003a78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f005 ff2c 	bl	8009902 <USB_HC_Halt>
 8003aaa:	e0c9      	b.n	8003c40 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d109      	bne.n	8003ad6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	6093      	str	r3, [r2, #8]
 8003ad4:	e0b4      	b.n	8003c40 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d133      	bne.n	8003b54 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	0151      	lsls	r1, r2, #5
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	440a      	add	r2, r1
 8003b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b06:	f043 0302 	orr.w	r3, r3, #2
 8003b0a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	3361      	adds	r3, #97	; 0x61
 8003b1a:	2205      	movs	r2, #5
 8003b1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2308      	movs	r3, #8
 8003b40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f005 fed8 	bl	8009902 <USB_HC_Halt>
 8003b52:	e075      	b.n	8003c40 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6a:	d134      	bne.n	8003bd6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	0151      	lsls	r1, r2, #5
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	440a      	add	r2, r1
 8003b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	212c      	movs	r1, #44	; 0x2c
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	3361      	adds	r3, #97	; 0x61
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003baa:	461a      	mov	r2, r3
 8003bac:	2310      	movs	r3, #16
 8003bae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f005 fe97 	bl	8009902 <USB_HC_Halt>
 8003bd4:	e034      	b.n	8003c40 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d129      	bne.n	8003c40 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c06:	f043 0302 	orr.w	r3, r3, #2
 8003c0a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	212c      	movs	r1, #44	; 0x2c
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	4413      	add	r3, r2
 8003c18:	3361      	adds	r3, #97	; 0x61
 8003c1a:	2206      	movs	r2, #6
 8003c1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f005 fe6a 	bl	8009902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c56:	d122      	bne.n	8003c9e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c72:	f043 0302 	orr.w	r3, r3, #2
 8003c76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f005 fe3d 	bl	8009902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	461a      	mov	r2, r3
 8003c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c9a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003c9c:	e2ba      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	f040 811b 	bne.w	8003eec <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d019      	beq.n	8003cf2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	212c      	movs	r1, #44	; 0x2c
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	3348      	adds	r3, #72	; 0x48
 8003ccc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	0159      	lsls	r1, r3, #5
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	440b      	add	r3, r1
 8003cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ce0:	1ad2      	subs	r2, r2, r3
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	202c      	movs	r0, #44	; 0x2c
 8003ce8:	fb00 f303 	mul.w	r3, r0, r3
 8003cec:	440b      	add	r3, r1
 8003cee:	3350      	adds	r3, #80	; 0x50
 8003cf0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	212c      	movs	r1, #44	; 0x2c
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3361      	adds	r3, #97	; 0x61
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	212c      	movs	r1, #44	; 0x2c
 8003d0a:	fb01 f303 	mul.w	r3, r1, r3
 8003d0e:	4413      	add	r3, r2
 8003d10:	335c      	adds	r3, #92	; 0x5c
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d22:	461a      	mov	r2, r3
 8003d24:	2301      	movs	r3, #1
 8003d26:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	212c      	movs	r1, #44	; 0x2c
 8003d2e:	fb01 f303 	mul.w	r3, r1, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	333f      	adds	r3, #63	; 0x3f
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	333f      	adds	r3, #63	; 0x3f
 8003d4a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d121      	bne.n	8003d94 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	0151      	lsls	r1, r2, #5
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	440a      	add	r2, r1
 8003d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d6a:	f043 0302 	orr.w	r3, r3, #2
 8003d6e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f005 fdc1 	bl	8009902 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2310      	movs	r3, #16
 8003d90:	6093      	str	r3, [r2, #8]
 8003d92:	e066      	b.n	8003e62 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	212c      	movs	r1, #44	; 0x2c
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	333f      	adds	r3, #63	; 0x3f
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d127      	bne.n	8003df8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	0151      	lsls	r1, r2, #5
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	440a      	add	r2, r1
 8003dbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dc6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	212c      	movs	r1, #44	; 0x2c
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3360      	adds	r3, #96	; 0x60
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	b2d9      	uxtb	r1, r3
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	202c      	movs	r0, #44	; 0x2c
 8003de4:	fb00 f303 	mul.w	r3, r0, r3
 8003de8:	4413      	add	r3, r2
 8003dea:	3360      	adds	r3, #96	; 0x60
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f00b f983 	bl	800f0fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003df6:	e034      	b.n	8003e62 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	212c      	movs	r1, #44	; 0x2c
 8003dfe:	fb01 f303 	mul.w	r3, r1, r3
 8003e02:	4413      	add	r3, r2
 8003e04:	333f      	adds	r3, #63	; 0x3f
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d12a      	bne.n	8003e62 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	212c      	movs	r1, #44	; 0x2c
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	3360      	adds	r3, #96	; 0x60
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	3354      	adds	r3, #84	; 0x54
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	f083 0301 	eor.w	r3, r3, #1
 8003e32:	b2d8      	uxtb	r0, r3
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	212c      	movs	r1, #44	; 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3354      	adds	r3, #84	; 0x54
 8003e42:	4602      	mov	r2, r0
 8003e44:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	b2d9      	uxtb	r1, r3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	202c      	movs	r0, #44	; 0x2c
 8003e50:	fb00 f303 	mul.w	r3, r0, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	3360      	adds	r3, #96	; 0x60
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f00b f94d 	bl	800f0fc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d12b      	bne.n	8003ec2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3348      	adds	r3, #72	; 0x48
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	202c      	movs	r0, #44	; 0x2c
 8003e80:	fb00 f202 	mul.w	r2, r0, r2
 8003e84:	440a      	add	r2, r1
 8003e86:	3240      	adds	r2, #64	; 0x40
 8003e88:	8812      	ldrh	r2, [r2, #0]
 8003e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 81be 	beq.w	8004214 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3354      	adds	r3, #84	; 0x54
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f083 0301 	eor.w	r3, r3, #1
 8003eac:	b2d8      	uxtb	r0, r3
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3354      	adds	r3, #84	; 0x54
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	701a      	strb	r2, [r3, #0]
}
 8003ec0:	e1a8      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3354      	adds	r3, #84	; 0x54
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	f083 0301 	eor.w	r3, r3, #1
 8003ed6:	b2d8      	uxtb	r0, r3
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3354      	adds	r3, #84	; 0x54
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	701a      	strb	r2, [r3, #0]
}
 8003eea:	e193      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	f040 8106 	bne.w	8004110 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	0151      	lsls	r1, r2, #5
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	440a      	add	r2, r1
 8003f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f1e:	f023 0302 	bic.w	r3, r3, #2
 8003f22:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	212c      	movs	r1, #44	; 0x2c
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	3361      	adds	r3, #97	; 0x61
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d109      	bne.n	8003f4c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	212c      	movs	r1, #44	; 0x2c
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	3360      	adds	r3, #96	; 0x60
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e0c9      	b.n	80040e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	212c      	movs	r1, #44	; 0x2c
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	3361      	adds	r3, #97	; 0x61
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d109      	bne.n	8003f74 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3360      	adds	r3, #96	; 0x60
 8003f6e:	2205      	movs	r2, #5
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	e0b5      	b.n	80040e0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	212c      	movs	r1, #44	; 0x2c
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	3361      	adds	r3, #97	; 0x61
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b06      	cmp	r3, #6
 8003f86:	d009      	beq.n	8003f9c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	212c      	movs	r1, #44	; 0x2c
 8003f8e:	fb01 f303 	mul.w	r3, r1, r3
 8003f92:	4413      	add	r3, r2
 8003f94:	3361      	adds	r3, #97	; 0x61
 8003f96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d150      	bne.n	800403e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	212c      	movs	r1, #44	; 0x2c
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	335c      	adds	r3, #92	; 0x5c
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	202c      	movs	r0, #44	; 0x2c
 8003fb4:	fb00 f303 	mul.w	r3, r0, r3
 8003fb8:	440b      	add	r3, r1
 8003fba:	335c      	adds	r3, #92	; 0x5c
 8003fbc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	335c      	adds	r3, #92	; 0x5c
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d912      	bls.n	8003ff8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	335c      	adds	r3, #92	; 0x5c
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	212c      	movs	r1, #44	; 0x2c
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	3360      	adds	r3, #96	; 0x60
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ff6:	e073      	b.n	80040e0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	212c      	movs	r1, #44	; 0x2c
 8003ffe:	fb01 f303 	mul.w	r3, r1, r3
 8004002:	4413      	add	r3, r2
 8004004:	3360      	adds	r3, #96	; 0x60
 8004006:	2202      	movs	r2, #2
 8004008:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4413      	add	r3, r2
 8004012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004020:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004028:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4413      	add	r3, r2
 8004032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004036:	461a      	mov	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800403c:	e050      	b.n	80040e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	3361      	adds	r3, #97	; 0x61
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b03      	cmp	r3, #3
 8004050:	d122      	bne.n	8004098 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	212c      	movs	r1, #44	; 0x2c
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	4413      	add	r3, r2
 800405e:	3360      	adds	r3, #96	; 0x60
 8004060:	2202      	movs	r2, #2
 8004062:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800407a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004082:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004090:	461a      	mov	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e023      	b.n	80040e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	212c      	movs	r1, #44	; 0x2c
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	4413      	add	r3, r2
 80040a4:	3361      	adds	r3, #97	; 0x61
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b07      	cmp	r3, #7
 80040aa:	d119      	bne.n	80040e0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	212c      	movs	r1, #44	; 0x2c
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	335c      	adds	r3, #92	; 0x5c
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	202c      	movs	r0, #44	; 0x2c
 80040c4:	fb00 f303 	mul.w	r3, r0, r3
 80040c8:	440b      	add	r3, r1
 80040ca:	335c      	adds	r3, #92	; 0x5c
 80040cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	212c      	movs	r1, #44	; 0x2c
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	3360      	adds	r3, #96	; 0x60
 80040dc:	2204      	movs	r2, #4
 80040de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	461a      	mov	r2, r3
 80040ee:	2302      	movs	r3, #2
 80040f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	b2d9      	uxtb	r1, r3
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	202c      	movs	r0, #44	; 0x2c
 80040fc:	fb00 f303 	mul.w	r3, r0, r3
 8004100:	4413      	add	r3, r2
 8004102:	3360      	adds	r3, #96	; 0x60
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f00a fff7 	bl	800f0fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800410e:	e081      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b10      	cmp	r3, #16
 8004124:	d176      	bne.n	8004214 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	333f      	adds	r3, #63	; 0x3f
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d121      	bne.n	800417e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	335c      	adds	r3, #92	; 0x5c
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4413      	add	r3, r2
 8004154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	440a      	add	r2, r1
 8004162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004166:	f043 0302 	orr.w	r3, r3, #2
 800416a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	4611      	mov	r1, r2
 8004176:	4618      	mov	r0, r3
 8004178:	f005 fbc3 	bl	8009902 <USB_HC_Halt>
 800417c:	e041      	b.n	8004202 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	333f      	adds	r3, #63	; 0x3f
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	333f      	adds	r3, #63	; 0x3f
 80041a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d12d      	bne.n	8004202 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	212c      	movs	r1, #44	; 0x2c
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	335c      	adds	r3, #92	; 0x5c
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d120      	bne.n	8004202 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	3361      	adds	r3, #97	; 0x61
 80041ce:	2203      	movs	r2, #3
 80041d0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	0151      	lsls	r1, r2, #5
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	440a      	add	r2, r1
 80041e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f005 fb80 	bl	8009902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	461a      	mov	r2, r3
 8004210:	2310      	movs	r3, #16
 8004212:	6093      	str	r3, [r2, #8]
}
 8004214:	bf00      	nop
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4413      	add	r3, r2
 800423e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d119      	bne.n	8004280 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004258:	461a      	mov	r2, r3
 800425a:	2304      	movs	r3, #4
 800425c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	0151      	lsls	r1, r2, #5
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	440a      	add	r2, r1
 8004274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800427e:	e3c6      	b.n	8004a0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b20      	cmp	r3, #32
 8004294:	d13e      	bne.n	8004314 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	4413      	add	r3, r2
 800429e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a2:	461a      	mov	r2, r3
 80042a4:	2320      	movs	r3, #32
 80042a6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	212c      	movs	r1, #44	; 0x2c
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	333d      	adds	r3, #61	; 0x3d
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	f040 83a8 	bne.w	8004a0e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	212c      	movs	r1, #44	; 0x2c
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	333d      	adds	r3, #61	; 0x3d
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3360      	adds	r3, #96	; 0x60
 80042de:	2202      	movs	r2, #2
 80042e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f005 faf8 	bl	8009902 <USB_HC_Halt>
}
 8004312:	e37c      	b.n	8004a0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432a:	d122      	bne.n	8004372 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	0151      	lsls	r1, r2, #5
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	440a      	add	r2, r1
 8004342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004346:	f043 0302 	orr.w	r3, r3, #2
 800434a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f005 fad3 	bl	8009902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004368:	461a      	mov	r2, r3
 800436a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800436e:	6093      	str	r3, [r2, #8]
}
 8004370:	e34d      	b.n	8004a0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d150      	bne.n	800442a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	212c      	movs	r1, #44	; 0x2c
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	4413      	add	r3, r2
 8004394:	335c      	adds	r3, #92	; 0x5c
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d111      	bne.n	80043d4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	212c      	movs	r1, #44	; 0x2c
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	333d      	adds	r3, #61	; 0x3d
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ce:	461a      	mov	r2, r3
 80043d0:	2340      	movs	r3, #64	; 0x40
 80043d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ee:	f043 0302 	orr.w	r3, r3, #2
 80043f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f005 fa7f 	bl	8009902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004410:	461a      	mov	r2, r3
 8004412:	2301      	movs	r3, #1
 8004414:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	212c      	movs	r1, #44	; 0x2c
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	4413      	add	r3, r2
 8004422:	3361      	adds	r3, #97	; 0x61
 8004424:	2201      	movs	r2, #1
 8004426:	701a      	strb	r2, [r3, #0]
}
 8004428:	e2f1      	b.n	8004a0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	4413      	add	r3, r2
 8004432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d13c      	bne.n	80044ba <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	212c      	movs	r1, #44	; 0x2c
 8004446:	fb01 f303 	mul.w	r3, r1, r3
 800444a:	4413      	add	r3, r2
 800444c:	3361      	adds	r3, #97	; 0x61
 800444e:	2204      	movs	r2, #4
 8004450:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	212c      	movs	r1, #44	; 0x2c
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	4413      	add	r3, r2
 800445e:	333d      	adds	r3, #61	; 0x3d
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	335c      	adds	r3, #92	; 0x5c
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	4413      	add	r3, r2
 800447e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	0151      	lsls	r1, r2, #5
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	440a      	add	r2, r1
 800448c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004490:	f043 0302 	orr.w	r3, r3, #2
 8004494:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f005 fa2e 	bl	8009902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b2:	461a      	mov	r2, r3
 80044b4:	2340      	movs	r3, #64	; 0x40
 80044b6:	6093      	str	r3, [r2, #8]
}
 80044b8:	e2a9      	b.n	8004a0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d12a      	bne.n	8004526 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044dc:	461a      	mov	r2, r3
 80044de:	2308      	movs	r3, #8
 80044e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	0151      	lsls	r1, r2, #5
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	440a      	add	r2, r1
 80044f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044fc:	f043 0302 	orr.w	r3, r3, #2
 8004500:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f005 f9f8 	bl	8009902 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	212c      	movs	r1, #44	; 0x2c
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	4413      	add	r3, r2
 800451e:	3361      	adds	r3, #97	; 0x61
 8004520:	2205      	movs	r2, #5
 8004522:	701a      	strb	r2, [r3, #0]
}
 8004524:	e273      	b.n	8004a0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4413      	add	r3, r2
 800452e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b10      	cmp	r3, #16
 800453a:	d150      	bne.n	80045de <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	335c      	adds	r3, #92	; 0x5c
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	212c      	movs	r1, #44	; 0x2c
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	4413      	add	r3, r2
 800455a:	3361      	adds	r3, #97	; 0x61
 800455c:	2203      	movs	r2, #3
 800455e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	333d      	adds	r3, #61	; 0x3d
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d112      	bne.n	800459a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	333c      	adds	r3, #60	; 0x3c
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d108      	bne.n	800459a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	333d      	adds	r3, #61	; 0x3d
 8004596:	2201      	movs	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f005 f99c 	bl	8009902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d6:	461a      	mov	r2, r3
 80045d8:	2310      	movs	r3, #16
 80045da:	6093      	str	r3, [r2, #8]
}
 80045dc:	e217      	b.n	8004a0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f0:	2b80      	cmp	r3, #128	; 0x80
 80045f2:	d174      	bne.n	80046de <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d121      	bne.n	8004640 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	212c      	movs	r1, #44	; 0x2c
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	4413      	add	r3, r2
 8004608:	3361      	adds	r3, #97	; 0x61
 800460a:	2206      	movs	r2, #6
 800460c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	440a      	add	r2, r1
 8004624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004628:	f043 0302 	orr.w	r3, r3, #2
 800462c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f005 f962 	bl	8009902 <USB_HC_Halt>
 800463e:	e044      	b.n	80046ca <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	212c      	movs	r1, #44	; 0x2c
 8004646:	fb01 f303 	mul.w	r3, r1, r3
 800464a:	4413      	add	r3, r2
 800464c:	335c      	adds	r3, #92	; 0x5c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	202c      	movs	r0, #44	; 0x2c
 8004658:	fb00 f303 	mul.w	r3, r0, r3
 800465c:	440b      	add	r3, r1
 800465e:	335c      	adds	r3, #92	; 0x5c
 8004660:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	212c      	movs	r1, #44	; 0x2c
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	4413      	add	r3, r2
 800466e:	335c      	adds	r3, #92	; 0x5c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d920      	bls.n	80046b8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	212c      	movs	r1, #44	; 0x2c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	335c      	adds	r3, #92	; 0x5c
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	212c      	movs	r1, #44	; 0x2c
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	4413      	add	r3, r2
 8004694:	3360      	adds	r3, #96	; 0x60
 8004696:	2204      	movs	r2, #4
 8004698:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	b2d9      	uxtb	r1, r3
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	202c      	movs	r0, #44	; 0x2c
 80046a4:	fb00 f303 	mul.w	r3, r0, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	3360      	adds	r3, #96	; 0x60
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f00a fd23 	bl	800f0fc <HAL_HCD_HC_NotifyURBChange_Callback>
 80046b6:	e008      	b.n	80046ca <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	212c      	movs	r1, #44	; 0x2c
 80046be:	fb01 f303 	mul.w	r3, r1, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	3360      	adds	r3, #96	; 0x60
 80046c6:	2202      	movs	r2, #2
 80046c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d6:	461a      	mov	r2, r3
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	6093      	str	r3, [r2, #8]
}
 80046dc:	e197      	b.n	8004a0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f4:	d134      	bne.n	8004760 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	440a      	add	r2, r1
 800470c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004710:	f043 0302 	orr.w	r3, r3, #2
 8004714:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f005 f8ee 	bl	8009902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	4413      	add	r3, r2
 800472e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004732:	461a      	mov	r2, r3
 8004734:	2310      	movs	r3, #16
 8004736:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	4413      	add	r3, r2
 8004740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004744:	461a      	mov	r2, r3
 8004746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800474a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	212c      	movs	r1, #44	; 0x2c
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	4413      	add	r3, r2
 8004758:	3361      	adds	r3, #97	; 0x61
 800475a:	2208      	movs	r2, #8
 800475c:	701a      	strb	r2, [r3, #0]
}
 800475e:	e156      	b.n	8004a0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	4413      	add	r3, r2
 8004768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b02      	cmp	r3, #2
 8004774:	f040 814b 	bne.w	8004a0e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	4413      	add	r3, r2
 8004780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	440a      	add	r2, r1
 800478e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004792:	f023 0302 	bic.w	r3, r3, #2
 8004796:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	212c      	movs	r1, #44	; 0x2c
 800479e:	fb01 f303 	mul.w	r3, r1, r3
 80047a2:	4413      	add	r3, r2
 80047a4:	3361      	adds	r3, #97	; 0x61
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d179      	bne.n	80048a0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	212c      	movs	r1, #44	; 0x2c
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	4413      	add	r3, r2
 80047b8:	3360      	adds	r3, #96	; 0x60
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	212c      	movs	r1, #44	; 0x2c
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	4413      	add	r3, r2
 80047ca:	333f      	adds	r3, #63	; 0x3f
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d00a      	beq.n	80047e8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	212c      	movs	r1, #44	; 0x2c
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	4413      	add	r3, r2
 80047de:	333f      	adds	r3, #63	; 0x3f
 80047e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	f040 80fc 	bne.w	80049e0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d142      	bne.n	8004876 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	212c      	movs	r1, #44	; 0x2c
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	4413      	add	r3, r2
 80047fc:	334c      	adds	r3, #76	; 0x4c
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80ed 	beq.w	80049e0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	212c      	movs	r1, #44	; 0x2c
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	4413      	add	r3, r2
 8004812:	334c      	adds	r3, #76	; 0x4c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	202c      	movs	r0, #44	; 0x2c
 800481c:	fb00 f202 	mul.w	r2, r0, r2
 8004820:	440a      	add	r2, r1
 8004822:	3240      	adds	r2, #64	; 0x40
 8004824:	8812      	ldrh	r2, [r2, #0]
 8004826:	4413      	add	r3, r2
 8004828:	3b01      	subs	r3, #1
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	202c      	movs	r0, #44	; 0x2c
 8004830:	fb00 f202 	mul.w	r2, r0, r2
 8004834:	440a      	add	r2, r1
 8004836:	3240      	adds	r2, #64	; 0x40
 8004838:	8812      	ldrh	r2, [r2, #0]
 800483a:	fbb3 f3f2 	udiv	r3, r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80ca 	beq.w	80049e0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	212c      	movs	r1, #44	; 0x2c
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	3355      	adds	r3, #85	; 0x55
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	f083 0301 	eor.w	r3, r3, #1
 8004860:	b2d8      	uxtb	r0, r3
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	212c      	movs	r1, #44	; 0x2c
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	4413      	add	r3, r2
 800486e:	3355      	adds	r3, #85	; 0x55
 8004870:	4602      	mov	r2, r0
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e0b4      	b.n	80049e0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	3355      	adds	r3, #85	; 0x55
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	f083 0301 	eor.w	r3, r3, #1
 800488a:	b2d8      	uxtb	r0, r3
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	212c      	movs	r1, #44	; 0x2c
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	4413      	add	r3, r2
 8004898:	3355      	adds	r3, #85	; 0x55
 800489a:	4602      	mov	r2, r0
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e09f      	b.n	80049e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	212c      	movs	r1, #44	; 0x2c
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	4413      	add	r3, r2
 80048ac:	3361      	adds	r3, #97	; 0x61
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d109      	bne.n	80048c8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	212c      	movs	r1, #44	; 0x2c
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	4413      	add	r3, r2
 80048c0:	3360      	adds	r3, #96	; 0x60
 80048c2:	2202      	movs	r2, #2
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e08b      	b.n	80049e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	212c      	movs	r1, #44	; 0x2c
 80048ce:	fb01 f303 	mul.w	r3, r1, r3
 80048d2:	4413      	add	r3, r2
 80048d4:	3361      	adds	r3, #97	; 0x61
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d109      	bne.n	80048f0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	212c      	movs	r1, #44	; 0x2c
 80048e2:	fb01 f303 	mul.w	r3, r1, r3
 80048e6:	4413      	add	r3, r2
 80048e8:	3360      	adds	r3, #96	; 0x60
 80048ea:	2202      	movs	r2, #2
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	e077      	b.n	80049e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	212c      	movs	r1, #44	; 0x2c
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	4413      	add	r3, r2
 80048fc:	3361      	adds	r3, #97	; 0x61
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b05      	cmp	r3, #5
 8004902:	d109      	bne.n	8004918 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	212c      	movs	r1, #44	; 0x2c
 800490a:	fb01 f303 	mul.w	r3, r1, r3
 800490e:	4413      	add	r3, r2
 8004910:	3360      	adds	r3, #96	; 0x60
 8004912:	2205      	movs	r2, #5
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e063      	b.n	80049e0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	212c      	movs	r1, #44	; 0x2c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	3361      	adds	r3, #97	; 0x61
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b06      	cmp	r3, #6
 800492a:	d009      	beq.n	8004940 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	212c      	movs	r1, #44	; 0x2c
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	4413      	add	r3, r2
 8004938:	3361      	adds	r3, #97	; 0x61
 800493a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800493c:	2b08      	cmp	r3, #8
 800493e:	d14f      	bne.n	80049e0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	335c      	adds	r3, #92	; 0x5c
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	202c      	movs	r0, #44	; 0x2c
 8004958:	fb00 f303 	mul.w	r3, r0, r3
 800495c:	440b      	add	r3, r1
 800495e:	335c      	adds	r3, #92	; 0x5c
 8004960:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	212c      	movs	r1, #44	; 0x2c
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	4413      	add	r3, r2
 800496e:	335c      	adds	r3, #92	; 0x5c
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d912      	bls.n	800499c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	335c      	adds	r3, #92	; 0x5c
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	3360      	adds	r3, #96	; 0x60
 8004996:	2204      	movs	r2, #4
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	e021      	b.n	80049e0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	3360      	adds	r3, #96	; 0x60
 80049aa:	2202      	movs	r2, #2
 80049ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049c4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049cc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049da:	461a      	mov	r2, r3
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ec:	461a      	mov	r2, r3
 80049ee:	2302      	movs	r3, #2
 80049f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	b2d9      	uxtb	r1, r3
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	202c      	movs	r0, #44	; 0x2c
 80049fc:	fb00 f303 	mul.w	r3, r0, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	3360      	adds	r3, #96	; 0x60
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f00a fb77 	bl	800f0fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004a0e:	bf00      	nop
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b08a      	sub	sp, #40	; 0x28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	0c5b      	lsrs	r3, r3, #17
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a4a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d004      	beq.n	8004a5c <HCD_RXQLVL_IRQHandler+0x46>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	f000 80a9 	beq.w	8004bac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004a5a:	e0aa      	b.n	8004bb2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80a6 	beq.w	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	212c      	movs	r1, #44	; 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3344      	adds	r3, #68	; 0x44
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 809b 	beq.w	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	212c      	movs	r1, #44	; 0x2c
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	4413      	add	r3, r2
 8004a86:	3350      	adds	r3, #80	; 0x50
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	441a      	add	r2, r3
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	202c      	movs	r0, #44	; 0x2c
 8004a94:	fb00 f303 	mul.w	r3, r0, r3
 8004a98:	440b      	add	r3, r1
 8004a9a:	334c      	adds	r3, #76	; 0x4c
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d87a      	bhi.n	8004b98 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	212c      	movs	r1, #44	; 0x2c
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3344      	adds	r3, #68	; 0x44
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	b292      	uxth	r2, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	f004 fabf 	bl	800903e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	212c      	movs	r1, #44	; 0x2c
 8004ac6:	fb01 f303 	mul.w	r3, r1, r3
 8004aca:	4413      	add	r3, r2
 8004acc:	3344      	adds	r3, #68	; 0x44
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	441a      	add	r2, r3
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	202c      	movs	r0, #44	; 0x2c
 8004ada:	fb00 f303 	mul.w	r3, r0, r3
 8004ade:	440b      	add	r3, r1
 8004ae0:	3344      	adds	r3, #68	; 0x44
 8004ae2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	212c      	movs	r1, #44	; 0x2c
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	3350      	adds	r3, #80	; 0x50
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	441a      	add	r2, r3
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	202c      	movs	r0, #44	; 0x2c
 8004afe:	fb00 f303 	mul.w	r3, r0, r3
 8004b02:	440b      	add	r3, r1
 8004b04:	3350      	adds	r3, #80	; 0x50
 8004b06:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	0cdb      	lsrs	r3, r3, #19
 8004b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b1c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	212c      	movs	r1, #44	; 0x2c
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	3340      	adds	r3, #64	; 0x40
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d13c      	bne.n	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d039      	beq.n	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b52:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b5a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	212c      	movs	r1, #44	; 0x2c
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	3354      	adds	r3, #84	; 0x54
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	f083 0301 	eor.w	r3, r3, #1
 8004b82:	b2d8      	uxtb	r0, r3
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	3354      	adds	r3, #84	; 0x54
 8004b92:	4602      	mov	r2, r0
 8004b94:	701a      	strb	r2, [r3, #0]
      break;
 8004b96:	e00b      	b.n	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	212c      	movs	r1, #44	; 0x2c
 8004b9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3360      	adds	r3, #96	; 0x60
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	701a      	strb	r2, [r3, #0]
      break;
 8004baa:	e001      	b.n	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004bac:	bf00      	nop
 8004bae:	e000      	b.n	8004bb2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004bb0:	bf00      	nop
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3728      	adds	r7, #40	; 0x28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004be6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d10b      	bne.n	8004c0a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d102      	bne.n	8004c02 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f00a fa61 	bl	800f0c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f043 0302 	orr.w	r3, r3, #2
 8004c08:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d132      	bne.n	8004c7a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f043 0308 	orr.w	r3, r3, #8
 8004c1a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d126      	bne.n	8004c74 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d113      	bne.n	8004c56 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c38:	d106      	bne.n	8004c48 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2102      	movs	r1, #2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f004 fb37 	bl	80092b4 <USB_InitFSLSPClkSel>
 8004c46:	e011      	b.n	8004c6c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f004 fb30 	bl	80092b4 <USB_InitFSLSPClkSel>
 8004c54:	e00a      	b.n	8004c6c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d106      	bne.n	8004c6c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c64:	461a      	mov	r2, r3
 8004c66:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004c6a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f00a fa57 	bl	800f120 <HAL_HCD_PortEnabled_Callback>
 8004c72:	e002      	b.n	8004c7a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f00a fa61 	bl	800f13c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d103      	bne.n	8004c8c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f043 0320 	orr.w	r3, r3, #32
 8004c8a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c92:	461a      	mov	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	6013      	str	r3, [r2, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e12b      	b.n	8004f0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd fbf0 	bl	80024ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2224      	movs	r2, #36	; 0x24
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0201 	bic.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d04:	f002 fb26 	bl	8007354 <HAL_RCC_GetPCLK1Freq>
 8004d08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4a81      	ldr	r2, [pc, #516]	; (8004f14 <HAL_I2C_Init+0x274>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d807      	bhi.n	8004d24 <HAL_I2C_Init+0x84>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a80      	ldr	r2, [pc, #512]	; (8004f18 <HAL_I2C_Init+0x278>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	bf94      	ite	ls
 8004d1c:	2301      	movls	r3, #1
 8004d1e:	2300      	movhi	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e006      	b.n	8004d32 <HAL_I2C_Init+0x92>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4a7d      	ldr	r2, [pc, #500]	; (8004f1c <HAL_I2C_Init+0x27c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	bf94      	ite	ls
 8004d2c:	2301      	movls	r3, #1
 8004d2e:	2300      	movhi	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e0e7      	b.n	8004f0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a78      	ldr	r2, [pc, #480]	; (8004f20 <HAL_I2C_Init+0x280>)
 8004d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d42:	0c9b      	lsrs	r3, r3, #18
 8004d44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4a6a      	ldr	r2, [pc, #424]	; (8004f14 <HAL_I2C_Init+0x274>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d802      	bhi.n	8004d74 <HAL_I2C_Init+0xd4>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	3301      	adds	r3, #1
 8004d72:	e009      	b.n	8004d88 <HAL_I2C_Init+0xe8>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	4a69      	ldr	r2, [pc, #420]	; (8004f24 <HAL_I2C_Init+0x284>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	099b      	lsrs	r3, r3, #6
 8004d86:	3301      	adds	r3, #1
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	495c      	ldr	r1, [pc, #368]	; (8004f14 <HAL_I2C_Init+0x274>)
 8004da4:	428b      	cmp	r3, r1
 8004da6:	d819      	bhi.n	8004ddc <HAL_I2C_Init+0x13c>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1e59      	subs	r1, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004db6:	1c59      	adds	r1, r3, #1
 8004db8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004dbc:	400b      	ands	r3, r1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_I2C_Init+0x138>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1e59      	subs	r1, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd6:	e051      	b.n	8004e7c <HAL_I2C_Init+0x1dc>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	e04f      	b.n	8004e7c <HAL_I2C_Init+0x1dc>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d111      	bne.n	8004e08 <HAL_I2C_Init+0x168>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1e58      	subs	r0, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6859      	ldr	r1, [r3, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	440b      	add	r3, r1
 8004df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004df6:	3301      	adds	r3, #1
 8004df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bf0c      	ite	eq
 8004e00:	2301      	moveq	r3, #1
 8004e02:	2300      	movne	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	e012      	b.n	8004e2e <HAL_I2C_Init+0x18e>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	1e58      	subs	r0, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6859      	ldr	r1, [r3, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	0099      	lsls	r1, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e1e:	3301      	adds	r3, #1
 8004e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_I2C_Init+0x196>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e022      	b.n	8004e7c <HAL_I2C_Init+0x1dc>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10e      	bne.n	8004e5c <HAL_I2C_Init+0x1bc>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1e58      	subs	r0, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6859      	ldr	r1, [r3, #4]
 8004e46:	460b      	mov	r3, r1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	440b      	add	r3, r1
 8004e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e50:	3301      	adds	r3, #1
 8004e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5a:	e00f      	b.n	8004e7c <HAL_I2C_Init+0x1dc>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1e58      	subs	r0, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6859      	ldr	r1, [r3, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	0099      	lsls	r1, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e72:	3301      	adds	r3, #1
 8004e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	6809      	ldr	r1, [r1, #0]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004eaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6911      	ldr	r1, [r2, #16]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68d2      	ldr	r2, [r2, #12]
 8004eb6:	4311      	orrs	r1, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	000186a0 	.word	0x000186a0
 8004f18:	001e847f 	.word	0x001e847f
 8004f1c:	003d08ff 	.word	0x003d08ff
 8004f20:	431bde83 	.word	0x431bde83
 8004f24:	10624dd3 	.word	0x10624dd3

08004f28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	461a      	mov	r2, r3
 8004f34:	460b      	mov	r3, r1
 8004f36:	817b      	strh	r3, [r7, #10]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f3c:	f7fd fdf2 	bl	8002b24 <HAL_GetTick>
 8004f40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	f040 80e0 	bne.w	8005110 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	2319      	movs	r3, #25
 8004f56:	2201      	movs	r2, #1
 8004f58:	4970      	ldr	r1, [pc, #448]	; (800511c <HAL_I2C_Master_Transmit+0x1f4>)
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 ff30 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
 8004f68:	e0d3      	b.n	8005112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_I2C_Master_Transmit+0x50>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e0cc      	b.n	8005112 <HAL_I2C_Master_Transmit+0x1ea>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d007      	beq.n	8004f9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2221      	movs	r2, #33	; 0x21
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	893a      	ldrh	r2, [r7, #8]
 8004fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4a50      	ldr	r2, [pc, #320]	; (8005120 <HAL_I2C_Master_Transmit+0x1f8>)
 8004fde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fe0:	8979      	ldrh	r1, [r7, #10]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fcea 	bl	80059c0 <I2C_MasterRequestWrite>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e08d      	b.n	8005112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800500c:	e066      	b.n	80050dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	6a39      	ldr	r1, [r7, #32]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 ffaa 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2b04      	cmp	r3, #4
 8005024:	d107      	bne.n	8005036 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e06b      	b.n	8005112 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	781a      	ldrb	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b04      	cmp	r3, #4
 8005076:	d11b      	bne.n	80050b0 <HAL_I2C_Master_Transmit+0x188>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	d017      	beq.n	80050b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	781a      	ldrb	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	6a39      	ldr	r1, [r7, #32]
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 ff9a 	bl	8005fee <I2C_WaitOnBTFFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00d      	beq.n	80050dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d107      	bne.n	80050d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e01a      	b.n	8005112 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d194      	bne.n	800500e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	e000      	b.n	8005112 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005110:	2302      	movs	r3, #2
  }
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	00100002 	.word	0x00100002
 8005120:	ffff0000 	.word	0xffff0000

08005124 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	461a      	mov	r2, r3
 8005132:	4603      	mov	r3, r0
 8005134:	817b      	strh	r3, [r7, #10]
 8005136:	460b      	mov	r3, r1
 8005138:	813b      	strh	r3, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800513e:	f7fd fcf1 	bl	8002b24 <HAL_GetTick>
 8005142:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b20      	cmp	r3, #32
 800514e:	f040 80d9 	bne.w	8005304 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2319      	movs	r3, #25
 8005158:	2201      	movs	r2, #1
 800515a:	496d      	ldr	r1, [pc, #436]	; (8005310 <HAL_I2C_Mem_Write+0x1ec>)
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 fe2f 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
 800516a:	e0cc      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_I2C_Mem_Write+0x56>
 8005176:	2302      	movs	r3, #2
 8005178:	e0c5      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e2>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b01      	cmp	r3, #1
 800518e:	d007      	beq.n	80051a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2221      	movs	r2, #33	; 0x21
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2240      	movs	r2, #64	; 0x40
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a3a      	ldr	r2, [r7, #32]
 80051ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a4d      	ldr	r2, [pc, #308]	; (8005314 <HAL_I2C_Mem_Write+0x1f0>)
 80051e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051e2:	88f8      	ldrh	r0, [r7, #6]
 80051e4:	893a      	ldrh	r2, [r7, #8]
 80051e6:	8979      	ldrh	r1, [r7, #10]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	4603      	mov	r3, r0
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fc66 	bl	8005ac4 <I2C_RequestMemoryWrite>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d052      	beq.n	80052a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e081      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 feb0 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00d      	beq.n	800522e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	2b04      	cmp	r3, #4
 8005218:	d107      	bne.n	800522a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005228:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e06b      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	781a      	ldrb	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b04      	cmp	r3, #4
 800526a:	d11b      	bne.n	80052a4 <HAL_I2C_Mem_Write+0x180>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005270:	2b00      	cmp	r3, #0
 8005272:	d017      	beq.n	80052a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	781a      	ldrb	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1aa      	bne.n	8005202 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fe9c 	bl	8005fee <I2C_WaitOnBTFFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d107      	bne.n	80052d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e016      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e000      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
  }
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	00100002 	.word	0x00100002
 8005314:	ffff0000 	.word	0xffff0000

08005318 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	; 0x30
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	4608      	mov	r0, r1
 8005322:	4611      	mov	r1, r2
 8005324:	461a      	mov	r2, r3
 8005326:	4603      	mov	r3, r0
 8005328:	817b      	strh	r3, [r7, #10]
 800532a:	460b      	mov	r3, r1
 800532c:	813b      	strh	r3, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005332:	f7fd fbf7 	bl	8002b24 <HAL_GetTick>
 8005336:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b20      	cmp	r3, #32
 8005342:	f040 8208 	bne.w	8005756 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	2319      	movs	r3, #25
 800534c:	2201      	movs	r2, #1
 800534e:	497b      	ldr	r1, [pc, #492]	; (800553c <HAL_I2C_Mem_Read+0x224>)
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fd35 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800535c:	2302      	movs	r3, #2
 800535e:	e1fb      	b.n	8005758 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_I2C_Mem_Read+0x56>
 800536a:	2302      	movs	r3, #2
 800536c:	e1f4      	b.n	8005758 <HAL_I2C_Mem_Read+0x440>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b01      	cmp	r3, #1
 8005382:	d007      	beq.n	8005394 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2222      	movs	r2, #34	; 0x22
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2240      	movs	r2, #64	; 0x40
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80053c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4a5b      	ldr	r2, [pc, #364]	; (8005540 <HAL_I2C_Mem_Read+0x228>)
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053d6:	88f8      	ldrh	r0, [r7, #6]
 80053d8:	893a      	ldrh	r2, [r7, #8]
 80053da:	8979      	ldrh	r1, [r7, #10]
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	4603      	mov	r3, r0
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fc02 	bl	8005bf0 <I2C_RequestMemoryRead>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e1b0      	b.n	8005758 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d113      	bne.n	8005426 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fe:	2300      	movs	r3, #0
 8005400:	623b      	str	r3, [r7, #32]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	623b      	str	r3, [r7, #32]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	623b      	str	r3, [r7, #32]
 8005412:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	e184      	b.n	8005730 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542a:	2b01      	cmp	r3, #1
 800542c:	d11b      	bne.n	8005466 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e164      	b.n	8005730 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546a:	2b02      	cmp	r3, #2
 800546c:	d11b      	bne.n	80054a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800548c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548e:	2300      	movs	r3, #0
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	61bb      	str	r3, [r7, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	e144      	b.n	8005730 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80054bc:	e138      	b.n	8005730 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	f200 80f1 	bhi.w	80056aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d123      	bne.n	8005518 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fdcb 	bl	8006070 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e139      	b.n	8005758 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005516:	e10b      	b.n	8005730 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	2b02      	cmp	r3, #2
 800551e:	d14e      	bne.n	80055be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	2200      	movs	r2, #0
 8005528:	4906      	ldr	r1, [pc, #24]	; (8005544 <HAL_I2C_Mem_Read+0x22c>)
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fc48 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d008      	beq.n	8005548 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e10e      	b.n	8005758 <HAL_I2C_Mem_Read+0x440>
 800553a:	bf00      	nop
 800553c:	00100002 	.word	0x00100002
 8005540:	ffff0000 	.word	0xffff0000
 8005544:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055bc:	e0b8      	b.n	8005730 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	2200      	movs	r2, #0
 80055c6:	4966      	ldr	r1, [pc, #408]	; (8005760 <HAL_I2C_Mem_Read+0x448>)
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fbf9 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0bf      	b.n	8005758 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b01      	subs	r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	2200      	movs	r2, #0
 8005622:	494f      	ldr	r1, [pc, #316]	; (8005760 <HAL_I2C_Mem_Read+0x448>)
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fbcb 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e091      	b.n	8005758 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056a8:	e042      	b.n	8005730 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 fcde 	bl	8006070 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e04c      	b.n	8005758 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d118      	bne.n	8005730 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005734:	2b00      	cmp	r3, #0
 8005736:	f47f aec2 	bne.w	80054be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	e000      	b.n	8005758 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005756:	2302      	movs	r3, #2
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	3728      	adds	r7, #40	; 0x28
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	00010004 	.word	0x00010004

08005764 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	; 0x28
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	460b      	mov	r3, r1
 8005772:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005774:	f7fd f9d6 	bl	8002b24 <HAL_GetTick>
 8005778:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800577a:	2301      	movs	r3, #1
 800577c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b20      	cmp	r3, #32
 8005788:	f040 8111 	bne.w	80059ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	2319      	movs	r3, #25
 8005792:	2201      	movs	r2, #1
 8005794:	4988      	ldr	r1, [pc, #544]	; (80059b8 <HAL_I2C_IsDeviceReady+0x254>)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fb12 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80057a2:	2302      	movs	r3, #2
 80057a4:	e104      	b.n	80059b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_I2C_IsDeviceReady+0x50>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e0fd      	b.n	80059b0 <HAL_I2C_IsDeviceReady+0x24c>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d007      	beq.n	80057da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0201 	orr.w	r2, r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2224      	movs	r2, #36	; 0x24
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4a70      	ldr	r2, [pc, #448]	; (80059bc <HAL_I2C_IsDeviceReady+0x258>)
 80057fc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800580c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2200      	movs	r2, #0
 8005816:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fad0 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00d      	beq.n	8005842 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005834:	d103      	bne.n	800583e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e0b6      	b.n	80059b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005850:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005852:	f7fd f967 	bl	8002b24 <HAL_GetTick>
 8005856:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b02      	cmp	r3, #2
 8005864:	bf0c      	ite	eq
 8005866:	2301      	moveq	r3, #1
 8005868:	2300      	movne	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587c:	bf0c      	ite	eq
 800587e:	2301      	moveq	r3, #1
 8005880:	2300      	movne	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005886:	e025      	b.n	80058d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005888:	f7fd f94c 	bl	8002b24 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d302      	bcc.n	800589e <HAL_I2C_IsDeviceReady+0x13a>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d103      	bne.n	80058a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	22a0      	movs	r2, #160	; 0xa0
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	bf0c      	ite	eq
 80058b4:	2301      	moveq	r3, #1
 80058b6:	2300      	movne	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ca:	bf0c      	ite	eq
 80058cc:	2301      	moveq	r3, #1
 80058ce:	2300      	movne	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2ba0      	cmp	r3, #160	; 0xa0
 80058de:	d005      	beq.n	80058ec <HAL_I2C_IsDeviceReady+0x188>
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <HAL_I2C_IsDeviceReady+0x188>
 80058e6:	7dbb      	ldrb	r3, [r7, #22]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0cd      	beq.n	8005888 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d129      	bne.n	8005956 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005910:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005912:	2300      	movs	r3, #0
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	2319      	movs	r3, #25
 800592e:	2201      	movs	r2, #1
 8005930:	4921      	ldr	r1, [pc, #132]	; (80059b8 <HAL_I2C_IsDeviceReady+0x254>)
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fa44 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e036      	b.n	80059b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	e02c      	b.n	80059b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005964:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800596e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	2319      	movs	r3, #25
 8005976:	2201      	movs	r2, #1
 8005978:	490f      	ldr	r1, [pc, #60]	; (80059b8 <HAL_I2C_IsDeviceReady+0x254>)
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 fa20 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e012      	b.n	80059b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	3301      	adds	r3, #1
 800598e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	429a      	cmp	r2, r3
 8005996:	f4ff af32 	bcc.w	80057fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80059ae:	2302      	movs	r3, #2
  }
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	00100002 	.word	0x00100002
 80059bc:	ffff0000 	.word	0xffff0000

080059c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	460b      	mov	r3, r1
 80059ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d006      	beq.n	80059ea <I2C_MasterRequestWrite+0x2a>
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d003      	beq.n	80059ea <I2C_MasterRequestWrite+0x2a>
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059e8:	d108      	bne.n	80059fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	e00b      	b.n	8005a14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a00:	2b12      	cmp	r3, #18
 8005a02:	d107      	bne.n	8005a14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f9cd 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00d      	beq.n	8005a48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a3a:	d103      	bne.n	8005a44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e035      	b.n	8005ab4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a50:	d108      	bne.n	8005a64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a52:	897b      	ldrh	r3, [r7, #10]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a60:	611a      	str	r2, [r3, #16]
 8005a62:	e01b      	b.n	8005a9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a64:	897b      	ldrh	r3, [r7, #10]
 8005a66:	11db      	asrs	r3, r3, #7
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f003 0306 	and.w	r3, r3, #6
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	f063 030f 	orn	r3, r3, #15
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	490e      	ldr	r1, [pc, #56]	; (8005abc <I2C_MasterRequestWrite+0xfc>)
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f9f3 	bl	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e010      	b.n	8005ab4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a92:	897b      	ldrh	r3, [r7, #10]
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	4907      	ldr	r1, [pc, #28]	; (8005ac0 <I2C_MasterRequestWrite+0x100>)
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 f9e3 	bl	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	00010008 	.word	0x00010008
 8005ac0:	00010002 	.word	0x00010002

08005ac4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	817b      	strh	r3, [r7, #10]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	813b      	strh	r3, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f960 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00d      	beq.n	8005b22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b14:	d103      	bne.n	8005b1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e05f      	b.n	8005be2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b22:	897b      	ldrh	r3, [r7, #10]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	492d      	ldr	r1, [pc, #180]	; (8005bec <I2C_RequestMemoryWrite+0x128>)
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f998 	bl	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e04c      	b.n	8005be2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b60:	6a39      	ldr	r1, [r7, #32]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 fa02 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d107      	bne.n	8005b86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e02b      	b.n	8005be2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d105      	bne.n	8005b9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b90:	893b      	ldrh	r3, [r7, #8]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	611a      	str	r2, [r3, #16]
 8005b9a:	e021      	b.n	8005be0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b9c:	893b      	ldrh	r3, [r7, #8]
 8005b9e:	0a1b      	lsrs	r3, r3, #8
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bac:	6a39      	ldr	r1, [r7, #32]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f9dc 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00d      	beq.n	8005bd6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d107      	bne.n	8005bd2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e005      	b.n	8005be2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bd6:	893b      	ldrh	r3, [r7, #8]
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	00010002 	.word	0x00010002

08005bf0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	4603      	mov	r3, r0
 8005c00:	817b      	strh	r3, [r7, #10]
 8005c02:	460b      	mov	r3, r1
 8005c04:	813b      	strh	r3, [r7, #8]
 8005c06:	4613      	mov	r3, r2
 8005c08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f8c2 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00d      	beq.n	8005c5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c50:	d103      	bne.n	8005c5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e0aa      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c5e:	897b      	ldrh	r3, [r7, #10]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	6a3a      	ldr	r2, [r7, #32]
 8005c72:	4952      	ldr	r1, [pc, #328]	; (8005dbc <I2C_RequestMemoryRead+0x1cc>)
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f8fa 	bl	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e097      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9c:	6a39      	ldr	r1, [r7, #32]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f964 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00d      	beq.n	8005cc6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d107      	bne.n	8005cc2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e076      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d105      	bne.n	8005cd8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ccc:	893b      	ldrh	r3, [r7, #8]
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	611a      	str	r2, [r3, #16]
 8005cd6:	e021      	b.n	8005d1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cd8:	893b      	ldrh	r3, [r7, #8]
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce8:	6a39      	ldr	r1, [r7, #32]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f93e 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00d      	beq.n	8005d12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d107      	bne.n	8005d0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e050      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d12:	893b      	ldrh	r3, [r7, #8]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1e:	6a39      	ldr	r1, [r7, #32]
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f923 	bl	8005f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00d      	beq.n	8005d48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d107      	bne.n	8005d44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e035      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f82b 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00d      	beq.n	8005d8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7e:	d103      	bne.n	8005d88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e013      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d8c:	897b      	ldrh	r3, [r7, #10]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	6a3a      	ldr	r2, [r7, #32]
 8005da0:	4906      	ldr	r1, [pc, #24]	; (8005dbc <I2C_RequestMemoryRead+0x1cc>)
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f863 	bl	8005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	00010002 	.word	0x00010002

08005dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dd0:	e025      	b.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd8:	d021      	beq.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fc fea3 	bl	8002b24 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d116      	bne.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e023      	b.n	8005e66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	0c1b      	lsrs	r3, r3, #16
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10d      	bne.n	8005e44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	43da      	mvns	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4013      	ands	r3, r2
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	e00c      	b.n	8005e5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	43da      	mvns	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d0b6      	beq.n	8005dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e7c:	e051      	b.n	8005f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8c:	d123      	bne.n	8005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ea6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f043 0204 	orr.w	r2, r3, #4
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e046      	b.n	8005f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005edc:	d021      	beq.n	8005f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ede:	f7fc fe21 	bl	8002b24 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d302      	bcc.n	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d116      	bne.n	8005f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	f043 0220 	orr.w	r2, r3, #32
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e020      	b.n	8005f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	0c1b      	lsrs	r3, r3, #16
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d10c      	bne.n	8005f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	43da      	mvns	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4013      	ands	r3, r2
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bf14      	ite	ne
 8005f3e:	2301      	movne	r3, #1
 8005f40:	2300      	moveq	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	e00b      	b.n	8005f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	43da      	mvns	r2, r3
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4013      	ands	r3, r2
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d18d      	bne.n	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f78:	e02d      	b.n	8005fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f8ce 	bl	800611c <I2C_IsAcknowledgeFailed>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e02d      	b.n	8005fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f90:	d021      	beq.n	8005fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f92:	f7fc fdc7 	bl	8002b24 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d116      	bne.n	8005fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f043 0220 	orr.w	r2, r3, #32
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e007      	b.n	8005fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe0:	2b80      	cmp	r3, #128	; 0x80
 8005fe2:	d1ca      	bne.n	8005f7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ffa:	e02d      	b.n	8006058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f88d 	bl	800611c <I2C_IsAcknowledgeFailed>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e02d      	b.n	8006068 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006012:	d021      	beq.n	8006058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006014:	f7fc fd86 	bl	8002b24 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d116      	bne.n	8006058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	f043 0220 	orr.w	r2, r3, #32
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e007      	b.n	8006068 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b04      	cmp	r3, #4
 8006064:	d1ca      	bne.n	8005ffc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800607c:	e042      	b.n	8006104 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b10      	cmp	r3, #16
 800608a:	d119      	bne.n	80060c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0210 	mvn.w	r2, #16
 8006094:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e029      	b.n	8006114 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c0:	f7fc fd30 	bl	8002b24 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d302      	bcc.n	80060d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d116      	bne.n	8006104 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	f043 0220 	orr.w	r2, r3, #32
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e007      	b.n	8006114 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d1b5      	bne.n	800607e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006132:	d11b      	bne.n	800616c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800613c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f043 0204 	orr.w	r2, r3, #4
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e128      	b.n	80063e0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a90      	ldr	r2, [pc, #576]	; (80063e8 <HAL_I2S_Init+0x26c>)
 80061a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7fc fa1f 	bl	80025ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2202      	movs	r2, #2
 80061b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80061c4:	f023 030f 	bic.w	r3, r3, #15
 80061c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2202      	movs	r2, #2
 80061d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d060      	beq.n	800629c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d102      	bne.n	80061e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80061e2:	2310      	movs	r3, #16
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	e001      	b.n	80061ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80061e8:	2320      	movs	r3, #32
 80061ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d802      	bhi.n	80061fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80061fa:	2001      	movs	r0, #1
 80061fc:	f001 f9e6 	bl	80075cc <HAL_RCCEx_GetPeriphCLKFreq>
 8006200:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620a:	d125      	bne.n	8006258 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d010      	beq.n	8006236 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	fbb2 f2f3 	udiv	r2, r2, r3
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006230:	3305      	adds	r3, #5
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	e01f      	b.n	8006276 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	461a      	mov	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006252:	3305      	adds	r3, #5
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	e00e      	b.n	8006276 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	461a      	mov	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006272:	3305      	adds	r3, #5
 8006274:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	4a5c      	ldr	r2, [pc, #368]	; (80063ec <HAL_I2S_Init+0x270>)
 800627a:	fba2 2303 	umull	r2, r3, r2, r3
 800627e:	08db      	lsrs	r3, r3, #3
 8006280:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	085b      	lsrs	r3, r3, #1
 8006292:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	e003      	b.n	80062a4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800629c:	2302      	movs	r3, #2
 800629e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d902      	bls.n	80062b0 <HAL_I2S_Init+0x134>
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	2bff      	cmp	r3, #255	; 0xff
 80062ae:	d907      	bls.n	80062c0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b4:	f043 0210 	orr.w	r2, r3, #16
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e08f      	b.n	80063e0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	ea42 0103 	orr.w	r1, r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80062de:	f023 030f 	bic.w	r3, r3, #15
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6851      	ldr	r1, [r2, #4]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6892      	ldr	r2, [r2, #8]
 80062ea:	4311      	orrs	r1, r2
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	68d2      	ldr	r2, [r2, #12]
 80062f0:	4311      	orrs	r1, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6992      	ldr	r2, [r2, #24]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006302:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d161      	bne.n	80063d0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a38      	ldr	r2, [pc, #224]	; (80063f0 <HAL_I2S_Init+0x274>)
 8006310:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a37      	ldr	r2, [pc, #220]	; (80063f4 <HAL_I2S_Init+0x278>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d101      	bne.n	8006320 <HAL_I2S_Init+0x1a4>
 800631c:	4b36      	ldr	r3, [pc, #216]	; (80063f8 <HAL_I2S_Init+0x27c>)
 800631e:	e001      	b.n	8006324 <HAL_I2S_Init+0x1a8>
 8006320:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6812      	ldr	r2, [r2, #0]
 800632a:	4932      	ldr	r1, [pc, #200]	; (80063f4 <HAL_I2S_Init+0x278>)
 800632c:	428a      	cmp	r2, r1
 800632e:	d101      	bne.n	8006334 <HAL_I2S_Init+0x1b8>
 8006330:	4a31      	ldr	r2, [pc, #196]	; (80063f8 <HAL_I2S_Init+0x27c>)
 8006332:	e001      	b.n	8006338 <HAL_I2S_Init+0x1bc>
 8006334:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006338:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800633c:	f023 030f 	bic.w	r3, r3, #15
 8006340:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a2b      	ldr	r2, [pc, #172]	; (80063f4 <HAL_I2S_Init+0x278>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d101      	bne.n	8006350 <HAL_I2S_Init+0x1d4>
 800634c:	4b2a      	ldr	r3, [pc, #168]	; (80063f8 <HAL_I2S_Init+0x27c>)
 800634e:	e001      	b.n	8006354 <HAL_I2S_Init+0x1d8>
 8006350:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006354:	2202      	movs	r2, #2
 8006356:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a25      	ldr	r2, [pc, #148]	; (80063f4 <HAL_I2S_Init+0x278>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d101      	bne.n	8006366 <HAL_I2S_Init+0x1ea>
 8006362:	4b25      	ldr	r3, [pc, #148]	; (80063f8 <HAL_I2S_Init+0x27c>)
 8006364:	e001      	b.n	800636a <HAL_I2S_Init+0x1ee>
 8006366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006376:	d003      	beq.n	8006380 <HAL_I2S_Init+0x204>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	e001      	b.n	800638c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006388:	2300      	movs	r3, #0
 800638a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006396:	4313      	orrs	r3, r2
 8006398:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80063a0:	4313      	orrs	r3, r2
 80063a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80063aa:	4313      	orrs	r3, r2
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	897b      	ldrh	r3, [r7, #10]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063b8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a0d      	ldr	r2, [pc, #52]	; (80063f4 <HAL_I2S_Init+0x278>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d101      	bne.n	80063c8 <HAL_I2S_Init+0x24c>
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <HAL_I2S_Init+0x27c>)
 80063c6:	e001      	b.n	80063cc <HAL_I2S_Init+0x250>
 80063c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063cc:	897a      	ldrh	r2, [r7, #10]
 80063ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	080064f3 	.word	0x080064f3
 80063ec:	cccccccd 	.word	0xcccccccd
 80063f0:	08006609 	.word	0x08006609
 80063f4:	40003800 	.word	0x40003800
 80063f8:	40003400 	.word	0x40003400

080063fc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	881a      	ldrh	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	1c9a      	adds	r2, r3, #2
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10e      	bne.n	800648c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800647c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff ffb8 	bl	80063fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a6:	b292      	uxth	r2, r2
 80064a8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	1c9a      	adds	r2, r3, #2
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10e      	bne.n	80064ea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff ff93 	bl	8006410 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b04      	cmp	r3, #4
 800650c:	d13a      	bne.n	8006584 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b01      	cmp	r3, #1
 8006516:	d109      	bne.n	800652c <I2S_IRQHandler+0x3a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d102      	bne.n	800652c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff ffb4 	bl	8006494 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	d126      	bne.n	8006584 <I2S_IRQHandler+0x92>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b20      	cmp	r3, #32
 8006542:	d11f      	bne.n	8006584 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006552:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006554:	2300      	movs	r3, #0
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006576:	f043 0202 	orr.w	r2, r3, #2
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff ff50 	bl	8006424 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b03      	cmp	r3, #3
 800658e:	d136      	bne.n	80065fe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b02      	cmp	r3, #2
 8006598:	d109      	bne.n	80065ae <I2S_IRQHandler+0xbc>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a4:	2b80      	cmp	r3, #128	; 0x80
 80065a6:	d102      	bne.n	80065ae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ff45 	bl	8006438 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d122      	bne.n	80065fe <I2S_IRQHandler+0x10c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d11b      	bne.n	80065fe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065d4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f0:	f043 0204 	orr.w	r2, r3, #4
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff ff13 	bl	8006424 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065fe:	bf00      	nop
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4aa2      	ldr	r2, [pc, #648]	; (80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d101      	bne.n	8006626 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006622:	4ba2      	ldr	r3, [pc, #648]	; (80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006624:	e001      	b.n	800662a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a9b      	ldr	r2, [pc, #620]	; (80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d101      	bne.n	8006644 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006640:	4b9a      	ldr	r3, [pc, #616]	; (80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006642:	e001      	b.n	8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006654:	d004      	beq.n	8006660 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f040 8099 	bne.w	8006792 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b02      	cmp	r3, #2
 8006668:	d107      	bne.n	800667a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f925 	bl	80068c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b01      	cmp	r3, #1
 8006682:	d107      	bne.n	8006694 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f9c8 	bl	8006a24 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d13a      	bne.n	8006714 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d035      	beq.n	8006714 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a7e      	ldr	r2, [pc, #504]	; (80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d101      	bne.n	80066b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80066b2:	4b7e      	ldr	r3, [pc, #504]	; (80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066b4:	e001      	b.n	80066ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80066b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4979      	ldr	r1, [pc, #484]	; (80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066c2:	428b      	cmp	r3, r1
 80066c4:	d101      	bne.n	80066ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80066c6:	4b79      	ldr	r3, [pc, #484]	; (80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066c8:	e001      	b.n	80066ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80066ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	f043 0202 	orr.w	r2, r3, #2
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff fe88 	bl	8006424 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f003 0308 	and.w	r3, r3, #8
 800671a:	2b08      	cmp	r3, #8
 800671c:	f040 80be 	bne.w	800689c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 80b8 	beq.w	800689c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800673a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a59      	ldr	r2, [pc, #356]	; (80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d101      	bne.n	800674a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006746:	4b59      	ldr	r3, [pc, #356]	; (80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006748:	e001      	b.n	800674e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800674a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4954      	ldr	r1, [pc, #336]	; (80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006756:	428b      	cmp	r3, r1
 8006758:	d101      	bne.n	800675e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800675a:	4b54      	ldr	r3, [pc, #336]	; (80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800675c:	e001      	b.n	8006762 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800675e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006762:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006766:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006768:	2300      	movs	r3, #0
 800676a:	60bb      	str	r3, [r7, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	60bb      	str	r3, [r7, #8]
 8006774:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006782:	f043 0204 	orr.w	r2, r3, #4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff fe4a 	bl	8006424 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006790:	e084      	b.n	800689c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b02      	cmp	r3, #2
 800679a:	d107      	bne.n	80067ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f8be 	bl	8006928 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d107      	bne.n	80067c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f8fd 	bl	80069c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067cc:	2b40      	cmp	r3, #64	; 0x40
 80067ce:	d12f      	bne.n	8006830 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d02a      	beq.n	8006830 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a2e      	ldr	r2, [pc, #184]	; (80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d101      	bne.n	80067f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80067f4:	4b2d      	ldr	r3, [pc, #180]	; (80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067f6:	e001      	b.n	80067fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80067f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4929      	ldr	r1, [pc, #164]	; (80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006804:	428b      	cmp	r3, r1
 8006806:	d101      	bne.n	800680c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006808:	4b28      	ldr	r3, [pc, #160]	; (80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800680a:	e001      	b.n	8006810 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800680c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006810:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006814:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006822:	f043 0202 	orr.w	r2, r3, #2
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fdfa 	bl	8006424 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b08      	cmp	r3, #8
 8006838:	d131      	bne.n	800689e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d02c      	beq.n	800689e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d101      	bne.n	8006852 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800684e:	4b17      	ldr	r3, [pc, #92]	; (80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006850:	e001      	b.n	8006856 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4912      	ldr	r1, [pc, #72]	; (80068a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800685e:	428b      	cmp	r3, r1
 8006860:	d101      	bne.n	8006866 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006864:	e001      	b.n	800686a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006866:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800686a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800686e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800687e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	f043 0204 	orr.w	r2, r3, #4
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff fdc5 	bl	8006424 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800689a:	e000      	b.n	800689e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800689c:	bf00      	nop
}
 800689e:	bf00      	nop
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40003800 	.word	0x40003800
 80068ac:	40003400 	.word	0x40003400

080068b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	1c99      	adds	r1, r3, #2
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6251      	str	r1, [r2, #36]	; 0x24
 80068d6:	881a      	ldrh	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d113      	bne.n	800691e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006904:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800690a:	b29b      	uxth	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff ffc9 	bl	80068b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800691e:	bf00      	nop
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	1c99      	adds	r1, r3, #2
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6251      	str	r1, [r2, #36]	; 0x24
 800693a:	8819      	ldrh	r1, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <I2SEx_TxISR_I2SExt+0x90>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d101      	bne.n	800694a <I2SEx_TxISR_I2SExt+0x22>
 8006946:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <I2SEx_TxISR_I2SExt+0x94>)
 8006948:	e001      	b.n	800694e <I2SEx_TxISR_I2SExt+0x26>
 800694a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800694e:	460a      	mov	r2, r1
 8006950:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d121      	bne.n	80069ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a12      	ldr	r2, [pc, #72]	; (80069b8 <I2SEx_TxISR_I2SExt+0x90>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d101      	bne.n	8006978 <I2SEx_TxISR_I2SExt+0x50>
 8006974:	4b11      	ldr	r3, [pc, #68]	; (80069bc <I2SEx_TxISR_I2SExt+0x94>)
 8006976:	e001      	b.n	800697c <I2SEx_TxISR_I2SExt+0x54>
 8006978:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	490d      	ldr	r1, [pc, #52]	; (80069b8 <I2SEx_TxISR_I2SExt+0x90>)
 8006984:	428b      	cmp	r3, r1
 8006986:	d101      	bne.n	800698c <I2SEx_TxISR_I2SExt+0x64>
 8006988:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <I2SEx_TxISR_I2SExt+0x94>)
 800698a:	e001      	b.n	8006990 <I2SEx_TxISR_I2SExt+0x68>
 800698c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006990:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006994:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff ff81 	bl	80068b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069ae:	bf00      	nop
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40003800 	.word	0x40003800
 80069bc:	40003400 	.word	0x40003400

080069c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68d8      	ldr	r0, [r3, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	1c99      	adds	r1, r3, #2
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80069d8:	b282      	uxth	r2, r0
 80069da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d113      	bne.n	8006a1c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a02:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff ff4a 	bl	80068b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a1c:	bf00      	nop
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a20      	ldr	r2, [pc, #128]	; (8006ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d101      	bne.n	8006a3a <I2SEx_RxISR_I2SExt+0x16>
 8006a36:	4b20      	ldr	r3, [pc, #128]	; (8006ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8006a38:	e001      	b.n	8006a3e <I2SEx_RxISR_I2SExt+0x1a>
 8006a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a3e:	68d8      	ldr	r0, [r3, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	1c99      	adds	r1, r3, #2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006a4a:	b282      	uxth	r2, r0
 8006a4c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d121      	bne.n	8006aaa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a12      	ldr	r2, [pc, #72]	; (8006ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d101      	bne.n	8006a74 <I2SEx_RxISR_I2SExt+0x50>
 8006a70:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8006a72:	e001      	b.n	8006a78 <I2SEx_RxISR_I2SExt+0x54>
 8006a74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	490d      	ldr	r1, [pc, #52]	; (8006ab4 <I2SEx_RxISR_I2SExt+0x90>)
 8006a80:	428b      	cmp	r3, r1
 8006a82:	d101      	bne.n	8006a88 <I2SEx_RxISR_I2SExt+0x64>
 8006a84:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <I2SEx_RxISR_I2SExt+0x94>)
 8006a86:	e001      	b.n	8006a8c <I2SEx_RxISR_I2SExt+0x68>
 8006a88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a90:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d106      	bne.n	8006aaa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff ff03 	bl	80068b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006aaa:	bf00      	nop
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	40003800 	.word	0x40003800
 8006ab8:	40003400 	.word	0x40003400

08006abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e264      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d075      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ada:	4ba3      	ldr	r3, [pc, #652]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 030c 	and.w	r3, r3, #12
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d00c      	beq.n	8006b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ae6:	4ba0      	ldr	r3, [pc, #640]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d112      	bne.n	8006b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006af2:	4b9d      	ldr	r3, [pc, #628]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006afe:	d10b      	bne.n	8006b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b00:	4b99      	ldr	r3, [pc, #612]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d05b      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x108>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d157      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e23f      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b20:	d106      	bne.n	8006b30 <HAL_RCC_OscConfig+0x74>
 8006b22:	4b91      	ldr	r3, [pc, #580]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a90      	ldr	r2, [pc, #576]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	e01d      	b.n	8006b6c <HAL_RCC_OscConfig+0xb0>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b38:	d10c      	bne.n	8006b54 <HAL_RCC_OscConfig+0x98>
 8006b3a:	4b8b      	ldr	r3, [pc, #556]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a8a      	ldr	r2, [pc, #552]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	4b88      	ldr	r3, [pc, #544]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a87      	ldr	r2, [pc, #540]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	e00b      	b.n	8006b6c <HAL_RCC_OscConfig+0xb0>
 8006b54:	4b84      	ldr	r3, [pc, #528]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a83      	ldr	r2, [pc, #524]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5e:	6013      	str	r3, [r2, #0]
 8006b60:	4b81      	ldr	r3, [pc, #516]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a80      	ldr	r2, [pc, #512]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d013      	beq.n	8006b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b74:	f7fb ffd6 	bl	8002b24 <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b7c:	f7fb ffd2 	bl	8002b24 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b64      	cmp	r3, #100	; 0x64
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e204      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8e:	4b76      	ldr	r3, [pc, #472]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f0      	beq.n	8006b7c <HAL_RCC_OscConfig+0xc0>
 8006b9a:	e014      	b.n	8006bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b9c:	f7fb ffc2 	bl	8002b24 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ba4:	f7fb ffbe 	bl	8002b24 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b64      	cmp	r3, #100	; 0x64
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e1f0      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bb6:	4b6c      	ldr	r3, [pc, #432]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f0      	bne.n	8006ba4 <HAL_RCC_OscConfig+0xe8>
 8006bc2:	e000      	b.n	8006bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d063      	beq.n	8006c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bd2:	4b65      	ldr	r3, [pc, #404]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 030c 	and.w	r3, r3, #12
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00b      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bde:	4b62      	ldr	r3, [pc, #392]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d11c      	bne.n	8006c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bea:	4b5f      	ldr	r3, [pc, #380]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d116      	bne.n	8006c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bf6:	4b5c      	ldr	r3, [pc, #368]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_RCC_OscConfig+0x152>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d001      	beq.n	8006c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e1c4      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c0e:	4b56      	ldr	r3, [pc, #344]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	4952      	ldr	r1, [pc, #328]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c22:	e03a      	b.n	8006c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d020      	beq.n	8006c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c2c:	4b4f      	ldr	r3, [pc, #316]	; (8006d6c <HAL_RCC_OscConfig+0x2b0>)
 8006c2e:	2201      	movs	r2, #1
 8006c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c32:	f7fb ff77 	bl	8002b24 <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c3a:	f7fb ff73 	bl	8002b24 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e1a5      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c4c:	4b46      	ldr	r3, [pc, #280]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f0      	beq.n	8006c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c58:	4b43      	ldr	r3, [pc, #268]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	4940      	ldr	r1, [pc, #256]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	600b      	str	r3, [r1, #0]
 8006c6c:	e015      	b.n	8006c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c6e:	4b3f      	ldr	r3, [pc, #252]	; (8006d6c <HAL_RCC_OscConfig+0x2b0>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c74:	f7fb ff56 	bl	8002b24 <HAL_GetTick>
 8006c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c7c:	f7fb ff52 	bl	8002b24 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e184      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c8e:	4b36      	ldr	r3, [pc, #216]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f0      	bne.n	8006c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d030      	beq.n	8006d08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d016      	beq.n	8006cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cae:	4b30      	ldr	r3, [pc, #192]	; (8006d70 <HAL_RCC_OscConfig+0x2b4>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb4:	f7fb ff36 	bl	8002b24 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cbc:	f7fb ff32 	bl	8002b24 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e164      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cce:	4b26      	ldr	r3, [pc, #152]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCC_OscConfig+0x200>
 8006cda:	e015      	b.n	8006d08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cdc:	4b24      	ldr	r3, [pc, #144]	; (8006d70 <HAL_RCC_OscConfig+0x2b4>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ce2:	f7fb ff1f 	bl	8002b24 <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ce8:	e008      	b.n	8006cfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cea:	f7fb ff1b 	bl	8002b24 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e14d      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f0      	bne.n	8006cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80a0 	beq.w	8006e56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d16:	2300      	movs	r3, #0
 8006d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d1a:	4b13      	ldr	r3, [pc, #76]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10f      	bne.n	8006d46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	4b0f      	ldr	r3, [pc, #60]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	4a0e      	ldr	r2, [pc, #56]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d34:	6413      	str	r3, [r2, #64]	; 0x40
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <HAL_RCC_OscConfig+0x2ac>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d3e:	60bb      	str	r3, [r7, #8]
 8006d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d42:	2301      	movs	r3, #1
 8006d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <HAL_RCC_OscConfig+0x2b8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d121      	bne.n	8006d96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d52:	4b08      	ldr	r3, [pc, #32]	; (8006d74 <HAL_RCC_OscConfig+0x2b8>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a07      	ldr	r2, [pc, #28]	; (8006d74 <HAL_RCC_OscConfig+0x2b8>)
 8006d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d5e:	f7fb fee1 	bl	8002b24 <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d64:	e011      	b.n	8006d8a <HAL_RCC_OscConfig+0x2ce>
 8006d66:	bf00      	nop
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	42470000 	.word	0x42470000
 8006d70:	42470e80 	.word	0x42470e80
 8006d74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d78:	f7fb fed4 	bl	8002b24 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e106      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d8a:	4b85      	ldr	r3, [pc, #532]	; (8006fa0 <HAL_RCC_OscConfig+0x4e4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0f0      	beq.n	8006d78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d106      	bne.n	8006dac <HAL_RCC_OscConfig+0x2f0>
 8006d9e:	4b81      	ldr	r3, [pc, #516]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	4a80      	ldr	r2, [pc, #512]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006da4:	f043 0301 	orr.w	r3, r3, #1
 8006da8:	6713      	str	r3, [r2, #112]	; 0x70
 8006daa:	e01c      	b.n	8006de6 <HAL_RCC_OscConfig+0x32a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b05      	cmp	r3, #5
 8006db2:	d10c      	bne.n	8006dce <HAL_RCC_OscConfig+0x312>
 8006db4:	4b7b      	ldr	r3, [pc, #492]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	4a7a      	ldr	r2, [pc, #488]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006dba:	f043 0304 	orr.w	r3, r3, #4
 8006dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc0:	4b78      	ldr	r3, [pc, #480]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc4:	4a77      	ldr	r2, [pc, #476]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	6713      	str	r3, [r2, #112]	; 0x70
 8006dcc:	e00b      	b.n	8006de6 <HAL_RCC_OscConfig+0x32a>
 8006dce:	4b75      	ldr	r3, [pc, #468]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	4a74      	ldr	r2, [pc, #464]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006dd4:	f023 0301 	bic.w	r3, r3, #1
 8006dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dda:	4b72      	ldr	r3, [pc, #456]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dde:	4a71      	ldr	r2, [pc, #452]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006de0:	f023 0304 	bic.w	r3, r3, #4
 8006de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d015      	beq.n	8006e1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dee:	f7fb fe99 	bl	8002b24 <HAL_GetTick>
 8006df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df4:	e00a      	b.n	8006e0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006df6:	f7fb fe95 	bl	8002b24 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e0c5      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e0c:	4b65      	ldr	r3, [pc, #404]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0ee      	beq.n	8006df6 <HAL_RCC_OscConfig+0x33a>
 8006e18:	e014      	b.n	8006e44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e1a:	f7fb fe83 	bl	8002b24 <HAL_GetTick>
 8006e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e20:	e00a      	b.n	8006e38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e22:	f7fb fe7f 	bl	8002b24 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e0af      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e38:	4b5a      	ldr	r3, [pc, #360]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1ee      	bne.n	8006e22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d105      	bne.n	8006e56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e4a:	4b56      	ldr	r3, [pc, #344]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	4a55      	ldr	r2, [pc, #340]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 809b 	beq.w	8006f96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e60:	4b50      	ldr	r3, [pc, #320]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 030c 	and.w	r3, r3, #12
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d05c      	beq.n	8006f26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d141      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e74:	4b4c      	ldr	r3, [pc, #304]	; (8006fa8 <HAL_RCC_OscConfig+0x4ec>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e7a:	f7fb fe53 	bl	8002b24 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e82:	f7fb fe4f 	bl	8002b24 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e081      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e94:	4b43      	ldr	r3, [pc, #268]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1f0      	bne.n	8006e82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	019b      	lsls	r3, r3, #6
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	085b      	lsrs	r3, r3, #1
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	041b      	lsls	r3, r3, #16
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	061b      	lsls	r3, r3, #24
 8006ec4:	4937      	ldr	r1, [pc, #220]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eca:	4b37      	ldr	r3, [pc, #220]	; (8006fa8 <HAL_RCC_OscConfig+0x4ec>)
 8006ecc:	2201      	movs	r2, #1
 8006ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed0:	f7fb fe28 	bl	8002b24 <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed6:	e008      	b.n	8006eea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ed8:	f7fb fe24 	bl	8002b24 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e056      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eea:	4b2e      	ldr	r3, [pc, #184]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0f0      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x41c>
 8006ef6:	e04e      	b.n	8006f96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef8:	4b2b      	ldr	r3, [pc, #172]	; (8006fa8 <HAL_RCC_OscConfig+0x4ec>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006efe:	f7fb fe11 	bl	8002b24 <HAL_GetTick>
 8006f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f04:	e008      	b.n	8006f18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f06:	f7fb fe0d 	bl	8002b24 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e03f      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f18:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1f0      	bne.n	8006f06 <HAL_RCC_OscConfig+0x44a>
 8006f24:	e037      	b.n	8006f96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e032      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f32:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <HAL_RCC_OscConfig+0x4e8>)
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d028      	beq.n	8006f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d121      	bne.n	8006f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d11a      	bne.n	8006f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f62:	4013      	ands	r3, r2
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d111      	bne.n	8006f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f78:	085b      	lsrs	r3, r3, #1
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d107      	bne.n	8006f92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d001      	beq.n	8006f96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e000      	b.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40007000 	.word	0x40007000
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	42470060 	.word	0x42470060

08006fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0cc      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc0:	4b68      	ldr	r3, [pc, #416]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0307 	and.w	r3, r3, #7
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d90c      	bls.n	8006fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fce:	4b65      	ldr	r3, [pc, #404]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd6:	4b63      	ldr	r3, [pc, #396]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d001      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0b8      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d020      	beq.n	8007036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d005      	beq.n	800700c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007000:	4b59      	ldr	r3, [pc, #356]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	4a58      	ldr	r2, [pc, #352]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800700a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007018:	4b53      	ldr	r3, [pc, #332]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4a52      	ldr	r2, [pc, #328]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007024:	4b50      	ldr	r3, [pc, #320]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	494d      	ldr	r1, [pc, #308]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	4313      	orrs	r3, r2
 8007034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d044      	beq.n	80070cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d107      	bne.n	800705a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704a:	4b47      	ldr	r3, [pc, #284]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d119      	bne.n	800708a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e07f      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d003      	beq.n	800706a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007066:	2b03      	cmp	r3, #3
 8007068:	d107      	bne.n	800707a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800706a:	4b3f      	ldr	r3, [pc, #252]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e06f      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707a:	4b3b      	ldr	r3, [pc, #236]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e067      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800708a:	4b37      	ldr	r3, [pc, #220]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f023 0203 	bic.w	r2, r3, #3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	4934      	ldr	r1, [pc, #208]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007098:	4313      	orrs	r3, r2
 800709a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800709c:	f7fb fd42 	bl	8002b24 <HAL_GetTick>
 80070a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070a2:	e00a      	b.n	80070ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070a4:	f7fb fd3e 	bl	8002b24 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e04f      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ba:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f003 020c 	and.w	r2, r3, #12
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d1eb      	bne.n	80070a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070cc:	4b25      	ldr	r3, [pc, #148]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0307 	and.w	r3, r3, #7
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d20c      	bcs.n	80070f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070da:	4b22      	ldr	r3, [pc, #136]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e2:	4b20      	ldr	r3, [pc, #128]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d001      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e032      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007100:	4b19      	ldr	r3, [pc, #100]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	4916      	ldr	r1, [pc, #88]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800710e:	4313      	orrs	r3, r2
 8007110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800711e:	4b12      	ldr	r3, [pc, #72]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	490e      	ldr	r1, [pc, #56]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	4313      	orrs	r3, r2
 8007130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007132:	f000 f821 	bl	8007178 <HAL_RCC_GetSysClockFreq>
 8007136:	4602      	mov	r2, r0
 8007138:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	490a      	ldr	r1, [pc, #40]	; (800716c <HAL_RCC_ClockConfig+0x1c0>)
 8007144:	5ccb      	ldrb	r3, [r1, r3]
 8007146:	fa22 f303 	lsr.w	r3, r2, r3
 800714a:	4a09      	ldr	r2, [pc, #36]	; (8007170 <HAL_RCC_ClockConfig+0x1c4>)
 800714c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800714e:	4b09      	ldr	r3, [pc, #36]	; (8007174 <HAL_RCC_ClockConfig+0x1c8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f7fb fb70 	bl	8002838 <HAL_InitTick>

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	40023c00 	.word	0x40023c00
 8007168:	40023800 	.word	0x40023800
 800716c:	08011134 	.word	0x08011134
 8007170:	20000000 	.word	0x20000000
 8007174:	20000004 	.word	0x20000004

08007178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007178:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	607b      	str	r3, [r7, #4]
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	2300      	movs	r3, #0
 800718a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007190:	4b67      	ldr	r3, [pc, #412]	; (8007330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f003 030c 	and.w	r3, r3, #12
 8007198:	2b08      	cmp	r3, #8
 800719a:	d00d      	beq.n	80071b8 <HAL_RCC_GetSysClockFreq+0x40>
 800719c:	2b08      	cmp	r3, #8
 800719e:	f200 80bd 	bhi.w	800731c <HAL_RCC_GetSysClockFreq+0x1a4>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <HAL_RCC_GetSysClockFreq+0x34>
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d003      	beq.n	80071b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80071aa:	e0b7      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071ac:	4b61      	ldr	r3, [pc, #388]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80071ae:	60bb      	str	r3, [r7, #8]
       break;
 80071b0:	e0b7      	b.n	8007322 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071b2:	4b61      	ldr	r3, [pc, #388]	; (8007338 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80071b4:	60bb      	str	r3, [r7, #8]
      break;
 80071b6:	e0b4      	b.n	8007322 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071b8:	4b5d      	ldr	r3, [pc, #372]	; (8007330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071c2:	4b5b      	ldr	r3, [pc, #364]	; (8007330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d04d      	beq.n	800726a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ce:	4b58      	ldr	r3, [pc, #352]	; (8007330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	099b      	lsrs	r3, r3, #6
 80071d4:	461a      	mov	r2, r3
 80071d6:	f04f 0300 	mov.w	r3, #0
 80071da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071de:	f04f 0100 	mov.w	r1, #0
 80071e2:	ea02 0800 	and.w	r8, r2, r0
 80071e6:	ea03 0901 	and.w	r9, r3, r1
 80071ea:	4640      	mov	r0, r8
 80071ec:	4649      	mov	r1, r9
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	014b      	lsls	r3, r1, #5
 80071f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071fc:	0142      	lsls	r2, r0, #5
 80071fe:	4610      	mov	r0, r2
 8007200:	4619      	mov	r1, r3
 8007202:	ebb0 0008 	subs.w	r0, r0, r8
 8007206:	eb61 0109 	sbc.w	r1, r1, r9
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	018b      	lsls	r3, r1, #6
 8007214:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007218:	0182      	lsls	r2, r0, #6
 800721a:	1a12      	subs	r2, r2, r0
 800721c:	eb63 0301 	sbc.w	r3, r3, r1
 8007220:	f04f 0000 	mov.w	r0, #0
 8007224:	f04f 0100 	mov.w	r1, #0
 8007228:	00d9      	lsls	r1, r3, #3
 800722a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800722e:	00d0      	lsls	r0, r2, #3
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	eb12 0208 	adds.w	r2, r2, r8
 8007238:	eb43 0309 	adc.w	r3, r3, r9
 800723c:	f04f 0000 	mov.w	r0, #0
 8007240:	f04f 0100 	mov.w	r1, #0
 8007244:	0259      	lsls	r1, r3, #9
 8007246:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800724a:	0250      	lsls	r0, r2, #9
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4610      	mov	r0, r2
 8007252:	4619      	mov	r1, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	461a      	mov	r2, r3
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	f7f9 fc86 	bl	8000b6c <__aeabi_uldivmod>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4613      	mov	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e04a      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800726a:	4b31      	ldr	r3, [pc, #196]	; (8007330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	099b      	lsrs	r3, r3, #6
 8007270:	461a      	mov	r2, r3
 8007272:	f04f 0300 	mov.w	r3, #0
 8007276:	f240 10ff 	movw	r0, #511	; 0x1ff
 800727a:	f04f 0100 	mov.w	r1, #0
 800727e:	ea02 0400 	and.w	r4, r2, r0
 8007282:	ea03 0501 	and.w	r5, r3, r1
 8007286:	4620      	mov	r0, r4
 8007288:	4629      	mov	r1, r5
 800728a:	f04f 0200 	mov.w	r2, #0
 800728e:	f04f 0300 	mov.w	r3, #0
 8007292:	014b      	lsls	r3, r1, #5
 8007294:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007298:	0142      	lsls	r2, r0, #5
 800729a:	4610      	mov	r0, r2
 800729c:	4619      	mov	r1, r3
 800729e:	1b00      	subs	r0, r0, r4
 80072a0:	eb61 0105 	sbc.w	r1, r1, r5
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	018b      	lsls	r3, r1, #6
 80072ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072b2:	0182      	lsls	r2, r0, #6
 80072b4:	1a12      	subs	r2, r2, r0
 80072b6:	eb63 0301 	sbc.w	r3, r3, r1
 80072ba:	f04f 0000 	mov.w	r0, #0
 80072be:	f04f 0100 	mov.w	r1, #0
 80072c2:	00d9      	lsls	r1, r3, #3
 80072c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072c8:	00d0      	lsls	r0, r2, #3
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	1912      	adds	r2, r2, r4
 80072d0:	eb45 0303 	adc.w	r3, r5, r3
 80072d4:	f04f 0000 	mov.w	r0, #0
 80072d8:	f04f 0100 	mov.w	r1, #0
 80072dc:	0299      	lsls	r1, r3, #10
 80072de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80072e2:	0290      	lsls	r0, r2, #10
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4610      	mov	r0, r2
 80072ea:	4619      	mov	r1, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	f7f9 fc3a 	bl	8000b6c <__aeabi_uldivmod>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4613      	mov	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	0c1b      	lsrs	r3, r3, #16
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	3301      	adds	r3, #1
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	60bb      	str	r3, [r7, #8]
      break;
 800731a:	e002      	b.n	8007322 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800731e:	60bb      	str	r3, [r7, #8]
      break;
 8007320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007322:	68bb      	ldr	r3, [r7, #8]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800732e:	bf00      	nop
 8007330:	40023800 	.word	0x40023800
 8007334:	00f42400 	.word	0x00f42400
 8007338:	007a1200 	.word	0x007a1200

0800733c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007340:	4b03      	ldr	r3, [pc, #12]	; (8007350 <HAL_RCC_GetHCLKFreq+0x14>)
 8007342:	681b      	ldr	r3, [r3, #0]
}
 8007344:	4618      	mov	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	20000000 	.word	0x20000000

08007354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007358:	f7ff fff0 	bl	800733c <HAL_RCC_GetHCLKFreq>
 800735c:	4602      	mov	r2, r0
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	0a9b      	lsrs	r3, r3, #10
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	4903      	ldr	r1, [pc, #12]	; (8007378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800736a:	5ccb      	ldrb	r3, [r1, r3]
 800736c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007370:	4618      	mov	r0, r3
 8007372:	bd80      	pop	{r7, pc}
 8007374:	40023800 	.word	0x40023800
 8007378:	08011144 	.word	0x08011144

0800737c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007380:	f7ff ffdc 	bl	800733c <HAL_RCC_GetHCLKFreq>
 8007384:	4602      	mov	r2, r0
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	0b5b      	lsrs	r3, r3, #13
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	4903      	ldr	r1, [pc, #12]	; (80073a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007392:	5ccb      	ldrb	r3, [r1, r3]
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40023800 	.word	0x40023800
 80073a0:	08011144 	.word	0x08011144

080073a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	220f      	movs	r2, #15
 80073b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073b4:	4b12      	ldr	r3, [pc, #72]	; (8007400 <HAL_RCC_GetClockConfig+0x5c>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 0203 	and.w	r2, r3, #3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <HAL_RCC_GetClockConfig+0x5c>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80073cc:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <HAL_RCC_GetClockConfig+0x5c>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80073d8:	4b09      	ldr	r3, [pc, #36]	; (8007400 <HAL_RCC_GetClockConfig+0x5c>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	08db      	lsrs	r3, r3, #3
 80073de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80073e6:	4b07      	ldr	r3, [pc, #28]	; (8007404 <HAL_RCC_GetClockConfig+0x60>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0207 	and.w	r2, r3, #7
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	601a      	str	r2, [r3, #0]
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40023800 	.word	0x40023800
 8007404:	40023c00 	.word	0x40023c00

08007408 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d105      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800742c:	2b00      	cmp	r3, #0
 800742e:	d035      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007430:	4b62      	ldr	r3, [pc, #392]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007436:	f7fb fb75 	bl	8002b24 <HAL_GetTick>
 800743a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800743c:	e008      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800743e:	f7fb fb71 	bl	8002b24 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	2b02      	cmp	r3, #2
 800744a:	d901      	bls.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e0b0      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007450:	4b5b      	ldr	r3, [pc, #364]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1f0      	bne.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	019a      	lsls	r2, r3, #6
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	071b      	lsls	r3, r3, #28
 8007468:	4955      	ldr	r1, [pc, #340]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800746a:	4313      	orrs	r3, r2
 800746c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007470:	4b52      	ldr	r3, [pc, #328]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007476:	f7fb fb55 	bl	8002b24 <HAL_GetTick>
 800747a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800747c:	e008      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800747e:	f7fb fb51 	bl	8002b24 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e090      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007490:	4b4b      	ldr	r3, [pc, #300]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0f0      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8083 	beq.w	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	4b44      	ldr	r3, [pc, #272]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	4a43      	ldr	r2, [pc, #268]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b8:	6413      	str	r3, [r2, #64]	; 0x40
 80074ba:	4b41      	ldr	r3, [pc, #260]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80074c6:	4b3f      	ldr	r3, [pc, #252]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a3e      	ldr	r2, [pc, #248]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074d2:	f7fb fb27 	bl	8002b24 <HAL_GetTick>
 80074d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80074d8:	e008      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80074da:	f7fb fb23 	bl	8002b24 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e062      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80074ec:	4b35      	ldr	r3, [pc, #212]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f0      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074f8:	4b31      	ldr	r3, [pc, #196]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007500:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d02f      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	429a      	cmp	r2, r3
 8007514:	d028      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007516:	4b2a      	ldr	r3, [pc, #168]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800751e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007520:	4b29      	ldr	r3, [pc, #164]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007522:	2201      	movs	r2, #1
 8007524:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007526:	4b28      	ldr	r3, [pc, #160]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800752c:	4a24      	ldr	r2, [pc, #144]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007532:	4b23      	ldr	r3, [pc, #140]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b01      	cmp	r3, #1
 800753c:	d114      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800753e:	f7fb faf1 	bl	8002b24 <HAL_GetTick>
 8007542:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007544:	e00a      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007546:	f7fb faed 	bl	8002b24 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	f241 3288 	movw	r2, #5000	; 0x1388
 8007554:	4293      	cmp	r3, r2
 8007556:	d901      	bls.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e02a      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800755c:	4b18      	ldr	r3, [pc, #96]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800755e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0ee      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007574:	d10d      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007576:	4b12      	ldr	r3, [pc, #72]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800758a:	490d      	ldr	r1, [pc, #52]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800758c:	4313      	orrs	r3, r2
 800758e:	608b      	str	r3, [r1, #8]
 8007590:	e005      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007592:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	4a0a      	ldr	r2, [pc, #40]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007598:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800759c:	6093      	str	r3, [r2, #8]
 800759e:	4b08      	ldr	r3, [pc, #32]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075aa:	4905      	ldr	r1, [pc, #20]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	42470068 	.word	0x42470068
 80075c0:	40023800 	.word	0x40023800
 80075c4:	40007000 	.word	0x40007000
 80075c8:	42470e40 	.word	0x42470e40

080075cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d13e      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80075ea:	4b23      	ldr	r3, [pc, #140]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d12f      	bne.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007600:	4b1e      	ldr	r3, [pc, #120]	; (800767c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007602:	617b      	str	r3, [r7, #20]
          break;
 8007604:	e02f      	b.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007606:	4b1c      	ldr	r3, [pc, #112]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800760e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007612:	d108      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007614:	4b18      	ldr	r3, [pc, #96]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800761c:	4a18      	ldr	r2, [pc, #96]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800761e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	e007      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800762e:	4a15      	ldr	r2, [pc, #84]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007630:	fbb2 f3f3 	udiv	r3, r2, r3
 8007634:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800763c:	099b      	lsrs	r3, r3, #6
 800763e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	fb02 f303 	mul.w	r3, r2, r3
 8007648:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800764a:	4b0b      	ldr	r3, [pc, #44]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800764c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007650:	0f1b      	lsrs	r3, r3, #28
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	fbb2 f3f3 	udiv	r3, r2, r3
 800765c:	617b      	str	r3, [r7, #20]
          break;
 800765e:	e002      	b.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	617b      	str	r3, [r7, #20]
          break;
 8007664:	bf00      	nop
        }
      }
      break;
 8007666:	bf00      	nop
    }
  }
  return frequency;
 8007668:	697b      	ldr	r3, [r7, #20]
}
 800766a:	4618      	mov	r0, r3
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	40023800 	.word	0x40023800
 800767c:	00bb8000 	.word	0x00bb8000
 8007680:	007a1200 	.word	0x007a1200
 8007684:	00f42400 	.word	0x00f42400

08007688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e07b      	b.n	8007792 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d108      	bne.n	80076b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076aa:	d009      	beq.n	80076c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	61da      	str	r2, [r3, #28]
 80076b2:	e005      	b.n	80076c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fa ffee 	bl	80026bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	431a      	orrs	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007730:	431a      	orrs	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007744:	ea42 0103 	orr.w	r1, r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	f003 0104 	and.w	r1, r3, #4
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	f003 0210 	and.w	r2, r3, #16
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69da      	ldr	r2, [r3, #28]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007780:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b082      	sub	sp, #8
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e041      	b.n	8007830 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7fa ffc3 	bl	800274c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4619      	mov	r1, r3
 80077d8:	4610      	mov	r0, r2
 80077da:	f000 fa91 	bl	8007d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b01      	cmp	r3, #1
 800784a:	d001      	beq.n	8007850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e04e      	b.n	80078ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a23      	ldr	r2, [pc, #140]	; (80078fc <HAL_TIM_Base_Start_IT+0xc4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d022      	beq.n	80078b8 <HAL_TIM_Base_Start_IT+0x80>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787a:	d01d      	beq.n	80078b8 <HAL_TIM_Base_Start_IT+0x80>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a1f      	ldr	r2, [pc, #124]	; (8007900 <HAL_TIM_Base_Start_IT+0xc8>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d018      	beq.n	80078b8 <HAL_TIM_Base_Start_IT+0x80>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a1e      	ldr	r2, [pc, #120]	; (8007904 <HAL_TIM_Base_Start_IT+0xcc>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d013      	beq.n	80078b8 <HAL_TIM_Base_Start_IT+0x80>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a1c      	ldr	r2, [pc, #112]	; (8007908 <HAL_TIM_Base_Start_IT+0xd0>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00e      	beq.n	80078b8 <HAL_TIM_Base_Start_IT+0x80>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1b      	ldr	r2, [pc, #108]	; (800790c <HAL_TIM_Base_Start_IT+0xd4>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d009      	beq.n	80078b8 <HAL_TIM_Base_Start_IT+0x80>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a19      	ldr	r2, [pc, #100]	; (8007910 <HAL_TIM_Base_Start_IT+0xd8>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d004      	beq.n	80078b8 <HAL_TIM_Base_Start_IT+0x80>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a18      	ldr	r2, [pc, #96]	; (8007914 <HAL_TIM_Base_Start_IT+0xdc>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d111      	bne.n	80078dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b06      	cmp	r3, #6
 80078c8:	d010      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0201 	orr.w	r2, r2, #1
 80078d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078da:	e007      	b.n	80078ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0201 	orr.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	40010000 	.word	0x40010000
 8007900:	40000400 	.word	0x40000400
 8007904:	40000800 	.word	0x40000800
 8007908:	40000c00 	.word	0x40000c00
 800790c:	40010400 	.word	0x40010400
 8007910:	40014000 	.word	0x40014000
 8007914:	40001800 	.word	0x40001800

08007918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b02      	cmp	r3, #2
 800792c:	d122      	bne.n	8007974 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b02      	cmp	r3, #2
 800793a:	d11b      	bne.n	8007974 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0202 	mvn.w	r2, #2
 8007944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f9b2 	bl	8007cc4 <HAL_TIM_IC_CaptureCallback>
 8007960:	e005      	b.n	800796e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f9a4 	bl	8007cb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f9b5 	bl	8007cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b04      	cmp	r3, #4
 8007980:	d122      	bne.n	80079c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b04      	cmp	r3, #4
 800798e:	d11b      	bne.n	80079c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0204 	mvn.w	r2, #4
 8007998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2202      	movs	r2, #2
 800799e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f988 	bl	8007cc4 <HAL_TIM_IC_CaptureCallback>
 80079b4:	e005      	b.n	80079c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f97a 	bl	8007cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f98b 	bl	8007cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0308 	and.w	r3, r3, #8
 80079d2:	2b08      	cmp	r3, #8
 80079d4:	d122      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d11b      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0208 	mvn.w	r2, #8
 80079ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2204      	movs	r2, #4
 80079f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f95e 	bl	8007cc4 <HAL_TIM_IC_CaptureCallback>
 8007a08:	e005      	b.n	8007a16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f950 	bl	8007cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f961 	bl	8007cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0310 	and.w	r3, r3, #16
 8007a26:	2b10      	cmp	r3, #16
 8007a28:	d122      	bne.n	8007a70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b10      	cmp	r3, #16
 8007a36:	d11b      	bne.n	8007a70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f06f 0210 	mvn.w	r2, #16
 8007a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2208      	movs	r2, #8
 8007a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f934 	bl	8007cc4 <HAL_TIM_IC_CaptureCallback>
 8007a5c:	e005      	b.n	8007a6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f926 	bl	8007cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f937 	bl	8007cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d10e      	bne.n	8007a9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d107      	bne.n	8007a9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f06f 0201 	mvn.w	r2, #1
 8007a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7fa f838 	bl	8001b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa6:	2b80      	cmp	r3, #128	; 0x80
 8007aa8:	d10e      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab4:	2b80      	cmp	r3, #128	; 0x80
 8007ab6:	d107      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fadc 	bl	8008080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d10e      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	d107      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f8fc 	bl	8007cec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b20      	cmp	r3, #32
 8007b00:	d10e      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f003 0320 	and.w	r3, r3, #32
 8007b0c:	2b20      	cmp	r3, #32
 8007b0e:	d107      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0220 	mvn.w	r2, #32
 8007b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 faa6 	bl	800806c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b20:	bf00      	nop
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIM_ConfigClockSource+0x18>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e0b3      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x180>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b78:	d03e      	beq.n	8007bf8 <HAL_TIM_ConfigClockSource+0xd0>
 8007b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7e:	f200 8087 	bhi.w	8007c90 <HAL_TIM_ConfigClockSource+0x168>
 8007b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b86:	f000 8085 	beq.w	8007c94 <HAL_TIM_ConfigClockSource+0x16c>
 8007b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8e:	d87f      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x168>
 8007b90:	2b70      	cmp	r3, #112	; 0x70
 8007b92:	d01a      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0xa2>
 8007b94:	2b70      	cmp	r3, #112	; 0x70
 8007b96:	d87b      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x168>
 8007b98:	2b60      	cmp	r3, #96	; 0x60
 8007b9a:	d050      	beq.n	8007c3e <HAL_TIM_ConfigClockSource+0x116>
 8007b9c:	2b60      	cmp	r3, #96	; 0x60
 8007b9e:	d877      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x168>
 8007ba0:	2b50      	cmp	r3, #80	; 0x50
 8007ba2:	d03c      	beq.n	8007c1e <HAL_TIM_ConfigClockSource+0xf6>
 8007ba4:	2b50      	cmp	r3, #80	; 0x50
 8007ba6:	d873      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x168>
 8007ba8:	2b40      	cmp	r3, #64	; 0x40
 8007baa:	d058      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0x136>
 8007bac:	2b40      	cmp	r3, #64	; 0x40
 8007bae:	d86f      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x168>
 8007bb0:	2b30      	cmp	r3, #48	; 0x30
 8007bb2:	d064      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x156>
 8007bb4:	2b30      	cmp	r3, #48	; 0x30
 8007bb6:	d86b      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x168>
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d060      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x156>
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	d867      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x168>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d05c      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x156>
 8007bc4:	2b10      	cmp	r3, #16
 8007bc6:	d05a      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007bc8:	e062      	b.n	8007c90 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	6899      	ldr	r1, [r3, #8]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f000 f9ab 	bl	8007f34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	609a      	str	r2, [r3, #8]
      break;
 8007bf6:	e04e      	b.n	8007c96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	6899      	ldr	r1, [r3, #8]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f000 f994 	bl	8007f34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689a      	ldr	r2, [r3, #8]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c1a:	609a      	str	r2, [r3, #8]
      break;
 8007c1c:	e03b      	b.n	8007c96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6859      	ldr	r1, [r3, #4]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f000 f908 	bl	8007e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2150      	movs	r1, #80	; 0x50
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 f961 	bl	8007efe <TIM_ITRx_SetConfig>
      break;
 8007c3c:	e02b      	b.n	8007c96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	6859      	ldr	r1, [r3, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f000 f927 	bl	8007e9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2160      	movs	r1, #96	; 0x60
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f951 	bl	8007efe <TIM_ITRx_SetConfig>
      break;
 8007c5c:	e01b      	b.n	8007c96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6859      	ldr	r1, [r3, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f000 f8e8 	bl	8007e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2140      	movs	r1, #64	; 0x40
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f941 	bl	8007efe <TIM_ITRx_SetConfig>
      break;
 8007c7c:	e00b      	b.n	8007c96 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f000 f938 	bl	8007efe <TIM_ITRx_SetConfig>
        break;
 8007c8e:	e002      	b.n	8007c96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007c90:	bf00      	nop
 8007c92:	e000      	b.n	8007c96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007c94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a40      	ldr	r2, [pc, #256]	; (8007e14 <TIM_Base_SetConfig+0x114>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d013      	beq.n	8007d40 <TIM_Base_SetConfig+0x40>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d1e:	d00f      	beq.n	8007d40 <TIM_Base_SetConfig+0x40>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a3d      	ldr	r2, [pc, #244]	; (8007e18 <TIM_Base_SetConfig+0x118>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d00b      	beq.n	8007d40 <TIM_Base_SetConfig+0x40>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a3c      	ldr	r2, [pc, #240]	; (8007e1c <TIM_Base_SetConfig+0x11c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d007      	beq.n	8007d40 <TIM_Base_SetConfig+0x40>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a3b      	ldr	r2, [pc, #236]	; (8007e20 <TIM_Base_SetConfig+0x120>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d003      	beq.n	8007d40 <TIM_Base_SetConfig+0x40>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a3a      	ldr	r2, [pc, #232]	; (8007e24 <TIM_Base_SetConfig+0x124>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d108      	bne.n	8007d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a2f      	ldr	r2, [pc, #188]	; (8007e14 <TIM_Base_SetConfig+0x114>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d02b      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d60:	d027      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a2c      	ldr	r2, [pc, #176]	; (8007e18 <TIM_Base_SetConfig+0x118>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d023      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a2b      	ldr	r2, [pc, #172]	; (8007e1c <TIM_Base_SetConfig+0x11c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d01f      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a2a      	ldr	r2, [pc, #168]	; (8007e20 <TIM_Base_SetConfig+0x120>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d01b      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a29      	ldr	r2, [pc, #164]	; (8007e24 <TIM_Base_SetConfig+0x124>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d017      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a28      	ldr	r2, [pc, #160]	; (8007e28 <TIM_Base_SetConfig+0x128>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a27      	ldr	r2, [pc, #156]	; (8007e2c <TIM_Base_SetConfig+0x12c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00f      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a26      	ldr	r2, [pc, #152]	; (8007e30 <TIM_Base_SetConfig+0x130>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00b      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a25      	ldr	r2, [pc, #148]	; (8007e34 <TIM_Base_SetConfig+0x134>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d007      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a24      	ldr	r2, [pc, #144]	; (8007e38 <TIM_Base_SetConfig+0x138>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d003      	beq.n	8007db2 <TIM_Base_SetConfig+0xb2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a23      	ldr	r2, [pc, #140]	; (8007e3c <TIM_Base_SetConfig+0x13c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d108      	bne.n	8007dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a0a      	ldr	r2, [pc, #40]	; (8007e14 <TIM_Base_SetConfig+0x114>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d003      	beq.n	8007df8 <TIM_Base_SetConfig+0xf8>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a0c      	ldr	r2, [pc, #48]	; (8007e24 <TIM_Base_SetConfig+0x124>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d103      	bne.n	8007e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	615a      	str	r2, [r3, #20]
}
 8007e06:	bf00      	nop
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	40010000 	.word	0x40010000
 8007e18:	40000400 	.word	0x40000400
 8007e1c:	40000800 	.word	0x40000800
 8007e20:	40000c00 	.word	0x40000c00
 8007e24:	40010400 	.word	0x40010400
 8007e28:	40014000 	.word	0x40014000
 8007e2c:	40014400 	.word	0x40014400
 8007e30:	40014800 	.word	0x40014800
 8007e34:	40001800 	.word	0x40001800
 8007e38:	40001c00 	.word	0x40001c00
 8007e3c:	40002000 	.word	0x40002000

08007e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f023 0201 	bic.w	r2, r3, #1
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f023 030a 	bic.w	r3, r3, #10
 8007e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	621a      	str	r2, [r3, #32]
}
 8007e92:	bf00      	nop
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b087      	sub	sp, #28
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	f023 0210 	bic.w	r2, r3, #16
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	031b      	lsls	r3, r3, #12
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	621a      	str	r2, [r3, #32]
}
 8007ef2:	bf00      	nop
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f043 0307 	orr.w	r3, r3, #7
 8007f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	609a      	str	r2, [r3, #8]
}
 8007f28:	bf00      	nop
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	021a      	lsls	r2, r3, #8
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	431a      	orrs	r2, r3
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	609a      	str	r2, [r3, #8]
}
 8007f68:	bf00      	nop
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d101      	bne.n	8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e05a      	b.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a21      	ldr	r2, [pc, #132]	; (8008050 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d022      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd8:	d01d      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d018      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a1b      	ldr	r2, [pc, #108]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d013      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a1a      	ldr	r2, [pc, #104]	; (800805c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d00e      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a18      	ldr	r2, [pc, #96]	; (8008060 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d009      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a17      	ldr	r2, [pc, #92]	; (8008064 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d004      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a15      	ldr	r2, [pc, #84]	; (8008068 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d10c      	bne.n	8008030 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800801c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	4313      	orrs	r3, r2
 8008026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40010000 	.word	0x40010000
 8008054:	40000400 	.word	0x40000400
 8008058:	40000800 	.word	0x40000800
 800805c:	40000c00 	.word	0x40000c00
 8008060:	40010400 	.word	0x40010400
 8008064:	40014000 	.word	0x40014000
 8008068:	40001800 	.word	0x40001800

0800806c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e03f      	b.n	8008126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d106      	bne.n	80080c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7fa fb6c 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2224      	movs	r2, #36	; 0x24
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fcbd 	bl	8008a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695a      	ldr	r2, [r3, #20]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800810c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b08a      	sub	sp, #40	; 0x28
 8008132:	af02      	add	r7, sp, #8
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	603b      	str	r3, [r7, #0]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b20      	cmp	r3, #32
 800814c:	d17c      	bne.n	8008248 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <HAL_UART_Transmit+0x2c>
 8008154:	88fb      	ldrh	r3, [r7, #6]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e075      	b.n	800824a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_UART_Transmit+0x3e>
 8008168:	2302      	movs	r3, #2
 800816a:	e06e      	b.n	800824a <HAL_UART_Transmit+0x11c>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2221      	movs	r2, #33	; 0x21
 800817e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008182:	f7fa fccf 	bl	8002b24 <HAL_GetTick>
 8008186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	88fa      	ldrh	r2, [r7, #6]
 800818c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	88fa      	ldrh	r2, [r7, #6]
 8008192:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800819c:	d108      	bne.n	80081b0 <HAL_UART_Transmit+0x82>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d104      	bne.n	80081b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	61bb      	str	r3, [r7, #24]
 80081ae:	e003      	b.n	80081b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80081c0:	e02a      	b.n	8008218 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2200      	movs	r2, #0
 80081ca:	2180      	movs	r1, #128	; 0x80
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 fab9 	bl	8008744 <UART_WaitOnFlagUntilTimeout>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e036      	b.n	800824a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10b      	bne.n	80081fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	3302      	adds	r3, #2
 80081f6:	61bb      	str	r3, [r7, #24]
 80081f8:	e007      	b.n	800820a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	781a      	ldrb	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	3301      	adds	r3, #1
 8008208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800820e:	b29b      	uxth	r3, r3
 8008210:	3b01      	subs	r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800821c:	b29b      	uxth	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1cf      	bne.n	80081c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2200      	movs	r2, #0
 800822a:	2140      	movs	r1, #64	; 0x40
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 fa89 	bl	8008744 <UART_WaitOnFlagUntilTimeout>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e006      	b.n	800824a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	e000      	b.n	800824a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008248:	2302      	movs	r3, #2
  }
}
 800824a:	4618      	mov	r0, r3
 800824c:	3720      	adds	r7, #32
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b08a      	sub	sp, #40	; 0x28
 8008256:	af02      	add	r7, sp, #8
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	603b      	str	r3, [r7, #0]
 800825e:	4613      	mov	r3, r2
 8008260:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b20      	cmp	r3, #32
 8008270:	f040 808c 	bne.w	800838c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <HAL_UART_Receive+0x2e>
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e084      	b.n	800838e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800828a:	2b01      	cmp	r3, #1
 800828c:	d101      	bne.n	8008292 <HAL_UART_Receive+0x40>
 800828e:	2302      	movs	r3, #2
 8008290:	e07d      	b.n	800838e <HAL_UART_Receive+0x13c>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2222      	movs	r2, #34	; 0x22
 80082a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082ae:	f7fa fc39 	bl	8002b24 <HAL_GetTick>
 80082b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	88fa      	ldrh	r2, [r7, #6]
 80082b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	88fa      	ldrh	r2, [r7, #6]
 80082be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c8:	d108      	bne.n	80082dc <HAL_UART_Receive+0x8a>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d104      	bne.n	80082dc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	61bb      	str	r3, [r7, #24]
 80082da:	e003      	b.n	80082e4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80082ec:	e043      	b.n	8008376 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	2200      	movs	r2, #0
 80082f6:	2120      	movs	r1, #32
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fa23 	bl	8008744 <UART_WaitOnFlagUntilTimeout>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e042      	b.n	800838e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10c      	bne.n	8008328 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831a:	b29a      	uxth	r2, r3
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	3302      	adds	r3, #2
 8008324:	61bb      	str	r3, [r7, #24]
 8008326:	e01f      	b.n	8008368 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008330:	d007      	beq.n	8008342 <HAL_UART_Receive+0xf0>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10a      	bne.n	8008350 <HAL_UART_Receive+0xfe>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	b2da      	uxtb	r2, r3
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	e008      	b.n	8008362 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	b2db      	uxtb	r3, r3
 8008358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835c:	b2da      	uxtb	r2, r3
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	3301      	adds	r3, #1
 8008366:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800836c:	b29b      	uxth	r3, r3
 800836e:	3b01      	subs	r3, #1
 8008370:	b29a      	uxth	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800837a:	b29b      	uxth	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1b6      	bne.n	80082ee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2220      	movs	r2, #32
 8008384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	e000      	b.n	800838e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800838c:	2302      	movs	r3, #2
  }
}
 800838e:	4618      	mov	r0, r3
 8008390:	3720      	adds	r7, #32
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08a      	sub	sp, #40	; 0x28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10d      	bne.n	80083ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	f003 0320 	and.w	r3, r3, #32
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d008      	beq.n	80083ea <HAL_UART_IRQHandler+0x52>
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 faa1 	bl	800892a <UART_Receive_IT>
      return;
 80083e8:	e17c      	b.n	80086e4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 80b1 	beq.w	8008554 <HAL_UART_IRQHandler+0x1bc>
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d105      	bne.n	8008408 <HAL_UART_IRQHandler+0x70>
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 80a6 	beq.w	8008554 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <HAL_UART_IRQHandler+0x90>
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008420:	f043 0201 	orr.w	r2, r3, #1
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	f003 0304 	and.w	r3, r3, #4
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00a      	beq.n	8008448 <HAL_UART_IRQHandler+0xb0>
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	f043 0202 	orr.w	r2, r3, #2
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00a      	beq.n	8008468 <HAL_UART_IRQHandler+0xd0>
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d005      	beq.n	8008468 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008460:	f043 0204 	orr.w	r2, r3, #4
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00f      	beq.n	8008492 <HAL_UART_IRQHandler+0xfa>
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <HAL_UART_IRQHandler+0xee>
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b00      	cmp	r3, #0
 8008484:	d005      	beq.n	8008492 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	f043 0208 	orr.w	r2, r3, #8
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 811f 	beq.w	80086da <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d007      	beq.n	80084b6 <HAL_UART_IRQHandler+0x11e>
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	f003 0320 	and.w	r3, r3, #32
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fa3a 	bl	800892a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c0:	2b40      	cmp	r3, #64	; 0x40
 80084c2:	bf0c      	ite	eq
 80084c4:	2301      	moveq	r3, #1
 80084c6:	2300      	movne	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <HAL_UART_IRQHandler+0x146>
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d031      	beq.n	8008542 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f97a 	bl	80087d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ee:	2b40      	cmp	r3, #64	; 0x40
 80084f0:	d123      	bne.n	800853a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	695a      	ldr	r2, [r3, #20]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008500:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008506:	2b00      	cmp	r3, #0
 8008508:	d013      	beq.n	8008532 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850e:	4a77      	ldr	r2, [pc, #476]	; (80086ec <HAL_UART_IRQHandler+0x354>)
 8008510:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008516:	4618      	mov	r0, r3
 8008518:	f7fa fc86 	bl	8002e28 <HAL_DMA_Abort_IT>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d016      	beq.n	8008550 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800852c:	4610      	mov	r0, r2
 800852e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008530:	e00e      	b.n	8008550 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f8f0 	bl	8008718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008538:	e00a      	b.n	8008550 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f8ec 	bl	8008718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008540:	e006      	b.n	8008550 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f8e8 	bl	8008718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800854e:	e0c4      	b.n	80086da <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008550:	bf00      	nop
    return;
 8008552:	e0c2      	b.n	80086da <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008558:	2b01      	cmp	r3, #1
 800855a:	f040 80a2 	bne.w	80086a2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	f003 0310 	and.w	r3, r3, #16
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 809c 	beq.w	80086a2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	f003 0310 	and.w	r3, r3, #16
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 8096 	beq.w	80086a2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008596:	2b40      	cmp	r3, #64	; 0x40
 8008598:	d14f      	bne.n	800863a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80085a4:	8a3b      	ldrh	r3, [r7, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 8099 	beq.w	80086de <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085b0:	8a3a      	ldrh	r2, [r7, #16]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	f080 8093 	bcs.w	80086de <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	8a3a      	ldrh	r2, [r7, #16]
 80085bc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c8:	d02b      	beq.n	8008622 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085d8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	695a      	ldr	r2, [r3, #20]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 0201 	bic.w	r2, r2, #1
 80085e8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695a      	ldr	r2, [r3, #20]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f022 0210 	bic.w	r2, r2, #16
 8008616:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	4618      	mov	r0, r3
 800861e:	f7fa fb93 	bl	8002d48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800862a:	b29b      	uxth	r3, r3
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	b29b      	uxth	r3, r3
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f87a 	bl	800872c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008638:	e051      	b.n	80086de <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008642:	b29b      	uxth	r3, r3
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800864c:	b29b      	uxth	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d047      	beq.n	80086e2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008652:	8a7b      	ldrh	r3, [r7, #18]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d044      	beq.n	80086e2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008666:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695a      	ldr	r2, [r3, #20]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0201 	bic.w	r2, r2, #1
 8008676:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2220      	movs	r2, #32
 800867c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 0210 	bic.w	r2, r2, #16
 8008694:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008696:	8a7b      	ldrh	r3, [r7, #18]
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f846 	bl	800872c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80086a0:	e01f      	b.n	80086e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <HAL_UART_IRQHandler+0x326>
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f8cf 	bl	800885a <UART_Transmit_IT>
    return;
 80086bc:	e012      	b.n	80086e4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00d      	beq.n	80086e4 <HAL_UART_IRQHandler+0x34c>
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d008      	beq.n	80086e4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f911 	bl	80088fa <UART_EndTransmit_IT>
    return;
 80086d8:	e004      	b.n	80086e4 <HAL_UART_IRQHandler+0x34c>
    return;
 80086da:	bf00      	nop
 80086dc:	e002      	b.n	80086e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80086de:	bf00      	nop
 80086e0:	e000      	b.n	80086e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80086e2:	bf00      	nop
  }
}
 80086e4:	3728      	adds	r7, #40	; 0x28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	08008833 	.word	0x08008833

080086f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	4613      	mov	r3, r2
 8008752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008754:	e02c      	b.n	80087b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800875c:	d028      	beq.n	80087b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d007      	beq.n	8008774 <UART_WaitOnFlagUntilTimeout+0x30>
 8008764:	f7fa f9de 	bl	8002b24 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	429a      	cmp	r2, r3
 8008772:	d21d      	bcs.n	80087b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008782:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	695a      	ldr	r2, [r3, #20]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0201 	bic.w	r2, r2, #1
 8008792:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2220      	movs	r2, #32
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e00f      	b.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	4013      	ands	r3, r2
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	429a      	cmp	r2, r3
 80087be:	bf0c      	ite	eq
 80087c0:	2301      	moveq	r3, #1
 80087c2:	2300      	movne	r3, #0
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	461a      	mov	r2, r3
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d0c3      	beq.n	8008756 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	695a      	ldr	r2, [r3, #20]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0201 	bic.w	r2, r2, #1
 80087fe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008804:	2b01      	cmp	r3, #1
 8008806:	d107      	bne.n	8008818 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0210 	bic.w	r2, r2, #16
 8008816:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2220      	movs	r2, #32
 800881c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f7ff ff63 	bl	8008718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800885a:	b480      	push	{r7}
 800885c:	b085      	sub	sp, #20
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b21      	cmp	r3, #33	; 0x21
 800886c:	d13e      	bne.n	80088ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008876:	d114      	bne.n	80088a2 <UART_Transmit_IT+0x48>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d110      	bne.n	80088a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008894:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	1c9a      	adds	r2, r3, #2
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	621a      	str	r2, [r3, #32]
 80088a0:	e008      	b.n	80088b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	1c59      	adds	r1, r3, #1
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	6211      	str	r1, [r2, #32]
 80088ac:	781a      	ldrb	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29b      	uxth	r3, r3
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	4619      	mov	r1, r3
 80088c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10f      	bne.n	80088e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e000      	b.n	80088ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088ec:	2302      	movs	r3, #2
  }
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008910:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff fee8 	bl	80086f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b22      	cmp	r3, #34	; 0x22
 800893c:	f040 8087 	bne.w	8008a4e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008948:	d117      	bne.n	800897a <UART_Receive_IT+0x50>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d113      	bne.n	800897a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008952:	2300      	movs	r3, #0
 8008954:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	b29b      	uxth	r3, r3
 8008964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008968:	b29a      	uxth	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008972:	1c9a      	adds	r2, r3, #2
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	629a      	str	r2, [r3, #40]	; 0x28
 8008978:	e026      	b.n	80089c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008980:	2300      	movs	r3, #0
 8008982:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898c:	d007      	beq.n	800899e <UART_Receive_IT+0x74>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10a      	bne.n	80089ac <UART_Receive_IT+0x82>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d106      	bne.n	80089ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	e008      	b.n	80089be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	4619      	mov	r1, r3
 80089d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d136      	bne.n	8008a4a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 0220 	bic.w	r2, r2, #32
 80089ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0201 	bic.w	r2, r2, #1
 8008a0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d10e      	bne.n	8008a3a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68da      	ldr	r2, [r3, #12]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0210 	bic.w	r2, r2, #16
 8008a2a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fe7a 	bl	800872c <HAL_UARTEx_RxEventCallback>
 8008a38:	e002      	b.n	8008a40 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7ff fe62 	bl	8008704 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	e002      	b.n	8008a50 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	e000      	b.n	8008a50 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008a4e:	2302      	movs	r3, #2
  }
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	b09f      	sub	sp, #124	; 0x7c
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a6e:	68d9      	ldr	r1, [r3, #12]
 8008a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	ea40 0301 	orr.w	r3, r0, r1
 8008a78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a7c:	689a      	ldr	r2, [r3, #8]
 8008a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	431a      	orrs	r2, r3
 8008a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a9c:	f021 010c 	bic.w	r1, r1, #12
 8008aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aa6:	430b      	orrs	r3, r1
 8008aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab6:	6999      	ldr	r1, [r3, #24]
 8008ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	ea40 0301 	orr.w	r3, r0, r1
 8008ac0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	4bc5      	ldr	r3, [pc, #788]	; (8008ddc <UART_SetConfig+0x384>)
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d004      	beq.n	8008ad6 <UART_SetConfig+0x7e>
 8008acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	4bc3      	ldr	r3, [pc, #780]	; (8008de0 <UART_SetConfig+0x388>)
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d103      	bne.n	8008ade <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ad6:	f7fe fc51 	bl	800737c <HAL_RCC_GetPCLK2Freq>
 8008ada:	6778      	str	r0, [r7, #116]	; 0x74
 8008adc:	e002      	b.n	8008ae4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ade:	f7fe fc39 	bl	8007354 <HAL_RCC_GetPCLK1Freq>
 8008ae2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aec:	f040 80b6 	bne.w	8008c5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008af2:	461c      	mov	r4, r3
 8008af4:	f04f 0500 	mov.w	r5, #0
 8008af8:	4622      	mov	r2, r4
 8008afa:	462b      	mov	r3, r5
 8008afc:	1891      	adds	r1, r2, r2
 8008afe:	6439      	str	r1, [r7, #64]	; 0x40
 8008b00:	415b      	adcs	r3, r3
 8008b02:	647b      	str	r3, [r7, #68]	; 0x44
 8008b04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b08:	1912      	adds	r2, r2, r4
 8008b0a:	eb45 0303 	adc.w	r3, r5, r3
 8008b0e:	f04f 0000 	mov.w	r0, #0
 8008b12:	f04f 0100 	mov.w	r1, #0
 8008b16:	00d9      	lsls	r1, r3, #3
 8008b18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b1c:	00d0      	lsls	r0, r2, #3
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	1911      	adds	r1, r2, r4
 8008b24:	6639      	str	r1, [r7, #96]	; 0x60
 8008b26:	416b      	adcs	r3, r5
 8008b28:	667b      	str	r3, [r7, #100]	; 0x64
 8008b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f04f 0300 	mov.w	r3, #0
 8008b34:	1891      	adds	r1, r2, r2
 8008b36:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b38:	415b      	adcs	r3, r3
 8008b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008b44:	f7f8 f812 	bl	8000b6c <__aeabi_uldivmod>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4ba5      	ldr	r3, [pc, #660]	; (8008de4 <UART_SetConfig+0x38c>)
 8008b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b52:	095b      	lsrs	r3, r3, #5
 8008b54:	011e      	lsls	r6, r3, #4
 8008b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b58:	461c      	mov	r4, r3
 8008b5a:	f04f 0500 	mov.w	r5, #0
 8008b5e:	4622      	mov	r2, r4
 8008b60:	462b      	mov	r3, r5
 8008b62:	1891      	adds	r1, r2, r2
 8008b64:	6339      	str	r1, [r7, #48]	; 0x30
 8008b66:	415b      	adcs	r3, r3
 8008b68:	637b      	str	r3, [r7, #52]	; 0x34
 8008b6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b6e:	1912      	adds	r2, r2, r4
 8008b70:	eb45 0303 	adc.w	r3, r5, r3
 8008b74:	f04f 0000 	mov.w	r0, #0
 8008b78:	f04f 0100 	mov.w	r1, #0
 8008b7c:	00d9      	lsls	r1, r3, #3
 8008b7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b82:	00d0      	lsls	r0, r2, #3
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	1911      	adds	r1, r2, r4
 8008b8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b8c:	416b      	adcs	r3, r5
 8008b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	461a      	mov	r2, r3
 8008b96:	f04f 0300 	mov.w	r3, #0
 8008b9a:	1891      	adds	r1, r2, r2
 8008b9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b9e:	415b      	adcs	r3, r3
 8008ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ba6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008baa:	f7f7 ffdf 	bl	8000b6c <__aeabi_uldivmod>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4b8c      	ldr	r3, [pc, #560]	; (8008de4 <UART_SetConfig+0x38c>)
 8008bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8008bb8:	095b      	lsrs	r3, r3, #5
 8008bba:	2164      	movs	r1, #100	; 0x64
 8008bbc:	fb01 f303 	mul.w	r3, r1, r3
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	3332      	adds	r3, #50	; 0x32
 8008bc6:	4a87      	ldr	r2, [pc, #540]	; (8008de4 <UART_SetConfig+0x38c>)
 8008bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bcc:	095b      	lsrs	r3, r3, #5
 8008bce:	005b      	lsls	r3, r3, #1
 8008bd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bd4:	441e      	add	r6, r3
 8008bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f04f 0100 	mov.w	r1, #0
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	1894      	adds	r4, r2, r2
 8008be4:	623c      	str	r4, [r7, #32]
 8008be6:	415b      	adcs	r3, r3
 8008be8:	627b      	str	r3, [r7, #36]	; 0x24
 8008bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008bee:	1812      	adds	r2, r2, r0
 8008bf0:	eb41 0303 	adc.w	r3, r1, r3
 8008bf4:	f04f 0400 	mov.w	r4, #0
 8008bf8:	f04f 0500 	mov.w	r5, #0
 8008bfc:	00dd      	lsls	r5, r3, #3
 8008bfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c02:	00d4      	lsls	r4, r2, #3
 8008c04:	4622      	mov	r2, r4
 8008c06:	462b      	mov	r3, r5
 8008c08:	1814      	adds	r4, r2, r0
 8008c0a:	653c      	str	r4, [r7, #80]	; 0x50
 8008c0c:	414b      	adcs	r3, r1
 8008c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8008c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	461a      	mov	r2, r3
 8008c16:	f04f 0300 	mov.w	r3, #0
 8008c1a:	1891      	adds	r1, r2, r2
 8008c1c:	61b9      	str	r1, [r7, #24]
 8008c1e:	415b      	adcs	r3, r3
 8008c20:	61fb      	str	r3, [r7, #28]
 8008c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008c2a:	f7f7 ff9f 	bl	8000b6c <__aeabi_uldivmod>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4b6c      	ldr	r3, [pc, #432]	; (8008de4 <UART_SetConfig+0x38c>)
 8008c34:	fba3 1302 	umull	r1, r3, r3, r2
 8008c38:	095b      	lsrs	r3, r3, #5
 8008c3a:	2164      	movs	r1, #100	; 0x64
 8008c3c:	fb01 f303 	mul.w	r3, r1, r3
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	00db      	lsls	r3, r3, #3
 8008c44:	3332      	adds	r3, #50	; 0x32
 8008c46:	4a67      	ldr	r2, [pc, #412]	; (8008de4 <UART_SetConfig+0x38c>)
 8008c48:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4c:	095b      	lsrs	r3, r3, #5
 8008c4e:	f003 0207 	and.w	r2, r3, #7
 8008c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4432      	add	r2, r6
 8008c58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c5a:	e0b9      	b.n	8008dd0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c5e:	461c      	mov	r4, r3
 8008c60:	f04f 0500 	mov.w	r5, #0
 8008c64:	4622      	mov	r2, r4
 8008c66:	462b      	mov	r3, r5
 8008c68:	1891      	adds	r1, r2, r2
 8008c6a:	6139      	str	r1, [r7, #16]
 8008c6c:	415b      	adcs	r3, r3
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c74:	1912      	adds	r2, r2, r4
 8008c76:	eb45 0303 	adc.w	r3, r5, r3
 8008c7a:	f04f 0000 	mov.w	r0, #0
 8008c7e:	f04f 0100 	mov.w	r1, #0
 8008c82:	00d9      	lsls	r1, r3, #3
 8008c84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c88:	00d0      	lsls	r0, r2, #3
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	eb12 0804 	adds.w	r8, r2, r4
 8008c92:	eb43 0905 	adc.w	r9, r3, r5
 8008c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f04f 0100 	mov.w	r1, #0
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	008b      	lsls	r3, r1, #2
 8008caa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008cae:	0082      	lsls	r2, r0, #2
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	f7f7 ff5a 	bl	8000b6c <__aeabi_uldivmod>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4b49      	ldr	r3, [pc, #292]	; (8008de4 <UART_SetConfig+0x38c>)
 8008cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8008cc2:	095b      	lsrs	r3, r3, #5
 8008cc4:	011e      	lsls	r6, r3, #4
 8008cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f04f 0100 	mov.w	r1, #0
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	1894      	adds	r4, r2, r2
 8008cd4:	60bc      	str	r4, [r7, #8]
 8008cd6:	415b      	adcs	r3, r3
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cde:	1812      	adds	r2, r2, r0
 8008ce0:	eb41 0303 	adc.w	r3, r1, r3
 8008ce4:	f04f 0400 	mov.w	r4, #0
 8008ce8:	f04f 0500 	mov.w	r5, #0
 8008cec:	00dd      	lsls	r5, r3, #3
 8008cee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008cf2:	00d4      	lsls	r4, r2, #3
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	462b      	mov	r3, r5
 8008cf8:	1814      	adds	r4, r2, r0
 8008cfa:	64bc      	str	r4, [r7, #72]	; 0x48
 8008cfc:	414b      	adcs	r3, r1
 8008cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f04f 0100 	mov.w	r1, #0
 8008d0a:	f04f 0200 	mov.w	r2, #0
 8008d0e:	f04f 0300 	mov.w	r3, #0
 8008d12:	008b      	lsls	r3, r1, #2
 8008d14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d18:	0082      	lsls	r2, r0, #2
 8008d1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008d1e:	f7f7 ff25 	bl	8000b6c <__aeabi_uldivmod>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4b2f      	ldr	r3, [pc, #188]	; (8008de4 <UART_SetConfig+0x38c>)
 8008d28:	fba3 1302 	umull	r1, r3, r3, r2
 8008d2c:	095b      	lsrs	r3, r3, #5
 8008d2e:	2164      	movs	r1, #100	; 0x64
 8008d30:	fb01 f303 	mul.w	r3, r1, r3
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	011b      	lsls	r3, r3, #4
 8008d38:	3332      	adds	r3, #50	; 0x32
 8008d3a:	4a2a      	ldr	r2, [pc, #168]	; (8008de4 <UART_SetConfig+0x38c>)
 8008d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d40:	095b      	lsrs	r3, r3, #5
 8008d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d46:	441e      	add	r6, r3
 8008d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f04f 0100 	mov.w	r1, #0
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	1894      	adds	r4, r2, r2
 8008d56:	603c      	str	r4, [r7, #0]
 8008d58:	415b      	adcs	r3, r3
 8008d5a:	607b      	str	r3, [r7, #4]
 8008d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d60:	1812      	adds	r2, r2, r0
 8008d62:	eb41 0303 	adc.w	r3, r1, r3
 8008d66:	f04f 0400 	mov.w	r4, #0
 8008d6a:	f04f 0500 	mov.w	r5, #0
 8008d6e:	00dd      	lsls	r5, r3, #3
 8008d70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d74:	00d4      	lsls	r4, r2, #3
 8008d76:	4622      	mov	r2, r4
 8008d78:	462b      	mov	r3, r5
 8008d7a:	eb12 0a00 	adds.w	sl, r2, r0
 8008d7e:	eb43 0b01 	adc.w	fp, r3, r1
 8008d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f04f 0100 	mov.w	r1, #0
 8008d8c:	f04f 0200 	mov.w	r2, #0
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	008b      	lsls	r3, r1, #2
 8008d96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d9a:	0082      	lsls	r2, r0, #2
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	4659      	mov	r1, fp
 8008da0:	f7f7 fee4 	bl	8000b6c <__aeabi_uldivmod>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <UART_SetConfig+0x38c>)
 8008daa:	fba3 1302 	umull	r1, r3, r3, r2
 8008dae:	095b      	lsrs	r3, r3, #5
 8008db0:	2164      	movs	r1, #100	; 0x64
 8008db2:	fb01 f303 	mul.w	r3, r1, r3
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	011b      	lsls	r3, r3, #4
 8008dba:	3332      	adds	r3, #50	; 0x32
 8008dbc:	4a09      	ldr	r2, [pc, #36]	; (8008de4 <UART_SetConfig+0x38c>)
 8008dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc2:	095b      	lsrs	r3, r3, #5
 8008dc4:	f003 020f 	and.w	r2, r3, #15
 8008dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4432      	add	r2, r6
 8008dce:	609a      	str	r2, [r3, #8]
}
 8008dd0:	bf00      	nop
 8008dd2:	377c      	adds	r7, #124	; 0x7c
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dda:	bf00      	nop
 8008ddc:	40011000 	.word	0x40011000
 8008de0:	40011400 	.word	0x40011400
 8008de4:	51eb851f 	.word	0x51eb851f

08008de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008de8:	b084      	sub	sp, #16
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	f107 001c 	add.w	r0, r7, #28
 8008df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d122      	bne.n	8008e46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d105      	bne.n	8008e3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f94a 	bl	80090d4 <USB_CoreReset>
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]
 8008e44:	e01a      	b.n	8008e7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f93e 	bl	80090d4 <USB_CoreReset>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d106      	bne.n	8008e70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8008e6e:	e005      	b.n	8008e7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d10b      	bne.n	8008e9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f043 0206 	orr.w	r2, r3, #6
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f043 0220 	orr.w	r2, r3, #32
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ea6:	b004      	add	sp, #16
 8008ea8:	4770      	bx	lr

08008eaa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f043 0201 	orr.w	r2, r3, #1
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f023 0201 	bic.w	r2, r3, #1
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f06:	78fb      	ldrb	r3, [r7, #3]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d106      	bne.n	8008f1a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	60da      	str	r2, [r3, #12]
 8008f18:	e00b      	b.n	8008f32 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60da      	str	r2, [r3, #12]
 8008f2c:	e001      	b.n	8008f32 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e003      	b.n	8008f3a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008f32:	2032      	movs	r0, #50	; 0x32
 8008f34:	f7f9 fe02 	bl	8002b3c <HAL_Delay>

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	019b      	lsls	r3, r3, #6
 8008f56:	f043 0220 	orr.w	r2, r3, #32
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3301      	adds	r3, #1
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4a09      	ldr	r2, [pc, #36]	; (8008f8c <USB_FlushTxFifo+0x48>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d901      	bls.n	8008f70 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e006      	b.n	8008f7e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f003 0320 	and.w	r3, r3, #32
 8008f78:	2b20      	cmp	r3, #32
 8008f7a:	d0f0      	beq.n	8008f5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	00030d40 	.word	0x00030d40

08008f90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2210      	movs	r2, #16
 8008fa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	60fb      	str	r3, [r7, #12]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4a09      	ldr	r2, [pc, #36]	; (8008fd0 <USB_FlushRxFifo+0x40>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d901      	bls.n	8008fb4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e006      	b.n	8008fc2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	f003 0310 	and.w	r3, r3, #16
 8008fbc:	2b10      	cmp	r3, #16
 8008fbe:	d0f0      	beq.n	8008fa2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	00030d40 	.word	0x00030d40

08008fd4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b089      	sub	sp, #36	; 0x24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	4611      	mov	r1, r2
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	71fb      	strb	r3, [r7, #7]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008ff2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d11a      	bne.n	8009030 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008ffa:	88bb      	ldrh	r3, [r7, #4]
 8008ffc:	3303      	adds	r3, #3
 8008ffe:	089b      	lsrs	r3, r3, #2
 8009000:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009002:	2300      	movs	r3, #0
 8009004:	61bb      	str	r3, [r7, #24]
 8009006:	e00f      	b.n	8009028 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009008:	79fb      	ldrb	r3, [r7, #7]
 800900a:	031a      	lsls	r2, r3, #12
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	4413      	add	r3, r2
 8009010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009014:	461a      	mov	r2, r3
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	3304      	adds	r3, #4
 8009020:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	3301      	adds	r3, #1
 8009026:	61bb      	str	r3, [r7, #24]
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	429a      	cmp	r2, r3
 800902e:	d3eb      	bcc.n	8009008 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3724      	adds	r7, #36	; 0x24
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800903e:	b480      	push	{r7}
 8009040:	b089      	sub	sp, #36	; 0x24
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	4613      	mov	r3, r2
 800904a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009054:	88fb      	ldrh	r3, [r7, #6]
 8009056:	3303      	adds	r3, #3
 8009058:	089b      	lsrs	r3, r3, #2
 800905a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800905c:	2300      	movs	r3, #0
 800905e:	61bb      	str	r3, [r7, #24]
 8009060:	e00b      	b.n	800907a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	601a      	str	r2, [r3, #0]
    pDest++;
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	3304      	adds	r3, #4
 8009072:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	3301      	adds	r3, #1
 8009078:	61bb      	str	r3, [r7, #24]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	429a      	cmp	r2, r3
 8009080:	d3ef      	bcc.n	8009062 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009082:	69fb      	ldr	r3, [r7, #28]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3724      	adds	r7, #36	; 0x24
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4013      	ands	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80090a8:	68fb      	ldr	r3, [r7, #12]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	f003 0301 	and.w	r3, r3, #1
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
	...

080090d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3301      	adds	r3, #1
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	4a13      	ldr	r2, [pc, #76]	; (8009138 <USB_CoreReset+0x64>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d901      	bls.n	80090f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e01b      	b.n	800912a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	daf2      	bge.n	80090e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	f043 0201 	orr.w	r2, r3, #1
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	3301      	adds	r3, #1
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4a09      	ldr	r2, [pc, #36]	; (8009138 <USB_CoreReset+0x64>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d901      	bls.n	800911c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e006      	b.n	800912a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b01      	cmp	r3, #1
 8009126:	d0f0      	beq.n	800910a <USB_CoreReset+0x36>

  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	00030d40 	.word	0x00030d40

0800913c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800913c:	b084      	sub	sp, #16
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	f107 001c 	add.w	r0, r7, #28
 800914a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009158:	461a      	mov	r2, r3
 800915a:	2300      	movs	r3, #0
 800915c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009162:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918a:	2b00      	cmp	r3, #0
 800918c:	d018      	beq.n	80091c0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	2b01      	cmp	r3, #1
 8009192:	d10a      	bne.n	80091aa <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091a2:	f043 0304 	orr.w	r3, r3, #4
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	e014      	b.n	80091d4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091b8:	f023 0304 	bic.w	r3, r3, #4
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	e009      	b.n	80091d4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091ce:	f023 0304 	bic.w	r3, r3, #4
 80091d2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80091d4:	2110      	movs	r1, #16
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff feb4 	bl	8008f44 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff fed7 	bl	8008f90 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	e015      	b.n	8009214 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091f4:	461a      	mov	r2, r3
 80091f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091fa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4413      	add	r3, r2
 8009204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009208:	461a      	mov	r2, r3
 800920a:	2300      	movs	r3, #0
 800920c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3301      	adds	r3, #1
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	429a      	cmp	r2, r3
 800921a:	d3e5      	bcc.n	80091e8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800921c:	2101      	movs	r1, #1
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f8ac 	bl	800937c <USB_DriveVbus>

  HAL_Delay(200U);
 8009224:	20c8      	movs	r0, #200	; 0xc8
 8009226:	f7f9 fc89 	bl	8002b3c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009236:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00b      	beq.n	800925c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800924a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a14      	ldr	r2, [pc, #80]	; (80092a0 <USB_HostInit+0x164>)
 8009250:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a13      	ldr	r2, [pc, #76]	; (80092a4 <USB_HostInit+0x168>)
 8009256:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800925a:	e009      	b.n	8009270 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2280      	movs	r2, #128	; 0x80
 8009260:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a10      	ldr	r2, [pc, #64]	; (80092a8 <USB_HostInit+0x16c>)
 8009266:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a10      	ldr	r2, [pc, #64]	; (80092ac <USB_HostInit+0x170>)
 800926c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	2b00      	cmp	r3, #0
 8009274:	d105      	bne.n	8009282 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	f043 0210 	orr.w	r2, r3, #16
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	699a      	ldr	r2, [r3, #24]
 8009286:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <USB_HostInit+0x174>)
 8009288:	4313      	orrs	r3, r2
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800929a:	b004      	add	sp, #16
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	01000200 	.word	0x01000200
 80092a4:	00e00300 	.word	0x00e00300
 80092a8:	00600080 	.word	0x00600080
 80092ac:	004000e0 	.word	0x004000e0
 80092b0:	a3200008 	.word	0xa3200008

080092b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092d2:	f023 0303 	bic.w	r3, r3, #3
 80092d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80092ec:	4313      	orrs	r3, r2
 80092ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d107      	bne.n	8009306 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092fc:	461a      	mov	r2, r3
 80092fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009302:	6053      	str	r3, [r2, #4]
 8009304:	e009      	b.n	800931a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009306:	78fb      	ldrb	r3, [r7, #3]
 8009308:	2b02      	cmp	r3, #2
 800930a:	d106      	bne.n	800931a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009312:	461a      	mov	r2, r3
 8009314:	f241 7370 	movw	r3, #6000	; 0x1770
 8009318:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009348:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009356:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009358:	2064      	movs	r0, #100	; 0x64
 800935a:	f7f9 fbef 	bl	8002b3c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800936a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800936c:	200a      	movs	r0, #10
 800936e:	f7f9 fbe5 	bl	8002b3c <HAL_Delay>

  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800938c:	2300      	movs	r3, #0
 800938e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80093a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d109      	bne.n	80093c0 <USB_DriveVbus+0x44>
 80093ac:	78fb      	ldrb	r3, [r7, #3]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d106      	bne.n	80093c0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80093ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80093be:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ca:	d109      	bne.n	80093e0 <USB_DriveVbus+0x64>
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d106      	bne.n	80093e0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80093da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093de:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b085      	sub	sp, #20
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	0c5b      	lsrs	r3, r3, #17
 800940c:	f003 0303 	and.w	r3, r3, #3
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	b29b      	uxth	r3, r3
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
	...

08009440 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	4608      	mov	r0, r1
 800944a:	4611      	mov	r1, r2
 800944c:	461a      	mov	r2, r3
 800944e:	4603      	mov	r3, r0
 8009450:	70fb      	strb	r3, [r7, #3]
 8009452:	460b      	mov	r3, r1
 8009454:	70bb      	strb	r3, [r7, #2]
 8009456:	4613      	mov	r3, r2
 8009458:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	4413      	add	r3, r2
 800946a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800946e:	461a      	mov	r2, r3
 8009470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009474:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009476:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800947a:	2b03      	cmp	r3, #3
 800947c:	d87e      	bhi.n	800957c <USB_HC_Init+0x13c>
 800947e:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <USB_HC_Init+0x44>)
 8009480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009484:	08009495 	.word	0x08009495
 8009488:	0800953f 	.word	0x0800953f
 800948c:	08009495 	.word	0x08009495
 8009490:	08009501 	.word	0x08009501
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	4413      	add	r3, r2
 800949c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a0:	461a      	mov	r2, r3
 80094a2:	f240 439d 	movw	r3, #1181	; 0x49d
 80094a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80094a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	da10      	bge.n	80094d2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	78fa      	ldrb	r2, [r7, #3]
 80094c0:	0151      	lsls	r1, r2, #5
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	440a      	add	r2, r1
 80094c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ce:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80094d0:	e057      	b.n	8009582 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d051      	beq.n	8009582 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	0151      	lsls	r1, r2, #5
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	440a      	add	r2, r1
 80094f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80094fc:	60d3      	str	r3, [r2, #12]
      break;
 80094fe:	e040      	b.n	8009582 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	4413      	add	r3, r2
 8009508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800950c:	461a      	mov	r2, r3
 800950e:	f240 639d 	movw	r3, #1693	; 0x69d
 8009512:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009514:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009518:	2b00      	cmp	r3, #0
 800951a:	da34      	bge.n	8009586 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800951c:	78fb      	ldrb	r3, [r7, #3]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	4413      	add	r3, r2
 8009524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	78fa      	ldrb	r2, [r7, #3]
 800952c:	0151      	lsls	r1, r2, #5
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	440a      	add	r2, r1
 8009532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800953a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800953c:	e023      	b.n	8009586 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	4413      	add	r3, r2
 8009546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800954a:	461a      	mov	r2, r3
 800954c:	f240 2325 	movw	r3, #549	; 0x225
 8009550:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009552:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009556:	2b00      	cmp	r3, #0
 8009558:	da17      	bge.n	800958a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	4413      	add	r3, r2
 8009562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	78fa      	ldrb	r2, [r7, #3]
 800956a:	0151      	lsls	r1, r2, #5
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	440a      	add	r2, r1
 8009570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009574:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009578:	60d3      	str	r3, [r2, #12]
      }
      break;
 800957a:	e006      	b.n	800958a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	77fb      	strb	r3, [r7, #31]
      break;
 8009580:	e004      	b.n	800958c <USB_HC_Init+0x14c>
      break;
 8009582:	bf00      	nop
 8009584:	e002      	b.n	800958c <USB_HC_Init+0x14c>
      break;
 8009586:	bf00      	nop
 8009588:	e000      	b.n	800958c <USB_HC_Init+0x14c>
      break;
 800958a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009592:	699a      	ldr	r2, [r3, #24]
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	f003 030f 	and.w	r3, r3, #15
 800959a:	2101      	movs	r1, #1
 800959c:	fa01 f303 	lsl.w	r3, r1, r3
 80095a0:	6939      	ldr	r1, [r7, #16]
 80095a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80095a6:	4313      	orrs	r3, r2
 80095a8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80095b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	da03      	bge.n	80095c6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80095be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095c2:	61bb      	str	r3, [r7, #24]
 80095c4:	e001      	b.n	80095ca <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff ff0f 	bl	80093ee <USB_GetHostSpeed>
 80095d0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80095d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d106      	bne.n	80095e8 <USB_HC_Init+0x1a8>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d003      	beq.n	80095e8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80095e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	e001      	b.n	80095ec <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80095ec:	787b      	ldrb	r3, [r7, #1]
 80095ee:	059b      	lsls	r3, r3, #22
 80095f0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80095f4:	78bb      	ldrb	r3, [r7, #2]
 80095f6:	02db      	lsls	r3, r3, #11
 80095f8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80095fc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80095fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009602:	049b      	lsls	r3, r3, #18
 8009604:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009608:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800960a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800960c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009610:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009616:	78fb      	ldrb	r3, [r7, #3]
 8009618:	0159      	lsls	r1, r3, #5
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	440b      	add	r3, r1
 800961e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009622:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009628:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800962a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800962e:	2b03      	cmp	r3, #3
 8009630:	d10f      	bne.n	8009652 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	4413      	add	r3, r2
 800963a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	78fa      	ldrb	r2, [r7, #3]
 8009642:	0151      	lsls	r1, r2, #5
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	440a      	add	r2, r1
 8009648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800964c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009650:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009652:	7ffb      	ldrb	r3, [r7, #31]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3720      	adds	r7, #32
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08c      	sub	sp, #48	; 0x30
 8009660:	af02      	add	r7, sp, #8
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	4613      	mov	r3, r2
 8009668:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	785b      	ldrb	r3, [r3, #1]
 8009672:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009678:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009682:	2b00      	cmp	r3, #0
 8009684:	d02d      	beq.n	80096e2 <USB_HC_StartXfer+0x86>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	791b      	ldrb	r3, [r3, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d129      	bne.n	80096e2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d117      	bne.n	80096c4 <USB_HC_StartXfer+0x68>
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	79db      	ldrb	r3, [r3, #7]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <USB_HC_StartXfer+0x48>
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	79db      	ldrb	r3, [r3, #7]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d10f      	bne.n	80096c4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	6a3b      	ldr	r3, [r7, #32]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	69fa      	ldr	r2, [r7, #28]
 80096b4:	0151      	lsls	r1, r2, #5
 80096b6:	6a3a      	ldr	r2, [r7, #32]
 80096b8:	440a      	add	r2, r1
 80096ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10b      	bne.n	80096e2 <USB_HC_StartXfer+0x86>
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	795b      	ldrb	r3, [r3, #5]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d107      	bne.n	80096e2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	785b      	ldrb	r3, [r3, #1]
 80096d6:	4619      	mov	r1, r3
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 fa2f 	bl	8009b3c <USB_DoPing>
      return HAL_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	e0f8      	b.n	80098d4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d018      	beq.n	800971c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	8912      	ldrh	r2, [r2, #8]
 80096f2:	4413      	add	r3, r2
 80096f4:	3b01      	subs	r3, #1
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	8912      	ldrh	r2, [r2, #8]
 80096fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80096fe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009700:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009702:	8b7b      	ldrh	r3, [r7, #26]
 8009704:	429a      	cmp	r2, r3
 8009706:	d90b      	bls.n	8009720 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009708:	8b7b      	ldrh	r3, [r7, #26]
 800970a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800970c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	8912      	ldrh	r2, [r2, #8]
 8009712:	fb02 f203 	mul.w	r2, r2, r3
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	611a      	str	r2, [r3, #16]
 800971a:	e001      	b.n	8009720 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800971c:	2301      	movs	r3, #1
 800971e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	78db      	ldrb	r3, [r3, #3]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d007      	beq.n	8009738 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009728:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	8912      	ldrh	r2, [r2, #8]
 800972e:	fb02 f203 	mul.w	r2, r2, r3
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	611a      	str	r2, [r3, #16]
 8009736:	e003      	b.n	8009740 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	695a      	ldr	r2, [r3, #20]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009748:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800974a:	04d9      	lsls	r1, r3, #19
 800974c:	4b63      	ldr	r3, [pc, #396]	; (80098dc <USB_HC_StartXfer+0x280>)
 800974e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009750:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	7a9b      	ldrb	r3, [r3, #10]
 8009756:	075b      	lsls	r3, r3, #29
 8009758:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800975c:	69f9      	ldr	r1, [r7, #28]
 800975e:	0148      	lsls	r0, r1, #5
 8009760:	6a39      	ldr	r1, [r7, #32]
 8009762:	4401      	add	r1, r0
 8009764:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009768:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800976a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d009      	beq.n	8009786 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	68d9      	ldr	r1, [r3, #12]
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	4413      	add	r3, r2
 800977e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009782:	460a      	mov	r2, r1
 8009784:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	bf0c      	ite	eq
 8009796:	2301      	moveq	r3, #1
 8009798:	2300      	movne	r3, #0
 800979a:	b2db      	uxtb	r3, r3
 800979c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	6a3b      	ldr	r3, [r7, #32]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69fa      	ldr	r2, [r7, #28]
 80097ae:	0151      	lsls	r1, r2, #5
 80097b0:	6a3a      	ldr	r2, [r7, #32]
 80097b2:	440a      	add	r2, r1
 80097b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	7e7b      	ldrb	r3, [r7, #25]
 80097ce:	075b      	lsls	r3, r3, #29
 80097d0:	69f9      	ldr	r1, [r7, #28]
 80097d2:	0148      	lsls	r0, r1, #5
 80097d4:	6a39      	ldr	r1, [r7, #32]
 80097d6:	4401      	add	r1, r0
 80097d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80097dc:	4313      	orrs	r3, r2
 80097de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80097f6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	78db      	ldrb	r3, [r3, #3]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d004      	beq.n	800980a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009806:	613b      	str	r3, [r7, #16]
 8009808:	e003      	b.n	8009812 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009810:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009818:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	4413      	add	r3, r2
 8009822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009826:	461a      	mov	r2, r3
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800982c:	79fb      	ldrb	r3, [r7, #7]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	e04e      	b.n	80098d4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	78db      	ldrb	r3, [r3, #3]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d149      	bne.n	80098d2 <USB_HC_StartXfer+0x276>
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d045      	beq.n	80098d2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	79db      	ldrb	r3, [r3, #7]
 800984a:	2b03      	cmp	r3, #3
 800984c:	d830      	bhi.n	80098b0 <USB_HC_StartXfer+0x254>
 800984e:	a201      	add	r2, pc, #4	; (adr r2, 8009854 <USB_HC_StartXfer+0x1f8>)
 8009850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009854:	08009865 	.word	0x08009865
 8009858:	08009889 	.word	0x08009889
 800985c:	08009865 	.word	0x08009865
 8009860:	08009889 	.word	0x08009889
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	3303      	adds	r3, #3
 800986a:	089b      	lsrs	r3, r3, #2
 800986c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800986e:	8afa      	ldrh	r2, [r7, #22]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009874:	b29b      	uxth	r3, r3
 8009876:	429a      	cmp	r2, r3
 8009878:	d91c      	bls.n	80098b4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	f043 0220 	orr.w	r2, r3, #32
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	619a      	str	r2, [r3, #24]
        }
        break;
 8009886:	e015      	b.n	80098b4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	3303      	adds	r3, #3
 800988e:	089b      	lsrs	r3, r3, #2
 8009890:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009892:	8afa      	ldrh	r2, [r7, #22]
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	b29b      	uxth	r3, r3
 800989e:	429a      	cmp	r2, r3
 80098a0:	d90a      	bls.n	80098b8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80098ae:	e003      	b.n	80098b8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80098b0:	bf00      	nop
 80098b2:	e002      	b.n	80098ba <USB_HC_StartXfer+0x25e>
        break;
 80098b4:	bf00      	nop
 80098b6:	e000      	b.n	80098ba <USB_HC_StartXfer+0x25e>
        break;
 80098b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	68d9      	ldr	r1, [r3, #12]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	785a      	ldrb	r2, [r3, #1]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	2000      	movs	r0, #0
 80098ca:	9000      	str	r0, [sp, #0]
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f7ff fb81 	bl	8008fd4 <USB_WritePacket>
  }

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3728      	adds	r7, #40	; 0x28
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	1ff80000 	.word	0x1ff80000

080098e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	b29b      	uxth	r3, r3
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009902:	b480      	push	{r7}
 8009904:	b089      	sub	sp, #36	; 0x24
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	460b      	mov	r3, r1
 800990c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009912:	78fb      	ldrb	r3, [r7, #3]
 8009914:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	015a      	lsls	r2, r3, #5
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	4413      	add	r3, r2
 8009922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	0c9b      	lsrs	r3, r3, #18
 800992a:	f003 0303 	and.w	r3, r3, #3
 800992e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	4413      	add	r3, r2
 8009938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	0fdb      	lsrs	r3, r3, #31
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f003 0320 	and.w	r3, r3, #32
 800994e:	2b20      	cmp	r3, #32
 8009950:	d104      	bne.n	800995c <USB_HC_Halt+0x5a>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d101      	bne.n	800995c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	e0e8      	b.n	8009b2e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d002      	beq.n	8009968 <USB_HC_Halt+0x66>
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2b02      	cmp	r3, #2
 8009966:	d173      	bne.n	8009a50 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	4413      	add	r3, r2
 8009970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	0151      	lsls	r1, r2, #5
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	440a      	add	r2, r1
 800997e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009986:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	f003 0320 	and.w	r3, r3, #32
 8009990:	2b00      	cmp	r3, #0
 8009992:	f040 80cb 	bne.w	8009b2c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d143      	bne.n	8009a2a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	0151      	lsls	r1, r2, #5
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	440a      	add	r2, r1
 80099b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	0151      	lsls	r1, r2, #5
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	440a      	add	r2, r1
 80099d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099e0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	0151      	lsls	r1, r2, #5
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	440a      	add	r2, r1
 80099f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a00:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	3301      	adds	r3, #1
 8009a06:	61fb      	str	r3, [r7, #28]
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a0e:	d81d      	bhi.n	8009a4c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a26:	d0ec      	beq.n	8009a02 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a28:	e080      	b.n	8009b2c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	0151      	lsls	r1, r2, #5
 8009a3c:	69ba      	ldr	r2, [r7, #24]
 8009a3e:	440a      	add	r2, r1
 8009a40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a48:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a4a:	e06f      	b.n	8009b2c <USB_HC_Halt+0x22a>
            break;
 8009a4c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a4e:	e06d      	b.n	8009b2c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	0151      	lsls	r1, r2, #5
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	440a      	add	r2, r1
 8009a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a6e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d143      	bne.n	8009b08 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	0151      	lsls	r1, r2, #5
 8009a92:	69ba      	ldr	r2, [r7, #24]
 8009a94:	440a      	add	r2, r1
 8009a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a9e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	0151      	lsls	r1, r2, #5
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	440a      	add	r2, r1
 8009ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009abe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	0151      	lsls	r1, r2, #5
 8009ad2:	69ba      	ldr	r2, [r7, #24]
 8009ad4:	440a      	add	r2, r1
 8009ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ada:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ade:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	61fb      	str	r3, [r7, #28]
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009aec:	d81d      	bhi.n	8009b2a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b04:	d0ec      	beq.n	8009ae0 <USB_HC_Halt+0x1de>
 8009b06:	e011      	b.n	8009b2c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	0151      	lsls	r1, r2, #5
 8009b1a:	69ba      	ldr	r2, [r7, #24]
 8009b1c:	440a      	add	r2, r1
 8009b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	e000      	b.n	8009b2c <USB_HC_Halt+0x22a>
          break;
 8009b2a:	bf00      	nop
    }
  }

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3724      	adds	r7, #36	; 0x24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
	...

08009b3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	460b      	mov	r3, r1
 8009b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009b4c:	78fb      	ldrb	r3, [r7, #3]
 8009b4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009b50:	2301      	movs	r3, #1
 8009b52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	04da      	lsls	r2, r3, #19
 8009b58:	4b15      	ldr	r3, [pc, #84]	; (8009bb0 <USB_DoPing+0x74>)
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	0151      	lsls	r1, r2, #5
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	440a      	add	r2, r1
 8009b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	371c      	adds	r7, #28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	1ff80000 	.word	0x1ff80000

08009bb4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff f981 	bl	8008ecc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009bca:	2110      	movs	r1, #16
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7ff f9b9 	bl	8008f44 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff f9dc 	bl	8008f90 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009bd8:	2300      	movs	r3, #0
 8009bda:	613b      	str	r3, [r7, #16]
 8009bdc:	e01f      	b.n	8009c1e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bf4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bfc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c12:	461a      	mov	r2, r3
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	613b      	str	r3, [r7, #16]
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	2b0f      	cmp	r3, #15
 8009c22:	d9dc      	bls.n	8009bde <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009c24:	2300      	movs	r3, #0
 8009c26:	613b      	str	r3, [r7, #16]
 8009c28:	e034      	b.n	8009c94 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c40:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c50:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c5e:	461a      	mov	r2, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	3301      	adds	r3, #1
 8009c68:	617b      	str	r3, [r7, #20]
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c70:	d80c      	bhi.n	8009c8c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c88:	d0ec      	beq.n	8009c64 <USB_StopHost+0xb0>
 8009c8a:	e000      	b.n	8009c8e <USB_StopHost+0xda>
        break;
 8009c8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	3301      	adds	r3, #1
 8009c92:	613b      	str	r3, [r7, #16]
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	2b0f      	cmp	r3, #15
 8009c98:	d9c7      	bls.n	8009c2a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ca6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff f8fa 	bl	8008eaa <USB_EnableGlobalInt>

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009cc0:	b590      	push	{r4, r7, lr}
 8009cc2:	b089      	sub	sp, #36	; 0x24
 8009cc4:	af04      	add	r7, sp, #16
 8009cc6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009cc8:	2301      	movs	r3, #1
 8009cca:	2202      	movs	r2, #2
 8009ccc:	2102      	movs	r1, #2
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fcb2 	bl	800a638 <USBH_FindInterface>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	2bff      	cmp	r3, #255	; 0xff
 8009cdc:	d002      	beq.n	8009ce4 <USBH_CDC_InterfaceInit+0x24>
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d901      	bls.n	8009ce8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	e13d      	b.n	8009f64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
 8009cea:	4619      	mov	r1, r3
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fc87 	bl	800a600 <USBH_SelectInterface>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009cf6:	7bbb      	ldrb	r3, [r7, #14]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e131      	b.n	8009f64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009d06:	2050      	movs	r0, #80	; 0x50
 8009d08:	f005 fc44 	bl	800f594 <malloc>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009d20:	2302      	movs	r3, #2
 8009d22:	e11f      	b.n	8009f64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009d24:	2250      	movs	r2, #80	; 0x50
 8009d26:	2100      	movs	r1, #0
 8009d28:	68b8      	ldr	r0, [r7, #8]
 8009d2a:	f005 fc51 	bl	800f5d0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	211a      	movs	r1, #26
 8009d34:	fb01 f303 	mul.w	r3, r1, r3
 8009d38:	4413      	add	r3, r2
 8009d3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	b25b      	sxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	da15      	bge.n	8009d72 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	211a      	movs	r1, #26
 8009d4c:	fb01 f303 	mul.w	r3, r1, r3
 8009d50:	4413      	add	r3, r2
 8009d52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009d56:	781a      	ldrb	r2, [r3, #0]
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	211a      	movs	r1, #26
 8009d62:	fb01 f303 	mul.w	r3, r1, r3
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009d6c:	881a      	ldrh	r2, [r3, #0]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	785b      	ldrb	r3, [r3, #1]
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f002 f88c 	bl	800be96 <USBH_AllocPipe>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	461a      	mov	r2, r3
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	7819      	ldrb	r1, [r3, #0]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	7858      	ldrb	r0, [r3, #1]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	8952      	ldrh	r2, [r2, #10]
 8009d9e:	9202      	str	r2, [sp, #8]
 8009da0:	2203      	movs	r2, #3
 8009da2:	9201      	str	r2, [sp, #4]
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	4623      	mov	r3, r4
 8009da8:	4602      	mov	r2, r0
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f002 f844 	bl	800be38 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	2200      	movs	r2, #0
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f005 fb3d 	bl	800f438 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	210a      	movs	r1, #10
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fc37 	bl	800a638 <USBH_FindInterface>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	2bff      	cmp	r3, #255	; 0xff
 8009dd2:	d002      	beq.n	8009dda <USBH_CDC_InterfaceInit+0x11a>
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d901      	bls.n	8009dde <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009dda:	2302      	movs	r3, #2
 8009ddc:	e0c2      	b.n	8009f64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	211a      	movs	r1, #26
 8009de4:	fb01 f303 	mul.w	r3, r1, r3
 8009de8:	4413      	add	r3, r2
 8009dea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	b25b      	sxtb	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	da16      	bge.n	8009e24 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	211a      	movs	r1, #26
 8009dfc:	fb01 f303 	mul.w	r3, r1, r3
 8009e00:	4413      	add	r3, r2
 8009e02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e06:	781a      	ldrb	r2, [r3, #0]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	211a      	movs	r1, #26
 8009e12:	fb01 f303 	mul.w	r3, r1, r3
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009e1c:	881a      	ldrh	r2, [r3, #0]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	835a      	strh	r2, [r3, #26]
 8009e22:	e015      	b.n	8009e50 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	211a      	movs	r1, #26
 8009e2a:	fb01 f303 	mul.w	r3, r1, r3
 8009e2e:	4413      	add	r3, r2
 8009e30:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e34:	781a      	ldrb	r2, [r3, #0]
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	211a      	movs	r1, #26
 8009e40:	fb01 f303 	mul.w	r3, r1, r3
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009e4a:	881a      	ldrh	r2, [r3, #0]
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	211a      	movs	r1, #26
 8009e56:	fb01 f303 	mul.w	r3, r1, r3
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	b25b      	sxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da16      	bge.n	8009e96 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	211a      	movs	r1, #26
 8009e6e:	fb01 f303 	mul.w	r3, r1, r3
 8009e72:	4413      	add	r3, r2
 8009e74:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009e78:	781a      	ldrb	r2, [r3, #0]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	211a      	movs	r1, #26
 8009e84:	fb01 f303 	mul.w	r3, r1, r3
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009e8e:	881a      	ldrh	r2, [r3, #0]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	835a      	strh	r2, [r3, #26]
 8009e94:	e015      	b.n	8009ec2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	211a      	movs	r1, #26
 8009e9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ea6:	781a      	ldrb	r2, [r3, #0]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	211a      	movs	r1, #26
 8009eb2:	fb01 f303 	mul.w	r3, r1, r3
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009ebc:	881a      	ldrh	r2, [r3, #0]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	7b9b      	ldrb	r3, [r3, #14]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f001 ffe4 	bl	800be96 <USBH_AllocPipe>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	7bdb      	ldrb	r3, [r3, #15]
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 ffda 	bl	800be96 <USBH_AllocPipe>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	7b59      	ldrb	r1, [r3, #13]
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	7b98      	ldrb	r0, [r3, #14]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	8b12      	ldrh	r2, [r2, #24]
 8009f02:	9202      	str	r2, [sp, #8]
 8009f04:	2202      	movs	r2, #2
 8009f06:	9201      	str	r2, [sp, #4]
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	4623      	mov	r3, r4
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 ff92 	bl	800be38 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	7b19      	ldrb	r1, [r3, #12]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	7bd8      	ldrb	r0, [r3, #15]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	8b52      	ldrh	r2, [r2, #26]
 8009f2c:	9202      	str	r2, [sp, #8]
 8009f2e:	2202      	movs	r2, #2
 8009f30:	9201      	str	r2, [sp, #4]
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	4623      	mov	r3, r4
 8009f36:	4602      	mov	r2, r0
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f001 ff7d 	bl	800be38 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	7b5b      	ldrb	r3, [r3, #13]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f005 fa72 	bl	800f438 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	7b1b      	ldrb	r3, [r3, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f005 fa6b 	bl	800f438 <USBH_LL_SetToggle>

  return USBH_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd90      	pop	{r4, r7, pc}

08009f6c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f7a:	69db      	ldr	r3, [r3, #28]
 8009f7c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00e      	beq.n	8009fa4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f001 ff72 	bl	800be76 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 ff9d 	bl	800bed8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	7b1b      	ldrb	r3, [r3, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00e      	beq.n	8009fca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	7b1b      	ldrb	r3, [r3, #12]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f001 ff5f 	bl	800be76 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	7b1b      	ldrb	r3, [r3, #12]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f001 ff8a 	bl	800bed8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	7b5b      	ldrb	r3, [r3, #13]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00e      	beq.n	8009ff0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	7b5b      	ldrb	r3, [r3, #13]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 ff4c 	bl	800be76 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	7b5b      	ldrb	r3, [r3, #13]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f001 ff77 	bl	800bed8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00b      	beq.n	800a014 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	4618      	mov	r0, r3
 800a006:	f005 facd 	bl	800f5a4 <free>
    phost->pActiveClass->pData = 0U;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a010:	2200      	movs	r2, #0
 800a012:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3340      	adds	r3, #64	; 0x40
 800a034:	4619      	mov	r1, r3
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f8b1 	bl	800a19e <GetLineCoding>
 800a03c:	4603      	mov	r3, r0
 800a03e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a040:	7afb      	ldrb	r3, [r7, #11]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d105      	bne.n	800a052 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a04c:	2102      	movs	r1, #2
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a052:	7afb      	ldrb	r3, [r7, #11]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a064:	2301      	movs	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d877      	bhi.n	800a170 <USBH_CDC_Process+0x114>
 800a080:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <USBH_CDC_Process+0x2c>)
 800a082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a086:	bf00      	nop
 800a088:	0800a09d 	.word	0x0800a09d
 800a08c:	0800a0a3 	.word	0x0800a0a3
 800a090:	0800a0d3 	.word	0x0800a0d3
 800a094:	0800a147 	.word	0x0800a147
 800a098:	0800a155 	.word	0x0800a155
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]
      break;
 800a0a0:	e06d      	b.n	800a17e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f897 	bl	800a1dc <SetLineCoding>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d104      	bne.n	800a0c2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a0c0:	e058      	b.n	800a174 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d055      	beq.n	800a174 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2204      	movs	r2, #4
 800a0cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a0d0:	e050      	b.n	800a174 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	3340      	adds	r3, #64	; 0x40
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f860 	bl	800a19e <GetLineCoding>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d126      	bne.n	800a136 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0fa:	791b      	ldrb	r3, [r3, #4]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d13b      	bne.n	800a178 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a10a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d133      	bne.n	800a178 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a11a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d12b      	bne.n	800a178 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a128:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d124      	bne.n	800a178 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f982 	bl	800a438 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a134:	e020      	b.n	800a178 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a136:	7bbb      	ldrb	r3, [r7, #14]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d01d      	beq.n	800a178 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2204      	movs	r2, #4
 800a140:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a144:	e018      	b.n	800a178 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f867 	bl	800a21a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f8f6 	bl	800a33e <CDC_ProcessReception>
      break;
 800a152:	e014      	b.n	800a17e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a154:	2100      	movs	r1, #0
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f001 f94d 	bl	800b3f6 <USBH_ClrFeature>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10a      	bne.n	800a17c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a16e:	e005      	b.n	800a17c <USBH_CDC_Process+0x120>

    default:
      break;
 800a170:	bf00      	nop
 800a172:	e004      	b.n	800a17e <USBH_CDC_Process+0x122>
      break;
 800a174:	bf00      	nop
 800a176:	e002      	b.n	800a17e <USBH_CDC_Process+0x122>
      break;
 800a178:	bf00      	nop
 800a17a:	e000      	b.n	800a17e <USBH_CDC_Process+0x122>
      break;
 800a17c:	bf00      	nop

  }

  return status;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	22a1      	movs	r2, #161	; 0xa1
 800a1ac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2221      	movs	r2, #33	; 0x21
 800a1b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2207      	movs	r2, #7
 800a1c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2207      	movs	r2, #7
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f001 faf2 	bl	800b7b6 <USBH_CtlReq>
 800a1d2:	4603      	mov	r3, r0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2221      	movs	r2, #33	; 0x21
 800a1ea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2207      	movs	r2, #7
 800a202:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2207      	movs	r2, #7
 800a208:	4619      	mov	r1, r3
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f001 fad3 	bl	800b7b6 <USBH_CtlReq>
 800a210:	4603      	mov	r3, r0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b086      	sub	sp, #24
 800a21e:	af02      	add	r7, sp, #8
 800a220:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a22c:	2300      	movs	r3, #0
 800a22e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a236:	2b01      	cmp	r3, #1
 800a238:	d002      	beq.n	800a240 <CDC_ProcessTransmission+0x26>
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d023      	beq.n	800a286 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a23e:	e07a      	b.n	800a336 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	8b12      	ldrh	r2, [r2, #24]
 800a248:	4293      	cmp	r3, r2
 800a24a:	d90b      	bls.n	800a264 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	69d9      	ldr	r1, [r3, #28]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	8b1a      	ldrh	r2, [r3, #24]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	7b5b      	ldrb	r3, [r3, #13]
 800a258:	2001      	movs	r0, #1
 800a25a:	9000      	str	r0, [sp, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 fda8 	bl	800bdb2 <USBH_BulkSendData>
 800a262:	e00b      	b.n	800a27c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	7b5b      	ldrb	r3, [r3, #13]
 800a272:	2001      	movs	r0, #1
 800a274:	9000      	str	r0, [sp, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f001 fd9b 	bl	800bdb2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2202      	movs	r2, #2
 800a280:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a284:	e057      	b.n	800a336 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	7b5b      	ldrb	r3, [r3, #13]
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f005 f8a9 	bl	800f3e4 <USBH_LL_GetURBState>
 800a292:	4603      	mov	r3, r0
 800a294:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a296:	7afb      	ldrb	r3, [r7, #11]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d136      	bne.n	800a30a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	8b12      	ldrh	r2, [r2, #24]
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d90e      	bls.n	800a2c6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	8b12      	ldrh	r2, [r2, #24]
 800a2b0:	1a9a      	subs	r2, r3, r2
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	69db      	ldr	r3, [r3, #28]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	8b12      	ldrh	r2, [r2, #24]
 800a2be:	441a      	add	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	61da      	str	r2, [r3, #28]
 800a2c4:	e002      	b.n	800a2cc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d004      	beq.n	800a2de <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a2dc:	e006      	b.n	800a2ec <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f892 	bl	800a410 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2204      	movs	r2, #4
 800a2f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a300:	2300      	movs	r3, #0
 800a302:	2200      	movs	r2, #0
 800a304:	f001 ffd8 	bl	800c2b8 <osMessageQueuePut>
      break;
 800a308:	e014      	b.n	800a334 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a30a:	7afb      	ldrb	r3, [r7, #11]
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d111      	bne.n	800a334 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2204      	movs	r2, #4
 800a31c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a32c:	2300      	movs	r3, #0
 800a32e:	2200      	movs	r2, #0
 800a330:	f001 ffc2 	bl	800c2b8 <osMessageQueuePut>
      break;
 800a334:	bf00      	nop
  }
}
 800a336:	bf00      	nop
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b086      	sub	sp, #24
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a350:	2300      	movs	r3, #0
 800a352:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d002      	beq.n	800a364 <CDC_ProcessReception+0x26>
 800a35e:	2b04      	cmp	r3, #4
 800a360:	d00e      	beq.n	800a380 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a362:	e051      	b.n	800a408 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	6a19      	ldr	r1, [r3, #32]
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	8b5a      	ldrh	r2, [r3, #26]
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	7b1b      	ldrb	r3, [r3, #12]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f001 fd43 	bl	800bdfc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2204      	movs	r2, #4
 800a37a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a37e:	e043      	b.n	800a408 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	7b1b      	ldrb	r3, [r3, #12]
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f005 f82c 	bl	800f3e4 <USBH_LL_GetURBState>
 800a38c:	4603      	mov	r3, r0
 800a38e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a390:	7cfb      	ldrb	r3, [r7, #19]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d137      	bne.n	800a406 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	7b1b      	ldrb	r3, [r3, #12]
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f004 ff8f 	bl	800f2c0 <USBH_LL_GetLastXferSize>
 800a3a2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d016      	beq.n	800a3dc <CDC_ProcessReception+0x9e>
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	8b5b      	ldrh	r3, [r3, #26]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d910      	bls.n	800a3dc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	1ad2      	subs	r2, r2, r3
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	6a1a      	ldr	r2, [r3, #32]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	441a      	add	r2, r3
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2203      	movs	r2, #3
 800a3d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a3da:	e006      	b.n	800a3ea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f81d 	bl	800a424 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2204      	movs	r2, #4
 800a3ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a3fe:	2300      	movs	r3, #0
 800a400:	2200      	movs	r2, #0
 800a402:	f001 ff59 	bl	800c2b8 <osMessageQueuePut>
      break;
 800a406:	bf00      	nop
  }
}
 800a408:	bf00      	nop
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a418:	bf00      	nop
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	4613      	mov	r3, r2
 800a458:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a460:	2302      	movs	r3, #2
 800a462:	e044      	b.n	800a4ee <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	79fa      	ldrb	r2, [r7, #7]
 800a468:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f000 f841 	bl	800a504 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d003      	beq.n	800a4b0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	2104      	movs	r1, #4
 800a4b4:	2010      	movs	r0, #16
 800a4b6:	f001 fe8c 	bl	800c1d2 <osMessageQueueNew>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a4c2:	4b0d      	ldr	r3, [pc, #52]	; (800a4f8 <USBH_Init+0xac>)
 800a4c4:	4a0d      	ldr	r2, [pc, #52]	; (800a4fc <USBH_Init+0xb0>)
 800a4c6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a4c8:	4b0b      	ldr	r3, [pc, #44]	; (800a4f8 <USBH_Init+0xac>)
 800a4ca:	2280      	movs	r2, #128	; 0x80
 800a4cc:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a4ce:	4b0a      	ldr	r3, [pc, #40]	; (800a4f8 <USBH_Init+0xac>)
 800a4d0:	2218      	movs	r2, #24
 800a4d2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a4d4:	4a08      	ldr	r2, [pc, #32]	; (800a4f8 <USBH_Init+0xac>)
 800a4d6:	68f9      	ldr	r1, [r7, #12]
 800a4d8:	4809      	ldr	r0, [pc, #36]	; (800a500 <USBH_Init+0xb4>)
 800a4da:	f001 fdcd 	bl	800c078 <osThreadNew>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f004 fe36 	bl	800f158 <USBH_LL_Init>

  return USBH_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	2000506c 	.word	0x2000506c
 800a4fc:	0800f8ec 	.word	0x0800f8ec
 800a500:	0800b16d 	.word	0x0800b16d

0800a504 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a50c:	2300      	movs	r3, #0
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a510:	2300      	movs	r3, #0
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	e009      	b.n	800a52a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	33e0      	adds	r3, #224	; 0xe0
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	2200      	movs	r2, #0
 800a522:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	3301      	adds	r3, #1
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b0e      	cmp	r3, #14
 800a52e:	d9f2      	bls.n	800a516 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a530:	2300      	movs	r3, #0
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	e009      	b.n	800a54a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a540:	2200      	movs	r2, #0
 800a542:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3301      	adds	r3, #1
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a550:	d3f1      	bcc.n	800a536 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2240      	movs	r2, #64	; 0x40
 800a576:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d016      	beq.n	800a5ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10e      	bne.n	800a5e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a5d0:	1c59      	adds	r1, r3, #1
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	33de      	adds	r3, #222	; 0xde
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	73fb      	strb	r3, [r7, #15]
 800a5e6:	e004      	b.n	800a5f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	73fb      	strb	r3, [r7, #15]
 800a5ec:	e001      	b.n	800a5f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	460b      	mov	r3, r1
 800a60a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a616:	78fa      	ldrb	r2, [r7, #3]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d204      	bcs.n	800a626 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	78fa      	ldrb	r2, [r7, #3]
 800a620:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a624:	e001      	b.n	800a62a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a626:	2302      	movs	r3, #2
 800a628:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a638:	b480      	push	{r7}
 800a63a:	b087      	sub	sp, #28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	4608      	mov	r0, r1
 800a642:	4611      	mov	r1, r2
 800a644:	461a      	mov	r2, r3
 800a646:	4603      	mov	r3, r0
 800a648:	70fb      	strb	r3, [r7, #3]
 800a64a:	460b      	mov	r3, r1
 800a64c:	70bb      	strb	r3, [r7, #2]
 800a64e:	4613      	mov	r3, r2
 800a650:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a652:	2300      	movs	r3, #0
 800a654:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a656:	2300      	movs	r3, #0
 800a658:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a660:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a662:	e025      	b.n	800a6b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a664:	7dfb      	ldrb	r3, [r7, #23]
 800a666:	221a      	movs	r2, #26
 800a668:	fb02 f303 	mul.w	r3, r2, r3
 800a66c:	3308      	adds	r3, #8
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	4413      	add	r3, r2
 800a672:	3302      	adds	r3, #2
 800a674:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	795b      	ldrb	r3, [r3, #5]
 800a67a:	78fa      	ldrb	r2, [r7, #3]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d002      	beq.n	800a686 <USBH_FindInterface+0x4e>
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	2bff      	cmp	r3, #255	; 0xff
 800a684:	d111      	bne.n	800a6aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a68a:	78ba      	ldrb	r2, [r7, #2]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d002      	beq.n	800a696 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a690:	78bb      	ldrb	r3, [r7, #2]
 800a692:	2bff      	cmp	r3, #255	; 0xff
 800a694:	d109      	bne.n	800a6aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a69a:	787a      	ldrb	r2, [r7, #1]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d002      	beq.n	800a6a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a6a0:	787b      	ldrb	r3, [r7, #1]
 800a6a2:	2bff      	cmp	r3, #255	; 0xff
 800a6a4:	d101      	bne.n	800a6aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	e006      	b.n	800a6b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a6b0:	7dfb      	ldrb	r3, [r7, #23]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d9d6      	bls.n	800a664 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a6b6:	23ff      	movs	r3, #255	; 0xff
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	371c      	adds	r7, #28
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f004 fd7f 	bl	800f1d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f004 fe98 	bl	800f40a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b088      	sub	sp, #32
 800a6e8:	af04      	add	r7, sp, #16
 800a6ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d102      	bne.n	800a706 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2203      	movs	r2, #3
 800a704:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b0b      	cmp	r3, #11
 800a70e:	f200 823c 	bhi.w	800ab8a <USBH_Process+0x4a6>
 800a712:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <USBH_Process+0x34>)
 800a714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a718:	0800a749 	.word	0x0800a749
 800a71c:	0800a797 	.word	0x0800a797
 800a720:	0800a81b 	.word	0x0800a81b
 800a724:	0800ab09 	.word	0x0800ab09
 800a728:	0800ab8b 	.word	0x0800ab8b
 800a72c:	0800a8db 	.word	0x0800a8db
 800a730:	0800aa93 	.word	0x0800aa93
 800a734:	0800a92d 	.word	0x0800a92d
 800a738:	0800a969 	.word	0x0800a969
 800a73c:	0800a9a3 	.word	0x0800a9a3
 800a740:	0800a9eb 	.word	0x0800a9eb
 800a744:	0800aaf1 	.word	0x0800aaf1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 821c 	beq.w	800ab8e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a75c:	20c8      	movs	r0, #200	; 0xc8
 800a75e:	f004 fe9b 	bl	800f498 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f004 fd91 	bl	800f28a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a78c:	2300      	movs	r3, #0
 800a78e:	2200      	movs	r2, #0
 800a790:	f001 fd92 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a794:	e1fb      	b.n	800ab8e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d107      	bne.n	800a7b0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	701a      	strb	r2, [r3, #0]
 800a7ae:	e025      	b.n	800a7fc <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7ba:	d914      	bls.n	800a7e6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d903      	bls.n	800a7de <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	220d      	movs	r2, #13
 800a7da:	701a      	strb	r2, [r3, #0]
 800a7dc:	e00e      	b.n	800a7fc <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	701a      	strb	r2, [r3, #0]
 800a7e4:	e00a      	b.n	800a7fc <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7ec:	f103 020a 	add.w	r2, r3, #10
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a7f6:	200a      	movs	r0, #10
 800a7f8:	f004 fe4e 	bl	800f498 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a810:	2300      	movs	r3, #0
 800a812:	2200      	movs	r2, #0
 800a814:	f001 fd50 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif
      break;
 800a818:	e1c0      	b.n	800ab9c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a820:	2b00      	cmp	r3, #0
 800a822:	d005      	beq.n	800a830 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a82a:	2104      	movs	r1, #4
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a830:	2064      	movs	r0, #100	; 0x64
 800a832:	f004 fe31 	bl	800f498 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f004 fd00 	bl	800f23c <USBH_LL_GetSpeed>
 800a83c:	4603      	mov	r3, r0
 800a83e:	461a      	mov	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2205      	movs	r2, #5
 800a84a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a84c:	2100      	movs	r1, #0
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f001 fb21 	bl	800be96 <USBH_AllocPipe>
 800a854:	4603      	mov	r3, r0
 800a856:	461a      	mov	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a85c:	2180      	movs	r1, #128	; 0x80
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f001 fb19 	bl	800be96 <USBH_AllocPipe>
 800a864:	4603      	mov	r3, r0
 800a866:	461a      	mov	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	7919      	ldrb	r1, [r3, #4]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a880:	b292      	uxth	r2, r2
 800a882:	9202      	str	r2, [sp, #8]
 800a884:	2200      	movs	r2, #0
 800a886:	9201      	str	r2, [sp, #4]
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	4603      	mov	r3, r0
 800a88c:	2280      	movs	r2, #128	; 0x80
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f001 fad2 	bl	800be38 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	7959      	ldrb	r1, [r3, #5]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a8a8:	b292      	uxth	r2, r2
 800a8aa:	9202      	str	r2, [sp, #8]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	9201      	str	r2, [sp, #4]
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f001 fabe 	bl	800be38 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f001 fcf0 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif
      break;
 800a8d8:	e160      	b.n	800ab9c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f964 	bl	800aba8 <USBH_HandleEnum>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f040 8152 	bne.w	800ab92 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d103      	bne.n	800a908 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2208      	movs	r2, #8
 800a904:	701a      	strb	r2, [r3, #0]
 800a906:	e002      	b.n	800a90e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2207      	movs	r2, #7
 800a90c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2205      	movs	r2, #5
 800a912:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a922:	2300      	movs	r3, #0
 800a924:	2200      	movs	r2, #0
 800a926:	f001 fcc7 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a92a:	e132      	b.n	800ab92 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 812f 	beq.w	800ab96 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a93e:	2101      	movs	r1, #1
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2208      	movs	r2, #8
 800a948:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2205      	movs	r2, #5
 800a94e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a95e:	2300      	movs	r3, #0
 800a960:	2200      	movs	r2, #0
 800a962:	f001 fca9 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a966:	e116      	b.n	800ab96 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a96e:	b29b      	uxth	r3, r3
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fcf8 	bl	800b368 <USBH_SetCfg>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d102      	bne.n	800a984 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2209      	movs	r2, #9
 800a982:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a998:	2300      	movs	r3, #0
 800a99a:	2200      	movs	r2, #0
 800a99c:	f001 fc8c 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif
      break;
 800a9a0:	e0fc      	b.n	800ab9c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a9a8:	f003 0320 	and.w	r3, r3, #32
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00a      	beq.n	800a9c6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fcfb 	bl	800b3ae <USBH_SetFeature>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d106      	bne.n	800a9cc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	220a      	movs	r2, #10
 800a9c2:	701a      	strb	r2, [r3, #0]
 800a9c4:	e002      	b.n	800a9cc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	220a      	movs	r2, #10
 800a9ca:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f001 fc68 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif
      break;
 800a9e8:	e0d8      	b.n	800ab9c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d03f      	beq.n	800aa74 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]
 800aa00:	e016      	b.n	800aa30 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aa02:	7bfa      	ldrb	r2, [r7, #15]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	32de      	adds	r2, #222	; 0xde
 800aa08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0c:	791a      	ldrb	r2, [r3, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d108      	bne.n	800aa2a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aa18:	7bfa      	ldrb	r2, [r7, #15]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	32de      	adds	r2, #222	; 0xde
 800aa1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800aa28:	e005      	b.n	800aa36 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	73fb      	strb	r3, [r7, #15]
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d0e5      	beq.n	800aa02 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d016      	beq.n	800aa6e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	4798      	blx	r3
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d109      	bne.n	800aa66 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2206      	movs	r2, #6
 800aa56:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa5e:	2103      	movs	r1, #3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	4798      	blx	r3
 800aa64:	e006      	b.n	800aa74 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	220d      	movs	r2, #13
 800aa6a:	701a      	strb	r2, [r3, #0]
 800aa6c:	e002      	b.n	800aa74 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	220d      	movs	r2, #13
 800aa72:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2205      	movs	r2, #5
 800aa78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa88:	2300      	movs	r3, #0
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f001 fc14 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif
      break;
 800aa90:	e084      	b.n	800ab9c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d017      	beq.n	800aacc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	4798      	blx	r3
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d103      	bne.n	800aabc <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	220b      	movs	r2, #11
 800aab8:	701a      	strb	r2, [r3, #0]
 800aaba:	e00a      	b.n	800aad2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d106      	bne.n	800aad2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	220d      	movs	r2, #13
 800aac8:	701a      	strb	r2, [r3, #0]
 800aaca:	e002      	b.n	800aad2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	220d      	movs	r2, #13
 800aad0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2205      	movs	r2, #5
 800aad6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aae6:	2300      	movs	r3, #0
 800aae8:	2200      	movs	r2, #0
 800aaea:	f001 fbe5 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif
      break;
 800aaee:	e055      	b.n	800ab9c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d04f      	beq.n	800ab9a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	4798      	blx	r3
      }
      break;
 800ab06:	e048      	b.n	800ab9a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7ff fcf7 	bl	800a504 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d009      	beq.n	800ab34 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d005      	beq.n	800ab4a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab44:	2105      	movs	r1, #5
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d107      	bne.n	800ab66 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff fdb0 	bl	800a6c4 <USBH_Start>
 800ab64:	e002      	b.n	800ab6c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f004 fb32 	bl	800f1d0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ab80:	2300      	movs	r3, #0
 800ab82:	2200      	movs	r2, #0
 800ab84:	f001 fb98 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif
      break;
 800ab88:	e008      	b.n	800ab9c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800ab8a:	bf00      	nop
 800ab8c:	e006      	b.n	800ab9c <USBH_Process+0x4b8>
      break;
 800ab8e:	bf00      	nop
 800ab90:	e004      	b.n	800ab9c <USBH_Process+0x4b8>
      break;
 800ab92:	bf00      	nop
 800ab94:	e002      	b.n	800ab9c <USBH_Process+0x4b8>
    break;
 800ab96:	bf00      	nop
 800ab98:	e000      	b.n	800ab9c <USBH_Process+0x4b8>
      break;
 800ab9a:	bf00      	nop
  }
  return USBH_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop

0800aba8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b088      	sub	sp, #32
 800abac:	af04      	add	r7, sp, #16
 800abae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800abb0:	2301      	movs	r3, #1
 800abb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800abb4:	2301      	movs	r3, #1
 800abb6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	785b      	ldrb	r3, [r3, #1]
 800abbc:	2b07      	cmp	r3, #7
 800abbe:	f200 8208 	bhi.w	800afd2 <USBH_HandleEnum+0x42a>
 800abc2:	a201      	add	r2, pc, #4	; (adr r2, 800abc8 <USBH_HandleEnum+0x20>)
 800abc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc8:	0800abe9 	.word	0x0800abe9
 800abcc:	0800aca7 	.word	0x0800aca7
 800abd0:	0800ad11 	.word	0x0800ad11
 800abd4:	0800ad9f 	.word	0x0800ad9f
 800abd8:	0800ae09 	.word	0x0800ae09
 800abdc:	0800ae79 	.word	0x0800ae79
 800abe0:	0800af15 	.word	0x0800af15
 800abe4:	0800af93 	.word	0x0800af93
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800abe8:	2108      	movs	r1, #8
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 faec 	bl	800b1c8 <USBH_Get_DevDesc>
 800abf0:	4603      	mov	r3, r0
 800abf2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abf4:	7bbb      	ldrb	r3, [r7, #14]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d130      	bne.n	800ac5c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	7919      	ldrb	r1, [r3, #4]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac1e:	b292      	uxth	r2, r2
 800ac20:	9202      	str	r2, [sp, #8]
 800ac22:	2200      	movs	r2, #0
 800ac24:	9201      	str	r2, [sp, #4]
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2280      	movs	r2, #128	; 0x80
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f001 f903 	bl	800be38 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	7959      	ldrb	r1, [r3, #5]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac46:	b292      	uxth	r2, r2
 800ac48:	9202      	str	r2, [sp, #8]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	9201      	str	r2, [sp, #4]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	4603      	mov	r3, r0
 800ac52:	2200      	movs	r2, #0
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f001 f8ef 	bl	800be38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac5a:	e1bc      	b.n	800afd6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac5c:	7bbb      	ldrb	r3, [r7, #14]
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	f040 81b9 	bne.w	800afd6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	b2da      	uxtb	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d903      	bls.n	800ac86 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	220d      	movs	r2, #13
 800ac82:	701a      	strb	r2, [r3, #0]
      break;
 800ac84:	e1a7      	b.n	800afd6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	795b      	ldrb	r3, [r3, #5]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f001 f923 	bl	800bed8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	791b      	ldrb	r3, [r3, #4]
 800ac96:	4619      	mov	r1, r3
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f001 f91d 	bl	800bed8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	701a      	strb	r2, [r3, #0]
      break;
 800aca4:	e197      	b.n	800afd6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aca6:	2112      	movs	r1, #18
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fa8d 	bl	800b1c8 <USBH_Get_DevDesc>
 800acae:	4603      	mov	r3, r0
 800acb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800acb2:	7bbb      	ldrb	r3, [r7, #14]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d103      	bne.n	800acc0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2202      	movs	r2, #2
 800acbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800acbe:	e18c      	b.n	800afda <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	f040 8189 	bne.w	800afda <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acce:	3301      	adds	r3, #1
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acde:	2b03      	cmp	r3, #3
 800ace0:	d903      	bls.n	800acea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	220d      	movs	r2, #13
 800ace6:	701a      	strb	r2, [r3, #0]
      break;
 800ace8:	e177      	b.n	800afda <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	795b      	ldrb	r3, [r3, #5]
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f001 f8f1 	bl	800bed8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	791b      	ldrb	r3, [r3, #4]
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f001 f8eb 	bl	800bed8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	701a      	strb	r2, [r3, #0]
      break;
 800ad0e:	e164      	b.n	800afda <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ad10:	2101      	movs	r1, #1
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fb04 	bl	800b320 <USBH_SetAddress>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad1c:	7bbb      	ldrb	r3, [r7, #14]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d132      	bne.n	800ad88 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ad22:	2002      	movs	r0, #2
 800ad24:	f004 fbb8 	bl	800f498 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2203      	movs	r2, #3
 800ad34:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	7919      	ldrb	r1, [r3, #4]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad4a:	b292      	uxth	r2, r2
 800ad4c:	9202      	str	r2, [sp, #8]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	9201      	str	r2, [sp, #4]
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	4603      	mov	r3, r0
 800ad56:	2280      	movs	r2, #128	; 0x80
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f001 f86d 	bl	800be38 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	7959      	ldrb	r1, [r3, #5]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad72:	b292      	uxth	r2, r2
 800ad74:	9202      	str	r2, [sp, #8]
 800ad76:	2200      	movs	r2, #0
 800ad78:	9201      	str	r2, [sp, #4]
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2200      	movs	r2, #0
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 f859 	bl	800be38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ad86:	e12a      	b.n	800afde <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
 800ad8a:	2b03      	cmp	r3, #3
 800ad8c:	f040 8127 	bne.w	800afde <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	220d      	movs	r2, #13
 800ad94:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	705a      	strb	r2, [r3, #1]
      break;
 800ad9c:	e11f      	b.n	800afde <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ad9e:	2109      	movs	r1, #9
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fa39 	bl	800b218 <USBH_Get_CfgDesc>
 800ada6:	4603      	mov	r3, r0
 800ada8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800adaa:	7bbb      	ldrb	r3, [r7, #14]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d103      	bne.n	800adb8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2204      	movs	r2, #4
 800adb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800adb6:	e114      	b.n	800afe2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adb8:	7bbb      	ldrb	r3, [r7, #14]
 800adba:	2b03      	cmp	r3, #3
 800adbc:	f040 8111 	bne.w	800afe2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adc6:	3301      	adds	r3, #1
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800add6:	2b03      	cmp	r3, #3
 800add8:	d903      	bls.n	800ade2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	220d      	movs	r2, #13
 800adde:	701a      	strb	r2, [r3, #0]
      break;
 800ade0:	e0ff      	b.n	800afe2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	795b      	ldrb	r3, [r3, #5]
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f001 f875 	bl	800bed8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	791b      	ldrb	r3, [r3, #4]
 800adf2:	4619      	mov	r1, r3
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f001 f86f 	bl	800bed8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	701a      	strb	r2, [r3, #0]
      break;
 800ae06:	e0ec      	b.n	800afe2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fa01 	bl	800b218 <USBH_Get_CfgDesc>
 800ae16:	4603      	mov	r3, r0
 800ae18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae1a:	7bbb      	ldrb	r3, [r7, #14]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d103      	bne.n	800ae28 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2205      	movs	r2, #5
 800ae24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae26:	e0de      	b.n	800afe6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	f040 80db 	bne.w	800afe6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae36:	3301      	adds	r3, #1
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	d903      	bls.n	800ae52 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	220d      	movs	r2, #13
 800ae4e:	701a      	strb	r2, [r3, #0]
      break;
 800ae50:	e0c9      	b.n	800afe6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	795b      	ldrb	r3, [r3, #5]
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f001 f83d 	bl	800bed8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	791b      	ldrb	r3, [r3, #4]
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f001 f837 	bl	800bed8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	701a      	strb	r2, [r3, #0]
      break;
 800ae76:	e0b6      	b.n	800afe6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d036      	beq.n	800aef0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae8e:	23ff      	movs	r3, #255	; 0xff
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f9e5 	bl	800b260 <USBH_Get_StringDesc>
 800ae96:	4603      	mov	r3, r0
 800ae98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae9a:	7bbb      	ldrb	r3, [r7, #14]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d111      	bne.n	800aec4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2206      	movs	r2, #6
 800aea4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2205      	movs	r2, #5
 800aeaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aeba:	2300      	movs	r3, #0
 800aebc:	2200      	movs	r2, #0
 800aebe:	f001 f9fb 	bl	800c2b8 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aec2:	e092      	b.n	800afea <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aec4:	7bbb      	ldrb	r3, [r7, #14]
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	f040 808f 	bne.w	800afea <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2206      	movs	r2, #6
 800aed0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2205      	movs	r2, #5
 800aed6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aee6:	2300      	movs	r3, #0
 800aee8:	2200      	movs	r2, #0
 800aeea:	f001 f9e5 	bl	800c2b8 <osMessageQueuePut>
      break;
 800aeee:	e07c      	b.n	800afea <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2206      	movs	r2, #6
 800aef4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2205      	movs	r2, #5
 800aefa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af0a:	2300      	movs	r3, #0
 800af0c:	2200      	movs	r2, #0
 800af0e:	f001 f9d3 	bl	800c2b8 <osMessageQueuePut>
      break;
 800af12:	e06a      	b.n	800afea <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d027      	beq.n	800af6e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800af2a:	23ff      	movs	r3, #255	; 0xff
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f997 	bl	800b260 <USBH_Get_StringDesc>
 800af32:	4603      	mov	r3, r0
 800af34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af36:	7bbb      	ldrb	r3, [r7, #14]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d103      	bne.n	800af44 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2207      	movs	r2, #7
 800af40:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800af42:	e054      	b.n	800afee <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af44:	7bbb      	ldrb	r3, [r7, #14]
 800af46:	2b03      	cmp	r3, #3
 800af48:	d151      	bne.n	800afee <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2207      	movs	r2, #7
 800af4e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2205      	movs	r2, #5
 800af54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af64:	2300      	movs	r3, #0
 800af66:	2200      	movs	r2, #0
 800af68:	f001 f9a6 	bl	800c2b8 <osMessageQueuePut>
      break;
 800af6c:	e03f      	b.n	800afee <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2207      	movs	r2, #7
 800af72:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2205      	movs	r2, #5
 800af78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af88:	2300      	movs	r3, #0
 800af8a:	2200      	movs	r2, #0
 800af8c:	f001 f994 	bl	800c2b8 <osMessageQueuePut>
      break;
 800af90:	e02d      	b.n	800afee <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d017      	beq.n	800afcc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800afa8:	23ff      	movs	r3, #255	; 0xff
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f958 	bl	800b260 <USBH_Get_StringDesc>
 800afb0:	4603      	mov	r3, r0
 800afb2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d102      	bne.n	800afc0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800afbe:	e018      	b.n	800aff2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d115      	bne.n	800aff2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	73fb      	strb	r3, [r7, #15]
      break;
 800afca:	e012      	b.n	800aff2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	73fb      	strb	r3, [r7, #15]
      break;
 800afd0:	e00f      	b.n	800aff2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800afd2:	bf00      	nop
 800afd4:	e00e      	b.n	800aff4 <USBH_HandleEnum+0x44c>
      break;
 800afd6:	bf00      	nop
 800afd8:	e00c      	b.n	800aff4 <USBH_HandleEnum+0x44c>
      break;
 800afda:	bf00      	nop
 800afdc:	e00a      	b.n	800aff4 <USBH_HandleEnum+0x44c>
      break;
 800afde:	bf00      	nop
 800afe0:	e008      	b.n	800aff4 <USBH_HandleEnum+0x44c>
      break;
 800afe2:	bf00      	nop
 800afe4:	e006      	b.n	800aff4 <USBH_HandleEnum+0x44c>
      break;
 800afe6:	bf00      	nop
 800afe8:	e004      	b.n	800aff4 <USBH_HandleEnum+0x44c>
      break;
 800afea:	bf00      	nop
 800afec:	e002      	b.n	800aff4 <USBH_HandleEnum+0x44c>
      break;
 800afee:	bf00      	nop
 800aff0:	e000      	b.n	800aff4 <USBH_HandleEnum+0x44c>
      break;
 800aff2:	bf00      	nop
  }
  return Status;
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop

0800b000 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b012:	bf00      	nop
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b02c:	1c5a      	adds	r2, r3, #1
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f804 	bl	800b042 <USBH_HandleSof>
}
 800b03a:	bf00      	nop
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b082      	sub	sp, #8
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	2b0b      	cmp	r3, #11
 800b052:	d10a      	bne.n	800b06a <USBH_HandleSof+0x28>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d005      	beq.n	800b06a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	4798      	blx	r3
  }
}
 800b06a:	bf00      	nop
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b082      	sub	sp, #8
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2201      	movs	r2, #1
 800b086:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b096:	2300      	movs	r3, #0
 800b098:	2200      	movs	r2, #0
 800b09a:	f001 f90d 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif

  return;
 800b09e:	bf00      	nop
}
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b0b6:	bf00      	nop
}
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr

0800b0c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b082      	sub	sp, #8
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f001 f8dd 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f004 f86c 	bl	800f206 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	791b      	ldrb	r3, [r3, #4]
 800b132:	4619      	mov	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fecf 	bl	800bed8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	795b      	ldrb	r3, [r3, #5]
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fec9 	bl	800bed8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b15a:	2300      	movs	r3, #0
 800b15c:	2200      	movs	r2, #0
 800b15e:	f001 f8ab 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b184:	2200      	movs	r2, #0
 800b186:	f001 f8f7 	bl	800c378 <osMessageQueueGet>
 800b18a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1f0      	bne.n	800b174 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7ff faa6 	bl	800a6e4 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b198:	e7ec      	b.n	800b174 <USBH_Process_OS+0x8>

0800b19a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b082      	sub	sp, #8
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f001 f87d 	bl	800c2b8 <osMessageQueuePut>
#endif

  return USBH_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af02      	add	r7, sp, #8
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b1da:	78fb      	ldrb	r3, [r7, #3]
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f864 	bl	800b2b6 <USBH_GetDescriptor>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	73fb      	strb	r3, [r7, #15]
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b204:	78fa      	ldrb	r2, [r7, #3]
 800b206:	b292      	uxth	r2, r2
 800b208:	4619      	mov	r1, r3
 800b20a:	f000 f918 	bl	800b43e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af02      	add	r7, sp, #8
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	460b      	mov	r3, r1
 800b222:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	331c      	adds	r3, #28
 800b228:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b22a:	887b      	ldrh	r3, [r7, #2]
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b234:	2100      	movs	r1, #0
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f83d 	bl	800b2b6 <USBH_GetDescriptor>
 800b23c:	4603      	mov	r3, r0
 800b23e:	72fb      	strb	r3, [r7, #11]
 800b240:	7afb      	ldrb	r3, [r7, #11]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d107      	bne.n	800b256 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b24c:	887a      	ldrh	r2, [r7, #2]
 800b24e:	68f9      	ldr	r1, [r7, #12]
 800b250:	4618      	mov	r0, r3
 800b252:	f000 f964 	bl	800b51e <USBH_ParseCfgDesc>
  }

  return status;
 800b256:	7afb      	ldrb	r3, [r7, #11]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b088      	sub	sp, #32
 800b264:	af02      	add	r7, sp, #8
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	607a      	str	r2, [r7, #4]
 800b26a:	461a      	mov	r2, r3
 800b26c:	460b      	mov	r3, r1
 800b26e:	72fb      	strb	r3, [r7, #11]
 800b270:	4613      	mov	r3, r2
 800b272:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	b29b      	uxth	r3, r3
 800b278:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b27c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b284:	893b      	ldrh	r3, [r7, #8]
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	460b      	mov	r3, r1
 800b28a:	2100      	movs	r1, #0
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f000 f812 	bl	800b2b6 <USBH_GetDescriptor>
 800b292:	4603      	mov	r3, r0
 800b294:	75fb      	strb	r3, [r7, #23]
 800b296:	7dfb      	ldrb	r3, [r7, #23]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d107      	bne.n	800b2ac <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2a2:	893a      	ldrh	r2, [r7, #8]
 800b2a4:	6879      	ldr	r1, [r7, #4]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 fa37 	bl	800b71a <USBH_ParseStringDesc>
  }

  return status;
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3718      	adds	r7, #24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	60f8      	str	r0, [r7, #12]
 800b2be:	607b      	str	r3, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	72fb      	strb	r3, [r7, #11]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	789b      	ldrb	r3, [r3, #2]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d11c      	bne.n	800b30a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b2d0:	7afb      	ldrb	r3, [r7, #11]
 800b2d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2206      	movs	r2, #6
 800b2e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	893a      	ldrh	r2, [r7, #8]
 800b2e6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b2e8:	893b      	ldrh	r3, [r7, #8]
 800b2ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b2ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2f2:	d104      	bne.n	800b2fe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f240 4209 	movw	r2, #1033	; 0x409
 800b2fa:	829a      	strh	r2, [r3, #20]
 800b2fc:	e002      	b.n	800b304 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	8b3a      	ldrh	r2, [r7, #24]
 800b308:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b30a:	8b3b      	ldrh	r3, [r7, #24]
 800b30c:	461a      	mov	r2, r3
 800b30e:	6879      	ldr	r1, [r7, #4]
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 fa50 	bl	800b7b6 <USBH_CtlReq>
 800b316:	4603      	mov	r3, r0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	460b      	mov	r3, r1
 800b32a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	789b      	ldrb	r3, [r3, #2]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d10f      	bne.n	800b354 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2205      	movs	r2, #5
 800b33e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b340:	78fb      	ldrb	r3, [r7, #3]
 800b342:	b29a      	uxth	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b354:	2200      	movs	r2, #0
 800b356:	2100      	movs	r1, #0
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 fa2c 	bl	800b7b6 <USBH_CtlReq>
 800b35e:	4603      	mov	r3, r0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	789b      	ldrb	r3, [r3, #2]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d10e      	bne.n	800b39a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2209      	movs	r2, #9
 800b386:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	887a      	ldrh	r2, [r7, #2]
 800b38c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b39a:	2200      	movs	r2, #0
 800b39c:	2100      	movs	r1, #0
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fa09 	bl	800b7b6 <USBH_CtlReq>
 800b3a4:	4603      	mov	r3, r0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b082      	sub	sp, #8
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	789b      	ldrb	r3, [r3, #2]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d10f      	bne.n	800b3e2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2203      	movs	r2, #3
 800b3cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b3ce:	78fb      	ldrb	r3, [r7, #3]
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f9e5 	bl	800b7b6 <USBH_CtlReq>
 800b3ec:	4603      	mov	r3, r0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b082      	sub	sp, #8
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	460b      	mov	r3, r1
 800b400:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	789b      	ldrb	r3, [r3, #2]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d10f      	bne.n	800b42a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2202      	movs	r2, #2
 800b40e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b41c:	78fb      	ldrb	r3, [r7, #3]
 800b41e:	b29a      	uxth	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b42a:	2200      	movs	r2, #0
 800b42c:	2100      	movs	r1, #0
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f9c1 	bl	800b7b6 <USBH_CtlReq>
 800b434:	4603      	mov	r3, r0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b43e:	b480      	push	{r7}
 800b440:	b085      	sub	sp, #20
 800b442:	af00      	add	r7, sp, #0
 800b444:	60f8      	str	r0, [r7, #12]
 800b446:	60b9      	str	r1, [r7, #8]
 800b448:	4613      	mov	r3, r2
 800b44a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	781a      	ldrb	r2, [r3, #0]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	785a      	ldrb	r2, [r3, #1]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	3302      	adds	r3, #2
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	b29a      	uxth	r2, r3
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	3303      	adds	r3, #3
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	021b      	lsls	r3, r3, #8
 800b46e:	b29b      	uxth	r3, r3
 800b470:	4313      	orrs	r3, r2
 800b472:	b29a      	uxth	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	791a      	ldrb	r2, [r3, #4]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	795a      	ldrb	r2, [r3, #5]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	799a      	ldrb	r2, [r3, #6]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	79da      	ldrb	r2, [r3, #7]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b498:	88fb      	ldrh	r3, [r7, #6]
 800b49a:	2b08      	cmp	r3, #8
 800b49c:	d939      	bls.n	800b512 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	3309      	adds	r3, #9
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	021b      	lsls	r3, r3, #8
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	330a      	adds	r3, #10
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	330b      	adds	r3, #11
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	021b      	lsls	r3, r3, #8
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	330c      	adds	r3, #12
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	330d      	adds	r3, #13
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	021b      	lsls	r3, r3, #8
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	7b9a      	ldrb	r2, [r3, #14]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	7bda      	ldrb	r2, [r3, #15]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	7c1a      	ldrb	r2, [r3, #16]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	7c5a      	ldrb	r2, [r3, #17]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	745a      	strb	r2, [r3, #17]
  }
}
 800b512:	bf00      	nop
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b08a      	sub	sp, #40	; 0x28
 800b522:	af00      	add	r7, sp, #0
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	60b9      	str	r1, [r7, #8]
 800b528:	4613      	mov	r3, r2
 800b52a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b536:	2300      	movs	r3, #0
 800b538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	781a      	ldrb	r2, [r3, #0]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	785a      	ldrb	r2, [r3, #1]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	3302      	adds	r3, #2
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	b29a      	uxth	r2, r3
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	3303      	adds	r3, #3
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	b29b      	uxth	r3, r3
 800b560:	021b      	lsls	r3, r3, #8
 800b562:	b29b      	uxth	r3, r3
 800b564:	4313      	orrs	r3, r2
 800b566:	b29a      	uxth	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	791a      	ldrb	r2, [r3, #4]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	795a      	ldrb	r2, [r3, #5]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	799a      	ldrb	r2, [r3, #6]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	79da      	ldrb	r2, [r3, #7]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	7a1a      	ldrb	r2, [r3, #8]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b594:	88fb      	ldrh	r3, [r7, #6]
 800b596:	2b09      	cmp	r3, #9
 800b598:	d95f      	bls.n	800b65a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b59a:	2309      	movs	r3, #9
 800b59c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b5a2:	e051      	b.n	800b648 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b5a4:	f107 0316 	add.w	r3, r7, #22
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5ac:	f000 f8e8 	bl	800b780 <USBH_GetNextDesc>
 800b5b0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b4:	785b      	ldrb	r3, [r3, #1]
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d146      	bne.n	800b648 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b5ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5be:	221a      	movs	r2, #26
 800b5c0:	fb02 f303 	mul.w	r3, r2, r3
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	3302      	adds	r3, #2
 800b5cc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b5ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5d0:	69f8      	ldr	r0, [r7, #28]
 800b5d2:	f000 f846 	bl	800b662 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b5e0:	e022      	b.n	800b628 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b5e2:	f107 0316 	add.w	r3, r7, #22
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5ea:	f000 f8c9 	bl	800b780 <USBH_GetNextDesc>
 800b5ee:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	785b      	ldrb	r3, [r3, #1]
 800b5f4:	2b05      	cmp	r3, #5
 800b5f6:	d117      	bne.n	800b628 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b5f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b600:	3201      	adds	r2, #1
 800b602:	00d2      	lsls	r2, r2, #3
 800b604:	211a      	movs	r1, #26
 800b606:	fb01 f303 	mul.w	r3, r1, r3
 800b60a:	4413      	add	r3, r2
 800b60c:	3308      	adds	r3, #8
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	4413      	add	r3, r2
 800b612:	3304      	adds	r3, #4
 800b614:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b618:	69b8      	ldr	r0, [r7, #24]
 800b61a:	f000 f851 	bl	800b6c0 <USBH_ParseEPDesc>
            ep_ix++;
 800b61e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b622:	3301      	adds	r3, #1
 800b624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	791b      	ldrb	r3, [r3, #4]
 800b62c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b630:	429a      	cmp	r2, r3
 800b632:	d204      	bcs.n	800b63e <USBH_ParseCfgDesc+0x120>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	885a      	ldrh	r2, [r3, #2]
 800b638:	8afb      	ldrh	r3, [r7, #22]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d8d1      	bhi.n	800b5e2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b63e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b642:	3301      	adds	r3, #1
 800b644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d804      	bhi.n	800b65a <USBH_ParseCfgDesc+0x13c>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	885a      	ldrh	r2, [r3, #2]
 800b654:	8afb      	ldrh	r3, [r7, #22]
 800b656:	429a      	cmp	r2, r3
 800b658:	d8a4      	bhi.n	800b5a4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b65a:	bf00      	nop
 800b65c:	3728      	adds	r7, #40	; 0x28
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b662:	b480      	push	{r7}
 800b664:	b083      	sub	sp, #12
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	781a      	ldrb	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	785a      	ldrb	r2, [r3, #1]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	789a      	ldrb	r2, [r3, #2]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	78da      	ldrb	r2, [r3, #3]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	791a      	ldrb	r2, [r3, #4]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	795a      	ldrb	r2, [r3, #5]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	799a      	ldrb	r2, [r3, #6]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	79da      	ldrb	r2, [r3, #7]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	7a1a      	ldrb	r2, [r3, #8]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	721a      	strb	r2, [r3, #8]
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	781a      	ldrb	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	785a      	ldrb	r2, [r3, #1]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	789a      	ldrb	r2, [r3, #2]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	78da      	ldrb	r2, [r3, #3]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	3305      	adds	r3, #5
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	021b      	lsls	r3, r3, #8
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	4313      	orrs	r3, r2
 800b700:	b29a      	uxth	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	799a      	ldrb	r2, [r3, #6]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	719a      	strb	r2, [r3, #6]
}
 800b70e:	bf00      	nop
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b087      	sub	sp, #28
 800b71e:	af00      	add	r7, sp, #0
 800b720:	60f8      	str	r0, [r7, #12]
 800b722:	60b9      	str	r1, [r7, #8]
 800b724:	4613      	mov	r3, r2
 800b726:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	3301      	adds	r3, #1
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	2b03      	cmp	r3, #3
 800b730:	d120      	bne.n	800b774 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	1e9a      	subs	r2, r3, #2
 800b738:	88fb      	ldrh	r3, [r7, #6]
 800b73a:	4293      	cmp	r3, r2
 800b73c:	bf28      	it	cs
 800b73e:	4613      	movcs	r3, r2
 800b740:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	3302      	adds	r3, #2
 800b746:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b748:	2300      	movs	r3, #0
 800b74a:	82fb      	strh	r3, [r7, #22]
 800b74c:	e00b      	b.n	800b766 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b74e:	8afb      	ldrh	r3, [r7, #22]
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	4413      	add	r3, r2
 800b754:	781a      	ldrb	r2, [r3, #0]
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	3301      	adds	r3, #1
 800b75e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b760:	8afb      	ldrh	r3, [r7, #22]
 800b762:	3302      	adds	r3, #2
 800b764:	82fb      	strh	r3, [r7, #22]
 800b766:	8afa      	ldrh	r2, [r7, #22]
 800b768:	8abb      	ldrh	r3, [r7, #20]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d3ef      	bcc.n	800b74e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2200      	movs	r2, #0
 800b772:	701a      	strb	r2, [r3, #0]
  }
}
 800b774:	bf00      	nop
 800b776:	371c      	adds	r7, #28
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	881a      	ldrh	r2, [r3, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	b29b      	uxth	r3, r3
 800b794:	4413      	add	r3, r2
 800b796:	b29a      	uxth	r2, r3
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b086      	sub	sp, #24
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	60f8      	str	r0, [r7, #12]
 800b7be:	60b9      	str	r1, [r7, #8]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	789b      	ldrb	r3, [r3, #2]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d002      	beq.n	800b7d6 <USBH_CtlReq+0x20>
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d01d      	beq.n	800b810 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b7d4:	e043      	b.n	800b85e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	88fa      	ldrh	r2, [r7, #6]
 800b7e0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2203      	movs	r2, #3
 800b7f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b806:	2300      	movs	r3, #0
 800b808:	2200      	movs	r2, #0
 800b80a:	f000 fd55 	bl	800c2b8 <osMessageQueuePut>
      break;
 800b80e:	e026      	b.n	800b85e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 f829 	bl	800b868 <USBH_HandleControl>
 800b816:	4603      	mov	r3, r0
 800b818:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <USBH_CtlReq+0x70>
 800b820:	7dfb      	ldrb	r3, [r7, #23]
 800b822:	2b03      	cmp	r3, #3
 800b824:	d106      	bne.n	800b834 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2201      	movs	r2, #1
 800b82a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	761a      	strb	r2, [r3, #24]
 800b832:	e005      	b.n	800b840 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b834:	7dfb      	ldrb	r3, [r7, #23]
 800b836:	2b02      	cmp	r3, #2
 800b838:	d102      	bne.n	800b840 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2201      	movs	r2, #1
 800b83e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2203      	movs	r2, #3
 800b844:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b854:	2300      	movs	r3, #0
 800b856:	2200      	movs	r2, #0
 800b858:	f000 fd2e 	bl	800c2b8 <osMessageQueuePut>
      break;
 800b85c:	bf00      	nop
  }
  return status;
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af02      	add	r7, sp, #8
 800b86e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b870:	2301      	movs	r3, #1
 800b872:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b874:	2300      	movs	r3, #0
 800b876:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	7e1b      	ldrb	r3, [r3, #24]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	2b0a      	cmp	r3, #10
 800b880:	f200 8229 	bhi.w	800bcd6 <USBH_HandleControl+0x46e>
 800b884:	a201      	add	r2, pc, #4	; (adr r2, 800b88c <USBH_HandleControl+0x24>)
 800b886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88a:	bf00      	nop
 800b88c:	0800b8b9 	.word	0x0800b8b9
 800b890:	0800b8d3 	.word	0x0800b8d3
 800b894:	0800b975 	.word	0x0800b975
 800b898:	0800b99b 	.word	0x0800b99b
 800b89c:	0800ba27 	.word	0x0800ba27
 800b8a0:	0800ba51 	.word	0x0800ba51
 800b8a4:	0800bb13 	.word	0x0800bb13
 800b8a8:	0800bb35 	.word	0x0800bb35
 800b8ac:	0800bbc7 	.word	0x0800bbc7
 800b8b0:	0800bbed 	.word	0x0800bbed
 800b8b4:	0800bc7f 	.word	0x0800bc7f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f103 0110 	add.w	r1, r3, #16
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	795b      	ldrb	r3, [r3, #5]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fa17 	bl	800bcf8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2202      	movs	r2, #2
 800b8ce:	761a      	strb	r2, [r3, #24]
      break;
 800b8d0:	e20c      	b.n	800bcec <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	795b      	ldrb	r3, [r3, #5]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f003 fd83 	bl	800f3e4 <USBH_LL_GetURBState>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b8e2:	7bbb      	ldrb	r3, [r7, #14]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d12c      	bne.n	800b942 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	7c1b      	ldrb	r3, [r3, #16]
 800b8ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b8f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	8adb      	ldrh	r3, [r3, #22]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b8fa:	7b7b      	ldrb	r3, [r7, #13]
 800b8fc:	2b80      	cmp	r3, #128	; 0x80
 800b8fe:	d103      	bne.n	800b908 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2203      	movs	r2, #3
 800b904:	761a      	strb	r2, [r3, #24]
 800b906:	e00d      	b.n	800b924 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2205      	movs	r2, #5
 800b90c:	761a      	strb	r2, [r3, #24]
 800b90e:	e009      	b.n	800b924 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b910:	7b7b      	ldrb	r3, [r7, #13]
 800b912:	2b80      	cmp	r3, #128	; 0x80
 800b914:	d103      	bne.n	800b91e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2209      	movs	r2, #9
 800b91a:	761a      	strb	r2, [r3, #24]
 800b91c:	e002      	b.n	800b924 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2207      	movs	r2, #7
 800b922:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2203      	movs	r2, #3
 800b928:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b938:	2300      	movs	r3, #0
 800b93a:	2200      	movs	r2, #0
 800b93c:	f000 fcbc 	bl	800c2b8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b940:	e1cb      	b.n	800bcda <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b942:	7bbb      	ldrb	r3, [r7, #14]
 800b944:	2b04      	cmp	r3, #4
 800b946:	d003      	beq.n	800b950 <USBH_HandleControl+0xe8>
 800b948:	7bbb      	ldrb	r3, [r7, #14]
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	f040 81c5 	bne.w	800bcda <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	220b      	movs	r2, #11
 800b954:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2203      	movs	r2, #3
 800b95a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b96a:	2300      	movs	r3, #0
 800b96c:	2200      	movs	r2, #0
 800b96e:	f000 fca3 	bl	800c2b8 <osMessageQueuePut>
      break;
 800b972:	e1b2      	b.n	800bcda <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6899      	ldr	r1, [r3, #8]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	899a      	ldrh	r2, [r3, #12]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	791b      	ldrb	r3, [r3, #4]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f9f2 	bl	800bd76 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2204      	movs	r2, #4
 800b996:	761a      	strb	r2, [r3, #24]
      break;
 800b998:	e1a8      	b.n	800bcec <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	791b      	ldrb	r3, [r3, #4]
 800b99e:	4619      	mov	r1, r3
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f003 fd1f 	bl	800f3e4 <USBH_LL_GetURBState>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b9aa:	7bbb      	ldrb	r3, [r7, #14]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d110      	bne.n	800b9d2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2209      	movs	r2, #9
 800b9b4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2203      	movs	r2, #3
 800b9ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f000 fc73 	bl	800c2b8 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b9d2:	7bbb      	ldrb	r3, [r7, #14]
 800b9d4:	2b05      	cmp	r3, #5
 800b9d6:	d110      	bne.n	800b9fa <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2203      	movs	r2, #3
 800b9e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f000 fc60 	bl	800c2b8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9f8:	e171      	b.n	800bcde <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
 800b9fc:	2b04      	cmp	r3, #4
 800b9fe:	f040 816e 	bne.w	800bcde <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	220b      	movs	r2, #11
 800ba06:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2203      	movs	r2, #3
 800ba0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f000 fc4a 	bl	800c2b8 <osMessageQueuePut>
      break;
 800ba24:	e15b      	b.n	800bcde <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6899      	ldr	r1, [r3, #8]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	899a      	ldrh	r2, [r3, #12]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	795b      	ldrb	r3, [r3, #5]
 800ba32:	2001      	movs	r0, #1
 800ba34:	9000      	str	r0, [sp, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f978 	bl	800bd2c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2206      	movs	r2, #6
 800ba4c:	761a      	strb	r2, [r3, #24]
      break;
 800ba4e:	e14d      	b.n	800bcec <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	795b      	ldrb	r3, [r3, #5]
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f003 fcc4 	bl	800f3e4 <USBH_LL_GetURBState>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d111      	bne.n	800ba8a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2207      	movs	r2, #7
 800ba6a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2203      	movs	r2, #3
 800ba70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba80:	2300      	movs	r3, #0
 800ba82:	2200      	movs	r2, #0
 800ba84:	f000 fc18 	bl	800c2b8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba88:	e12b      	b.n	800bce2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800ba8a:	7bbb      	ldrb	r3, [r7, #14]
 800ba8c:	2b05      	cmp	r3, #5
 800ba8e:	d113      	bne.n	800bab8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	220c      	movs	r2, #12
 800ba94:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ba96:	2303      	movs	r3, #3
 800ba98:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2203      	movs	r2, #3
 800ba9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800baae:	2300      	movs	r3, #0
 800bab0:	2200      	movs	r2, #0
 800bab2:	f000 fc01 	bl	800c2b8 <osMessageQueuePut>
      break;
 800bab6:	e114      	b.n	800bce2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bab8:	7bbb      	ldrb	r3, [r7, #14]
 800baba:	2b02      	cmp	r3, #2
 800babc:	d111      	bne.n	800bae2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2205      	movs	r2, #5
 800bac2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2203      	movs	r2, #3
 800bac8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bad8:	2300      	movs	r3, #0
 800bada:	2200      	movs	r2, #0
 800badc:	f000 fbec 	bl	800c2b8 <osMessageQueuePut>
      break;
 800bae0:	e0ff      	b.n	800bce2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	f040 80fc 	bne.w	800bce2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	220b      	movs	r2, #11
 800baee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800baf0:	2302      	movs	r3, #2
 800baf2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2203      	movs	r2, #3
 800baf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb08:	2300      	movs	r3, #0
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f000 fbd4 	bl	800c2b8 <osMessageQueuePut>
      break;
 800bb10:	e0e7      	b.n	800bce2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	791b      	ldrb	r3, [r3, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f92b 	bl	800bd76 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2208      	movs	r2, #8
 800bb30:	761a      	strb	r2, [r3, #24]

      break;
 800bb32:	e0db      	b.n	800bcec <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	791b      	ldrb	r3, [r3, #4]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f003 fc52 	bl	800f3e4 <USBH_LL_GetURBState>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bb44:	7bbb      	ldrb	r3, [r7, #14]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d113      	bne.n	800bb72 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	220d      	movs	r2, #13
 800bb4e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2203      	movs	r2, #3
 800bb58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb68:	2300      	movs	r3, #0
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f000 fba4 	bl	800c2b8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb70:	e0b9      	b.n	800bce6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
 800bb74:	2b04      	cmp	r3, #4
 800bb76:	d111      	bne.n	800bb9c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	220b      	movs	r2, #11
 800bb7c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2203      	movs	r2, #3
 800bb82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb92:	2300      	movs	r3, #0
 800bb94:	2200      	movs	r2, #0
 800bb96:	f000 fb8f 	bl	800c2b8 <osMessageQueuePut>
      break;
 800bb9a:	e0a4      	b.n	800bce6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800bb9c:	7bbb      	ldrb	r3, [r7, #14]
 800bb9e:	2b05      	cmp	r3, #5
 800bba0:	f040 80a1 	bne.w	800bce6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800bba4:	2303      	movs	r3, #3
 800bba6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2203      	movs	r2, #3
 800bbac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f000 fb7a 	bl	800c2b8 <osMessageQueuePut>
      break;
 800bbc4:	e08f      	b.n	800bce6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	795b      	ldrb	r3, [r3, #5]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	9200      	str	r2, [sp, #0]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f8aa 	bl	800bd2c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	220a      	movs	r2, #10
 800bbe8:	761a      	strb	r2, [r3, #24]
      break;
 800bbea:	e07f      	b.n	800bcec <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	795b      	ldrb	r3, [r3, #5]
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f003 fbf6 	bl	800f3e4 <USBH_LL_GetURBState>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bbfc:	7bbb      	ldrb	r3, [r7, #14]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d113      	bne.n	800bc2a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	220d      	movs	r2, #13
 800bc0a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2203      	movs	r2, #3
 800bc10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc20:	2300      	movs	r3, #0
 800bc22:	2200      	movs	r2, #0
 800bc24:	f000 fb48 	bl	800c2b8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bc28:	e05f      	b.n	800bcea <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc2a:	7bbb      	ldrb	r3, [r7, #14]
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d111      	bne.n	800bc54 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2209      	movs	r2, #9
 800bc34:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2203      	movs	r2, #3
 800bc3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f000 fb33 	bl	800c2b8 <osMessageQueuePut>
      break;
 800bc52:	e04a      	b.n	800bcea <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	2b04      	cmp	r3, #4
 800bc58:	d147      	bne.n	800bcea <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	220b      	movs	r2, #11
 800bc5e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2203      	movs	r2, #3
 800bc64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc74:	2300      	movs	r3, #0
 800bc76:	2200      	movs	r2, #0
 800bc78:	f000 fb1e 	bl	800c2b8 <osMessageQueuePut>
      break;
 800bc7c:	e035      	b.n	800bcea <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	7e5b      	ldrb	r3, [r3, #25]
 800bc82:	3301      	adds	r3, #1
 800bc84:	b2da      	uxtb	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	765a      	strb	r2, [r3, #25]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	7e5b      	ldrb	r3, [r3, #25]
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d806      	bhi.n	800bca0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2201      	movs	r2, #1
 800bc96:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bc9e:	e025      	b.n	800bcec <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bca6:	2106      	movs	r1, #6
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	795b      	ldrb	r3, [r3, #5]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 f90d 	bl	800bed8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	791b      	ldrb	r3, [r3, #4]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 f907 	bl	800bed8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	73fb      	strb	r3, [r7, #15]
      break;
 800bcd4:	e00a      	b.n	800bcec <USBH_HandleControl+0x484>

    default:
      break;
 800bcd6:	bf00      	nop
 800bcd8:	e008      	b.n	800bcec <USBH_HandleControl+0x484>
      break;
 800bcda:	bf00      	nop
 800bcdc:	e006      	b.n	800bcec <USBH_HandleControl+0x484>
      break;
 800bcde:	bf00      	nop
 800bce0:	e004      	b.n	800bcec <USBH_HandleControl+0x484>
      break;
 800bce2:	bf00      	nop
 800bce4:	e002      	b.n	800bcec <USBH_HandleControl+0x484>
      break;
 800bce6:	bf00      	nop
 800bce8:	e000      	b.n	800bcec <USBH_HandleControl+0x484>
      break;
 800bcea:	bf00      	nop
  }

  return status;
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop

0800bcf8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b088      	sub	sp, #32
 800bcfc:	af04      	add	r7, sp, #16
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	4613      	mov	r3, r2
 800bd04:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd06:	79f9      	ldrb	r1, [r7, #7]
 800bd08:	2300      	movs	r3, #0
 800bd0a:	9303      	str	r3, [sp, #12]
 800bd0c:	2308      	movs	r3, #8
 800bd0e:	9302      	str	r3, [sp, #8]
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	9301      	str	r3, [sp, #4]
 800bd14:	2300      	movs	r3, #0
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	2300      	movs	r3, #0
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f003 fb30 	bl	800f382 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b088      	sub	sp, #32
 800bd30:	af04      	add	r7, sp, #16
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4611      	mov	r1, r2
 800bd38:	461a      	mov	r2, r3
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	80fb      	strh	r3, [r7, #6]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd50:	7979      	ldrb	r1, [r7, #5]
 800bd52:	7e3b      	ldrb	r3, [r7, #24]
 800bd54:	9303      	str	r3, [sp, #12]
 800bd56:	88fb      	ldrh	r3, [r7, #6]
 800bd58:	9302      	str	r3, [sp, #8]
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	9301      	str	r3, [sp, #4]
 800bd5e:	2301      	movs	r3, #1
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	2300      	movs	r3, #0
 800bd64:	2200      	movs	r2, #0
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f003 fb0b 	bl	800f382 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b088      	sub	sp, #32
 800bd7a:	af04      	add	r7, sp, #16
 800bd7c:	60f8      	str	r0, [r7, #12]
 800bd7e:	60b9      	str	r1, [r7, #8]
 800bd80:	4611      	mov	r1, r2
 800bd82:	461a      	mov	r2, r3
 800bd84:	460b      	mov	r3, r1
 800bd86:	80fb      	strh	r3, [r7, #6]
 800bd88:	4613      	mov	r3, r2
 800bd8a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd8c:	7979      	ldrb	r1, [r7, #5]
 800bd8e:	2300      	movs	r3, #0
 800bd90:	9303      	str	r3, [sp, #12]
 800bd92:	88fb      	ldrh	r3, [r7, #6]
 800bd94:	9302      	str	r3, [sp, #8]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	2201      	movs	r2, #1
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f003 faed 	bl	800f382 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bda8:	2300      	movs	r3, #0

}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b088      	sub	sp, #32
 800bdb6:	af04      	add	r7, sp, #16
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	60b9      	str	r1, [r7, #8]
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	80fb      	strh	r3, [r7, #6]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bdd6:	7979      	ldrb	r1, [r7, #5]
 800bdd8:	7e3b      	ldrb	r3, [r7, #24]
 800bdda:	9303      	str	r3, [sp, #12]
 800bddc:	88fb      	ldrh	r3, [r7, #6]
 800bdde:	9302      	str	r3, [sp, #8]
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	9301      	str	r3, [sp, #4]
 800bde4:	2301      	movs	r3, #1
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	2302      	movs	r3, #2
 800bdea:	2200      	movs	r2, #0
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f003 fac8 	bl	800f382 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b088      	sub	sp, #32
 800be00:	af04      	add	r7, sp, #16
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	4611      	mov	r1, r2
 800be08:	461a      	mov	r2, r3
 800be0a:	460b      	mov	r3, r1
 800be0c:	80fb      	strh	r3, [r7, #6]
 800be0e:	4613      	mov	r3, r2
 800be10:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800be12:	7979      	ldrb	r1, [r7, #5]
 800be14:	2300      	movs	r3, #0
 800be16:	9303      	str	r3, [sp, #12]
 800be18:	88fb      	ldrh	r3, [r7, #6]
 800be1a:	9302      	str	r3, [sp, #8]
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	9301      	str	r3, [sp, #4]
 800be20:	2301      	movs	r3, #1
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	2302      	movs	r3, #2
 800be26:	2201      	movs	r2, #1
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f003 faaa 	bl	800f382 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af04      	add	r7, sp, #16
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	4608      	mov	r0, r1
 800be42:	4611      	mov	r1, r2
 800be44:	461a      	mov	r2, r3
 800be46:	4603      	mov	r3, r0
 800be48:	70fb      	strb	r3, [r7, #3]
 800be4a:	460b      	mov	r3, r1
 800be4c:	70bb      	strb	r3, [r7, #2]
 800be4e:	4613      	mov	r3, r2
 800be50:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800be52:	7878      	ldrb	r0, [r7, #1]
 800be54:	78ba      	ldrb	r2, [r7, #2]
 800be56:	78f9      	ldrb	r1, [r7, #3]
 800be58:	8b3b      	ldrh	r3, [r7, #24]
 800be5a:	9302      	str	r3, [sp, #8]
 800be5c:	7d3b      	ldrb	r3, [r7, #20]
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	7c3b      	ldrb	r3, [r7, #16]
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	4603      	mov	r3, r0
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f003 fa3d 	bl	800f2e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	460b      	mov	r3, r1
 800be80:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800be82:	78fb      	ldrb	r3, [r7, #3]
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f003 fa5c 	bl	800f344 <USBH_LL_ClosePipe>

  return USBH_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	460b      	mov	r3, r1
 800bea0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f836 	bl	800bf14 <USBH_GetFreePipe>
 800bea8:	4603      	mov	r3, r0
 800beaa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800beac:	89fb      	ldrh	r3, [r7, #14]
 800beae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d00a      	beq.n	800becc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800beb6:	78fa      	ldrb	r2, [r7, #3]
 800beb8:	89fb      	ldrh	r3, [r7, #14]
 800beba:	f003 030f 	and.w	r3, r3, #15
 800bebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	33e0      	adds	r3, #224	; 0xe0
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	440b      	add	r3, r1
 800beca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800becc:	89fb      	ldrh	r3, [r7, #14]
 800bece:	b2db      	uxtb	r3, r3
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	460b      	mov	r3, r1
 800bee2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bee4:	78fb      	ldrb	r3, [r7, #3]
 800bee6:	2b0a      	cmp	r3, #10
 800bee8:	d80d      	bhi.n	800bf06 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800beea:	78fb      	ldrb	r3, [r7, #3]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	33e0      	adds	r3, #224	; 0xe0
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	4413      	add	r3, r2
 800bef4:	685a      	ldr	r2, [r3, #4]
 800bef6:	78fb      	ldrb	r3, [r7, #3]
 800bef8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800befc:	6879      	ldr	r1, [r7, #4]
 800befe:	33e0      	adds	r3, #224	; 0xe0
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	440b      	add	r3, r1
 800bf04:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]
 800bf24:	e00f      	b.n	800bf46 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	33e0      	adds	r3, #224	; 0xe0
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4413      	add	r3, r2
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d102      	bne.n	800bf40 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bf3a:	7bfb      	ldrb	r3, [r7, #15]
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	e007      	b.n	800bf50 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bf40:	7bfb      	ldrb	r3, [r7, #15]
 800bf42:	3301      	adds	r3, #1
 800bf44:	73fb      	strb	r3, [r7, #15]
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
 800bf48:	2b0a      	cmp	r3, #10
 800bf4a:	d9ec      	bls.n	800bf26 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bf4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <__NVIC_SetPriority>:
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	6039      	str	r1, [r7, #0]
 800bf66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	db0a      	blt.n	800bf86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	b2da      	uxtb	r2, r3
 800bf74:	490c      	ldr	r1, [pc, #48]	; (800bfa8 <__NVIC_SetPriority+0x4c>)
 800bf76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf7a:	0112      	lsls	r2, r2, #4
 800bf7c:	b2d2      	uxtb	r2, r2
 800bf7e:	440b      	add	r3, r1
 800bf80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bf84:	e00a      	b.n	800bf9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	4908      	ldr	r1, [pc, #32]	; (800bfac <__NVIC_SetPriority+0x50>)
 800bf8c:	79fb      	ldrb	r3, [r7, #7]
 800bf8e:	f003 030f 	and.w	r3, r3, #15
 800bf92:	3b04      	subs	r3, #4
 800bf94:	0112      	lsls	r2, r2, #4
 800bf96:	b2d2      	uxtb	r2, r2
 800bf98:	440b      	add	r3, r1
 800bf9a:	761a      	strb	r2, [r3, #24]
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr
 800bfa8:	e000e100 	.word	0xe000e100
 800bfac:	e000ed00 	.word	0xe000ed00

0800bfb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bfb4:	4b05      	ldr	r3, [pc, #20]	; (800bfcc <SysTick_Handler+0x1c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bfb8:	f001 ff5a 	bl	800de70 <xTaskGetSchedulerState>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d001      	beq.n	800bfc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bfc2:	f002 fd41 	bl	800ea48 <xPortSysTickHandler>
  }
}
 800bfc6:	bf00      	nop
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	e000e010 	.word	0xe000e010

0800bfd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	f06f 0004 	mvn.w	r0, #4
 800bfda:	f7ff ffbf 	bl	800bf5c <__NVIC_SetPriority>
#endif
}
 800bfde:	bf00      	nop
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfea:	f3ef 8305 	mrs	r3, IPSR
 800bfee:	603b      	str	r3, [r7, #0]
  return(result);
 800bff0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bff6:	f06f 0305 	mvn.w	r3, #5
 800bffa:	607b      	str	r3, [r7, #4]
 800bffc:	e00c      	b.n	800c018 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bffe:	4b0a      	ldr	r3, [pc, #40]	; (800c028 <osKernelInitialize+0x44>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d105      	bne.n	800c012 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c006:	4b08      	ldr	r3, [pc, #32]	; (800c028 <osKernelInitialize+0x44>)
 800c008:	2201      	movs	r2, #1
 800c00a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c00c:	2300      	movs	r3, #0
 800c00e:	607b      	str	r3, [r7, #4]
 800c010:	e002      	b.n	800c018 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c016:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c018:	687b      	ldr	r3, [r7, #4]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	200004c0 	.word	0x200004c0

0800c02c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c032:	f3ef 8305 	mrs	r3, IPSR
 800c036:	603b      	str	r3, [r7, #0]
  return(result);
 800c038:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d003      	beq.n	800c046 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c03e:	f06f 0305 	mvn.w	r3, #5
 800c042:	607b      	str	r3, [r7, #4]
 800c044:	e010      	b.n	800c068 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c046:	4b0b      	ldr	r3, [pc, #44]	; (800c074 <osKernelStart+0x48>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d109      	bne.n	800c062 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c04e:	f7ff ffbf 	bl	800bfd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c052:	4b08      	ldr	r3, [pc, #32]	; (800c074 <osKernelStart+0x48>)
 800c054:	2202      	movs	r2, #2
 800c056:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c058:	f001 fac2 	bl	800d5e0 <vTaskStartScheduler>
      stat = osOK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	607b      	str	r3, [r7, #4]
 800c060:	e002      	b.n	800c068 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c066:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c068:	687b      	ldr	r3, [r7, #4]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	200004c0 	.word	0x200004c0

0800c078 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08e      	sub	sp, #56	; 0x38
 800c07c:	af04      	add	r7, sp, #16
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c084:	2300      	movs	r3, #0
 800c086:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c088:	f3ef 8305 	mrs	r3, IPSR
 800c08c:	617b      	str	r3, [r7, #20]
  return(result);
 800c08e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c090:	2b00      	cmp	r3, #0
 800c092:	d17e      	bne.n	800c192 <osThreadNew+0x11a>
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d07b      	beq.n	800c192 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c09a:	2380      	movs	r3, #128	; 0x80
 800c09c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c09e:	2318      	movs	r3, #24
 800c0a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c0a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d045      	beq.n	800c13e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d002      	beq.n	800c0c0 <osThreadNew+0x48>
        name = attr->name;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	699b      	ldr	r3, [r3, #24]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	699b      	ldr	r3, [r3, #24]
 800c0cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d008      	beq.n	800c0e6 <osThreadNew+0x6e>
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	2b38      	cmp	r3, #56	; 0x38
 800c0d8:	d805      	bhi.n	800c0e6 <osThreadNew+0x6e>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d001      	beq.n	800c0ea <osThreadNew+0x72>
        return (NULL);
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e054      	b.n	800c194 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	089b      	lsrs	r3, r3, #2
 800c0f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00e      	beq.n	800c120 <osThreadNew+0xa8>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	2b5b      	cmp	r3, #91	; 0x5b
 800c108:	d90a      	bls.n	800c120 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d006      	beq.n	800c120 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <osThreadNew+0xa8>
        mem = 1;
 800c11a:	2301      	movs	r3, #1
 800c11c:	61bb      	str	r3, [r7, #24]
 800c11e:	e010      	b.n	800c142 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10c      	bne.n	800c142 <osThreadNew+0xca>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d108      	bne.n	800c142 <osThreadNew+0xca>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d104      	bne.n	800c142 <osThreadNew+0xca>
          mem = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	61bb      	str	r3, [r7, #24]
 800c13c:	e001      	b.n	800c142 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d110      	bne.n	800c16a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c150:	9202      	str	r2, [sp, #8]
 800c152:	9301      	str	r3, [sp, #4]
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	9300      	str	r3, [sp, #0]
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	6a3a      	ldr	r2, [r7, #32]
 800c15c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f000 fff6 	bl	800d150 <xTaskCreateStatic>
 800c164:	4603      	mov	r3, r0
 800c166:	613b      	str	r3, [r7, #16]
 800c168:	e013      	b.n	800c192 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d110      	bne.n	800c192 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	b29a      	uxth	r2, r3
 800c174:	f107 0310 	add.w	r3, r7, #16
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f001 f841 	bl	800d20a <xTaskCreate>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d001      	beq.n	800c192 <osThreadNew+0x11a>
            hTask = NULL;
 800c18e:	2300      	movs	r3, #0
 800c190:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c192:	693b      	ldr	r3, [r7, #16]
}
 800c194:	4618      	mov	r0, r3
 800c196:	3728      	adds	r7, #40	; 0x28
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1a4:	f3ef 8305 	mrs	r3, IPSR
 800c1a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c1aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d003      	beq.n	800c1b8 <osDelay+0x1c>
    stat = osErrorISR;
 800c1b0:	f06f 0305 	mvn.w	r3, #5
 800c1b4:	60fb      	str	r3, [r7, #12]
 800c1b6:	e007      	b.n	800c1c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d002      	beq.n	800c1c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f001 f9d8 	bl	800d578 <vTaskDelay>
    }
  }

  return (stat);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b08a      	sub	sp, #40	; 0x28
 800c1d6:	af02      	add	r7, sp, #8
 800c1d8:	60f8      	str	r0, [r7, #12]
 800c1da:	60b9      	str	r1, [r7, #8]
 800c1dc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1e2:	f3ef 8305 	mrs	r3, IPSR
 800c1e6:	613b      	str	r3, [r7, #16]
  return(result);
 800c1e8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d15f      	bne.n	800c2ae <osMessageQueueNew+0xdc>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d05c      	beq.n	800c2ae <osMessageQueueNew+0xdc>
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d059      	beq.n	800c2ae <osMessageQueueNew+0xdc>
    mem = -1;
 800c1fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d029      	beq.n	800c25a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d012      	beq.n	800c234 <osMessageQueueNew+0x62>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	2b4f      	cmp	r3, #79	; 0x4f
 800c214:	d90e      	bls.n	800c234 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00a      	beq.n	800c234 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	695a      	ldr	r2, [r3, #20]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	68b9      	ldr	r1, [r7, #8]
 800c226:	fb01 f303 	mul.w	r3, r1, r3
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d302      	bcc.n	800c234 <osMessageQueueNew+0x62>
        mem = 1;
 800c22e:	2301      	movs	r3, #1
 800c230:	61bb      	str	r3, [r7, #24]
 800c232:	e014      	b.n	800c25e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d110      	bne.n	800c25e <osMessageQueueNew+0x8c>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10c      	bne.n	800c25e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d108      	bne.n	800c25e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	695b      	ldr	r3, [r3, #20]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d104      	bne.n	800c25e <osMessageQueueNew+0x8c>
          mem = 0;
 800c254:	2300      	movs	r3, #0
 800c256:	61bb      	str	r3, [r7, #24]
 800c258:	e001      	b.n	800c25e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d10b      	bne.n	800c27c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	691a      	ldr	r2, [r3, #16]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	2100      	movs	r1, #0
 800c26e:	9100      	str	r1, [sp, #0]
 800c270:	68b9      	ldr	r1, [r7, #8]
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f000 fa2e 	bl	800c6d4 <xQueueGenericCreateStatic>
 800c278:	61f8      	str	r0, [r7, #28]
 800c27a:	e008      	b.n	800c28e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d105      	bne.n	800c28e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c282:	2200      	movs	r2, #0
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f000 fa9c 	bl	800c7c4 <xQueueGenericCreate>
 800c28c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d00c      	beq.n	800c2ae <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d003      	beq.n	800c2a2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	617b      	str	r3, [r7, #20]
 800c2a0:	e001      	b.n	800c2a6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c2a6:	6979      	ldr	r1, [r7, #20]
 800c2a8:	69f8      	ldr	r0, [r7, #28]
 800c2aa:	f000 fef3 	bl	800d094 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c2ae:	69fb      	ldr	r3, [r7, #28]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3720      	adds	r7, #32
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b088      	sub	sp, #32
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	603b      	str	r3, [r7, #0]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2d0:	f3ef 8305 	mrs	r3, IPSR
 800c2d4:	617b      	str	r3, [r7, #20]
  return(result);
 800c2d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d028      	beq.n	800c32e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d005      	beq.n	800c2ee <osMessageQueuePut+0x36>
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d002      	beq.n	800c2ee <osMessageQueuePut+0x36>
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c2ee:	f06f 0303 	mvn.w	r3, #3
 800c2f2:	61fb      	str	r3, [r7, #28]
 800c2f4:	e038      	b.n	800c368 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c2fa:	f107 0210 	add.w	r2, r7, #16
 800c2fe:	2300      	movs	r3, #0
 800c300:	68b9      	ldr	r1, [r7, #8]
 800c302:	69b8      	ldr	r0, [r7, #24]
 800c304:	f000 fbba 	bl	800ca7c <xQueueGenericSendFromISR>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d003      	beq.n	800c316 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c30e:	f06f 0302 	mvn.w	r3, #2
 800c312:	61fb      	str	r3, [r7, #28]
 800c314:	e028      	b.n	800c368 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d025      	beq.n	800c368 <osMessageQueuePut+0xb0>
 800c31c:	4b15      	ldr	r3, [pc, #84]	; (800c374 <osMessageQueuePut+0xbc>)
 800c31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c322:	601a      	str	r2, [r3, #0]
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	e01c      	b.n	800c368 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d002      	beq.n	800c33a <osMessageQueuePut+0x82>
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d103      	bne.n	800c342 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c33a:	f06f 0303 	mvn.w	r3, #3
 800c33e:	61fb      	str	r3, [r7, #28]
 800c340:	e012      	b.n	800c368 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c342:	2300      	movs	r3, #0
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	68b9      	ldr	r1, [r7, #8]
 800c348:	69b8      	ldr	r0, [r7, #24]
 800c34a:	f000 fa99 	bl	800c880 <xQueueGenericSend>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b01      	cmp	r3, #1
 800c352:	d009      	beq.n	800c368 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d003      	beq.n	800c362 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c35a:	f06f 0301 	mvn.w	r3, #1
 800c35e:	61fb      	str	r3, [r7, #28]
 800c360:	e002      	b.n	800c368 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c362:	f06f 0302 	mvn.w	r3, #2
 800c366:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c368:	69fb      	ldr	r3, [r7, #28]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3720      	adds	r7, #32
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	e000ed04 	.word	0xe000ed04

0800c378 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c378:	b580      	push	{r7, lr}
 800c37a:	b088      	sub	sp, #32
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c38e:	f3ef 8305 	mrs	r3, IPSR
 800c392:	617b      	str	r3, [r7, #20]
  return(result);
 800c394:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c396:	2b00      	cmp	r3, #0
 800c398:	d028      	beq.n	800c3ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d005      	beq.n	800c3ac <osMessageQueueGet+0x34>
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d002      	beq.n	800c3ac <osMessageQueueGet+0x34>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d003      	beq.n	800c3b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c3ac:	f06f 0303 	mvn.w	r3, #3
 800c3b0:	61fb      	str	r3, [r7, #28]
 800c3b2:	e037      	b.n	800c424 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c3b8:	f107 0310 	add.w	r3, r7, #16
 800c3bc:	461a      	mov	r2, r3
 800c3be:	68b9      	ldr	r1, [r7, #8]
 800c3c0:	69b8      	ldr	r0, [r7, #24]
 800c3c2:	f000 fcd7 	bl	800cd74 <xQueueReceiveFromISR>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d003      	beq.n	800c3d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c3cc:	f06f 0302 	mvn.w	r3, #2
 800c3d0:	61fb      	str	r3, [r7, #28]
 800c3d2:	e027      	b.n	800c424 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d024      	beq.n	800c424 <osMessageQueueGet+0xac>
 800c3da:	4b15      	ldr	r3, [pc, #84]	; (800c430 <osMessageQueueGet+0xb8>)
 800c3dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e0:	601a      	str	r2, [r3, #0]
 800c3e2:	f3bf 8f4f 	dsb	sy
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	e01b      	b.n	800c424 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d002      	beq.n	800c3f8 <osMessageQueueGet+0x80>
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d103      	bne.n	800c400 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c3f8:	f06f 0303 	mvn.w	r3, #3
 800c3fc:	61fb      	str	r3, [r7, #28]
 800c3fe:	e011      	b.n	800c424 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c400:	683a      	ldr	r2, [r7, #0]
 800c402:	68b9      	ldr	r1, [r7, #8]
 800c404:	69b8      	ldr	r0, [r7, #24]
 800c406:	f000 fbd5 	bl	800cbb4 <xQueueReceive>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d009      	beq.n	800c424 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c416:	f06f 0301 	mvn.w	r3, #1
 800c41a:	61fb      	str	r3, [r7, #28]
 800c41c:	e002      	b.n	800c424 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c41e:	f06f 0302 	mvn.w	r3, #2
 800c422:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c424:	69fb      	ldr	r3, [r7, #28]
}
 800c426:	4618      	mov	r0, r3
 800c428:	3720      	adds	r7, #32
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	e000ed04 	.word	0xe000ed04

0800c434 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c434:	b480      	push	{r7}
 800c436:	b085      	sub	sp, #20
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	4a07      	ldr	r2, [pc, #28]	; (800c460 <vApplicationGetIdleTaskMemory+0x2c>)
 800c444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	4a06      	ldr	r2, [pc, #24]	; (800c464 <vApplicationGetIdleTaskMemory+0x30>)
 800c44a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2280      	movs	r2, #128	; 0x80
 800c450:	601a      	str	r2, [r3, #0]
}
 800c452:	bf00      	nop
 800c454:	3714      	adds	r7, #20
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	200004c4 	.word	0x200004c4
 800c464:	20000520 	.word	0x20000520

0800c468 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	4a07      	ldr	r2, [pc, #28]	; (800c494 <vApplicationGetTimerTaskMemory+0x2c>)
 800c478:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	4a06      	ldr	r2, [pc, #24]	; (800c498 <vApplicationGetTimerTaskMemory+0x30>)
 800c47e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c486:	601a      	str	r2, [r3, #0]
}
 800c488:	bf00      	nop
 800c48a:	3714      	adds	r7, #20
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr
 800c494:	20000720 	.word	0x20000720
 800c498:	2000077c 	.word	0x2000077c

0800c49c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f103 0208 	add.w	r2, r3, #8
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f103 0208 	add.w	r2, r3, #8
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f103 0208 	add.w	r2, r3, #8
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c4ea:	bf00      	nop
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	b085      	sub	sp, #20
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
 800c4fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	689a      	ldr	r2, [r3, #8]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	1c5a      	adds	r2, r3, #1
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	601a      	str	r2, [r3, #0]
}
 800c532:	bf00      	nop
 800c534:	3714      	adds	r7, #20
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c53e:	b480      	push	{r7}
 800c540:	b085      	sub	sp, #20
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c554:	d103      	bne.n	800c55e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	e00c      	b.n	800c578 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	3308      	adds	r3, #8
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	e002      	b.n	800c56c <vListInsert+0x2e>
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	60fb      	str	r3, [r7, #12]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	429a      	cmp	r2, r3
 800c576:	d2f6      	bcs.n	800c566 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	685a      	ldr	r2, [r3, #4]
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	1c5a      	adds	r2, r3, #1
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	601a      	str	r2, [r3, #0]
}
 800c5a4:	bf00      	nop
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	6892      	ldr	r2, [r2, #8]
 800c5c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	6852      	ldr	r2, [r2, #4]
 800c5d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d103      	bne.n	800c5e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	1e5a      	subs	r2, r3, #1
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3714      	adds	r7, #20
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10a      	bne.n	800c62e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c62a:	bf00      	nop
 800c62c:	e7fe      	b.n	800c62c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c62e:	f002 f979 	bl	800e924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c63a:	68f9      	ldr	r1, [r7, #12]
 800c63c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c63e:	fb01 f303 	mul.w	r3, r1, r3
 800c642:	441a      	add	r2, r3
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c65e:	3b01      	subs	r3, #1
 800c660:	68f9      	ldr	r1, [r7, #12]
 800c662:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c664:	fb01 f303 	mul.w	r3, r1, r3
 800c668:	441a      	add	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	22ff      	movs	r2, #255	; 0xff
 800c672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	22ff      	movs	r2, #255	; 0xff
 800c67a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d114      	bne.n	800c6ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d01a      	beq.n	800c6c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	3310      	adds	r3, #16
 800c690:	4618      	mov	r0, r3
 800c692:	f001 fa2f 	bl	800daf4 <xTaskRemoveFromEventList>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d012      	beq.n	800c6c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c69c:	4b0c      	ldr	r3, [pc, #48]	; (800c6d0 <xQueueGenericReset+0xcc>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	e009      	b.n	800c6c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3310      	adds	r3, #16
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7ff fef2 	bl	800c49c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	3324      	adds	r3, #36	; 0x24
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7ff feed 	bl	800c49c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c6c2:	f002 f95f 	bl	800e984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c6c6:	2301      	movs	r3, #1
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	e000ed04 	.word	0xe000ed04

0800c6d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b08e      	sub	sp, #56	; 0x38
 800c6d8:	af02      	add	r7, sp, #8
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
 800c6e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10a      	bne.n	800c71a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c708:	f383 8811 	msr	BASEPRI, r3
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c716:	bf00      	nop
 800c718:	e7fe      	b.n	800c718 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d002      	beq.n	800c726 <xQueueGenericCreateStatic+0x52>
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <xQueueGenericCreateStatic+0x56>
 800c726:	2301      	movs	r3, #1
 800c728:	e000      	b.n	800c72c <xQueueGenericCreateStatic+0x58>
 800c72a:	2300      	movs	r3, #0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10a      	bne.n	800c746 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	623b      	str	r3, [r7, #32]
}
 800c742:	bf00      	nop
 800c744:	e7fe      	b.n	800c744 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d102      	bne.n	800c752 <xQueueGenericCreateStatic+0x7e>
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d101      	bne.n	800c756 <xQueueGenericCreateStatic+0x82>
 800c752:	2301      	movs	r3, #1
 800c754:	e000      	b.n	800c758 <xQueueGenericCreateStatic+0x84>
 800c756:	2300      	movs	r3, #0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10a      	bne.n	800c772 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	61fb      	str	r3, [r7, #28]
}
 800c76e:	bf00      	nop
 800c770:	e7fe      	b.n	800c770 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c772:	2350      	movs	r3, #80	; 0x50
 800c774:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	2b50      	cmp	r3, #80	; 0x50
 800c77a:	d00a      	beq.n	800c792 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	61bb      	str	r3, [r7, #24]
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c792:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00d      	beq.n	800c7ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c7a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f000 f83f 	bl	800c838 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3730      	adds	r7, #48	; 0x30
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b08a      	sub	sp, #40	; 0x28
 800c7c8:	af02      	add	r7, sp, #8
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d10a      	bne.n	800c7ee <xQueueGenericCreate+0x2a>
	__asm volatile
 800c7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7dc:	f383 8811 	msr	BASEPRI, r3
 800c7e0:	f3bf 8f6f 	isb	sy
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	613b      	str	r3, [r7, #16]
}
 800c7ea:	bf00      	nop
 800c7ec:	e7fe      	b.n	800c7ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	fb02 f303 	mul.w	r3, r2, r3
 800c7f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	3350      	adds	r3, #80	; 0x50
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f002 f9b3 	bl	800eb68 <pvPortMalloc>
 800c802:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d011      	beq.n	800c82e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	3350      	adds	r3, #80	; 0x50
 800c812:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c81c:	79fa      	ldrb	r2, [r7, #7]
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	4613      	mov	r3, r2
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	68b9      	ldr	r1, [r7, #8]
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f000 f805 	bl	800c838 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c82e:	69bb      	ldr	r3, [r7, #24]
	}
 800c830:	4618      	mov	r0, r3
 800c832:	3720      	adds	r7, #32
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
 800c844:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d103      	bne.n	800c854 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	69ba      	ldr	r2, [r7, #24]
 800c850:	601a      	str	r2, [r3, #0]
 800c852:	e002      	b.n	800c85a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c866:	2101      	movs	r1, #1
 800c868:	69b8      	ldr	r0, [r7, #24]
 800c86a:	f7ff fecb 	bl	800c604 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	78fa      	ldrb	r2, [r7, #3]
 800c872:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c876:	bf00      	nop
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
	...

0800c880 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b08e      	sub	sp, #56	; 0x38
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
 800c88c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c88e:	2300      	movs	r3, #0
 800c890:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10a      	bne.n	800c8b2 <xQueueGenericSend+0x32>
	__asm volatile
 800c89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a0:	f383 8811 	msr	BASEPRI, r3
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8ae:	bf00      	nop
 800c8b0:	e7fe      	b.n	800c8b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d103      	bne.n	800c8c0 <xQueueGenericSend+0x40>
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <xQueueGenericSend+0x44>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e000      	b.n	800c8c6 <xQueueGenericSend+0x46>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10a      	bne.n	800c8e0 <xQueueGenericSend+0x60>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	d103      	bne.n	800c8ee <xQueueGenericSend+0x6e>
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d101      	bne.n	800c8f2 <xQueueGenericSend+0x72>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e000      	b.n	800c8f4 <xQueueGenericSend+0x74>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10a      	bne.n	800c90e <xQueueGenericSend+0x8e>
	__asm volatile
 800c8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	623b      	str	r3, [r7, #32]
}
 800c90a:	bf00      	nop
 800c90c:	e7fe      	b.n	800c90c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c90e:	f001 faaf 	bl	800de70 <xTaskGetSchedulerState>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d102      	bne.n	800c91e <xQueueGenericSend+0x9e>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <xQueueGenericSend+0xa2>
 800c91e:	2301      	movs	r3, #1
 800c920:	e000      	b.n	800c924 <xQueueGenericSend+0xa4>
 800c922:	2300      	movs	r3, #0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10a      	bne.n	800c93e <xQueueGenericSend+0xbe>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	61fb      	str	r3, [r7, #28]
}
 800c93a:	bf00      	nop
 800c93c:	e7fe      	b.n	800c93c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c93e:	f001 fff1 	bl	800e924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d302      	bcc.n	800c954 <xQueueGenericSend+0xd4>
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	2b02      	cmp	r3, #2
 800c952:	d129      	bne.n	800c9a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c954:	683a      	ldr	r2, [r7, #0]
 800c956:	68b9      	ldr	r1, [r7, #8]
 800c958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c95a:	f000 fa8b 	bl	800ce74 <prvCopyDataToQueue>
 800c95e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c964:	2b00      	cmp	r3, #0
 800c966:	d010      	beq.n	800c98a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96a:	3324      	adds	r3, #36	; 0x24
 800c96c:	4618      	mov	r0, r3
 800c96e:	f001 f8c1 	bl	800daf4 <xTaskRemoveFromEventList>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d013      	beq.n	800c9a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c978:	4b3f      	ldr	r3, [pc, #252]	; (800ca78 <xQueueGenericSend+0x1f8>)
 800c97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c97e:	601a      	str	r2, [r3, #0]
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	e00a      	b.n	800c9a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d007      	beq.n	800c9a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c990:	4b39      	ldr	r3, [pc, #228]	; (800ca78 <xQueueGenericSend+0x1f8>)
 800c992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c996:	601a      	str	r2, [r3, #0]
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c9a0:	f001 fff0 	bl	800e984 <vPortExitCritical>
				return pdPASS;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e063      	b.n	800ca70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d103      	bne.n	800c9b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9ae:	f001 ffe9 	bl	800e984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e05c      	b.n	800ca70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d106      	bne.n	800c9ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9bc:	f107 0314 	add.w	r3, r7, #20
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f001 f8fb 	bl	800dbbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9ca:	f001 ffdb 	bl	800e984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9ce:	f000 fe6d 	bl	800d6ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9d2:	f001 ffa7 	bl	800e924 <vPortEnterCritical>
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9dc:	b25b      	sxtb	r3, r3
 800c9de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9e2:	d103      	bne.n	800c9ec <xQueueGenericSend+0x16c>
 800c9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9f2:	b25b      	sxtb	r3, r3
 800c9f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9f8:	d103      	bne.n	800ca02 <xQueueGenericSend+0x182>
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca02:	f001 ffbf 	bl	800e984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca06:	1d3a      	adds	r2, r7, #4
 800ca08:	f107 0314 	add.w	r3, r7, #20
 800ca0c:	4611      	mov	r1, r2
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f001 f8ea 	bl	800dbe8 <xTaskCheckForTimeOut>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d124      	bne.n	800ca64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ca1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca1c:	f000 fb22 	bl	800d064 <prvIsQueueFull>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d018      	beq.n	800ca58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	3310      	adds	r3, #16
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	4611      	mov	r1, r2
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f001 f810 	bl	800da54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca36:	f000 faad 	bl	800cf94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca3a:	f000 fe45 	bl	800d6c8 <xTaskResumeAll>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f47f af7c 	bne.w	800c93e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ca46:	4b0c      	ldr	r3, [pc, #48]	; (800ca78 <xQueueGenericSend+0x1f8>)
 800ca48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	f3bf 8f4f 	dsb	sy
 800ca52:	f3bf 8f6f 	isb	sy
 800ca56:	e772      	b.n	800c93e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca5a:	f000 fa9b 	bl	800cf94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca5e:	f000 fe33 	bl	800d6c8 <xTaskResumeAll>
 800ca62:	e76c      	b.n	800c93e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ca64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca66:	f000 fa95 	bl	800cf94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca6a:	f000 fe2d 	bl	800d6c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3738      	adds	r7, #56	; 0x38
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	e000ed04 	.word	0xe000ed04

0800ca7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b090      	sub	sp, #64	; 0x40
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
 800ca88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10a      	bne.n	800caaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	f383 8811 	msr	BASEPRI, r3
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800caa6:	bf00      	nop
 800caa8:	e7fe      	b.n	800caa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d103      	bne.n	800cab8 <xQueueGenericSendFromISR+0x3c>
 800cab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d101      	bne.n	800cabc <xQueueGenericSendFromISR+0x40>
 800cab8:	2301      	movs	r3, #1
 800caba:	e000      	b.n	800cabe <xQueueGenericSendFromISR+0x42>
 800cabc:	2300      	movs	r3, #0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d10a      	bne.n	800cad8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac6:	f383 8811 	msr	BASEPRI, r3
 800caca:	f3bf 8f6f 	isb	sy
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cad4:	bf00      	nop
 800cad6:	e7fe      	b.n	800cad6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d103      	bne.n	800cae6 <xQueueGenericSendFromISR+0x6a>
 800cade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d101      	bne.n	800caea <xQueueGenericSendFromISR+0x6e>
 800cae6:	2301      	movs	r3, #1
 800cae8:	e000      	b.n	800caec <xQueueGenericSendFromISR+0x70>
 800caea:	2300      	movs	r3, #0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d10a      	bne.n	800cb06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800caf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf4:	f383 8811 	msr	BASEPRI, r3
 800caf8:	f3bf 8f6f 	isb	sy
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	623b      	str	r3, [r7, #32]
}
 800cb02:	bf00      	nop
 800cb04:	e7fe      	b.n	800cb04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb06:	f001 ffef 	bl	800eae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cb0a:	f3ef 8211 	mrs	r2, BASEPRI
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	61fa      	str	r2, [r7, #28]
 800cb20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cb22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d302      	bcc.n	800cb38 <xQueueGenericSendFromISR+0xbc>
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	d12f      	bne.n	800cb98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb48:	683a      	ldr	r2, [r7, #0]
 800cb4a:	68b9      	ldr	r1, [r7, #8]
 800cb4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb4e:	f000 f991 	bl	800ce74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cb56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb5a:	d112      	bne.n	800cb82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d016      	beq.n	800cb92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb66:	3324      	adds	r3, #36	; 0x24
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 ffc3 	bl	800daf4 <xTaskRemoveFromEventList>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00e      	beq.n	800cb92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00b      	beq.n	800cb92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	601a      	str	r2, [r3, #0]
 800cb80:	e007      	b.n	800cb92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb86:	3301      	adds	r3, #1
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	b25a      	sxtb	r2, r3
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cb92:	2301      	movs	r3, #1
 800cb94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cb96:	e001      	b.n	800cb9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cba6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3740      	adds	r7, #64	; 0x40
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08c      	sub	sp, #48	; 0x30
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d10a      	bne.n	800cbe4 <xQueueReceive+0x30>
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	623b      	str	r3, [r7, #32]
}
 800cbe0:	bf00      	nop
 800cbe2:	e7fe      	b.n	800cbe2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d103      	bne.n	800cbf2 <xQueueReceive+0x3e>
 800cbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <xQueueReceive+0x42>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e000      	b.n	800cbf8 <xQueueReceive+0x44>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10a      	bne.n	800cc12 <xQueueReceive+0x5e>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	61fb      	str	r3, [r7, #28]
}
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc12:	f001 f92d 	bl	800de70 <xTaskGetSchedulerState>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d102      	bne.n	800cc22 <xQueueReceive+0x6e>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d101      	bne.n	800cc26 <xQueueReceive+0x72>
 800cc22:	2301      	movs	r3, #1
 800cc24:	e000      	b.n	800cc28 <xQueueReceive+0x74>
 800cc26:	2300      	movs	r3, #0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10a      	bne.n	800cc42 <xQueueReceive+0x8e>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	61bb      	str	r3, [r7, #24]
}
 800cc3e:	bf00      	nop
 800cc40:	e7fe      	b.n	800cc40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc42:	f001 fe6f 	bl	800e924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d01f      	beq.n	800cc92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cc52:	68b9      	ldr	r1, [r7, #8]
 800cc54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc56:	f000 f977 	bl	800cf48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	1e5a      	subs	r2, r3, #1
 800cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00f      	beq.n	800cc8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6c:	3310      	adds	r3, #16
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 ff40 	bl	800daf4 <xTaskRemoveFromEventList>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d007      	beq.n	800cc8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc7a:	4b3d      	ldr	r3, [pc, #244]	; (800cd70 <xQueueReceive+0x1bc>)
 800cc7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc80:	601a      	str	r2, [r3, #0]
 800cc82:	f3bf 8f4f 	dsb	sy
 800cc86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc8a:	f001 fe7b 	bl	800e984 <vPortExitCritical>
				return pdPASS;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e069      	b.n	800cd66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d103      	bne.n	800cca0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc98:	f001 fe74 	bl	800e984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	e062      	b.n	800cd66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d106      	bne.n	800ccb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cca6:	f107 0310 	add.w	r3, r7, #16
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 ff86 	bl	800dbbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ccb4:	f001 fe66 	bl	800e984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ccb8:	f000 fcf8 	bl	800d6ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ccbc:	f001 fe32 	bl	800e924 <vPortEnterCritical>
 800ccc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccc6:	b25b      	sxtb	r3, r3
 800ccc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cccc:	d103      	bne.n	800ccd6 <xQueueReceive+0x122>
 800ccce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccdc:	b25b      	sxtb	r3, r3
 800ccde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cce2:	d103      	bne.n	800ccec <xQueueReceive+0x138>
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccec:	f001 fe4a 	bl	800e984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccf0:	1d3a      	adds	r2, r7, #4
 800ccf2:	f107 0310 	add.w	r3, r7, #16
 800ccf6:	4611      	mov	r1, r2
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 ff75 	bl	800dbe8 <xTaskCheckForTimeOut>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d123      	bne.n	800cd4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd06:	f000 f997 	bl	800d038 <prvIsQueueEmpty>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d017      	beq.n	800cd40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd12:	3324      	adds	r3, #36	; 0x24
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	4611      	mov	r1, r2
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f000 fe9b 	bl	800da54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd20:	f000 f938 	bl	800cf94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd24:	f000 fcd0 	bl	800d6c8 <xTaskResumeAll>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d189      	bne.n	800cc42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cd2e:	4b10      	ldr	r3, [pc, #64]	; (800cd70 <xQueueReceive+0x1bc>)
 800cd30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	f3bf 8f6f 	isb	sy
 800cd3e:	e780      	b.n	800cc42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cd40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd42:	f000 f927 	bl	800cf94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd46:	f000 fcbf 	bl	800d6c8 <xTaskResumeAll>
 800cd4a:	e77a      	b.n	800cc42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cd4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd4e:	f000 f921 	bl	800cf94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd52:	f000 fcb9 	bl	800d6c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd58:	f000 f96e 	bl	800d038 <prvIsQueueEmpty>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f43f af6f 	beq.w	800cc42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3730      	adds	r7, #48	; 0x30
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	e000ed04 	.word	0xe000ed04

0800cd74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b08e      	sub	sp, #56	; 0x38
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10a      	bne.n	800cda0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	623b      	str	r3, [r7, #32]
}
 800cd9c:	bf00      	nop
 800cd9e:	e7fe      	b.n	800cd9e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d103      	bne.n	800cdae <xQueueReceiveFromISR+0x3a>
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <xQueueReceiveFromISR+0x3e>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e000      	b.n	800cdb4 <xQueueReceiveFromISR+0x40>
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10a      	bne.n	800cdce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbc:	f383 8811 	msr	BASEPRI, r3
 800cdc0:	f3bf 8f6f 	isb	sy
 800cdc4:	f3bf 8f4f 	dsb	sy
 800cdc8:	61fb      	str	r3, [r7, #28]
}
 800cdca:	bf00      	nop
 800cdcc:	e7fe      	b.n	800cdcc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdce:	f001 fe8b 	bl	800eae8 <vPortValidateInterruptPriority>
	__asm volatile
 800cdd2:	f3ef 8211 	mrs	r2, BASEPRI
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	61ba      	str	r2, [r7, #24]
 800cde8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cdea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d02f      	beq.n	800ce5a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ce04:	68b9      	ldr	r1, [r7, #8]
 800ce06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce08:	f000 f89e 	bl	800cf48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	1e5a      	subs	r2, r3, #1
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ce14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce1c:	d112      	bne.n	800ce44 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d016      	beq.n	800ce54 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	3310      	adds	r3, #16
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 fe62 	bl	800daf4 <xTaskRemoveFromEventList>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00e      	beq.n	800ce54 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00b      	beq.n	800ce54 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	601a      	str	r2, [r3, #0]
 800ce42:	e007      	b.n	800ce54 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ce44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce48:	3301      	adds	r3, #1
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	b25a      	sxtb	r2, r3
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ce54:	2301      	movs	r3, #1
 800ce56:	637b      	str	r3, [r7, #52]	; 0x34
 800ce58:	e001      	b.n	800ce5e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce60:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	f383 8811 	msr	BASEPRI, r3
}
 800ce68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3738      	adds	r7, #56	; 0x38
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce80:	2300      	movs	r3, #0
 800ce82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10d      	bne.n	800ceae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d14d      	bne.n	800cf36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f001 f804 	bl	800deac <xTaskPriorityDisinherit>
 800cea4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	609a      	str	r2, [r3, #8]
 800ceac:	e043      	b.n	800cf36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d119      	bne.n	800cee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6858      	ldr	r0, [r3, #4]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cebc:	461a      	mov	r2, r3
 800cebe:	68b9      	ldr	r1, [r7, #8]
 800cec0:	f002 fb78 	bl	800f5b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	685a      	ldr	r2, [r3, #4]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cecc:	441a      	add	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	685a      	ldr	r2, [r3, #4]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d32b      	bcc.n	800cf36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	605a      	str	r2, [r3, #4]
 800cee6:	e026      	b.n	800cf36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	68d8      	ldr	r0, [r3, #12]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef0:	461a      	mov	r2, r3
 800cef2:	68b9      	ldr	r1, [r7, #8]
 800cef4:	f002 fb5e 	bl	800f5b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	68da      	ldr	r2, [r3, #12]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf00:	425b      	negs	r3, r3
 800cf02:	441a      	add	r2, r3
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	68da      	ldr	r2, [r3, #12]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d207      	bcs.n	800cf24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	689a      	ldr	r2, [r3, #8]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1c:	425b      	negs	r3, r3
 800cf1e:	441a      	add	r2, r3
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d105      	bne.n	800cf36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d002      	beq.n	800cf36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	3b01      	subs	r3, #1
 800cf34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	1c5a      	adds	r2, r3, #1
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf3e:	697b      	ldr	r3, [r7, #20]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3718      	adds	r7, #24
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d018      	beq.n	800cf8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68da      	ldr	r2, [r3, #12]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf62:	441a      	add	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	68da      	ldr	r2, [r3, #12]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d303      	bcc.n	800cf7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	68d9      	ldr	r1, [r3, #12]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf84:	461a      	mov	r2, r3
 800cf86:	6838      	ldr	r0, [r7, #0]
 800cf88:	f002 fb14 	bl	800f5b4 <memcpy>
	}
}
 800cf8c:	bf00      	nop
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cf9c:	f001 fcc2 	bl	800e924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfa8:	e011      	b.n	800cfce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d012      	beq.n	800cfd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	3324      	adds	r3, #36	; 0x24
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f000 fd9c 	bl	800daf4 <xTaskRemoveFromEventList>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfc2:	f000 fe73 	bl	800dcac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfc6:	7bfb      	ldrb	r3, [r7, #15]
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	dce9      	bgt.n	800cfaa <prvUnlockQueue+0x16>
 800cfd6:	e000      	b.n	800cfda <prvUnlockQueue+0x46>
					break;
 800cfd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	22ff      	movs	r2, #255	; 0xff
 800cfde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cfe2:	f001 fccf 	bl	800e984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cfe6:	f001 fc9d 	bl	800e924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cff2:	e011      	b.n	800d018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d012      	beq.n	800d022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	3310      	adds	r3, #16
 800d000:	4618      	mov	r0, r3
 800d002:	f000 fd77 	bl	800daf4 <xTaskRemoveFromEventList>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d001      	beq.n	800d010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d00c:	f000 fe4e 	bl	800dcac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d010:	7bbb      	ldrb	r3, [r7, #14]
 800d012:	3b01      	subs	r3, #1
 800d014:	b2db      	uxtb	r3, r3
 800d016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	dce9      	bgt.n	800cff4 <prvUnlockQueue+0x60>
 800d020:	e000      	b.n	800d024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	22ff      	movs	r2, #255	; 0xff
 800d028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d02c:	f001 fcaa 	bl	800e984 <vPortExitCritical>
}
 800d030:	bf00      	nop
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d040:	f001 fc70 	bl	800e924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d102      	bne.n	800d052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d04c:	2301      	movs	r3, #1
 800d04e:	60fb      	str	r3, [r7, #12]
 800d050:	e001      	b.n	800d056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d052:	2300      	movs	r3, #0
 800d054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d056:	f001 fc95 	bl	800e984 <vPortExitCritical>

	return xReturn;
 800d05a:	68fb      	ldr	r3, [r7, #12]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d06c:	f001 fc5a 	bl	800e924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d078:	429a      	cmp	r2, r3
 800d07a:	d102      	bne.n	800d082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d07c:	2301      	movs	r3, #1
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	e001      	b.n	800d086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d082:	2300      	movs	r3, #0
 800d084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d086:	f001 fc7d 	bl	800e984 <vPortExitCritical>

	return xReturn;
 800d08a:	68fb      	ldr	r3, [r7, #12]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d09e:	2300      	movs	r3, #0
 800d0a0:	60fb      	str	r3, [r7, #12]
 800d0a2:	e014      	b.n	800d0ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0a4:	4a0f      	ldr	r2, [pc, #60]	; (800d0e4 <vQueueAddToRegistry+0x50>)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d10b      	bne.n	800d0c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0b0:	490c      	ldr	r1, [pc, #48]	; (800d0e4 <vQueueAddToRegistry+0x50>)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0ba:	4a0a      	ldr	r2, [pc, #40]	; (800d0e4 <vQueueAddToRegistry+0x50>)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	00db      	lsls	r3, r3, #3
 800d0c0:	4413      	add	r3, r2
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0c6:	e006      	b.n	800d0d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	60fb      	str	r3, [r7, #12]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b07      	cmp	r3, #7
 800d0d2:	d9e7      	bls.n	800d0a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0d4:	bf00      	nop
 800d0d6:	bf00      	nop
 800d0d8:	3714      	adds	r7, #20
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	20005090 	.word	0x20005090

0800d0e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d0f8:	f001 fc14 	bl	800e924 <vPortEnterCritical>
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d102:	b25b      	sxtb	r3, r3
 800d104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d108:	d103      	bne.n	800d112 <vQueueWaitForMessageRestricted+0x2a>
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d118:	b25b      	sxtb	r3, r3
 800d11a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d11e:	d103      	bne.n	800d128 <vQueueWaitForMessageRestricted+0x40>
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	2200      	movs	r2, #0
 800d124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d128:	f001 fc2c 	bl	800e984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d130:	2b00      	cmp	r3, #0
 800d132:	d106      	bne.n	800d142 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	3324      	adds	r3, #36	; 0x24
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	68b9      	ldr	r1, [r7, #8]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f000 fcad 	bl	800da9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d142:	6978      	ldr	r0, [r7, #20]
 800d144:	f7ff ff26 	bl	800cf94 <prvUnlockQueue>
	}
 800d148:	bf00      	nop
 800d14a:	3718      	adds	r7, #24
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08e      	sub	sp, #56	; 0x38
 800d154:	af04      	add	r7, sp, #16
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
 800d15c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10a      	bne.n	800d17a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	623b      	str	r3, [r7, #32]
}
 800d176:	bf00      	nop
 800d178:	e7fe      	b.n	800d178 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10a      	bne.n	800d196 <xTaskCreateStatic+0x46>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	61fb      	str	r3, [r7, #28]
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d196:	235c      	movs	r3, #92	; 0x5c
 800d198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	2b5c      	cmp	r3, #92	; 0x5c
 800d19e:	d00a      	beq.n	800d1b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	61bb      	str	r3, [r7, #24]
}
 800d1b2:	bf00      	nop
 800d1b4:	e7fe      	b.n	800d1b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d01e      	beq.n	800d1fc <xTaskCreateStatic+0xac>
 800d1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d01b      	beq.n	800d1fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	9303      	str	r3, [sp, #12]
 800d1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1dc:	9302      	str	r3, [sp, #8]
 800d1de:	f107 0314 	add.w	r3, r7, #20
 800d1e2:	9301      	str	r3, [sp, #4]
 800d1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	68b9      	ldr	r1, [r7, #8]
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f000 f850 	bl	800d294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1f6:	f000 f8dd 	bl	800d3b4 <prvAddNewTaskToReadyList>
 800d1fa:	e001      	b.n	800d200 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d200:	697b      	ldr	r3, [r7, #20]
	}
 800d202:	4618      	mov	r0, r3
 800d204:	3728      	adds	r7, #40	; 0x28
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b08c      	sub	sp, #48	; 0x30
 800d20e:	af04      	add	r7, sp, #16
 800d210:	60f8      	str	r0, [r7, #12]
 800d212:	60b9      	str	r1, [r7, #8]
 800d214:	603b      	str	r3, [r7, #0]
 800d216:	4613      	mov	r3, r2
 800d218:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d21a:	88fb      	ldrh	r3, [r7, #6]
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	4618      	mov	r0, r3
 800d220:	f001 fca2 	bl	800eb68 <pvPortMalloc>
 800d224:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00e      	beq.n	800d24a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d22c:	205c      	movs	r0, #92	; 0x5c
 800d22e:	f001 fc9b 	bl	800eb68 <pvPortMalloc>
 800d232:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d003      	beq.n	800d242 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	631a      	str	r2, [r3, #48]	; 0x30
 800d240:	e005      	b.n	800d24e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d242:	6978      	ldr	r0, [r7, #20]
 800d244:	f001 fd5c 	bl	800ed00 <vPortFree>
 800d248:	e001      	b.n	800d24e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d017      	beq.n	800d284 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	2200      	movs	r2, #0
 800d258:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d25c:	88fa      	ldrh	r2, [r7, #6]
 800d25e:	2300      	movs	r3, #0
 800d260:	9303      	str	r3, [sp, #12]
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	9302      	str	r3, [sp, #8]
 800d266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d268:	9301      	str	r3, [sp, #4]
 800d26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26c:	9300      	str	r3, [sp, #0]
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	68b9      	ldr	r1, [r7, #8]
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f000 f80e 	bl	800d294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d278:	69f8      	ldr	r0, [r7, #28]
 800d27a:	f000 f89b 	bl	800d3b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d27e:	2301      	movs	r3, #1
 800d280:	61bb      	str	r3, [r7, #24]
 800d282:	e002      	b.n	800d28a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d288:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d28a:	69bb      	ldr	r3, [r7, #24]
	}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3720      	adds	r7, #32
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b088      	sub	sp, #32
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
 800d2a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	21a5      	movs	r1, #165	; 0xa5
 800d2ae:	f002 f98f 	bl	800f5d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	4413      	add	r3, r2
 800d2c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	f023 0307 	bic.w	r3, r3, #7
 800d2ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	f003 0307 	and.w	r3, r3, #7
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800d2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	617b      	str	r3, [r7, #20]
}
 800d2e8:	bf00      	nop
 800d2ea:	e7fe      	b.n	800d2ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d01f      	beq.n	800d332 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	61fb      	str	r3, [r7, #28]
 800d2f6:	e012      	b.n	800d31e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	7819      	ldrb	r1, [r3, #0]
 800d300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	4413      	add	r3, r2
 800d306:	3334      	adds	r3, #52	; 0x34
 800d308:	460a      	mov	r2, r1
 800d30a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	4413      	add	r3, r2
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d006      	beq.n	800d326 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	3301      	adds	r3, #1
 800d31c:	61fb      	str	r3, [r7, #28]
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	2b0f      	cmp	r3, #15
 800d322:	d9e9      	bls.n	800d2f8 <prvInitialiseNewTask+0x64>
 800d324:	e000      	b.n	800d328 <prvInitialiseNewTask+0x94>
			{
				break;
 800d326:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32a:	2200      	movs	r2, #0
 800d32c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d330:	e003      	b.n	800d33a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	2200      	movs	r2, #0
 800d336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33c:	2b37      	cmp	r3, #55	; 0x37
 800d33e:	d901      	bls.n	800d344 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d340:	2337      	movs	r3, #55	; 0x37
 800d342:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d348:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d34e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d352:	2200      	movs	r2, #0
 800d354:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	3304      	adds	r3, #4
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7ff f8be 	bl	800c4dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d362:	3318      	adds	r3, #24
 800d364:	4618      	mov	r0, r3
 800d366:	f7ff f8b9 	bl	800c4dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d36e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d372:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d378:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d37e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d382:	2200      	movs	r2, #0
 800d384:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d388:	2200      	movs	r2, #0
 800d38a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d38e:	683a      	ldr	r2, [r7, #0]
 800d390:	68f9      	ldr	r1, [r7, #12]
 800d392:	69b8      	ldr	r0, [r7, #24]
 800d394:	f001 f99a 	bl	800e6cc <pxPortInitialiseStack>
 800d398:	4602      	mov	r2, r0
 800d39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d002      	beq.n	800d3aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3aa:	bf00      	nop
 800d3ac:	3720      	adds	r7, #32
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
	...

0800d3b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d3bc:	f001 fab2 	bl	800e924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d3c0:	4b2d      	ldr	r3, [pc, #180]	; (800d478 <prvAddNewTaskToReadyList+0xc4>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	4a2c      	ldr	r2, [pc, #176]	; (800d478 <prvAddNewTaskToReadyList+0xc4>)
 800d3c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d3ca:	4b2c      	ldr	r3, [pc, #176]	; (800d47c <prvAddNewTaskToReadyList+0xc8>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d109      	bne.n	800d3e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d3d2:	4a2a      	ldr	r2, [pc, #168]	; (800d47c <prvAddNewTaskToReadyList+0xc8>)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d3d8:	4b27      	ldr	r3, [pc, #156]	; (800d478 <prvAddNewTaskToReadyList+0xc4>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d110      	bne.n	800d402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d3e0:	f000 fc88 	bl	800dcf4 <prvInitialiseTaskLists>
 800d3e4:	e00d      	b.n	800d402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d3e6:	4b26      	ldr	r3, [pc, #152]	; (800d480 <prvAddNewTaskToReadyList+0xcc>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d109      	bne.n	800d402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d3ee:	4b23      	ldr	r3, [pc, #140]	; (800d47c <prvAddNewTaskToReadyList+0xc8>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d802      	bhi.n	800d402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d3fc:	4a1f      	ldr	r2, [pc, #124]	; (800d47c <prvAddNewTaskToReadyList+0xc8>)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d402:	4b20      	ldr	r3, [pc, #128]	; (800d484 <prvAddNewTaskToReadyList+0xd0>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	3301      	adds	r3, #1
 800d408:	4a1e      	ldr	r2, [pc, #120]	; (800d484 <prvAddNewTaskToReadyList+0xd0>)
 800d40a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d40c:	4b1d      	ldr	r3, [pc, #116]	; (800d484 <prvAddNewTaskToReadyList+0xd0>)
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d418:	4b1b      	ldr	r3, [pc, #108]	; (800d488 <prvAddNewTaskToReadyList+0xd4>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d903      	bls.n	800d428 <prvAddNewTaskToReadyList+0x74>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d424:	4a18      	ldr	r2, [pc, #96]	; (800d488 <prvAddNewTaskToReadyList+0xd4>)
 800d426:	6013      	str	r3, [r2, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42c:	4613      	mov	r3, r2
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	4413      	add	r3, r2
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4a15      	ldr	r2, [pc, #84]	; (800d48c <prvAddNewTaskToReadyList+0xd8>)
 800d436:	441a      	add	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	3304      	adds	r3, #4
 800d43c:	4619      	mov	r1, r3
 800d43e:	4610      	mov	r0, r2
 800d440:	f7ff f859 	bl	800c4f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d444:	f001 fa9e 	bl	800e984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d448:	4b0d      	ldr	r3, [pc, #52]	; (800d480 <prvAddNewTaskToReadyList+0xcc>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d00e      	beq.n	800d46e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d450:	4b0a      	ldr	r3, [pc, #40]	; (800d47c <prvAddNewTaskToReadyList+0xc8>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d207      	bcs.n	800d46e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d45e:	4b0c      	ldr	r3, [pc, #48]	; (800d490 <prvAddNewTaskToReadyList+0xdc>)
 800d460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d464:	601a      	str	r2, [r3, #0]
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d46e:	bf00      	nop
 800d470:	3708      	adds	r7, #8
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	20001050 	.word	0x20001050
 800d47c:	20000b7c 	.word	0x20000b7c
 800d480:	2000105c 	.word	0x2000105c
 800d484:	2000106c 	.word	0x2000106c
 800d488:	20001058 	.word	0x20001058
 800d48c:	20000b80 	.word	0x20000b80
 800d490:	e000ed04 	.word	0xe000ed04

0800d494 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d49c:	f001 fa42 	bl	800e924 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d102      	bne.n	800d4ac <vTaskDelete+0x18>
 800d4a6:	4b2c      	ldr	r3, [pc, #176]	; (800d558 <vTaskDelete+0xc4>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	e000      	b.n	800d4ae <vTaskDelete+0x1a>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3304      	adds	r3, #4
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7ff f87b 	bl	800c5b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d004      	beq.n	800d4cc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	3318      	adds	r3, #24
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7ff f872 	bl	800c5b0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d4cc:	4b23      	ldr	r3, [pc, #140]	; (800d55c <vTaskDelete+0xc8>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	4a22      	ldr	r2, [pc, #136]	; (800d55c <vTaskDelete+0xc8>)
 800d4d4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d4d6:	4b20      	ldr	r3, [pc, #128]	; (800d558 <vTaskDelete+0xc4>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d10b      	bne.n	800d4f8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	3304      	adds	r3, #4
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	481e      	ldr	r0, [pc, #120]	; (800d560 <vTaskDelete+0xcc>)
 800d4e8:	f7ff f805 	bl	800c4f6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d4ec:	4b1d      	ldr	r3, [pc, #116]	; (800d564 <vTaskDelete+0xd0>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	4a1c      	ldr	r2, [pc, #112]	; (800d564 <vTaskDelete+0xd0>)
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	e009      	b.n	800d50c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d4f8:	4b1b      	ldr	r3, [pc, #108]	; (800d568 <vTaskDelete+0xd4>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	4a1a      	ldr	r2, [pc, #104]	; (800d568 <vTaskDelete+0xd4>)
 800d500:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f000 fc64 	bl	800ddd0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d508:	f000 fc92 	bl	800de30 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800d50c:	f001 fa3a 	bl	800e984 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d510:	4b16      	ldr	r3, [pc, #88]	; (800d56c <vTaskDelete+0xd8>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d01b      	beq.n	800d550 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800d518:	4b0f      	ldr	r3, [pc, #60]	; (800d558 <vTaskDelete+0xc4>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d116      	bne.n	800d550 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d522:	4b13      	ldr	r3, [pc, #76]	; (800d570 <vTaskDelete+0xdc>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00a      	beq.n	800d540 <vTaskDelete+0xac>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	60bb      	str	r3, [r7, #8]
}
 800d53c:	bf00      	nop
 800d53e:	e7fe      	b.n	800d53e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800d540:	4b0c      	ldr	r3, [pc, #48]	; (800d574 <vTaskDelete+0xe0>)
 800d542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d546:	601a      	str	r2, [r3, #0]
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d550:	bf00      	nop
 800d552:	3710      	adds	r7, #16
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	20000b7c 	.word	0x20000b7c
 800d55c:	2000106c 	.word	0x2000106c
 800d560:	20001024 	.word	0x20001024
 800d564:	20001038 	.word	0x20001038
 800d568:	20001050 	.word	0x20001050
 800d56c:	2000105c 	.word	0x2000105c
 800d570:	20001078 	.word	0x20001078
 800d574:	e000ed04 	.word	0xe000ed04

0800d578 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d580:	2300      	movs	r3, #0
 800d582:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d017      	beq.n	800d5ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d58a:	4b13      	ldr	r3, [pc, #76]	; (800d5d8 <vTaskDelay+0x60>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00a      	beq.n	800d5a8 <vTaskDelay+0x30>
	__asm volatile
 800d592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d596:	f383 8811 	msr	BASEPRI, r3
 800d59a:	f3bf 8f6f 	isb	sy
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	60bb      	str	r3, [r7, #8]
}
 800d5a4:	bf00      	nop
 800d5a6:	e7fe      	b.n	800d5a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d5a8:	f000 f880 	bl	800d6ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 fcea 	bl	800df88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d5b4:	f000 f888 	bl	800d6c8 <xTaskResumeAll>
 800d5b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d107      	bne.n	800d5d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d5c0:	4b06      	ldr	r3, [pc, #24]	; (800d5dc <vTaskDelay+0x64>)
 800d5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5c6:	601a      	str	r2, [r3, #0]
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5d0:	bf00      	nop
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	20001078 	.word	0x20001078
 800d5dc:	e000ed04 	.word	0xe000ed04

0800d5e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08a      	sub	sp, #40	; 0x28
 800d5e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d5ee:	463a      	mov	r2, r7
 800d5f0:	1d39      	adds	r1, r7, #4
 800d5f2:	f107 0308 	add.w	r3, r7, #8
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7fe ff1c 	bl	800c434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d5fc:	6839      	ldr	r1, [r7, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	9202      	str	r2, [sp, #8]
 800d604:	9301      	str	r3, [sp, #4]
 800d606:	2300      	movs	r3, #0
 800d608:	9300      	str	r3, [sp, #0]
 800d60a:	2300      	movs	r3, #0
 800d60c:	460a      	mov	r2, r1
 800d60e:	4921      	ldr	r1, [pc, #132]	; (800d694 <vTaskStartScheduler+0xb4>)
 800d610:	4821      	ldr	r0, [pc, #132]	; (800d698 <vTaskStartScheduler+0xb8>)
 800d612:	f7ff fd9d 	bl	800d150 <xTaskCreateStatic>
 800d616:	4603      	mov	r3, r0
 800d618:	4a20      	ldr	r2, [pc, #128]	; (800d69c <vTaskStartScheduler+0xbc>)
 800d61a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d61c:	4b1f      	ldr	r3, [pc, #124]	; (800d69c <vTaskStartScheduler+0xbc>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d002      	beq.n	800d62a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d624:	2301      	movs	r3, #1
 800d626:	617b      	str	r3, [r7, #20]
 800d628:	e001      	b.n	800d62e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d62a:	2300      	movs	r3, #0
 800d62c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d102      	bne.n	800d63a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d634:	f000 fcfc 	bl	800e030 <xTimerCreateTimerTask>
 800d638:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d116      	bne.n	800d66e <vTaskStartScheduler+0x8e>
	__asm volatile
 800d640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d644:	f383 8811 	msr	BASEPRI, r3
 800d648:	f3bf 8f6f 	isb	sy
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	613b      	str	r3, [r7, #16]
}
 800d652:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d654:	4b12      	ldr	r3, [pc, #72]	; (800d6a0 <vTaskStartScheduler+0xc0>)
 800d656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d65a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d65c:	4b11      	ldr	r3, [pc, #68]	; (800d6a4 <vTaskStartScheduler+0xc4>)
 800d65e:	2201      	movs	r2, #1
 800d660:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d662:	4b11      	ldr	r3, [pc, #68]	; (800d6a8 <vTaskStartScheduler+0xc8>)
 800d664:	2200      	movs	r2, #0
 800d666:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d668:	f001 f8ba 	bl	800e7e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d66c:	e00e      	b.n	800d68c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d674:	d10a      	bne.n	800d68c <vTaskStartScheduler+0xac>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	60fb      	str	r3, [r7, #12]
}
 800d688:	bf00      	nop
 800d68a:	e7fe      	b.n	800d68a <vTaskStartScheduler+0xaa>
}
 800d68c:	bf00      	nop
 800d68e:	3718      	adds	r7, #24
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	0800f8f8 	.word	0x0800f8f8
 800d698:	0800dcc5 	.word	0x0800dcc5
 800d69c:	20001074 	.word	0x20001074
 800d6a0:	20001070 	.word	0x20001070
 800d6a4:	2000105c 	.word	0x2000105c
 800d6a8:	20001054 	.word	0x20001054

0800d6ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d6b0:	4b04      	ldr	r3, [pc, #16]	; (800d6c4 <vTaskSuspendAll+0x18>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	4a03      	ldr	r2, [pc, #12]	; (800d6c4 <vTaskSuspendAll+0x18>)
 800d6b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d6ba:	bf00      	nop
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr
 800d6c4:	20001078 	.word	0x20001078

0800d6c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d6d6:	4b42      	ldr	r3, [pc, #264]	; (800d7e0 <xTaskResumeAll+0x118>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10a      	bne.n	800d6f4 <xTaskResumeAll+0x2c>
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	603b      	str	r3, [r7, #0]
}
 800d6f0:	bf00      	nop
 800d6f2:	e7fe      	b.n	800d6f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d6f4:	f001 f916 	bl	800e924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d6f8:	4b39      	ldr	r3, [pc, #228]	; (800d7e0 <xTaskResumeAll+0x118>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	4a38      	ldr	r2, [pc, #224]	; (800d7e0 <xTaskResumeAll+0x118>)
 800d700:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d702:	4b37      	ldr	r3, [pc, #220]	; (800d7e0 <xTaskResumeAll+0x118>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d162      	bne.n	800d7d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d70a:	4b36      	ldr	r3, [pc, #216]	; (800d7e4 <xTaskResumeAll+0x11c>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d05e      	beq.n	800d7d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d712:	e02f      	b.n	800d774 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d714:	4b34      	ldr	r3, [pc, #208]	; (800d7e8 <xTaskResumeAll+0x120>)
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	3318      	adds	r3, #24
 800d720:	4618      	mov	r0, r3
 800d722:	f7fe ff45 	bl	800c5b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	3304      	adds	r3, #4
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fe ff40 	bl	800c5b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d734:	4b2d      	ldr	r3, [pc, #180]	; (800d7ec <xTaskResumeAll+0x124>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d903      	bls.n	800d744 <xTaskResumeAll+0x7c>
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d740:	4a2a      	ldr	r2, [pc, #168]	; (800d7ec <xTaskResumeAll+0x124>)
 800d742:	6013      	str	r3, [r2, #0]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d748:	4613      	mov	r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	4a27      	ldr	r2, [pc, #156]	; (800d7f0 <xTaskResumeAll+0x128>)
 800d752:	441a      	add	r2, r3
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	3304      	adds	r3, #4
 800d758:	4619      	mov	r1, r3
 800d75a:	4610      	mov	r0, r2
 800d75c:	f7fe fecb 	bl	800c4f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d764:	4b23      	ldr	r3, [pc, #140]	; (800d7f4 <xTaskResumeAll+0x12c>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d302      	bcc.n	800d774 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d76e:	4b22      	ldr	r3, [pc, #136]	; (800d7f8 <xTaskResumeAll+0x130>)
 800d770:	2201      	movs	r2, #1
 800d772:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d774:	4b1c      	ldr	r3, [pc, #112]	; (800d7e8 <xTaskResumeAll+0x120>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d1cb      	bne.n	800d714 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d782:	f000 fb55 	bl	800de30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d786:	4b1d      	ldr	r3, [pc, #116]	; (800d7fc <xTaskResumeAll+0x134>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d010      	beq.n	800d7b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d792:	f000 f847 	bl	800d824 <xTaskIncrementTick>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d79c:	4b16      	ldr	r3, [pc, #88]	; (800d7f8 <xTaskResumeAll+0x130>)
 800d79e:	2201      	movs	r2, #1
 800d7a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	3b01      	subs	r3, #1
 800d7a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d1f1      	bne.n	800d792 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d7ae:	4b13      	ldr	r3, [pc, #76]	; (800d7fc <xTaskResumeAll+0x134>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d7b4:	4b10      	ldr	r3, [pc, #64]	; (800d7f8 <xTaskResumeAll+0x130>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d009      	beq.n	800d7d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d7c0:	4b0f      	ldr	r3, [pc, #60]	; (800d800 <xTaskResumeAll+0x138>)
 800d7c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7c6:	601a      	str	r2, [r3, #0]
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d7d0:	f001 f8d8 	bl	800e984 <vPortExitCritical>

	return xAlreadyYielded;
 800d7d4:	68bb      	ldr	r3, [r7, #8]
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	20001078 	.word	0x20001078
 800d7e4:	20001050 	.word	0x20001050
 800d7e8:	20001010 	.word	0x20001010
 800d7ec:	20001058 	.word	0x20001058
 800d7f0:	20000b80 	.word	0x20000b80
 800d7f4:	20000b7c 	.word	0x20000b7c
 800d7f8:	20001064 	.word	0x20001064
 800d7fc:	20001060 	.word	0x20001060
 800d800:	e000ed04 	.word	0xe000ed04

0800d804 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d80a:	4b05      	ldr	r3, [pc, #20]	; (800d820 <xTaskGetTickCount+0x1c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d810:	687b      	ldr	r3, [r7, #4]
}
 800d812:	4618      	mov	r0, r3
 800d814:	370c      	adds	r7, #12
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop
 800d820:	20001054 	.word	0x20001054

0800d824 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d82a:	2300      	movs	r3, #0
 800d82c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d82e:	4b4f      	ldr	r3, [pc, #316]	; (800d96c <xTaskIncrementTick+0x148>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	f040 808f 	bne.w	800d956 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d838:	4b4d      	ldr	r3, [pc, #308]	; (800d970 <xTaskIncrementTick+0x14c>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3301      	adds	r3, #1
 800d83e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d840:	4a4b      	ldr	r2, [pc, #300]	; (800d970 <xTaskIncrementTick+0x14c>)
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d120      	bne.n	800d88e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d84c:	4b49      	ldr	r3, [pc, #292]	; (800d974 <xTaskIncrementTick+0x150>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00a      	beq.n	800d86c <xTaskIncrementTick+0x48>
	__asm volatile
 800d856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85a:	f383 8811 	msr	BASEPRI, r3
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	f3bf 8f4f 	dsb	sy
 800d866:	603b      	str	r3, [r7, #0]
}
 800d868:	bf00      	nop
 800d86a:	e7fe      	b.n	800d86a <xTaskIncrementTick+0x46>
 800d86c:	4b41      	ldr	r3, [pc, #260]	; (800d974 <xTaskIncrementTick+0x150>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	60fb      	str	r3, [r7, #12]
 800d872:	4b41      	ldr	r3, [pc, #260]	; (800d978 <xTaskIncrementTick+0x154>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a3f      	ldr	r2, [pc, #252]	; (800d974 <xTaskIncrementTick+0x150>)
 800d878:	6013      	str	r3, [r2, #0]
 800d87a:	4a3f      	ldr	r2, [pc, #252]	; (800d978 <xTaskIncrementTick+0x154>)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6013      	str	r3, [r2, #0]
 800d880:	4b3e      	ldr	r3, [pc, #248]	; (800d97c <xTaskIncrementTick+0x158>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	3301      	adds	r3, #1
 800d886:	4a3d      	ldr	r2, [pc, #244]	; (800d97c <xTaskIncrementTick+0x158>)
 800d888:	6013      	str	r3, [r2, #0]
 800d88a:	f000 fad1 	bl	800de30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d88e:	4b3c      	ldr	r3, [pc, #240]	; (800d980 <xTaskIncrementTick+0x15c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	693a      	ldr	r2, [r7, #16]
 800d894:	429a      	cmp	r2, r3
 800d896:	d349      	bcc.n	800d92c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d898:	4b36      	ldr	r3, [pc, #216]	; (800d974 <xTaskIncrementTick+0x150>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d104      	bne.n	800d8ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8a2:	4b37      	ldr	r3, [pc, #220]	; (800d980 <xTaskIncrementTick+0x15c>)
 800d8a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8a8:	601a      	str	r2, [r3, #0]
					break;
 800d8aa:	e03f      	b.n	800d92c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8ac:	4b31      	ldr	r3, [pc, #196]	; (800d974 <xTaskIncrementTick+0x150>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d8bc:	693a      	ldr	r2, [r7, #16]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d203      	bcs.n	800d8cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d8c4:	4a2e      	ldr	r2, [pc, #184]	; (800d980 <xTaskIncrementTick+0x15c>)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d8ca:	e02f      	b.n	800d92c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fe fe6d 	bl	800c5b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d004      	beq.n	800d8e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	3318      	adds	r3, #24
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fe fe64 	bl	800c5b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ec:	4b25      	ldr	r3, [pc, #148]	; (800d984 <xTaskIncrementTick+0x160>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d903      	bls.n	800d8fc <xTaskIncrementTick+0xd8>
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f8:	4a22      	ldr	r2, [pc, #136]	; (800d984 <xTaskIncrementTick+0x160>)
 800d8fa:	6013      	str	r3, [r2, #0]
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d900:	4613      	mov	r3, r2
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	4413      	add	r3, r2
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	4a1f      	ldr	r2, [pc, #124]	; (800d988 <xTaskIncrementTick+0x164>)
 800d90a:	441a      	add	r2, r3
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	3304      	adds	r3, #4
 800d910:	4619      	mov	r1, r3
 800d912:	4610      	mov	r0, r2
 800d914:	f7fe fdef 	bl	800c4f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d91c:	4b1b      	ldr	r3, [pc, #108]	; (800d98c <xTaskIncrementTick+0x168>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d922:	429a      	cmp	r2, r3
 800d924:	d3b8      	bcc.n	800d898 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d926:	2301      	movs	r3, #1
 800d928:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d92a:	e7b5      	b.n	800d898 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d92c:	4b17      	ldr	r3, [pc, #92]	; (800d98c <xTaskIncrementTick+0x168>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d932:	4915      	ldr	r1, [pc, #84]	; (800d988 <xTaskIncrementTick+0x164>)
 800d934:	4613      	mov	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	4413      	add	r3, r2
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	440b      	add	r3, r1
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d901      	bls.n	800d948 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d944:	2301      	movs	r3, #1
 800d946:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d948:	4b11      	ldr	r3, [pc, #68]	; (800d990 <xTaskIncrementTick+0x16c>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d007      	beq.n	800d960 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d950:	2301      	movs	r3, #1
 800d952:	617b      	str	r3, [r7, #20]
 800d954:	e004      	b.n	800d960 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d956:	4b0f      	ldr	r3, [pc, #60]	; (800d994 <xTaskIncrementTick+0x170>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	3301      	adds	r3, #1
 800d95c:	4a0d      	ldr	r2, [pc, #52]	; (800d994 <xTaskIncrementTick+0x170>)
 800d95e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d960:	697b      	ldr	r3, [r7, #20]
}
 800d962:	4618      	mov	r0, r3
 800d964:	3718      	adds	r7, #24
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20001078 	.word	0x20001078
 800d970:	20001054 	.word	0x20001054
 800d974:	20001008 	.word	0x20001008
 800d978:	2000100c 	.word	0x2000100c
 800d97c:	20001068 	.word	0x20001068
 800d980:	20001070 	.word	0x20001070
 800d984:	20001058 	.word	0x20001058
 800d988:	20000b80 	.word	0x20000b80
 800d98c:	20000b7c 	.word	0x20000b7c
 800d990:	20001064 	.word	0x20001064
 800d994:	20001060 	.word	0x20001060

0800d998 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d99e:	4b28      	ldr	r3, [pc, #160]	; (800da40 <vTaskSwitchContext+0xa8>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d9a6:	4b27      	ldr	r3, [pc, #156]	; (800da44 <vTaskSwitchContext+0xac>)
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d9ac:	e041      	b.n	800da32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d9ae:	4b25      	ldr	r3, [pc, #148]	; (800da44 <vTaskSwitchContext+0xac>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9b4:	4b24      	ldr	r3, [pc, #144]	; (800da48 <vTaskSwitchContext+0xb0>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	60fb      	str	r3, [r7, #12]
 800d9ba:	e010      	b.n	800d9de <vTaskSwitchContext+0x46>
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10a      	bne.n	800d9d8 <vTaskSwitchContext+0x40>
	__asm volatile
 800d9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c6:	f383 8811 	msr	BASEPRI, r3
 800d9ca:	f3bf 8f6f 	isb	sy
 800d9ce:	f3bf 8f4f 	dsb	sy
 800d9d2:	607b      	str	r3, [r7, #4]
}
 800d9d4:	bf00      	nop
 800d9d6:	e7fe      	b.n	800d9d6 <vTaskSwitchContext+0x3e>
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	60fb      	str	r3, [r7, #12]
 800d9de:	491b      	ldr	r1, [pc, #108]	; (800da4c <vTaskSwitchContext+0xb4>)
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	4413      	add	r3, r2
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	440b      	add	r3, r1
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d0e4      	beq.n	800d9bc <vTaskSwitchContext+0x24>
 800d9f2:	68fa      	ldr	r2, [r7, #12]
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4a13      	ldr	r2, [pc, #76]	; (800da4c <vTaskSwitchContext+0xb4>)
 800d9fe:	4413      	add	r3, r2
 800da00:	60bb      	str	r3, [r7, #8]
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	605a      	str	r2, [r3, #4]
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	685a      	ldr	r2, [r3, #4]
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	3308      	adds	r3, #8
 800da14:	429a      	cmp	r2, r3
 800da16:	d104      	bne.n	800da22 <vTaskSwitchContext+0x8a>
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	685a      	ldr	r2, [r3, #4]
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	605a      	str	r2, [r3, #4]
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	4a09      	ldr	r2, [pc, #36]	; (800da50 <vTaskSwitchContext+0xb8>)
 800da2a:	6013      	str	r3, [r2, #0]
 800da2c:	4a06      	ldr	r2, [pc, #24]	; (800da48 <vTaskSwitchContext+0xb0>)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	6013      	str	r3, [r2, #0]
}
 800da32:	bf00      	nop
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	20001078 	.word	0x20001078
 800da44:	20001064 	.word	0x20001064
 800da48:	20001058 	.word	0x20001058
 800da4c:	20000b80 	.word	0x20000b80
 800da50:	20000b7c 	.word	0x20000b7c

0800da54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10a      	bne.n	800da7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800da64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da68:	f383 8811 	msr	BASEPRI, r3
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	f3bf 8f4f 	dsb	sy
 800da74:	60fb      	str	r3, [r7, #12]
}
 800da76:	bf00      	nop
 800da78:	e7fe      	b.n	800da78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da7a:	4b07      	ldr	r3, [pc, #28]	; (800da98 <vTaskPlaceOnEventList+0x44>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	3318      	adds	r3, #24
 800da80:	4619      	mov	r1, r3
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7fe fd5b 	bl	800c53e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da88:	2101      	movs	r1, #1
 800da8a:	6838      	ldr	r0, [r7, #0]
 800da8c:	f000 fa7c 	bl	800df88 <prvAddCurrentTaskToDelayedList>
}
 800da90:	bf00      	nop
 800da92:	3710      	adds	r7, #16
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	20000b7c 	.word	0x20000b7c

0800da9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10a      	bne.n	800dac4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800daae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	617b      	str	r3, [r7, #20]
}
 800dac0:	bf00      	nop
 800dac2:	e7fe      	b.n	800dac2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dac4:	4b0a      	ldr	r3, [pc, #40]	; (800daf0 <vTaskPlaceOnEventListRestricted+0x54>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	3318      	adds	r3, #24
 800daca:	4619      	mov	r1, r3
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f7fe fd12 	bl	800c4f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dadc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dade:	6879      	ldr	r1, [r7, #4]
 800dae0:	68b8      	ldr	r0, [r7, #8]
 800dae2:	f000 fa51 	bl	800df88 <prvAddCurrentTaskToDelayedList>
	}
 800dae6:	bf00      	nop
 800dae8:	3718      	adds	r7, #24
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	20000b7c 	.word	0x20000b7c

0800daf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b086      	sub	sp, #24
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d10a      	bne.n	800db20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800db0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0e:	f383 8811 	msr	BASEPRI, r3
 800db12:	f3bf 8f6f 	isb	sy
 800db16:	f3bf 8f4f 	dsb	sy
 800db1a:	60fb      	str	r3, [r7, #12]
}
 800db1c:	bf00      	nop
 800db1e:	e7fe      	b.n	800db1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	3318      	adds	r3, #24
 800db24:	4618      	mov	r0, r3
 800db26:	f7fe fd43 	bl	800c5b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db2a:	4b1e      	ldr	r3, [pc, #120]	; (800dba4 <xTaskRemoveFromEventList+0xb0>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d11d      	bne.n	800db6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	3304      	adds	r3, #4
 800db36:	4618      	mov	r0, r3
 800db38:	f7fe fd3a 	bl	800c5b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db40:	4b19      	ldr	r3, [pc, #100]	; (800dba8 <xTaskRemoveFromEventList+0xb4>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	429a      	cmp	r2, r3
 800db46:	d903      	bls.n	800db50 <xTaskRemoveFromEventList+0x5c>
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4c:	4a16      	ldr	r2, [pc, #88]	; (800dba8 <xTaskRemoveFromEventList+0xb4>)
 800db4e:	6013      	str	r3, [r2, #0]
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db54:	4613      	mov	r3, r2
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	4413      	add	r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	4a13      	ldr	r2, [pc, #76]	; (800dbac <xTaskRemoveFromEventList+0xb8>)
 800db5e:	441a      	add	r2, r3
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	3304      	adds	r3, #4
 800db64:	4619      	mov	r1, r3
 800db66:	4610      	mov	r0, r2
 800db68:	f7fe fcc5 	bl	800c4f6 <vListInsertEnd>
 800db6c:	e005      	b.n	800db7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	3318      	adds	r3, #24
 800db72:	4619      	mov	r1, r3
 800db74:	480e      	ldr	r0, [pc, #56]	; (800dbb0 <xTaskRemoveFromEventList+0xbc>)
 800db76:	f7fe fcbe 	bl	800c4f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7e:	4b0d      	ldr	r3, [pc, #52]	; (800dbb4 <xTaskRemoveFromEventList+0xc0>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db84:	429a      	cmp	r2, r3
 800db86:	d905      	bls.n	800db94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800db88:	2301      	movs	r3, #1
 800db8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800db8c:	4b0a      	ldr	r3, [pc, #40]	; (800dbb8 <xTaskRemoveFromEventList+0xc4>)
 800db8e:	2201      	movs	r2, #1
 800db90:	601a      	str	r2, [r3, #0]
 800db92:	e001      	b.n	800db98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800db94:	2300      	movs	r3, #0
 800db96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800db98:	697b      	ldr	r3, [r7, #20]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3718      	adds	r7, #24
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	20001078 	.word	0x20001078
 800dba8:	20001058 	.word	0x20001058
 800dbac:	20000b80 	.word	0x20000b80
 800dbb0:	20001010 	.word	0x20001010
 800dbb4:	20000b7c 	.word	0x20000b7c
 800dbb8:	20001064 	.word	0x20001064

0800dbbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dbc4:	4b06      	ldr	r3, [pc, #24]	; (800dbe0 <vTaskInternalSetTimeOutState+0x24>)
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dbcc:	4b05      	ldr	r3, [pc, #20]	; (800dbe4 <vTaskInternalSetTimeOutState+0x28>)
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	605a      	str	r2, [r3, #4]
}
 800dbd4:	bf00      	nop
 800dbd6:	370c      	adds	r7, #12
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr
 800dbe0:	20001068 	.word	0x20001068
 800dbe4:	20001054 	.word	0x20001054

0800dbe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b088      	sub	sp, #32
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d10a      	bne.n	800dc0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfc:	f383 8811 	msr	BASEPRI, r3
 800dc00:	f3bf 8f6f 	isb	sy
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	613b      	str	r3, [r7, #16]
}
 800dc0a:	bf00      	nop
 800dc0c:	e7fe      	b.n	800dc0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10a      	bne.n	800dc2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc18:	f383 8811 	msr	BASEPRI, r3
 800dc1c:	f3bf 8f6f 	isb	sy
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	60fb      	str	r3, [r7, #12]
}
 800dc26:	bf00      	nop
 800dc28:	e7fe      	b.n	800dc28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dc2a:	f000 fe7b 	bl	800e924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dc2e:	4b1d      	ldr	r3, [pc, #116]	; (800dca4 <xTaskCheckForTimeOut+0xbc>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	69ba      	ldr	r2, [r7, #24]
 800dc3a:	1ad3      	subs	r3, r2, r3
 800dc3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc46:	d102      	bne.n	800dc4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	61fb      	str	r3, [r7, #28]
 800dc4c:	e023      	b.n	800dc96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	4b15      	ldr	r3, [pc, #84]	; (800dca8 <xTaskCheckForTimeOut+0xc0>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d007      	beq.n	800dc6a <xTaskCheckForTimeOut+0x82>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	69ba      	ldr	r2, [r7, #24]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d302      	bcc.n	800dc6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dc64:	2301      	movs	r3, #1
 800dc66:	61fb      	str	r3, [r7, #28]
 800dc68:	e015      	b.n	800dc96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	697a      	ldr	r2, [r7, #20]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d20b      	bcs.n	800dc8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	1ad2      	subs	r2, r2, r3
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7ff ff9b 	bl	800dbbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc86:	2300      	movs	r3, #0
 800dc88:	61fb      	str	r3, [r7, #28]
 800dc8a:	e004      	b.n	800dc96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dc92:	2301      	movs	r3, #1
 800dc94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dc96:	f000 fe75 	bl	800e984 <vPortExitCritical>

	return xReturn;
 800dc9a:	69fb      	ldr	r3, [r7, #28]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3720      	adds	r7, #32
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	20001054 	.word	0x20001054
 800dca8:	20001068 	.word	0x20001068

0800dcac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dcac:	b480      	push	{r7}
 800dcae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dcb0:	4b03      	ldr	r3, [pc, #12]	; (800dcc0 <vTaskMissedYield+0x14>)
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	601a      	str	r2, [r3, #0]
}
 800dcb6:	bf00      	nop
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr
 800dcc0:	20001064 	.word	0x20001064

0800dcc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dccc:	f000 f852 	bl	800dd74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dcd0:	4b06      	ldr	r3, [pc, #24]	; (800dcec <prvIdleTask+0x28>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d9f9      	bls.n	800dccc <prvIdleTask+0x8>
			{
				taskYIELD();
 800dcd8:	4b05      	ldr	r3, [pc, #20]	; (800dcf0 <prvIdleTask+0x2c>)
 800dcda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcde:	601a      	str	r2, [r3, #0]
 800dce0:	f3bf 8f4f 	dsb	sy
 800dce4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dce8:	e7f0      	b.n	800dccc <prvIdleTask+0x8>
 800dcea:	bf00      	nop
 800dcec:	20000b80 	.word	0x20000b80
 800dcf0:	e000ed04 	.word	0xe000ed04

0800dcf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	607b      	str	r3, [r7, #4]
 800dcfe:	e00c      	b.n	800dd1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	4613      	mov	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4413      	add	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4a12      	ldr	r2, [pc, #72]	; (800dd54 <prvInitialiseTaskLists+0x60>)
 800dd0c:	4413      	add	r3, r2
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fe fbc4 	bl	800c49c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	3301      	adds	r3, #1
 800dd18:	607b      	str	r3, [r7, #4]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2b37      	cmp	r3, #55	; 0x37
 800dd1e:	d9ef      	bls.n	800dd00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd20:	480d      	ldr	r0, [pc, #52]	; (800dd58 <prvInitialiseTaskLists+0x64>)
 800dd22:	f7fe fbbb 	bl	800c49c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd26:	480d      	ldr	r0, [pc, #52]	; (800dd5c <prvInitialiseTaskLists+0x68>)
 800dd28:	f7fe fbb8 	bl	800c49c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd2c:	480c      	ldr	r0, [pc, #48]	; (800dd60 <prvInitialiseTaskLists+0x6c>)
 800dd2e:	f7fe fbb5 	bl	800c49c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd32:	480c      	ldr	r0, [pc, #48]	; (800dd64 <prvInitialiseTaskLists+0x70>)
 800dd34:	f7fe fbb2 	bl	800c49c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd38:	480b      	ldr	r0, [pc, #44]	; (800dd68 <prvInitialiseTaskLists+0x74>)
 800dd3a:	f7fe fbaf 	bl	800c49c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd3e:	4b0b      	ldr	r3, [pc, #44]	; (800dd6c <prvInitialiseTaskLists+0x78>)
 800dd40:	4a05      	ldr	r2, [pc, #20]	; (800dd58 <prvInitialiseTaskLists+0x64>)
 800dd42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd44:	4b0a      	ldr	r3, [pc, #40]	; (800dd70 <prvInitialiseTaskLists+0x7c>)
 800dd46:	4a05      	ldr	r2, [pc, #20]	; (800dd5c <prvInitialiseTaskLists+0x68>)
 800dd48:	601a      	str	r2, [r3, #0]
}
 800dd4a:	bf00      	nop
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	20000b80 	.word	0x20000b80
 800dd58:	20000fe0 	.word	0x20000fe0
 800dd5c:	20000ff4 	.word	0x20000ff4
 800dd60:	20001010 	.word	0x20001010
 800dd64:	20001024 	.word	0x20001024
 800dd68:	2000103c 	.word	0x2000103c
 800dd6c:	20001008 	.word	0x20001008
 800dd70:	2000100c 	.word	0x2000100c

0800dd74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd7a:	e019      	b.n	800ddb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd7c:	f000 fdd2 	bl	800e924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd80:	4b10      	ldr	r3, [pc, #64]	; (800ddc4 <prvCheckTasksWaitingTermination+0x50>)
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3304      	adds	r3, #4
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fe fc0f 	bl	800c5b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd92:	4b0d      	ldr	r3, [pc, #52]	; (800ddc8 <prvCheckTasksWaitingTermination+0x54>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	3b01      	subs	r3, #1
 800dd98:	4a0b      	ldr	r2, [pc, #44]	; (800ddc8 <prvCheckTasksWaitingTermination+0x54>)
 800dd9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd9c:	4b0b      	ldr	r3, [pc, #44]	; (800ddcc <prvCheckTasksWaitingTermination+0x58>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	3b01      	subs	r3, #1
 800dda2:	4a0a      	ldr	r2, [pc, #40]	; (800ddcc <prvCheckTasksWaitingTermination+0x58>)
 800dda4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dda6:	f000 fded 	bl	800e984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 f810 	bl	800ddd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddb0:	4b06      	ldr	r3, [pc, #24]	; (800ddcc <prvCheckTasksWaitingTermination+0x58>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d1e1      	bne.n	800dd7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ddb8:	bf00      	nop
 800ddba:	bf00      	nop
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	20001024 	.word	0x20001024
 800ddc8:	20001050 	.word	0x20001050
 800ddcc:	20001038 	.word	0x20001038

0800ddd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d108      	bne.n	800ddf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dde6:	4618      	mov	r0, r3
 800dde8:	f000 ff8a 	bl	800ed00 <vPortFree>
				vPortFree( pxTCB );
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 ff87 	bl	800ed00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ddf2:	e018      	b.n	800de26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d103      	bne.n	800de06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 ff7e 	bl	800ed00 <vPortFree>
	}
 800de04:	e00f      	b.n	800de26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800de0c:	2b02      	cmp	r3, #2
 800de0e:	d00a      	beq.n	800de26 <prvDeleteTCB+0x56>
	__asm volatile
 800de10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	60fb      	str	r3, [r7, #12]
}
 800de22:	bf00      	nop
 800de24:	e7fe      	b.n	800de24 <prvDeleteTCB+0x54>
	}
 800de26:	bf00      	nop
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
	...

0800de30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de36:	4b0c      	ldr	r3, [pc, #48]	; (800de68 <prvResetNextTaskUnblockTime+0x38>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d104      	bne.n	800de4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de40:	4b0a      	ldr	r3, [pc, #40]	; (800de6c <prvResetNextTaskUnblockTime+0x3c>)
 800de42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de48:	e008      	b.n	800de5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de4a:	4b07      	ldr	r3, [pc, #28]	; (800de68 <prvResetNextTaskUnblockTime+0x38>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	4a04      	ldr	r2, [pc, #16]	; (800de6c <prvResetNextTaskUnblockTime+0x3c>)
 800de5a:	6013      	str	r3, [r2, #0]
}
 800de5c:	bf00      	nop
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr
 800de68:	20001008 	.word	0x20001008
 800de6c:	20001070 	.word	0x20001070

0800de70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de76:	4b0b      	ldr	r3, [pc, #44]	; (800dea4 <xTaskGetSchedulerState+0x34>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d102      	bne.n	800de84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de7e:	2301      	movs	r3, #1
 800de80:	607b      	str	r3, [r7, #4]
 800de82:	e008      	b.n	800de96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de84:	4b08      	ldr	r3, [pc, #32]	; (800dea8 <xTaskGetSchedulerState+0x38>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d102      	bne.n	800de92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de8c:	2302      	movs	r3, #2
 800de8e:	607b      	str	r3, [r7, #4]
 800de90:	e001      	b.n	800de96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de92:	2300      	movs	r3, #0
 800de94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de96:	687b      	ldr	r3, [r7, #4]
	}
 800de98:	4618      	mov	r0, r3
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	2000105c 	.word	0x2000105c
 800dea8:	20001078 	.word	0x20001078

0800deac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800deb8:	2300      	movs	r3, #0
 800deba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d056      	beq.n	800df70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dec2:	4b2e      	ldr	r3, [pc, #184]	; (800df7c <xTaskPriorityDisinherit+0xd0>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	693a      	ldr	r2, [r7, #16]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d00a      	beq.n	800dee2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800decc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	60fb      	str	r3, [r7, #12]
}
 800dede:	bf00      	nop
 800dee0:	e7fe      	b.n	800dee0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d10a      	bne.n	800df00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	60bb      	str	r3, [r7, #8]
}
 800defc:	bf00      	nop
 800defe:	e7fe      	b.n	800defe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df04:	1e5a      	subs	r2, r3, #1
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df12:	429a      	cmp	r2, r3
 800df14:	d02c      	beq.n	800df70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d128      	bne.n	800df70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	3304      	adds	r3, #4
 800df22:	4618      	mov	r0, r3
 800df24:	f7fe fb44 	bl	800c5b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df40:	4b0f      	ldr	r3, [pc, #60]	; (800df80 <xTaskPriorityDisinherit+0xd4>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	429a      	cmp	r2, r3
 800df46:	d903      	bls.n	800df50 <xTaskPriorityDisinherit+0xa4>
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4c:	4a0c      	ldr	r2, [pc, #48]	; (800df80 <xTaskPriorityDisinherit+0xd4>)
 800df4e:	6013      	str	r3, [r2, #0]
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df54:	4613      	mov	r3, r2
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	4413      	add	r3, r2
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4a09      	ldr	r2, [pc, #36]	; (800df84 <xTaskPriorityDisinherit+0xd8>)
 800df5e:	441a      	add	r2, r3
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	3304      	adds	r3, #4
 800df64:	4619      	mov	r1, r3
 800df66:	4610      	mov	r0, r2
 800df68:	f7fe fac5 	bl	800c4f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800df6c:	2301      	movs	r3, #1
 800df6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df70:	697b      	ldr	r3, [r7, #20]
	}
 800df72:	4618      	mov	r0, r3
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	20000b7c 	.word	0x20000b7c
 800df80:	20001058 	.word	0x20001058
 800df84:	20000b80 	.word	0x20000b80

0800df88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800df92:	4b21      	ldr	r3, [pc, #132]	; (800e018 <prvAddCurrentTaskToDelayedList+0x90>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df98:	4b20      	ldr	r3, [pc, #128]	; (800e01c <prvAddCurrentTaskToDelayedList+0x94>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3304      	adds	r3, #4
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fe fb06 	bl	800c5b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfaa:	d10a      	bne.n	800dfc2 <prvAddCurrentTaskToDelayedList+0x3a>
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d007      	beq.n	800dfc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfb2:	4b1a      	ldr	r3, [pc, #104]	; (800e01c <prvAddCurrentTaskToDelayedList+0x94>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	3304      	adds	r3, #4
 800dfb8:	4619      	mov	r1, r3
 800dfba:	4819      	ldr	r0, [pc, #100]	; (800e020 <prvAddCurrentTaskToDelayedList+0x98>)
 800dfbc:	f7fe fa9b 	bl	800c4f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dfc0:	e026      	b.n	800e010 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dfc2:	68fa      	ldr	r2, [r7, #12]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dfca:	4b14      	ldr	r3, [pc, #80]	; (800e01c <prvAddCurrentTaskToDelayedList+0x94>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	68ba      	ldr	r2, [r7, #8]
 800dfd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dfd2:	68ba      	ldr	r2, [r7, #8]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d209      	bcs.n	800dfee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfda:	4b12      	ldr	r3, [pc, #72]	; (800e024 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	4b0f      	ldr	r3, [pc, #60]	; (800e01c <prvAddCurrentTaskToDelayedList+0x94>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	4610      	mov	r0, r2
 800dfe8:	f7fe faa9 	bl	800c53e <vListInsert>
}
 800dfec:	e010      	b.n	800e010 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfee:	4b0e      	ldr	r3, [pc, #56]	; (800e028 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	4b0a      	ldr	r3, [pc, #40]	; (800e01c <prvAddCurrentTaskToDelayedList+0x94>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	3304      	adds	r3, #4
 800dff8:	4619      	mov	r1, r3
 800dffa:	4610      	mov	r0, r2
 800dffc:	f7fe fa9f 	bl	800c53e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e000:	4b0a      	ldr	r3, [pc, #40]	; (800e02c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	429a      	cmp	r2, r3
 800e008:	d202      	bcs.n	800e010 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e00a:	4a08      	ldr	r2, [pc, #32]	; (800e02c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	6013      	str	r3, [r2, #0]
}
 800e010:	bf00      	nop
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	20001054 	.word	0x20001054
 800e01c:	20000b7c 	.word	0x20000b7c
 800e020:	2000103c 	.word	0x2000103c
 800e024:	2000100c 	.word	0x2000100c
 800e028:	20001008 	.word	0x20001008
 800e02c:	20001070 	.word	0x20001070

0800e030 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b08a      	sub	sp, #40	; 0x28
 800e034:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e036:	2300      	movs	r3, #0
 800e038:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e03a:	f000 fb07 	bl	800e64c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e03e:	4b1c      	ldr	r3, [pc, #112]	; (800e0b0 <xTimerCreateTimerTask+0x80>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d021      	beq.n	800e08a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e046:	2300      	movs	r3, #0
 800e048:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e04a:	2300      	movs	r3, #0
 800e04c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e04e:	1d3a      	adds	r2, r7, #4
 800e050:	f107 0108 	add.w	r1, r7, #8
 800e054:	f107 030c 	add.w	r3, r7, #12
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fe fa05 	bl	800c468 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e05e:	6879      	ldr	r1, [r7, #4]
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	9202      	str	r2, [sp, #8]
 800e066:	9301      	str	r3, [sp, #4]
 800e068:	2302      	movs	r3, #2
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	2300      	movs	r3, #0
 800e06e:	460a      	mov	r2, r1
 800e070:	4910      	ldr	r1, [pc, #64]	; (800e0b4 <xTimerCreateTimerTask+0x84>)
 800e072:	4811      	ldr	r0, [pc, #68]	; (800e0b8 <xTimerCreateTimerTask+0x88>)
 800e074:	f7ff f86c 	bl	800d150 <xTaskCreateStatic>
 800e078:	4603      	mov	r3, r0
 800e07a:	4a10      	ldr	r2, [pc, #64]	; (800e0bc <xTimerCreateTimerTask+0x8c>)
 800e07c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e07e:	4b0f      	ldr	r3, [pc, #60]	; (800e0bc <xTimerCreateTimerTask+0x8c>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d001      	beq.n	800e08a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e086:	2301      	movs	r3, #1
 800e088:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d10a      	bne.n	800e0a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	613b      	str	r3, [r7, #16]
}
 800e0a2:	bf00      	nop
 800e0a4:	e7fe      	b.n	800e0a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e0a6:	697b      	ldr	r3, [r7, #20]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3718      	adds	r7, #24
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	200010ac 	.word	0x200010ac
 800e0b4:	0800f900 	.word	0x0800f900
 800e0b8:	0800e1f5 	.word	0x0800e1f5
 800e0bc:	200010b0 	.word	0x200010b0

0800e0c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b08a      	sub	sp, #40	; 0x28
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	607a      	str	r2, [r7, #4]
 800e0cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d10a      	bne.n	800e0ee <xTimerGenericCommand+0x2e>
	__asm volatile
 800e0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0dc:	f383 8811 	msr	BASEPRI, r3
 800e0e0:	f3bf 8f6f 	isb	sy
 800e0e4:	f3bf 8f4f 	dsb	sy
 800e0e8:	623b      	str	r3, [r7, #32]
}
 800e0ea:	bf00      	nop
 800e0ec:	e7fe      	b.n	800e0ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e0ee:	4b1a      	ldr	r3, [pc, #104]	; (800e158 <xTimerGenericCommand+0x98>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d02a      	beq.n	800e14c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	2b05      	cmp	r3, #5
 800e106:	dc18      	bgt.n	800e13a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e108:	f7ff feb2 	bl	800de70 <xTaskGetSchedulerState>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b02      	cmp	r3, #2
 800e110:	d109      	bne.n	800e126 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e112:	4b11      	ldr	r3, [pc, #68]	; (800e158 <xTimerGenericCommand+0x98>)
 800e114:	6818      	ldr	r0, [r3, #0]
 800e116:	f107 0110 	add.w	r1, r7, #16
 800e11a:	2300      	movs	r3, #0
 800e11c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e11e:	f7fe fbaf 	bl	800c880 <xQueueGenericSend>
 800e122:	6278      	str	r0, [r7, #36]	; 0x24
 800e124:	e012      	b.n	800e14c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e126:	4b0c      	ldr	r3, [pc, #48]	; (800e158 <xTimerGenericCommand+0x98>)
 800e128:	6818      	ldr	r0, [r3, #0]
 800e12a:	f107 0110 	add.w	r1, r7, #16
 800e12e:	2300      	movs	r3, #0
 800e130:	2200      	movs	r2, #0
 800e132:	f7fe fba5 	bl	800c880 <xQueueGenericSend>
 800e136:	6278      	str	r0, [r7, #36]	; 0x24
 800e138:	e008      	b.n	800e14c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e13a:	4b07      	ldr	r3, [pc, #28]	; (800e158 <xTimerGenericCommand+0x98>)
 800e13c:	6818      	ldr	r0, [r3, #0]
 800e13e:	f107 0110 	add.w	r1, r7, #16
 800e142:	2300      	movs	r3, #0
 800e144:	683a      	ldr	r2, [r7, #0]
 800e146:	f7fe fc99 	bl	800ca7c <xQueueGenericSendFromISR>
 800e14a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3728      	adds	r7, #40	; 0x28
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	200010ac 	.word	0x200010ac

0800e15c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b088      	sub	sp, #32
 800e160:	af02      	add	r7, sp, #8
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e166:	4b22      	ldr	r3, [pc, #136]	; (800e1f0 <prvProcessExpiredTimer+0x94>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	3304      	adds	r3, #4
 800e174:	4618      	mov	r0, r3
 800e176:	f7fe fa1b 	bl	800c5b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e180:	f003 0304 	and.w	r3, r3, #4
 800e184:	2b00      	cmp	r3, #0
 800e186:	d022      	beq.n	800e1ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	699a      	ldr	r2, [r3, #24]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	18d1      	adds	r1, r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	683a      	ldr	r2, [r7, #0]
 800e194:	6978      	ldr	r0, [r7, #20]
 800e196:	f000 f8d1 	bl	800e33c <prvInsertTimerInActiveList>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d01f      	beq.n	800e1e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	9300      	str	r3, [sp, #0]
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	6978      	ldr	r0, [r7, #20]
 800e1ac:	f7ff ff88 	bl	800e0c0 <xTimerGenericCommand>
 800e1b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d113      	bne.n	800e1e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1bc:	f383 8811 	msr	BASEPRI, r3
 800e1c0:	f3bf 8f6f 	isb	sy
 800e1c4:	f3bf 8f4f 	dsb	sy
 800e1c8:	60fb      	str	r3, [r7, #12]
}
 800e1ca:	bf00      	nop
 800e1cc:	e7fe      	b.n	800e1cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1d4:	f023 0301 	bic.w	r3, r3, #1
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	6a1b      	ldr	r3, [r3, #32]
 800e1e4:	6978      	ldr	r0, [r7, #20]
 800e1e6:	4798      	blx	r3
}
 800e1e8:	bf00      	nop
 800e1ea:	3718      	adds	r7, #24
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	200010a4 	.word	0x200010a4

0800e1f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e1fc:	f107 0308 	add.w	r3, r7, #8
 800e200:	4618      	mov	r0, r3
 800e202:	f000 f857 	bl	800e2b4 <prvGetNextExpireTime>
 800e206:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	4619      	mov	r1, r3
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f000 f803 	bl	800e218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e212:	f000 f8d5 	bl	800e3c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e216:	e7f1      	b.n	800e1fc <prvTimerTask+0x8>

0800e218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e222:	f7ff fa43 	bl	800d6ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e226:	f107 0308 	add.w	r3, r7, #8
 800e22a:	4618      	mov	r0, r3
 800e22c:	f000 f866 	bl	800e2fc <prvSampleTimeNow>
 800e230:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d130      	bne.n	800e29a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d10a      	bne.n	800e254 <prvProcessTimerOrBlockTask+0x3c>
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	429a      	cmp	r2, r3
 800e244:	d806      	bhi.n	800e254 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e246:	f7ff fa3f 	bl	800d6c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e24a:	68f9      	ldr	r1, [r7, #12]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7ff ff85 	bl	800e15c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e252:	e024      	b.n	800e29e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d008      	beq.n	800e26c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e25a:	4b13      	ldr	r3, [pc, #76]	; (800e2a8 <prvProcessTimerOrBlockTask+0x90>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d101      	bne.n	800e268 <prvProcessTimerOrBlockTask+0x50>
 800e264:	2301      	movs	r3, #1
 800e266:	e000      	b.n	800e26a <prvProcessTimerOrBlockTask+0x52>
 800e268:	2300      	movs	r3, #0
 800e26a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e26c:	4b0f      	ldr	r3, [pc, #60]	; (800e2ac <prvProcessTimerOrBlockTask+0x94>)
 800e26e:	6818      	ldr	r0, [r3, #0]
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	1ad3      	subs	r3, r2, r3
 800e276:	683a      	ldr	r2, [r7, #0]
 800e278:	4619      	mov	r1, r3
 800e27a:	f7fe ff35 	bl	800d0e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e27e:	f7ff fa23 	bl	800d6c8 <xTaskResumeAll>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d10a      	bne.n	800e29e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e288:	4b09      	ldr	r3, [pc, #36]	; (800e2b0 <prvProcessTimerOrBlockTask+0x98>)
 800e28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	f3bf 8f6f 	isb	sy
}
 800e298:	e001      	b.n	800e29e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e29a:	f7ff fa15 	bl	800d6c8 <xTaskResumeAll>
}
 800e29e:	bf00      	nop
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	200010a8 	.word	0x200010a8
 800e2ac:	200010ac 	.word	0x200010ac
 800e2b0:	e000ed04 	.word	0xe000ed04

0800e2b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e2bc:	4b0e      	ldr	r3, [pc, #56]	; (800e2f8 <prvGetNextExpireTime+0x44>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d101      	bne.n	800e2ca <prvGetNextExpireTime+0x16>
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	e000      	b.n	800e2cc <prvGetNextExpireTime+0x18>
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d105      	bne.n	800e2e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2d8:	4b07      	ldr	r3, [pc, #28]	; (800e2f8 <prvGetNextExpireTime+0x44>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	60fb      	str	r3, [r7, #12]
 800e2e2:	e001      	b.n	800e2e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop
 800e2f8:	200010a4 	.word	0x200010a4

0800e2fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e304:	f7ff fa7e 	bl	800d804 <xTaskGetTickCount>
 800e308:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e30a:	4b0b      	ldr	r3, [pc, #44]	; (800e338 <prvSampleTimeNow+0x3c>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	68fa      	ldr	r2, [r7, #12]
 800e310:	429a      	cmp	r2, r3
 800e312:	d205      	bcs.n	800e320 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e314:	f000 f936 	bl	800e584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	e002      	b.n	800e326 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e326:	4a04      	ldr	r2, [pc, #16]	; (800e338 <prvSampleTimeNow+0x3c>)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e32c:	68fb      	ldr	r3, [r7, #12]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	200010b4 	.word	0x200010b4

0800e33c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b086      	sub	sp, #24
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
 800e348:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e34a:	2300      	movs	r3, #0
 800e34c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d812      	bhi.n	800e388 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	1ad2      	subs	r2, r2, r3
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	699b      	ldr	r3, [r3, #24]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d302      	bcc.n	800e376 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e370:	2301      	movs	r3, #1
 800e372:	617b      	str	r3, [r7, #20]
 800e374:	e01b      	b.n	800e3ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e376:	4b10      	ldr	r3, [pc, #64]	; (800e3b8 <prvInsertTimerInActiveList+0x7c>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	3304      	adds	r3, #4
 800e37e:	4619      	mov	r1, r3
 800e380:	4610      	mov	r0, r2
 800e382:	f7fe f8dc 	bl	800c53e <vListInsert>
 800e386:	e012      	b.n	800e3ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d206      	bcs.n	800e39e <prvInsertTimerInActiveList+0x62>
 800e390:	68ba      	ldr	r2, [r7, #8]
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	429a      	cmp	r2, r3
 800e396:	d302      	bcc.n	800e39e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e398:	2301      	movs	r3, #1
 800e39a:	617b      	str	r3, [r7, #20]
 800e39c:	e007      	b.n	800e3ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e39e:	4b07      	ldr	r3, [pc, #28]	; (800e3bc <prvInsertTimerInActiveList+0x80>)
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	4610      	mov	r0, r2
 800e3aa:	f7fe f8c8 	bl	800c53e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e3ae:	697b      	ldr	r3, [r7, #20]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3718      	adds	r7, #24
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	200010a8 	.word	0x200010a8
 800e3bc:	200010a4 	.word	0x200010a4

0800e3c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b08e      	sub	sp, #56	; 0x38
 800e3c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3c6:	e0ca      	b.n	800e55e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	da18      	bge.n	800e400 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e3ce:	1d3b      	adds	r3, r7, #4
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d10a      	bne.n	800e3f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3de:	f383 8811 	msr	BASEPRI, r3
 800e3e2:	f3bf 8f6f 	isb	sy
 800e3e6:	f3bf 8f4f 	dsb	sy
 800e3ea:	61fb      	str	r3, [r7, #28]
}
 800e3ec:	bf00      	nop
 800e3ee:	e7fe      	b.n	800e3ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f6:	6850      	ldr	r0, [r2, #4]
 800e3f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3fa:	6892      	ldr	r2, [r2, #8]
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	f2c0 80aa 	blt.w	800e55c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40e:	695b      	ldr	r3, [r3, #20]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d004      	beq.n	800e41e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e416:	3304      	adds	r3, #4
 800e418:	4618      	mov	r0, r3
 800e41a:	f7fe f8c9 	bl	800c5b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e41e:	463b      	mov	r3, r7
 800e420:	4618      	mov	r0, r3
 800e422:	f7ff ff6b 	bl	800e2fc <prvSampleTimeNow>
 800e426:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2b09      	cmp	r3, #9
 800e42c:	f200 8097 	bhi.w	800e55e <prvProcessReceivedCommands+0x19e>
 800e430:	a201      	add	r2, pc, #4	; (adr r2, 800e438 <prvProcessReceivedCommands+0x78>)
 800e432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e436:	bf00      	nop
 800e438:	0800e461 	.word	0x0800e461
 800e43c:	0800e461 	.word	0x0800e461
 800e440:	0800e461 	.word	0x0800e461
 800e444:	0800e4d5 	.word	0x0800e4d5
 800e448:	0800e4e9 	.word	0x0800e4e9
 800e44c:	0800e533 	.word	0x0800e533
 800e450:	0800e461 	.word	0x0800e461
 800e454:	0800e461 	.word	0x0800e461
 800e458:	0800e4d5 	.word	0x0800e4d5
 800e45c:	0800e4e9 	.word	0x0800e4e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e466:	f043 0301 	orr.w	r3, r3, #1
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e472:	68ba      	ldr	r2, [r7, #8]
 800e474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	18d1      	adds	r1, r2, r3
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e47e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e480:	f7ff ff5c 	bl	800e33c <prvInsertTimerInActiveList>
 800e484:	4603      	mov	r3, r0
 800e486:	2b00      	cmp	r3, #0
 800e488:	d069      	beq.n	800e55e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48c:	6a1b      	ldr	r3, [r3, #32]
 800e48e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e490:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e498:	f003 0304 	and.w	r3, r3, #4
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d05e      	beq.n	800e55e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e4a0:	68ba      	ldr	r2, [r7, #8]
 800e4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a4:	699b      	ldr	r3, [r3, #24]
 800e4a6:	441a      	add	r2, r3
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	2100      	movs	r1, #0
 800e4b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4b2:	f7ff fe05 	bl	800e0c0 <xTimerGenericCommand>
 800e4b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d14f      	bne.n	800e55e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c2:	f383 8811 	msr	BASEPRI, r3
 800e4c6:	f3bf 8f6f 	isb	sy
 800e4ca:	f3bf 8f4f 	dsb	sy
 800e4ce:	61bb      	str	r3, [r7, #24]
}
 800e4d0:	bf00      	nop
 800e4d2:	e7fe      	b.n	800e4d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4da:	f023 0301 	bic.w	r3, r3, #1
 800e4de:	b2da      	uxtb	r2, r3
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e4e6:	e03a      	b.n	800e55e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4ee:	f043 0301 	orr.w	r3, r3, #1
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e502:	699b      	ldr	r3, [r3, #24]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d10a      	bne.n	800e51e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50c:	f383 8811 	msr	BASEPRI, r3
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	617b      	str	r3, [r7, #20]
}
 800e51a:	bf00      	nop
 800e51c:	e7fe      	b.n	800e51c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e520:	699a      	ldr	r2, [r3, #24]
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e524:	18d1      	adds	r1, r2, r3
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e52a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e52c:	f7ff ff06 	bl	800e33c <prvInsertTimerInActiveList>
					break;
 800e530:	e015      	b.n	800e55e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e538:	f003 0302 	and.w	r3, r3, #2
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d103      	bne.n	800e548 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e542:	f000 fbdd 	bl	800ed00 <vPortFree>
 800e546:	e00a      	b.n	800e55e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e54e:	f023 0301 	bic.w	r3, r3, #1
 800e552:	b2da      	uxtb	r2, r3
 800e554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e55a:	e000      	b.n	800e55e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e55c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e55e:	4b08      	ldr	r3, [pc, #32]	; (800e580 <prvProcessReceivedCommands+0x1c0>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	1d39      	adds	r1, r7, #4
 800e564:	2200      	movs	r2, #0
 800e566:	4618      	mov	r0, r3
 800e568:	f7fe fb24 	bl	800cbb4 <xQueueReceive>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f47f af2a 	bne.w	800e3c8 <prvProcessReceivedCommands+0x8>
	}
}
 800e574:	bf00      	nop
 800e576:	bf00      	nop
 800e578:	3730      	adds	r7, #48	; 0x30
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	200010ac 	.word	0x200010ac

0800e584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b088      	sub	sp, #32
 800e588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e58a:	e048      	b.n	800e61e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e58c:	4b2d      	ldr	r3, [pc, #180]	; (800e644 <prvSwitchTimerLists+0xc0>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e596:	4b2b      	ldr	r3, [pc, #172]	; (800e644 <prvSwitchTimerLists+0xc0>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	68db      	ldr	r3, [r3, #12]
 800e59e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	3304      	adds	r3, #4
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fe f803 	bl	800c5b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6a1b      	ldr	r3, [r3, #32]
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5b8:	f003 0304 	and.w	r3, r3, #4
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d02e      	beq.n	800e61e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	699b      	ldr	r3, [r3, #24]
 800e5c4:	693a      	ldr	r2, [r7, #16]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e5ca:	68ba      	ldr	r2, [r7, #8]
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d90e      	bls.n	800e5f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	68fa      	ldr	r2, [r7, #12]
 800e5dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e5de:	4b19      	ldr	r3, [pc, #100]	; (800e644 <prvSwitchTimerLists+0xc0>)
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	f7fd ffa8 	bl	800c53e <vListInsert>
 800e5ee:	e016      	b.n	800e61e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	693a      	ldr	r2, [r7, #16]
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f7ff fd60 	bl	800e0c0 <xTimerGenericCommand>
 800e600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d10a      	bne.n	800e61e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60c:	f383 8811 	msr	BASEPRI, r3
 800e610:	f3bf 8f6f 	isb	sy
 800e614:	f3bf 8f4f 	dsb	sy
 800e618:	603b      	str	r3, [r7, #0]
}
 800e61a:	bf00      	nop
 800e61c:	e7fe      	b.n	800e61c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e61e:	4b09      	ldr	r3, [pc, #36]	; (800e644 <prvSwitchTimerLists+0xc0>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d1b1      	bne.n	800e58c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e628:	4b06      	ldr	r3, [pc, #24]	; (800e644 <prvSwitchTimerLists+0xc0>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e62e:	4b06      	ldr	r3, [pc, #24]	; (800e648 <prvSwitchTimerLists+0xc4>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a04      	ldr	r2, [pc, #16]	; (800e644 <prvSwitchTimerLists+0xc0>)
 800e634:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e636:	4a04      	ldr	r2, [pc, #16]	; (800e648 <prvSwitchTimerLists+0xc4>)
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	6013      	str	r3, [r2, #0]
}
 800e63c:	bf00      	nop
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	200010a4 	.word	0x200010a4
 800e648:	200010a8 	.word	0x200010a8

0800e64c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e652:	f000 f967 	bl	800e924 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e656:	4b15      	ldr	r3, [pc, #84]	; (800e6ac <prvCheckForValidListAndQueue+0x60>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d120      	bne.n	800e6a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e65e:	4814      	ldr	r0, [pc, #80]	; (800e6b0 <prvCheckForValidListAndQueue+0x64>)
 800e660:	f7fd ff1c 	bl	800c49c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e664:	4813      	ldr	r0, [pc, #76]	; (800e6b4 <prvCheckForValidListAndQueue+0x68>)
 800e666:	f7fd ff19 	bl	800c49c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e66a:	4b13      	ldr	r3, [pc, #76]	; (800e6b8 <prvCheckForValidListAndQueue+0x6c>)
 800e66c:	4a10      	ldr	r2, [pc, #64]	; (800e6b0 <prvCheckForValidListAndQueue+0x64>)
 800e66e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e670:	4b12      	ldr	r3, [pc, #72]	; (800e6bc <prvCheckForValidListAndQueue+0x70>)
 800e672:	4a10      	ldr	r2, [pc, #64]	; (800e6b4 <prvCheckForValidListAndQueue+0x68>)
 800e674:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e676:	2300      	movs	r3, #0
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	4b11      	ldr	r3, [pc, #68]	; (800e6c0 <prvCheckForValidListAndQueue+0x74>)
 800e67c:	4a11      	ldr	r2, [pc, #68]	; (800e6c4 <prvCheckForValidListAndQueue+0x78>)
 800e67e:	2110      	movs	r1, #16
 800e680:	200a      	movs	r0, #10
 800e682:	f7fe f827 	bl	800c6d4 <xQueueGenericCreateStatic>
 800e686:	4603      	mov	r3, r0
 800e688:	4a08      	ldr	r2, [pc, #32]	; (800e6ac <prvCheckForValidListAndQueue+0x60>)
 800e68a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e68c:	4b07      	ldr	r3, [pc, #28]	; (800e6ac <prvCheckForValidListAndQueue+0x60>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d005      	beq.n	800e6a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e694:	4b05      	ldr	r3, [pc, #20]	; (800e6ac <prvCheckForValidListAndQueue+0x60>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	490b      	ldr	r1, [pc, #44]	; (800e6c8 <prvCheckForValidListAndQueue+0x7c>)
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fe fcfa 	bl	800d094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6a0:	f000 f970 	bl	800e984 <vPortExitCritical>
}
 800e6a4:	bf00      	nop
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	200010ac 	.word	0x200010ac
 800e6b0:	2000107c 	.word	0x2000107c
 800e6b4:	20001090 	.word	0x20001090
 800e6b8:	200010a4 	.word	0x200010a4
 800e6bc:	200010a8 	.word	0x200010a8
 800e6c0:	20001158 	.word	0x20001158
 800e6c4:	200010b8 	.word	0x200010b8
 800e6c8:	0800f908 	.word	0x0800f908

0800e6cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	3b04      	subs	r3, #4
 800e6dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e6e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	3b04      	subs	r3, #4
 800e6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	f023 0201 	bic.w	r2, r3, #1
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	3b04      	subs	r3, #4
 800e6fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e6fc:	4a0c      	ldr	r2, [pc, #48]	; (800e730 <pxPortInitialiseStack+0x64>)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3b14      	subs	r3, #20
 800e706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	3b04      	subs	r3, #4
 800e712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f06f 0202 	mvn.w	r2, #2
 800e71a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	3b20      	subs	r3, #32
 800e720:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e722:	68fb      	ldr	r3, [r7, #12]
}
 800e724:	4618      	mov	r0, r3
 800e726:	3714      	adds	r7, #20
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr
 800e730:	0800e735 	.word	0x0800e735

0800e734 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e73a:	2300      	movs	r3, #0
 800e73c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e73e:	4b12      	ldr	r3, [pc, #72]	; (800e788 <prvTaskExitError+0x54>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e746:	d00a      	beq.n	800e75e <prvTaskExitError+0x2a>
	__asm volatile
 800e748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74c:	f383 8811 	msr	BASEPRI, r3
 800e750:	f3bf 8f6f 	isb	sy
 800e754:	f3bf 8f4f 	dsb	sy
 800e758:	60fb      	str	r3, [r7, #12]
}
 800e75a:	bf00      	nop
 800e75c:	e7fe      	b.n	800e75c <prvTaskExitError+0x28>
	__asm volatile
 800e75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e762:	f383 8811 	msr	BASEPRI, r3
 800e766:	f3bf 8f6f 	isb	sy
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	60bb      	str	r3, [r7, #8]
}
 800e770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e772:	bf00      	nop
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d0fc      	beq.n	800e774 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e77a:	bf00      	nop
 800e77c:	bf00      	nop
 800e77e:	3714      	adds	r7, #20
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr
 800e788:	2000002c 	.word	0x2000002c
 800e78c:	00000000 	.word	0x00000000

0800e790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e790:	4b07      	ldr	r3, [pc, #28]	; (800e7b0 <pxCurrentTCBConst2>)
 800e792:	6819      	ldr	r1, [r3, #0]
 800e794:	6808      	ldr	r0, [r1, #0]
 800e796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79a:	f380 8809 	msr	PSP, r0
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f04f 0000 	mov.w	r0, #0
 800e7a6:	f380 8811 	msr	BASEPRI, r0
 800e7aa:	4770      	bx	lr
 800e7ac:	f3af 8000 	nop.w

0800e7b0 <pxCurrentTCBConst2>:
 800e7b0:	20000b7c 	.word	0x20000b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e7b4:	bf00      	nop
 800e7b6:	bf00      	nop

0800e7b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e7b8:	4808      	ldr	r0, [pc, #32]	; (800e7dc <prvPortStartFirstTask+0x24>)
 800e7ba:	6800      	ldr	r0, [r0, #0]
 800e7bc:	6800      	ldr	r0, [r0, #0]
 800e7be:	f380 8808 	msr	MSP, r0
 800e7c2:	f04f 0000 	mov.w	r0, #0
 800e7c6:	f380 8814 	msr	CONTROL, r0
 800e7ca:	b662      	cpsie	i
 800e7cc:	b661      	cpsie	f
 800e7ce:	f3bf 8f4f 	dsb	sy
 800e7d2:	f3bf 8f6f 	isb	sy
 800e7d6:	df00      	svc	0
 800e7d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e7da:	bf00      	nop
 800e7dc:	e000ed08 	.word	0xe000ed08

0800e7e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b086      	sub	sp, #24
 800e7e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e7e6:	4b46      	ldr	r3, [pc, #280]	; (800e900 <xPortStartScheduler+0x120>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a46      	ldr	r2, [pc, #280]	; (800e904 <xPortStartScheduler+0x124>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d10a      	bne.n	800e806 <xPortStartScheduler+0x26>
	__asm volatile
 800e7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f4:	f383 8811 	msr	BASEPRI, r3
 800e7f8:	f3bf 8f6f 	isb	sy
 800e7fc:	f3bf 8f4f 	dsb	sy
 800e800:	613b      	str	r3, [r7, #16]
}
 800e802:	bf00      	nop
 800e804:	e7fe      	b.n	800e804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e806:	4b3e      	ldr	r3, [pc, #248]	; (800e900 <xPortStartScheduler+0x120>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4a3f      	ldr	r2, [pc, #252]	; (800e908 <xPortStartScheduler+0x128>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d10a      	bne.n	800e826 <xPortStartScheduler+0x46>
	__asm volatile
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	f383 8811 	msr	BASEPRI, r3
 800e818:	f3bf 8f6f 	isb	sy
 800e81c:	f3bf 8f4f 	dsb	sy
 800e820:	60fb      	str	r3, [r7, #12]
}
 800e822:	bf00      	nop
 800e824:	e7fe      	b.n	800e824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e826:	4b39      	ldr	r3, [pc, #228]	; (800e90c <xPortStartScheduler+0x12c>)
 800e828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	22ff      	movs	r2, #255	; 0xff
 800e836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e840:	78fb      	ldrb	r3, [r7, #3]
 800e842:	b2db      	uxtb	r3, r3
 800e844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e848:	b2da      	uxtb	r2, r3
 800e84a:	4b31      	ldr	r3, [pc, #196]	; (800e910 <xPortStartScheduler+0x130>)
 800e84c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e84e:	4b31      	ldr	r3, [pc, #196]	; (800e914 <xPortStartScheduler+0x134>)
 800e850:	2207      	movs	r2, #7
 800e852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e854:	e009      	b.n	800e86a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e856:	4b2f      	ldr	r3, [pc, #188]	; (800e914 <xPortStartScheduler+0x134>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	3b01      	subs	r3, #1
 800e85c:	4a2d      	ldr	r2, [pc, #180]	; (800e914 <xPortStartScheduler+0x134>)
 800e85e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e860:	78fb      	ldrb	r3, [r7, #3]
 800e862:	b2db      	uxtb	r3, r3
 800e864:	005b      	lsls	r3, r3, #1
 800e866:	b2db      	uxtb	r3, r3
 800e868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e86a:	78fb      	ldrb	r3, [r7, #3]
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e872:	2b80      	cmp	r3, #128	; 0x80
 800e874:	d0ef      	beq.n	800e856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e876:	4b27      	ldr	r3, [pc, #156]	; (800e914 <xPortStartScheduler+0x134>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f1c3 0307 	rsb	r3, r3, #7
 800e87e:	2b04      	cmp	r3, #4
 800e880:	d00a      	beq.n	800e898 <xPortStartScheduler+0xb8>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e886:	f383 8811 	msr	BASEPRI, r3
 800e88a:	f3bf 8f6f 	isb	sy
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	60bb      	str	r3, [r7, #8]
}
 800e894:	bf00      	nop
 800e896:	e7fe      	b.n	800e896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e898:	4b1e      	ldr	r3, [pc, #120]	; (800e914 <xPortStartScheduler+0x134>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	021b      	lsls	r3, r3, #8
 800e89e:	4a1d      	ldr	r2, [pc, #116]	; (800e914 <xPortStartScheduler+0x134>)
 800e8a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e8a2:	4b1c      	ldr	r3, [pc, #112]	; (800e914 <xPortStartScheduler+0x134>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e8aa:	4a1a      	ldr	r2, [pc, #104]	; (800e914 <xPortStartScheduler+0x134>)
 800e8ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	b2da      	uxtb	r2, r3
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e8b6:	4b18      	ldr	r3, [pc, #96]	; (800e918 <xPortStartScheduler+0x138>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4a17      	ldr	r2, [pc, #92]	; (800e918 <xPortStartScheduler+0x138>)
 800e8bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e8c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e8c2:	4b15      	ldr	r3, [pc, #84]	; (800e918 <xPortStartScheduler+0x138>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a14      	ldr	r2, [pc, #80]	; (800e918 <xPortStartScheduler+0x138>)
 800e8c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e8cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e8ce:	f000 f8dd 	bl	800ea8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e8d2:	4b12      	ldr	r3, [pc, #72]	; (800e91c <xPortStartScheduler+0x13c>)
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e8d8:	f000 f8fc 	bl	800ead4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e8dc:	4b10      	ldr	r3, [pc, #64]	; (800e920 <xPortStartScheduler+0x140>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a0f      	ldr	r2, [pc, #60]	; (800e920 <xPortStartScheduler+0x140>)
 800e8e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e8e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e8e8:	f7ff ff66 	bl	800e7b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e8ec:	f7ff f854 	bl	800d998 <vTaskSwitchContext>
	prvTaskExitError();
 800e8f0:	f7ff ff20 	bl	800e734 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3718      	adds	r7, #24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	e000ed00 	.word	0xe000ed00
 800e904:	410fc271 	.word	0x410fc271
 800e908:	410fc270 	.word	0x410fc270
 800e90c:	e000e400 	.word	0xe000e400
 800e910:	200011a8 	.word	0x200011a8
 800e914:	200011ac 	.word	0x200011ac
 800e918:	e000ed20 	.word	0xe000ed20
 800e91c:	2000002c 	.word	0x2000002c
 800e920:	e000ef34 	.word	0xe000ef34

0800e924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
	__asm volatile
 800e92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92e:	f383 8811 	msr	BASEPRI, r3
 800e932:	f3bf 8f6f 	isb	sy
 800e936:	f3bf 8f4f 	dsb	sy
 800e93a:	607b      	str	r3, [r7, #4]
}
 800e93c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e93e:	4b0f      	ldr	r3, [pc, #60]	; (800e97c <vPortEnterCritical+0x58>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	3301      	adds	r3, #1
 800e944:	4a0d      	ldr	r2, [pc, #52]	; (800e97c <vPortEnterCritical+0x58>)
 800e946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e948:	4b0c      	ldr	r3, [pc, #48]	; (800e97c <vPortEnterCritical+0x58>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d10f      	bne.n	800e970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e950:	4b0b      	ldr	r3, [pc, #44]	; (800e980 <vPortEnterCritical+0x5c>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	b2db      	uxtb	r3, r3
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00a      	beq.n	800e970 <vPortEnterCritical+0x4c>
	__asm volatile
 800e95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95e:	f383 8811 	msr	BASEPRI, r3
 800e962:	f3bf 8f6f 	isb	sy
 800e966:	f3bf 8f4f 	dsb	sy
 800e96a:	603b      	str	r3, [r7, #0]
}
 800e96c:	bf00      	nop
 800e96e:	e7fe      	b.n	800e96e <vPortEnterCritical+0x4a>
	}
}
 800e970:	bf00      	nop
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr
 800e97c:	2000002c 	.word	0x2000002c
 800e980:	e000ed04 	.word	0xe000ed04

0800e984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e98a:	4b12      	ldr	r3, [pc, #72]	; (800e9d4 <vPortExitCritical+0x50>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10a      	bne.n	800e9a8 <vPortExitCritical+0x24>
	__asm volatile
 800e992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	607b      	str	r3, [r7, #4]
}
 800e9a4:	bf00      	nop
 800e9a6:	e7fe      	b.n	800e9a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e9a8:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <vPortExitCritical+0x50>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	4a09      	ldr	r2, [pc, #36]	; (800e9d4 <vPortExitCritical+0x50>)
 800e9b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e9b2:	4b08      	ldr	r3, [pc, #32]	; (800e9d4 <vPortExitCritical+0x50>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d105      	bne.n	800e9c6 <vPortExitCritical+0x42>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	f383 8811 	msr	BASEPRI, r3
}
 800e9c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e9c6:	bf00      	nop
 800e9c8:	370c      	adds	r7, #12
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	2000002c 	.word	0x2000002c
	...

0800e9e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e9e0:	f3ef 8009 	mrs	r0, PSP
 800e9e4:	f3bf 8f6f 	isb	sy
 800e9e8:	4b15      	ldr	r3, [pc, #84]	; (800ea40 <pxCurrentTCBConst>)
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	f01e 0f10 	tst.w	lr, #16
 800e9f0:	bf08      	it	eq
 800e9f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e9f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fa:	6010      	str	r0, [r2, #0]
 800e9fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea04:	f380 8811 	msr	BASEPRI, r0
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f7fe ffc2 	bl	800d998 <vTaskSwitchContext>
 800ea14:	f04f 0000 	mov.w	r0, #0
 800ea18:	f380 8811 	msr	BASEPRI, r0
 800ea1c:	bc09      	pop	{r0, r3}
 800ea1e:	6819      	ldr	r1, [r3, #0]
 800ea20:	6808      	ldr	r0, [r1, #0]
 800ea22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea26:	f01e 0f10 	tst.w	lr, #16
 800ea2a:	bf08      	it	eq
 800ea2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea30:	f380 8809 	msr	PSP, r0
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	f3af 8000 	nop.w

0800ea40 <pxCurrentTCBConst>:
 800ea40:	20000b7c 	.word	0x20000b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea44:	bf00      	nop
 800ea46:	bf00      	nop

0800ea48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea52:	f383 8811 	msr	BASEPRI, r3
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	607b      	str	r3, [r7, #4]
}
 800ea60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea62:	f7fe fedf 	bl	800d824 <xTaskIncrementTick>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d003      	beq.n	800ea74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea6c:	4b06      	ldr	r3, [pc, #24]	; (800ea88 <xPortSysTickHandler+0x40>)
 800ea6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea72:	601a      	str	r2, [r3, #0]
 800ea74:	2300      	movs	r3, #0
 800ea76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	f383 8811 	msr	BASEPRI, r3
}
 800ea7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea80:	bf00      	nop
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	e000ed04 	.word	0xe000ed04

0800ea8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea90:	4b0b      	ldr	r3, [pc, #44]	; (800eac0 <vPortSetupTimerInterrupt+0x34>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea96:	4b0b      	ldr	r3, [pc, #44]	; (800eac4 <vPortSetupTimerInterrupt+0x38>)
 800ea98:	2200      	movs	r2, #0
 800ea9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea9c:	4b0a      	ldr	r3, [pc, #40]	; (800eac8 <vPortSetupTimerInterrupt+0x3c>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a0a      	ldr	r2, [pc, #40]	; (800eacc <vPortSetupTimerInterrupt+0x40>)
 800eaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800eaa6:	099b      	lsrs	r3, r3, #6
 800eaa8:	4a09      	ldr	r2, [pc, #36]	; (800ead0 <vPortSetupTimerInterrupt+0x44>)
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eaae:	4b04      	ldr	r3, [pc, #16]	; (800eac0 <vPortSetupTimerInterrupt+0x34>)
 800eab0:	2207      	movs	r2, #7
 800eab2:	601a      	str	r2, [r3, #0]
}
 800eab4:	bf00      	nop
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop
 800eac0:	e000e010 	.word	0xe000e010
 800eac4:	e000e018 	.word	0xe000e018
 800eac8:	20000000 	.word	0x20000000
 800eacc:	10624dd3 	.word	0x10624dd3
 800ead0:	e000e014 	.word	0xe000e014

0800ead4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ead4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eae4 <vPortEnableVFP+0x10>
 800ead8:	6801      	ldr	r1, [r0, #0]
 800eada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eade:	6001      	str	r1, [r0, #0]
 800eae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eae2:	bf00      	nop
 800eae4:	e000ed88 	.word	0xe000ed88

0800eae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eaee:	f3ef 8305 	mrs	r3, IPSR
 800eaf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	2b0f      	cmp	r3, #15
 800eaf8:	d914      	bls.n	800eb24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eafa:	4a17      	ldr	r2, [pc, #92]	; (800eb58 <vPortValidateInterruptPriority+0x70>)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	4413      	add	r3, r2
 800eb00:	781b      	ldrb	r3, [r3, #0]
 800eb02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb04:	4b15      	ldr	r3, [pc, #84]	; (800eb5c <vPortValidateInterruptPriority+0x74>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	7afa      	ldrb	r2, [r7, #11]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d20a      	bcs.n	800eb24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	607b      	str	r3, [r7, #4]
}
 800eb20:	bf00      	nop
 800eb22:	e7fe      	b.n	800eb22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb24:	4b0e      	ldr	r3, [pc, #56]	; (800eb60 <vPortValidateInterruptPriority+0x78>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb2c:	4b0d      	ldr	r3, [pc, #52]	; (800eb64 <vPortValidateInterruptPriority+0x7c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d90a      	bls.n	800eb4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	603b      	str	r3, [r7, #0]
}
 800eb46:	bf00      	nop
 800eb48:	e7fe      	b.n	800eb48 <vPortValidateInterruptPriority+0x60>
	}
 800eb4a:	bf00      	nop
 800eb4c:	3714      	adds	r7, #20
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop
 800eb58:	e000e3f0 	.word	0xe000e3f0
 800eb5c:	200011a8 	.word	0x200011a8
 800eb60:	e000ed0c 	.word	0xe000ed0c
 800eb64:	200011ac 	.word	0x200011ac

0800eb68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b08a      	sub	sp, #40	; 0x28
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb70:	2300      	movs	r3, #0
 800eb72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb74:	f7fe fd9a 	bl	800d6ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb78:	4b5b      	ldr	r3, [pc, #364]	; (800ece8 <pvPortMalloc+0x180>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d101      	bne.n	800eb84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb80:	f000 f920 	bl	800edc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb84:	4b59      	ldr	r3, [pc, #356]	; (800ecec <pvPortMalloc+0x184>)
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	4013      	ands	r3, r2
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f040 8093 	bne.w	800ecb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d01d      	beq.n	800ebd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eb98:	2208      	movs	r2, #8
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f003 0307 	and.w	r3, r3, #7
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d014      	beq.n	800ebd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f023 0307 	bic.w	r3, r3, #7
 800ebb0:	3308      	adds	r3, #8
 800ebb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f003 0307 	and.w	r3, r3, #7
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00a      	beq.n	800ebd4 <pvPortMalloc+0x6c>
	__asm volatile
 800ebbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc2:	f383 8811 	msr	BASEPRI, r3
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	617b      	str	r3, [r7, #20]
}
 800ebd0:	bf00      	nop
 800ebd2:	e7fe      	b.n	800ebd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d06e      	beq.n	800ecb8 <pvPortMalloc+0x150>
 800ebda:	4b45      	ldr	r3, [pc, #276]	; (800ecf0 <pvPortMalloc+0x188>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d869      	bhi.n	800ecb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ebe4:	4b43      	ldr	r3, [pc, #268]	; (800ecf4 <pvPortMalloc+0x18c>)
 800ebe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ebe8:	4b42      	ldr	r3, [pc, #264]	; (800ecf4 <pvPortMalloc+0x18c>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ebee:	e004      	b.n	800ebfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ebfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d903      	bls.n	800ec0c <pvPortMalloc+0xa4>
 800ec04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1f1      	bne.n	800ebf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec0c:	4b36      	ldr	r3, [pc, #216]	; (800ece8 <pvPortMalloc+0x180>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d050      	beq.n	800ecb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2208      	movs	r2, #8
 800ec1c:	4413      	add	r3, r2
 800ec1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	6a3b      	ldr	r3, [r7, #32]
 800ec26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2a:	685a      	ldr	r2, [r3, #4]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	1ad2      	subs	r2, r2, r3
 800ec30:	2308      	movs	r3, #8
 800ec32:	005b      	lsls	r3, r3, #1
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d91f      	bls.n	800ec78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	f003 0307 	and.w	r3, r3, #7
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00a      	beq.n	800ec60 <pvPortMalloc+0xf8>
	__asm volatile
 800ec4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4e:	f383 8811 	msr	BASEPRI, r3
 800ec52:	f3bf 8f6f 	isb	sy
 800ec56:	f3bf 8f4f 	dsb	sy
 800ec5a:	613b      	str	r3, [r7, #16]
}
 800ec5c:	bf00      	nop
 800ec5e:	e7fe      	b.n	800ec5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec62:	685a      	ldr	r2, [r3, #4]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	1ad2      	subs	r2, r2, r3
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec72:	69b8      	ldr	r0, [r7, #24]
 800ec74:	f000 f908 	bl	800ee88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec78:	4b1d      	ldr	r3, [pc, #116]	; (800ecf0 <pvPortMalloc+0x188>)
 800ec7a:	681a      	ldr	r2, [r3, #0]
 800ec7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	4a1b      	ldr	r2, [pc, #108]	; (800ecf0 <pvPortMalloc+0x188>)
 800ec84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec86:	4b1a      	ldr	r3, [pc, #104]	; (800ecf0 <pvPortMalloc+0x188>)
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	4b1b      	ldr	r3, [pc, #108]	; (800ecf8 <pvPortMalloc+0x190>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d203      	bcs.n	800ec9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec92:	4b17      	ldr	r3, [pc, #92]	; (800ecf0 <pvPortMalloc+0x188>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a18      	ldr	r2, [pc, #96]	; (800ecf8 <pvPortMalloc+0x190>)
 800ec98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9c:	685a      	ldr	r2, [r3, #4]
 800ec9e:	4b13      	ldr	r3, [pc, #76]	; (800ecec <pvPortMalloc+0x184>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	431a      	orrs	r2, r3
 800eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecaa:	2200      	movs	r2, #0
 800ecac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ecae:	4b13      	ldr	r3, [pc, #76]	; (800ecfc <pvPortMalloc+0x194>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	4a11      	ldr	r2, [pc, #68]	; (800ecfc <pvPortMalloc+0x194>)
 800ecb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ecb8:	f7fe fd06 	bl	800d6c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	f003 0307 	and.w	r3, r3, #7
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d00a      	beq.n	800ecdc <pvPortMalloc+0x174>
	__asm volatile
 800ecc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecca:	f383 8811 	msr	BASEPRI, r3
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	f3bf 8f4f 	dsb	sy
 800ecd6:	60fb      	str	r3, [r7, #12]
}
 800ecd8:	bf00      	nop
 800ecda:	e7fe      	b.n	800ecda <pvPortMalloc+0x172>
	return pvReturn;
 800ecdc:	69fb      	ldr	r3, [r7, #28]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3728      	adds	r7, #40	; 0x28
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	20004db8 	.word	0x20004db8
 800ecec:	20004dcc 	.word	0x20004dcc
 800ecf0:	20004dbc 	.word	0x20004dbc
 800ecf4:	20004db0 	.word	0x20004db0
 800ecf8:	20004dc0 	.word	0x20004dc0
 800ecfc:	20004dc4 	.word	0x20004dc4

0800ed00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b086      	sub	sp, #24
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d04d      	beq.n	800edae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed12:	2308      	movs	r3, #8
 800ed14:	425b      	negs	r3, r3
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	4413      	add	r3, r2
 800ed1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	685a      	ldr	r2, [r3, #4]
 800ed24:	4b24      	ldr	r3, [pc, #144]	; (800edb8 <vPortFree+0xb8>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4013      	ands	r3, r2
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d10a      	bne.n	800ed44 <vPortFree+0x44>
	__asm volatile
 800ed2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	60fb      	str	r3, [r7, #12]
}
 800ed40:	bf00      	nop
 800ed42:	e7fe      	b.n	800ed42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00a      	beq.n	800ed62 <vPortFree+0x62>
	__asm volatile
 800ed4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed50:	f383 8811 	msr	BASEPRI, r3
 800ed54:	f3bf 8f6f 	isb	sy
 800ed58:	f3bf 8f4f 	dsb	sy
 800ed5c:	60bb      	str	r3, [r7, #8]
}
 800ed5e:	bf00      	nop
 800ed60:	e7fe      	b.n	800ed60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	685a      	ldr	r2, [r3, #4]
 800ed66:	4b14      	ldr	r3, [pc, #80]	; (800edb8 <vPortFree+0xb8>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4013      	ands	r3, r2
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d01e      	beq.n	800edae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d11a      	bne.n	800edae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	685a      	ldr	r2, [r3, #4]
 800ed7c:	4b0e      	ldr	r3, [pc, #56]	; (800edb8 <vPortFree+0xb8>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	43db      	mvns	r3, r3
 800ed82:	401a      	ands	r2, r3
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ed88:	f7fe fc90 	bl	800d6ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	685a      	ldr	r2, [r3, #4]
 800ed90:	4b0a      	ldr	r3, [pc, #40]	; (800edbc <vPortFree+0xbc>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4413      	add	r3, r2
 800ed96:	4a09      	ldr	r2, [pc, #36]	; (800edbc <vPortFree+0xbc>)
 800ed98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed9a:	6938      	ldr	r0, [r7, #16]
 800ed9c:	f000 f874 	bl	800ee88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eda0:	4b07      	ldr	r3, [pc, #28]	; (800edc0 <vPortFree+0xc0>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	3301      	adds	r3, #1
 800eda6:	4a06      	ldr	r2, [pc, #24]	; (800edc0 <vPortFree+0xc0>)
 800eda8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800edaa:	f7fe fc8d 	bl	800d6c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800edae:	bf00      	nop
 800edb0:	3718      	adds	r7, #24
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	20004dcc 	.word	0x20004dcc
 800edbc:	20004dbc 	.word	0x20004dbc
 800edc0:	20004dc8 	.word	0x20004dc8

0800edc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800edc4:	b480      	push	{r7}
 800edc6:	b085      	sub	sp, #20
 800edc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800edca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800edce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800edd0:	4b27      	ldr	r3, [pc, #156]	; (800ee70 <prvHeapInit+0xac>)
 800edd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f003 0307 	and.w	r3, r3, #7
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d00c      	beq.n	800edf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	3307      	adds	r3, #7
 800ede2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f023 0307 	bic.w	r3, r3, #7
 800edea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800edec:	68ba      	ldr	r2, [r7, #8]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	1ad3      	subs	r3, r2, r3
 800edf2:	4a1f      	ldr	r2, [pc, #124]	; (800ee70 <prvHeapInit+0xac>)
 800edf4:	4413      	add	r3, r2
 800edf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800edfc:	4a1d      	ldr	r2, [pc, #116]	; (800ee74 <prvHeapInit+0xb0>)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee02:	4b1c      	ldr	r3, [pc, #112]	; (800ee74 <prvHeapInit+0xb0>)
 800ee04:	2200      	movs	r2, #0
 800ee06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee10:	2208      	movs	r2, #8
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	1a9b      	subs	r3, r3, r2
 800ee16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f023 0307 	bic.w	r3, r3, #7
 800ee1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	4a15      	ldr	r2, [pc, #84]	; (800ee78 <prvHeapInit+0xb4>)
 800ee24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee26:	4b14      	ldr	r3, [pc, #80]	; (800ee78 <prvHeapInit+0xb4>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee2e:	4b12      	ldr	r3, [pc, #72]	; (800ee78 <prvHeapInit+0xb4>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2200      	movs	r2, #0
 800ee34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	1ad2      	subs	r2, r2, r3
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee44:	4b0c      	ldr	r3, [pc, #48]	; (800ee78 <prvHeapInit+0xb4>)
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	4a0a      	ldr	r2, [pc, #40]	; (800ee7c <prvHeapInit+0xb8>)
 800ee52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	685b      	ldr	r3, [r3, #4]
 800ee58:	4a09      	ldr	r2, [pc, #36]	; (800ee80 <prvHeapInit+0xbc>)
 800ee5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee5c:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <prvHeapInit+0xc0>)
 800ee5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ee62:	601a      	str	r2, [r3, #0]
}
 800ee64:	bf00      	nop
 800ee66:	3714      	adds	r7, #20
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	200011b0 	.word	0x200011b0
 800ee74:	20004db0 	.word	0x20004db0
 800ee78:	20004db8 	.word	0x20004db8
 800ee7c:	20004dc0 	.word	0x20004dc0
 800ee80:	20004dbc 	.word	0x20004dbc
 800ee84:	20004dcc 	.word	0x20004dcc

0800ee88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee90:	4b28      	ldr	r3, [pc, #160]	; (800ef34 <prvInsertBlockIntoFreeList+0xac>)
 800ee92:	60fb      	str	r3, [r7, #12]
 800ee94:	e002      	b.n	800ee9c <prvInsertBlockIntoFreeList+0x14>
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	60fb      	str	r3, [r7, #12]
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d8f7      	bhi.n	800ee96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	68ba      	ldr	r2, [r7, #8]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d108      	bne.n	800eeca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	685a      	ldr	r2, [r3, #4]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	441a      	add	r2, r3
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	441a      	add	r2, r3
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d118      	bne.n	800ef10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	4b15      	ldr	r3, [pc, #84]	; (800ef38 <prvInsertBlockIntoFreeList+0xb0>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d00d      	beq.n	800ef06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	685a      	ldr	r2, [r3, #4]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	441a      	add	r2, r3
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	601a      	str	r2, [r3, #0]
 800ef04:	e008      	b.n	800ef18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef06:	4b0c      	ldr	r3, [pc, #48]	; (800ef38 <prvInsertBlockIntoFreeList+0xb0>)
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	601a      	str	r2, [r3, #0]
 800ef0e:	e003      	b.n	800ef18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef18:	68fa      	ldr	r2, [r7, #12]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d002      	beq.n	800ef26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef26:	bf00      	nop
 800ef28:	3714      	adds	r7, #20
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	20004db0 	.word	0x20004db0
 800ef38:	20004db8 	.word	0x20004db8

0800ef3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ef40:	2201      	movs	r2, #1
 800ef42:	490e      	ldr	r1, [pc, #56]	; (800ef7c <MX_USB_HOST_Init+0x40>)
 800ef44:	480e      	ldr	r0, [pc, #56]	; (800ef80 <MX_USB_HOST_Init+0x44>)
 800ef46:	f7fb fa81 	bl	800a44c <USBH_Init>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ef50:	f7f2 fdee 	bl	8001b30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ef54:	490b      	ldr	r1, [pc, #44]	; (800ef84 <MX_USB_HOST_Init+0x48>)
 800ef56:	480a      	ldr	r0, [pc, #40]	; (800ef80 <MX_USB_HOST_Init+0x44>)
 800ef58:	f7fb fb28 	bl	800a5ac <USBH_RegisterClass>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d001      	beq.n	800ef66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ef62:	f7f2 fde5 	bl	8001b30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ef66:	4806      	ldr	r0, [pc, #24]	; (800ef80 <MX_USB_HOST_Init+0x44>)
 800ef68:	f7fb fbac 	bl	800a6c4 <USBH_Start>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ef72:	f7f2 fddd 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ef76:	bf00      	nop
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	0800ef89 	.word	0x0800ef89
 800ef80:	200050d0 	.word	0x200050d0
 800ef84:	2000000c 	.word	0x2000000c

0800ef88 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	460b      	mov	r3, r1
 800ef92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ef94:	78fb      	ldrb	r3, [r7, #3]
 800ef96:	3b01      	subs	r3, #1
 800ef98:	2b04      	cmp	r3, #4
 800ef9a:	d819      	bhi.n	800efd0 <USBH_UserProcess+0x48>
 800ef9c:	a201      	add	r2, pc, #4	; (adr r2, 800efa4 <USBH_UserProcess+0x1c>)
 800ef9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa2:	bf00      	nop
 800efa4:	0800efd1 	.word	0x0800efd1
 800efa8:	0800efc1 	.word	0x0800efc1
 800efac:	0800efd1 	.word	0x0800efd1
 800efb0:	0800efc9 	.word	0x0800efc9
 800efb4:	0800efb9 	.word	0x0800efb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800efb8:	4b09      	ldr	r3, [pc, #36]	; (800efe0 <USBH_UserProcess+0x58>)
 800efba:	2203      	movs	r2, #3
 800efbc:	701a      	strb	r2, [r3, #0]
  break;
 800efbe:	e008      	b.n	800efd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800efc0:	4b07      	ldr	r3, [pc, #28]	; (800efe0 <USBH_UserProcess+0x58>)
 800efc2:	2202      	movs	r2, #2
 800efc4:	701a      	strb	r2, [r3, #0]
  break;
 800efc6:	e004      	b.n	800efd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800efc8:	4b05      	ldr	r3, [pc, #20]	; (800efe0 <USBH_UserProcess+0x58>)
 800efca:	2201      	movs	r2, #1
 800efcc:	701a      	strb	r2, [r3, #0]
  break;
 800efce:	e000      	b.n	800efd2 <USBH_UserProcess+0x4a>

  default:
  break;
 800efd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800efd2:	bf00      	nop
 800efd4:	370c      	adds	r7, #12
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	20004dd0 	.word	0x20004dd0

0800efe4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b08a      	sub	sp, #40	; 0x28
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800efec:	f107 0314 	add.w	r3, r7, #20
 800eff0:	2200      	movs	r2, #0
 800eff2:	601a      	str	r2, [r3, #0]
 800eff4:	605a      	str	r2, [r3, #4]
 800eff6:	609a      	str	r2, [r3, #8]
 800eff8:	60da      	str	r2, [r3, #12]
 800effa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f004:	d147      	bne.n	800f096 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f006:	2300      	movs	r3, #0
 800f008:	613b      	str	r3, [r7, #16]
 800f00a:	4b25      	ldr	r3, [pc, #148]	; (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f00e:	4a24      	ldr	r2, [pc, #144]	; (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f010:	f043 0301 	orr.w	r3, r3, #1
 800f014:	6313      	str	r3, [r2, #48]	; 0x30
 800f016:	4b22      	ldr	r3, [pc, #136]	; (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f01a:	f003 0301 	and.w	r3, r3, #1
 800f01e:	613b      	str	r3, [r7, #16]
 800f020:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f022:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f028:	2300      	movs	r3, #0
 800f02a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f02c:	2300      	movs	r3, #0
 800f02e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f030:	f107 0314 	add.w	r3, r7, #20
 800f034:	4619      	mov	r1, r3
 800f036:	481b      	ldr	r0, [pc, #108]	; (800f0a4 <HAL_HCD_MspInit+0xc0>)
 800f038:	f7f3 ff18 	bl	8002e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f03c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f042:	2302      	movs	r3, #2
 800f044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f046:	2300      	movs	r3, #0
 800f048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f04a:	2300      	movs	r3, #0
 800f04c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f04e:	230a      	movs	r3, #10
 800f050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f052:	f107 0314 	add.w	r3, r7, #20
 800f056:	4619      	mov	r1, r3
 800f058:	4812      	ldr	r0, [pc, #72]	; (800f0a4 <HAL_HCD_MspInit+0xc0>)
 800f05a:	f7f3 ff07 	bl	8002e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f05e:	4b10      	ldr	r3, [pc, #64]	; (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f062:	4a0f      	ldr	r2, [pc, #60]	; (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f068:	6353      	str	r3, [r2, #52]	; 0x34
 800f06a:	2300      	movs	r3, #0
 800f06c:	60fb      	str	r3, [r7, #12]
 800f06e:	4b0c      	ldr	r3, [pc, #48]	; (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f072:	4a0b      	ldr	r2, [pc, #44]	; (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f078:	6453      	str	r3, [r2, #68]	; 0x44
 800f07a:	4b09      	ldr	r3, [pc, #36]	; (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f07e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f082:	60fb      	str	r3, [r7, #12]
 800f084:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f086:	2200      	movs	r2, #0
 800f088:	2105      	movs	r1, #5
 800f08a:	2043      	movs	r0, #67	; 0x43
 800f08c:	f7f3 fe32 	bl	8002cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f090:	2043      	movs	r0, #67	; 0x43
 800f092:	f7f3 fe4b 	bl	8002d2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f096:	bf00      	nop
 800f098:	3728      	adds	r7, #40	; 0x28
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	40023800 	.word	0x40023800
 800f0a4:	40020000 	.word	0x40020000

0800f0a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fb ffb1 	bl	800b01e <USBH_LL_IncTimer>
}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fb fff5 	bl	800b0c2 <USBH_LL_Connect>
}
 800f0d8:	bf00      	nop
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fc f80a 	bl	800b108 <USBH_LL_Disconnect>
}
 800f0f4:	bf00      	nop
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	460b      	mov	r3, r1
 800f106:	70fb      	strb	r3, [r7, #3]
 800f108:	4613      	mov	r3, r2
 800f10a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f112:	4618      	mov	r0, r3
 800f114:	f7fc f841 	bl	800b19a <USBH_LL_NotifyURBChange>
#endif
}
 800f118:	bf00      	nop
 800f11a:	3708      	adds	r7, #8
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fb ff9f 	bl	800b072 <USBH_LL_PortEnabled>
}
 800f134:	bf00      	nop
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fb ffab 	bl	800b0a6 <USBH_LL_PortDisabled>
}
 800f150:	bf00      	nop
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f166:	2b01      	cmp	r3, #1
 800f168:	d12a      	bne.n	800f1c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f16a:	4a18      	ldr	r2, [pc, #96]	; (800f1cc <USBH_LL_Init+0x74>)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	4a15      	ldr	r2, [pc, #84]	; (800f1cc <USBH_LL_Init+0x74>)
 800f176:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f17a:	4b14      	ldr	r3, [pc, #80]	; (800f1cc <USBH_LL_Init+0x74>)
 800f17c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f180:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f182:	4b12      	ldr	r3, [pc, #72]	; (800f1cc <USBH_LL_Init+0x74>)
 800f184:	2208      	movs	r2, #8
 800f186:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f188:	4b10      	ldr	r3, [pc, #64]	; (800f1cc <USBH_LL_Init+0x74>)
 800f18a:	2201      	movs	r2, #1
 800f18c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f18e:	4b0f      	ldr	r3, [pc, #60]	; (800f1cc <USBH_LL_Init+0x74>)
 800f190:	2200      	movs	r2, #0
 800f192:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f194:	4b0d      	ldr	r3, [pc, #52]	; (800f1cc <USBH_LL_Init+0x74>)
 800f196:	2202      	movs	r2, #2
 800f198:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f19a:	4b0c      	ldr	r3, [pc, #48]	; (800f1cc <USBH_LL_Init+0x74>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f1a0:	480a      	ldr	r0, [pc, #40]	; (800f1cc <USBH_LL_Init+0x74>)
 800f1a2:	f7f4 f818 	bl	80031d6 <HAL_HCD_Init>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f1ac:	f7f2 fcc0 	bl	8001b30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f1b0:	4806      	ldr	r0, [pc, #24]	; (800f1cc <USBH_LL_Init+0x74>)
 800f1b2:	f7f4 fbf5 	bl	80039a0 <HAL_HCD_GetCurrentFrame>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7fb ff20 	bl	800b000 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f1c0:	2300      	movs	r3, #0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	200054b4 	.word	0x200054b4

0800f1d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7f4 fb64 	bl	80038b4 <HAL_HCD_Start>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f1f0:	7bfb      	ldrb	r3, [r7, #15]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 f95c 	bl	800f4b0 <USBH_Get_USB_Status>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b084      	sub	sp, #16
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f20e:	2300      	movs	r3, #0
 800f210:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f212:	2300      	movs	r3, #0
 800f214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7f4 fb6c 	bl	80038fa <HAL_HCD_Stop>
 800f222:	4603      	mov	r3, r0
 800f224:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f226:	7bfb      	ldrb	r3, [r7, #15]
 800f228:	4618      	mov	r0, r3
 800f22a:	f000 f941 	bl	800f4b0 <USBH_Get_USB_Status>
 800f22e:	4603      	mov	r3, r0
 800f230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f232:	7bbb      	ldrb	r3, [r7, #14]
}
 800f234:	4618      	mov	r0, r3
 800f236:	3710      	adds	r7, #16
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f244:	2301      	movs	r3, #1
 800f246:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f24e:	4618      	mov	r0, r3
 800f250:	f7f4 fbb4 	bl	80039bc <HAL_HCD_GetCurrentSpeed>
 800f254:	4603      	mov	r3, r0
 800f256:	2b02      	cmp	r3, #2
 800f258:	d00c      	beq.n	800f274 <USBH_LL_GetSpeed+0x38>
 800f25a:	2b02      	cmp	r3, #2
 800f25c:	d80d      	bhi.n	800f27a <USBH_LL_GetSpeed+0x3e>
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d002      	beq.n	800f268 <USBH_LL_GetSpeed+0x2c>
 800f262:	2b01      	cmp	r3, #1
 800f264:	d003      	beq.n	800f26e <USBH_LL_GetSpeed+0x32>
 800f266:	e008      	b.n	800f27a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f268:	2300      	movs	r3, #0
 800f26a:	73fb      	strb	r3, [r7, #15]
    break;
 800f26c:	e008      	b.n	800f280 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f26e:	2301      	movs	r3, #1
 800f270:	73fb      	strb	r3, [r7, #15]
    break;
 800f272:	e005      	b.n	800f280 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f274:	2302      	movs	r3, #2
 800f276:	73fb      	strb	r3, [r7, #15]
    break;
 800f278:	e002      	b.n	800f280 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f27a:	2301      	movs	r3, #1
 800f27c:	73fb      	strb	r3, [r7, #15]
    break;
 800f27e:	bf00      	nop
  }
  return  speed;
 800f280:	7bfb      	ldrb	r3, [r7, #15]
}
 800f282:	4618      	mov	r0, r3
 800f284:	3710      	adds	r7, #16
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b084      	sub	sp, #16
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f292:	2300      	movs	r3, #0
 800f294:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f296:	2300      	movs	r3, #0
 800f298:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7f4 fb47 	bl	8003934 <HAL_HCD_ResetPort>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f2aa:	7bfb      	ldrb	r3, [r7, #15]
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f000 f8ff 	bl	800f4b0 <USBH_Get_USB_Status>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3710      	adds	r7, #16
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f2d2:	78fa      	ldrb	r2, [r7, #3]
 800f2d4:	4611      	mov	r1, r2
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7f4 fb4e 	bl	8003978 <HAL_HCD_HC_GetXferCount>
 800f2dc:	4603      	mov	r3, r0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f2e6:	b590      	push	{r4, r7, lr}
 800f2e8:	b089      	sub	sp, #36	; 0x24
 800f2ea:	af04      	add	r7, sp, #16
 800f2ec:	6078      	str	r0, [r7, #4]
 800f2ee:	4608      	mov	r0, r1
 800f2f0:	4611      	mov	r1, r2
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	70fb      	strb	r3, [r7, #3]
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	70bb      	strb	r3, [r7, #2]
 800f2fc:	4613      	mov	r3, r2
 800f2fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f300:	2300      	movs	r3, #0
 800f302:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f304:	2300      	movs	r3, #0
 800f306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f30e:	787c      	ldrb	r4, [r7, #1]
 800f310:	78ba      	ldrb	r2, [r7, #2]
 800f312:	78f9      	ldrb	r1, [r7, #3]
 800f314:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f316:	9302      	str	r3, [sp, #8]
 800f318:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f31c:	9301      	str	r3, [sp, #4]
 800f31e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f322:	9300      	str	r3, [sp, #0]
 800f324:	4623      	mov	r3, r4
 800f326:	f7f3 ffb8 	bl	800329a <HAL_HCD_HC_Init>
 800f32a:	4603      	mov	r3, r0
 800f32c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f32e:	7bfb      	ldrb	r3, [r7, #15]
 800f330:	4618      	mov	r0, r3
 800f332:	f000 f8bd 	bl	800f4b0 <USBH_Get_USB_Status>
 800f336:	4603      	mov	r3, r0
 800f338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f33a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3714      	adds	r7, #20
 800f340:	46bd      	mov	sp, r7
 800f342:	bd90      	pop	{r4, r7, pc}

0800f344 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	460b      	mov	r3, r1
 800f34e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f350:	2300      	movs	r3, #0
 800f352:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f354:	2300      	movs	r3, #0
 800f356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f35e:	78fa      	ldrb	r2, [r7, #3]
 800f360:	4611      	mov	r1, r2
 800f362:	4618      	mov	r0, r3
 800f364:	f7f4 f828 	bl	80033b8 <HAL_HCD_HC_Halt>
 800f368:	4603      	mov	r3, r0
 800f36a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f36c:	7bfb      	ldrb	r3, [r7, #15]
 800f36e:	4618      	mov	r0, r3
 800f370:	f000 f89e 	bl	800f4b0 <USBH_Get_USB_Status>
 800f374:	4603      	mov	r3, r0
 800f376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f378:	7bbb      	ldrb	r3, [r7, #14]
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}

0800f382 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f382:	b590      	push	{r4, r7, lr}
 800f384:	b089      	sub	sp, #36	; 0x24
 800f386:	af04      	add	r7, sp, #16
 800f388:	6078      	str	r0, [r7, #4]
 800f38a:	4608      	mov	r0, r1
 800f38c:	4611      	mov	r1, r2
 800f38e:	461a      	mov	r2, r3
 800f390:	4603      	mov	r3, r0
 800f392:	70fb      	strb	r3, [r7, #3]
 800f394:	460b      	mov	r3, r1
 800f396:	70bb      	strb	r3, [r7, #2]
 800f398:	4613      	mov	r3, r2
 800f39a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f39c:	2300      	movs	r3, #0
 800f39e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f3aa:	787c      	ldrb	r4, [r7, #1]
 800f3ac:	78ba      	ldrb	r2, [r7, #2]
 800f3ae:	78f9      	ldrb	r1, [r7, #3]
 800f3b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f3b4:	9303      	str	r3, [sp, #12]
 800f3b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f3b8:	9302      	str	r3, [sp, #8]
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	9301      	str	r3, [sp, #4]
 800f3be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	4623      	mov	r3, r4
 800f3c6:	f7f4 f81b 	bl	8003400 <HAL_HCD_HC_SubmitRequest>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f3ce:	7bfb      	ldrb	r3, [r7, #15]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f000 f86d 	bl	800f4b0 <USBH_Get_USB_Status>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3da:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3714      	adds	r7, #20
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd90      	pop	{r4, r7, pc}

0800f3e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f3f6:	78fa      	ldrb	r2, [r7, #3]
 800f3f8:	4611      	mov	r1, r2
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7f4 faa8 	bl	8003950 <HAL_HCD_HC_GetURBState>
 800f400:	4603      	mov	r3, r0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b082      	sub	sp, #8
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
 800f412:	460b      	mov	r3, r1
 800f414:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	d103      	bne.n	800f428 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f420:	78fb      	ldrb	r3, [r7, #3]
 800f422:	4618      	mov	r0, r3
 800f424:	f000 f870 	bl	800f508 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f428:	20c8      	movs	r0, #200	; 0xc8
 800f42a:	f7f3 fb87 	bl	8002b3c <HAL_Delay>
  return USBH_OK;
 800f42e:	2300      	movs	r3, #0
}
 800f430:	4618      	mov	r0, r3
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	70fb      	strb	r3, [r7, #3]
 800f444:	4613      	mov	r3, r2
 800f446:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f44e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f450:	78fb      	ldrb	r3, [r7, #3]
 800f452:	68fa      	ldr	r2, [r7, #12]
 800f454:	212c      	movs	r1, #44	; 0x2c
 800f456:	fb01 f303 	mul.w	r3, r1, r3
 800f45a:	4413      	add	r3, r2
 800f45c:	333b      	adds	r3, #59	; 0x3b
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d009      	beq.n	800f478 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f464:	78fb      	ldrb	r3, [r7, #3]
 800f466:	68fa      	ldr	r2, [r7, #12]
 800f468:	212c      	movs	r1, #44	; 0x2c
 800f46a:	fb01 f303 	mul.w	r3, r1, r3
 800f46e:	4413      	add	r3, r2
 800f470:	3354      	adds	r3, #84	; 0x54
 800f472:	78ba      	ldrb	r2, [r7, #2]
 800f474:	701a      	strb	r2, [r3, #0]
 800f476:	e008      	b.n	800f48a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f478:	78fb      	ldrb	r3, [r7, #3]
 800f47a:	68fa      	ldr	r2, [r7, #12]
 800f47c:	212c      	movs	r1, #44	; 0x2c
 800f47e:	fb01 f303 	mul.w	r3, r1, r3
 800f482:	4413      	add	r3, r2
 800f484:	3355      	adds	r3, #85	; 0x55
 800f486:	78ba      	ldrb	r2, [r7, #2]
 800f488:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f48a:	2300      	movs	r3, #0
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3714      	adds	r7, #20
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f7f3 fb4b 	bl	8002b3c <HAL_Delay>
}
 800f4a6:	bf00      	nop
 800f4a8:	3708      	adds	r7, #8
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
	...

0800f4b0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b085      	sub	sp, #20
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f4be:	79fb      	ldrb	r3, [r7, #7]
 800f4c0:	2b03      	cmp	r3, #3
 800f4c2:	d817      	bhi.n	800f4f4 <USBH_Get_USB_Status+0x44>
 800f4c4:	a201      	add	r2, pc, #4	; (adr r2, 800f4cc <USBH_Get_USB_Status+0x1c>)
 800f4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ca:	bf00      	nop
 800f4cc:	0800f4dd 	.word	0x0800f4dd
 800f4d0:	0800f4e3 	.word	0x0800f4e3
 800f4d4:	0800f4e9 	.word	0x0800f4e9
 800f4d8:	0800f4ef 	.word	0x0800f4ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	73fb      	strb	r3, [r7, #15]
    break;
 800f4e0:	e00b      	b.n	800f4fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f4e2:	2302      	movs	r3, #2
 800f4e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f4e6:	e008      	b.n	800f4fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f4ec:	e005      	b.n	800f4fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f4ee:	2302      	movs	r3, #2
 800f4f0:	73fb      	strb	r3, [r7, #15]
    break;
 800f4f2:	e002      	b.n	800f4fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f4f4:	2302      	movs	r3, #2
 800f4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f4f8:	bf00      	nop
  }
  return usb_status;
 800f4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3714      	adds	r7, #20
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	4603      	mov	r3, r0
 800f510:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f512:	79fb      	ldrb	r3, [r7, #7]
 800f514:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f516:	79fb      	ldrb	r3, [r7, #7]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d102      	bne.n	800f522 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f51c:	2301      	movs	r3, #1
 800f51e:	73fb      	strb	r3, [r7, #15]
 800f520:	e001      	b.n	800f526 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f522:	2300      	movs	r3, #0
 800f524:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f526:	7bfb      	ldrb	r3, [r7, #15]
 800f528:	461a      	mov	r2, r3
 800f52a:	2101      	movs	r1, #1
 800f52c:	4803      	ldr	r0, [pc, #12]	; (800f53c <MX_DriverVbusFS+0x34>)
 800f52e:	f7f3 fe39 	bl	80031a4 <HAL_GPIO_WritePin>
}
 800f532:	bf00      	nop
 800f534:	3710      	adds	r7, #16
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	40020800 	.word	0x40020800

0800f540 <__errno>:
 800f540:	4b01      	ldr	r3, [pc, #4]	; (800f548 <__errno+0x8>)
 800f542:	6818      	ldr	r0, [r3, #0]
 800f544:	4770      	bx	lr
 800f546:	bf00      	nop
 800f548:	20000030 	.word	0x20000030

0800f54c <__libc_init_array>:
 800f54c:	b570      	push	{r4, r5, r6, lr}
 800f54e:	4d0d      	ldr	r5, [pc, #52]	; (800f584 <__libc_init_array+0x38>)
 800f550:	4c0d      	ldr	r4, [pc, #52]	; (800f588 <__libc_init_array+0x3c>)
 800f552:	1b64      	subs	r4, r4, r5
 800f554:	10a4      	asrs	r4, r4, #2
 800f556:	2600      	movs	r6, #0
 800f558:	42a6      	cmp	r6, r4
 800f55a:	d109      	bne.n	800f570 <__libc_init_array+0x24>
 800f55c:	4d0b      	ldr	r5, [pc, #44]	; (800f58c <__libc_init_array+0x40>)
 800f55e:	4c0c      	ldr	r4, [pc, #48]	; (800f590 <__libc_init_array+0x44>)
 800f560:	f000 f986 	bl	800f870 <_init>
 800f564:	1b64      	subs	r4, r4, r5
 800f566:	10a4      	asrs	r4, r4, #2
 800f568:	2600      	movs	r6, #0
 800f56a:	42a6      	cmp	r6, r4
 800f56c:	d105      	bne.n	800f57a <__libc_init_array+0x2e>
 800f56e:	bd70      	pop	{r4, r5, r6, pc}
 800f570:	f855 3b04 	ldr.w	r3, [r5], #4
 800f574:	4798      	blx	r3
 800f576:	3601      	adds	r6, #1
 800f578:	e7ee      	b.n	800f558 <__libc_init_array+0xc>
 800f57a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f57e:	4798      	blx	r3
 800f580:	3601      	adds	r6, #1
 800f582:	e7f2      	b.n	800f56a <__libc_init_array+0x1e>
 800f584:	08011154 	.word	0x08011154
 800f588:	08011154 	.word	0x08011154
 800f58c:	08011154 	.word	0x08011154
 800f590:	08011158 	.word	0x08011158

0800f594 <malloc>:
 800f594:	4b02      	ldr	r3, [pc, #8]	; (800f5a0 <malloc+0xc>)
 800f596:	4601      	mov	r1, r0
 800f598:	6818      	ldr	r0, [r3, #0]
 800f59a:	f000 b871 	b.w	800f680 <_malloc_r>
 800f59e:	bf00      	nop
 800f5a0:	20000030 	.word	0x20000030

0800f5a4 <free>:
 800f5a4:	4b02      	ldr	r3, [pc, #8]	; (800f5b0 <free+0xc>)
 800f5a6:	4601      	mov	r1, r0
 800f5a8:	6818      	ldr	r0, [r3, #0]
 800f5aa:	f000 b819 	b.w	800f5e0 <_free_r>
 800f5ae:	bf00      	nop
 800f5b0:	20000030 	.word	0x20000030

0800f5b4 <memcpy>:
 800f5b4:	440a      	add	r2, r1
 800f5b6:	4291      	cmp	r1, r2
 800f5b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f5bc:	d100      	bne.n	800f5c0 <memcpy+0xc>
 800f5be:	4770      	bx	lr
 800f5c0:	b510      	push	{r4, lr}
 800f5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5ca:	4291      	cmp	r1, r2
 800f5cc:	d1f9      	bne.n	800f5c2 <memcpy+0xe>
 800f5ce:	bd10      	pop	{r4, pc}

0800f5d0 <memset>:
 800f5d0:	4402      	add	r2, r0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d100      	bne.n	800f5da <memset+0xa>
 800f5d8:	4770      	bx	lr
 800f5da:	f803 1b01 	strb.w	r1, [r3], #1
 800f5de:	e7f9      	b.n	800f5d4 <memset+0x4>

0800f5e0 <_free_r>:
 800f5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5e2:	2900      	cmp	r1, #0
 800f5e4:	d048      	beq.n	800f678 <_free_r+0x98>
 800f5e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5ea:	9001      	str	r0, [sp, #4]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	f1a1 0404 	sub.w	r4, r1, #4
 800f5f2:	bfb8      	it	lt
 800f5f4:	18e4      	addlt	r4, r4, r3
 800f5f6:	f000 f8ad 	bl	800f754 <__malloc_lock>
 800f5fa:	4a20      	ldr	r2, [pc, #128]	; (800f67c <_free_r+0x9c>)
 800f5fc:	9801      	ldr	r0, [sp, #4]
 800f5fe:	6813      	ldr	r3, [r2, #0]
 800f600:	4615      	mov	r5, r2
 800f602:	b933      	cbnz	r3, 800f612 <_free_r+0x32>
 800f604:	6063      	str	r3, [r4, #4]
 800f606:	6014      	str	r4, [r2, #0]
 800f608:	b003      	add	sp, #12
 800f60a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f60e:	f000 b8a7 	b.w	800f760 <__malloc_unlock>
 800f612:	42a3      	cmp	r3, r4
 800f614:	d90b      	bls.n	800f62e <_free_r+0x4e>
 800f616:	6821      	ldr	r1, [r4, #0]
 800f618:	1862      	adds	r2, r4, r1
 800f61a:	4293      	cmp	r3, r2
 800f61c:	bf04      	itt	eq
 800f61e:	681a      	ldreq	r2, [r3, #0]
 800f620:	685b      	ldreq	r3, [r3, #4]
 800f622:	6063      	str	r3, [r4, #4]
 800f624:	bf04      	itt	eq
 800f626:	1852      	addeq	r2, r2, r1
 800f628:	6022      	streq	r2, [r4, #0]
 800f62a:	602c      	str	r4, [r5, #0]
 800f62c:	e7ec      	b.n	800f608 <_free_r+0x28>
 800f62e:	461a      	mov	r2, r3
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	b10b      	cbz	r3, 800f638 <_free_r+0x58>
 800f634:	42a3      	cmp	r3, r4
 800f636:	d9fa      	bls.n	800f62e <_free_r+0x4e>
 800f638:	6811      	ldr	r1, [r2, #0]
 800f63a:	1855      	adds	r5, r2, r1
 800f63c:	42a5      	cmp	r5, r4
 800f63e:	d10b      	bne.n	800f658 <_free_r+0x78>
 800f640:	6824      	ldr	r4, [r4, #0]
 800f642:	4421      	add	r1, r4
 800f644:	1854      	adds	r4, r2, r1
 800f646:	42a3      	cmp	r3, r4
 800f648:	6011      	str	r1, [r2, #0]
 800f64a:	d1dd      	bne.n	800f608 <_free_r+0x28>
 800f64c:	681c      	ldr	r4, [r3, #0]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	6053      	str	r3, [r2, #4]
 800f652:	4421      	add	r1, r4
 800f654:	6011      	str	r1, [r2, #0]
 800f656:	e7d7      	b.n	800f608 <_free_r+0x28>
 800f658:	d902      	bls.n	800f660 <_free_r+0x80>
 800f65a:	230c      	movs	r3, #12
 800f65c:	6003      	str	r3, [r0, #0]
 800f65e:	e7d3      	b.n	800f608 <_free_r+0x28>
 800f660:	6825      	ldr	r5, [r4, #0]
 800f662:	1961      	adds	r1, r4, r5
 800f664:	428b      	cmp	r3, r1
 800f666:	bf04      	itt	eq
 800f668:	6819      	ldreq	r1, [r3, #0]
 800f66a:	685b      	ldreq	r3, [r3, #4]
 800f66c:	6063      	str	r3, [r4, #4]
 800f66e:	bf04      	itt	eq
 800f670:	1949      	addeq	r1, r1, r5
 800f672:	6021      	streq	r1, [r4, #0]
 800f674:	6054      	str	r4, [r2, #4]
 800f676:	e7c7      	b.n	800f608 <_free_r+0x28>
 800f678:	b003      	add	sp, #12
 800f67a:	bd30      	pop	{r4, r5, pc}
 800f67c:	20004dd4 	.word	0x20004dd4

0800f680 <_malloc_r>:
 800f680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f682:	1ccd      	adds	r5, r1, #3
 800f684:	f025 0503 	bic.w	r5, r5, #3
 800f688:	3508      	adds	r5, #8
 800f68a:	2d0c      	cmp	r5, #12
 800f68c:	bf38      	it	cc
 800f68e:	250c      	movcc	r5, #12
 800f690:	2d00      	cmp	r5, #0
 800f692:	4606      	mov	r6, r0
 800f694:	db01      	blt.n	800f69a <_malloc_r+0x1a>
 800f696:	42a9      	cmp	r1, r5
 800f698:	d903      	bls.n	800f6a2 <_malloc_r+0x22>
 800f69a:	230c      	movs	r3, #12
 800f69c:	6033      	str	r3, [r6, #0]
 800f69e:	2000      	movs	r0, #0
 800f6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6a2:	f000 f857 	bl	800f754 <__malloc_lock>
 800f6a6:	4921      	ldr	r1, [pc, #132]	; (800f72c <_malloc_r+0xac>)
 800f6a8:	680a      	ldr	r2, [r1, #0]
 800f6aa:	4614      	mov	r4, r2
 800f6ac:	b99c      	cbnz	r4, 800f6d6 <_malloc_r+0x56>
 800f6ae:	4f20      	ldr	r7, [pc, #128]	; (800f730 <_malloc_r+0xb0>)
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	b923      	cbnz	r3, 800f6be <_malloc_r+0x3e>
 800f6b4:	4621      	mov	r1, r4
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	f000 f83c 	bl	800f734 <_sbrk_r>
 800f6bc:	6038      	str	r0, [r7, #0]
 800f6be:	4629      	mov	r1, r5
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	f000 f837 	bl	800f734 <_sbrk_r>
 800f6c6:	1c43      	adds	r3, r0, #1
 800f6c8:	d123      	bne.n	800f712 <_malloc_r+0x92>
 800f6ca:	230c      	movs	r3, #12
 800f6cc:	6033      	str	r3, [r6, #0]
 800f6ce:	4630      	mov	r0, r6
 800f6d0:	f000 f846 	bl	800f760 <__malloc_unlock>
 800f6d4:	e7e3      	b.n	800f69e <_malloc_r+0x1e>
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	1b5b      	subs	r3, r3, r5
 800f6da:	d417      	bmi.n	800f70c <_malloc_r+0x8c>
 800f6dc:	2b0b      	cmp	r3, #11
 800f6de:	d903      	bls.n	800f6e8 <_malloc_r+0x68>
 800f6e0:	6023      	str	r3, [r4, #0]
 800f6e2:	441c      	add	r4, r3
 800f6e4:	6025      	str	r5, [r4, #0]
 800f6e6:	e004      	b.n	800f6f2 <_malloc_r+0x72>
 800f6e8:	6863      	ldr	r3, [r4, #4]
 800f6ea:	42a2      	cmp	r2, r4
 800f6ec:	bf0c      	ite	eq
 800f6ee:	600b      	streq	r3, [r1, #0]
 800f6f0:	6053      	strne	r3, [r2, #4]
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	f000 f834 	bl	800f760 <__malloc_unlock>
 800f6f8:	f104 000b 	add.w	r0, r4, #11
 800f6fc:	1d23      	adds	r3, r4, #4
 800f6fe:	f020 0007 	bic.w	r0, r0, #7
 800f702:	1ac2      	subs	r2, r0, r3
 800f704:	d0cc      	beq.n	800f6a0 <_malloc_r+0x20>
 800f706:	1a1b      	subs	r3, r3, r0
 800f708:	50a3      	str	r3, [r4, r2]
 800f70a:	e7c9      	b.n	800f6a0 <_malloc_r+0x20>
 800f70c:	4622      	mov	r2, r4
 800f70e:	6864      	ldr	r4, [r4, #4]
 800f710:	e7cc      	b.n	800f6ac <_malloc_r+0x2c>
 800f712:	1cc4      	adds	r4, r0, #3
 800f714:	f024 0403 	bic.w	r4, r4, #3
 800f718:	42a0      	cmp	r0, r4
 800f71a:	d0e3      	beq.n	800f6e4 <_malloc_r+0x64>
 800f71c:	1a21      	subs	r1, r4, r0
 800f71e:	4630      	mov	r0, r6
 800f720:	f000 f808 	bl	800f734 <_sbrk_r>
 800f724:	3001      	adds	r0, #1
 800f726:	d1dd      	bne.n	800f6e4 <_malloc_r+0x64>
 800f728:	e7cf      	b.n	800f6ca <_malloc_r+0x4a>
 800f72a:	bf00      	nop
 800f72c:	20004dd4 	.word	0x20004dd4
 800f730:	20004dd8 	.word	0x20004dd8

0800f734 <_sbrk_r>:
 800f734:	b538      	push	{r3, r4, r5, lr}
 800f736:	4d06      	ldr	r5, [pc, #24]	; (800f750 <_sbrk_r+0x1c>)
 800f738:	2300      	movs	r3, #0
 800f73a:	4604      	mov	r4, r0
 800f73c:	4608      	mov	r0, r1
 800f73e:	602b      	str	r3, [r5, #0]
 800f740:	f7f3 f948 	bl	80029d4 <_sbrk>
 800f744:	1c43      	adds	r3, r0, #1
 800f746:	d102      	bne.n	800f74e <_sbrk_r+0x1a>
 800f748:	682b      	ldr	r3, [r5, #0]
 800f74a:	b103      	cbz	r3, 800f74e <_sbrk_r+0x1a>
 800f74c:	6023      	str	r3, [r4, #0]
 800f74e:	bd38      	pop	{r3, r4, r5, pc}
 800f750:	200057b8 	.word	0x200057b8

0800f754 <__malloc_lock>:
 800f754:	4801      	ldr	r0, [pc, #4]	; (800f75c <__malloc_lock+0x8>)
 800f756:	f000 b809 	b.w	800f76c <__retarget_lock_acquire_recursive>
 800f75a:	bf00      	nop
 800f75c:	200057c0 	.word	0x200057c0

0800f760 <__malloc_unlock>:
 800f760:	4801      	ldr	r0, [pc, #4]	; (800f768 <__malloc_unlock+0x8>)
 800f762:	f000 b804 	b.w	800f76e <__retarget_lock_release_recursive>
 800f766:	bf00      	nop
 800f768:	200057c0 	.word	0x200057c0

0800f76c <__retarget_lock_acquire_recursive>:
 800f76c:	4770      	bx	lr

0800f76e <__retarget_lock_release_recursive>:
 800f76e:	4770      	bx	lr

0800f770 <floor>:
 800f770:	ec51 0b10 	vmov	r0, r1, d0
 800f774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f778:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f77c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f780:	2e13      	cmp	r6, #19
 800f782:	ee10 5a10 	vmov	r5, s0
 800f786:	ee10 8a10 	vmov	r8, s0
 800f78a:	460c      	mov	r4, r1
 800f78c:	dc32      	bgt.n	800f7f4 <floor+0x84>
 800f78e:	2e00      	cmp	r6, #0
 800f790:	da14      	bge.n	800f7bc <floor+0x4c>
 800f792:	a333      	add	r3, pc, #204	; (adr r3, 800f860 <floor+0xf0>)
 800f794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f798:	f7f0 fd28 	bl	80001ec <__adddf3>
 800f79c:	2200      	movs	r2, #0
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f7f1 f96a 	bl	8000a78 <__aeabi_dcmpgt>
 800f7a4:	b138      	cbz	r0, 800f7b6 <floor+0x46>
 800f7a6:	2c00      	cmp	r4, #0
 800f7a8:	da57      	bge.n	800f85a <floor+0xea>
 800f7aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f7ae:	431d      	orrs	r5, r3
 800f7b0:	d001      	beq.n	800f7b6 <floor+0x46>
 800f7b2:	4c2d      	ldr	r4, [pc, #180]	; (800f868 <floor+0xf8>)
 800f7b4:	2500      	movs	r5, #0
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	e025      	b.n	800f808 <floor+0x98>
 800f7bc:	4f2b      	ldr	r7, [pc, #172]	; (800f86c <floor+0xfc>)
 800f7be:	4137      	asrs	r7, r6
 800f7c0:	ea01 0307 	and.w	r3, r1, r7
 800f7c4:	4303      	orrs	r3, r0
 800f7c6:	d01f      	beq.n	800f808 <floor+0x98>
 800f7c8:	a325      	add	r3, pc, #148	; (adr r3, 800f860 <floor+0xf0>)
 800f7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ce:	f7f0 fd0d 	bl	80001ec <__adddf3>
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f7f1 f94f 	bl	8000a78 <__aeabi_dcmpgt>
 800f7da:	2800      	cmp	r0, #0
 800f7dc:	d0eb      	beq.n	800f7b6 <floor+0x46>
 800f7de:	2c00      	cmp	r4, #0
 800f7e0:	bfbe      	ittt	lt
 800f7e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f7e6:	fa43 f606 	asrlt.w	r6, r3, r6
 800f7ea:	19a4      	addlt	r4, r4, r6
 800f7ec:	ea24 0407 	bic.w	r4, r4, r7
 800f7f0:	2500      	movs	r5, #0
 800f7f2:	e7e0      	b.n	800f7b6 <floor+0x46>
 800f7f4:	2e33      	cmp	r6, #51	; 0x33
 800f7f6:	dd0b      	ble.n	800f810 <floor+0xa0>
 800f7f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f7fc:	d104      	bne.n	800f808 <floor+0x98>
 800f7fe:	ee10 2a10 	vmov	r2, s0
 800f802:	460b      	mov	r3, r1
 800f804:	f7f0 fcf2 	bl	80001ec <__adddf3>
 800f808:	ec41 0b10 	vmov	d0, r0, r1
 800f80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f810:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f818:	fa23 f707 	lsr.w	r7, r3, r7
 800f81c:	4207      	tst	r7, r0
 800f81e:	d0f3      	beq.n	800f808 <floor+0x98>
 800f820:	a30f      	add	r3, pc, #60	; (adr r3, 800f860 <floor+0xf0>)
 800f822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f826:	f7f0 fce1 	bl	80001ec <__adddf3>
 800f82a:	2200      	movs	r2, #0
 800f82c:	2300      	movs	r3, #0
 800f82e:	f7f1 f923 	bl	8000a78 <__aeabi_dcmpgt>
 800f832:	2800      	cmp	r0, #0
 800f834:	d0bf      	beq.n	800f7b6 <floor+0x46>
 800f836:	2c00      	cmp	r4, #0
 800f838:	da02      	bge.n	800f840 <floor+0xd0>
 800f83a:	2e14      	cmp	r6, #20
 800f83c:	d103      	bne.n	800f846 <floor+0xd6>
 800f83e:	3401      	adds	r4, #1
 800f840:	ea25 0507 	bic.w	r5, r5, r7
 800f844:	e7b7      	b.n	800f7b6 <floor+0x46>
 800f846:	2301      	movs	r3, #1
 800f848:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f84c:	fa03 f606 	lsl.w	r6, r3, r6
 800f850:	4435      	add	r5, r6
 800f852:	4545      	cmp	r5, r8
 800f854:	bf38      	it	cc
 800f856:	18e4      	addcc	r4, r4, r3
 800f858:	e7f2      	b.n	800f840 <floor+0xd0>
 800f85a:	2500      	movs	r5, #0
 800f85c:	462c      	mov	r4, r5
 800f85e:	e7aa      	b.n	800f7b6 <floor+0x46>
 800f860:	8800759c 	.word	0x8800759c
 800f864:	7e37e43c 	.word	0x7e37e43c
 800f868:	bff00000 	.word	0xbff00000
 800f86c:	000fffff 	.word	0x000fffff

0800f870 <_init>:
 800f870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f872:	bf00      	nop
 800f874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f876:	bc08      	pop	{r3}
 800f878:	469e      	mov	lr, r3
 800f87a:	4770      	bx	lr

0800f87c <_fini>:
 800f87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f87e:	bf00      	nop
 800f880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f882:	bc08      	pop	{r3}
 800f884:	469e      	mov	lr, r3
 800f886:	4770      	bx	lr
